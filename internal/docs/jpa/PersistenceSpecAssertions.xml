<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE spec SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/spec_assertions.dtd">
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<?xml-stylesheet type="text/xsl" href="https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/xsl/spec_assertions.xsl"?>
<spec>
    <next-available-id>2514</next-available-id>
    <previous-id>2513</previous-id>
    <technology>PERSISTENCE</technology>
    <id>PERSISTENCE</id>
    <name>Java(TM) Persistence API</name>
    <version>2.2</version>
    <location-names>
        <chapters>
            <chapter id="2" name="Entities">
                <sections>
                    <section id="1" name="The Entity Class"/>
                    <section id="2" name="Persistent Fields and Properties"/>
                    <section id="2.1" name="Example"/>
                    <section id="3" name="Access Type"/>
                    <section id="3.1" name="Default Access Type"/>
                    <section id="3.2" name="Explicit Access Type"/>
                    <section id="3.3"
                             name="Access Type of an Embeddable Class"/>
                    <section id="3.4"
                             name="Defaulted Access Types of Embeddable Classes and Mapped Superclasses"/>
                    <section id="4" name="Primary Keys and Entity Identity"/>
                    <section id="4.1"
                             name="Primary Keys Corresponding to Derived Identities"/>
                    <section id="4.1.1"
                             name="Specification of Derived Identities"/>
                    <section id="4.1.2" name="Mapping of Derived Identities"/>
                    <section id="4.1.3" name="Examples of Derived Identities"/>
                    <section id="5" name="Embeddable Classes"/>
                    <section id="6"
                             name="Collections of Embeddable Classes and Basic Types"/>
                    <section id="7" name="Map Collections"/>
                    <section id="7.1" name="Map Keys"/>
                    <section id="7.2" name="Map Values"/>
                    <section id="8"
                             name="Mapping Defaults for Non-Relationship Fields or Properties"/>
                    <section id="9" name="Entity Relationships"/>
                    <section id="10" name="Relationship Mapping Defaults"/>
                    <section id="10.1"
                             name="Bidirectional OneToOne Relationships"/>
                    <section id="10.2"
                             name="Bidirectional ManyToOne / OneToMany Relationships"/>
                    <section id="10.3"
                             name="Unidirectional Single-Valued Relationships"/>
                    <section id="10.3.1"
                             name="Unidirectional OneToOne Relationships"/>
                    <section id="10.3.2"
                             name="Unidirectional ManyToOne Relationships"/>
                    <section id="10.4"
                             name="Bidirectional ManyToMany Relationships"/>
                    <section id="10.5"
                             name="Unidirectional Multi-Valued Relationships"/>
                    <section id="10.5.1"
                             name="Unidirectional OneToMany Relationships"/>
                    <section id="10.5.2"
                             name="Unidirectional ManyToMany Relationships"/>
                    <section id="11" name="Inheritance"/>
                    <section id="11.1" name="Abstract Entity Classes"/>
                    <section id="11.2" name="Mapped Superclasses"/>
                    <section id="11.3"
                             name="Non-Entity Classes in the Entity Inheritance Hierarchy"/>
                    <section id="12" name="Inheritance Mapping Strategies"/>
                    <section id="12.1"
                             name="Single Table per Class Hierarchy Strategy"/>
                    <section id="12.2" name="Joined Subclass Strategy"/>
                    <section id="12.3"
                             name="Table per Concrete Class Strategy"/>
                    <section id="13" name="Naming of Database Objects"/>
                </sections>
            </chapter>
            <chapter id="3" name="Entity Operations">
                <sections>
                    <section id="1" name="EntityManager"/>
                    <section id="1.1" name="EntityManager Interface"/>
                    <section id="1.2"
                             name="Example of Use of EntityManager API"/>
                    <section id="2" name="Entity Instanceï¿½s Life Cycle"/>
                    <section id="2.1" name="Entity Instance Creation"/>
                    <section id="2.2" name="Persisting an Entity Instance"/>
                    <section id="2.3" name="Removal"/>
                    <section id="2.4" name="Synchronization to the Database"/>
                    <section id="2.5" name="Refreshing an Entity Instance"/>
                    <section id="2.6"
                             name="Evicting an Entity Instance from the Persistence Context"/>
                    <section id="2.7" name="Detached Entities"/>
                    <section id="2.7.1" name="Merging Detached Entity State"/>
                    <section id="2.7.2"
                             name="Detached Entities and Lazy Loading"/>
                    <section id="2.8" name="Managed Instances"/>
                    <section id="2.9" name="Load State"/>
                    <section id="3"
                             name="Persistence Context Lifetime and Synchronization Type"/>
                    <section id="3.1"
                             name="Synchronization with the Current Transaction"/>
                    <section id="3.2" name="Transaction Commit"/>
                    <section id="3.3" name="Transaction Rollback"/>
                    <section id="4" name="Locking and Concurrency"/>
                    <section id="4.1" name="Optimistic Locking"/>
                    <section id="4.2" name="Version Attributes"/>
                    <section id="4.3" name="Pessimistic Locking"/>
                    <section id="4.4" name="Lock Modes"/>
                    <section id="4.4.1"
                             name="OPTIMISTIC, OPTIMISTIC_FORCE_INCREMENT"/>
                    <section id="4.4.2"
                             name="PESSIMISTIC_READ, PESSIMISTIC_WRITE, PESSIMISTIC_FORCE_INCREMENT"/>
                    <section id="4.4.3" name="Lock Mode Properties and Uses"/>
                    <section id="4.5" name="OptimisticLockException"/>
                    <section id="5"
                             name="Entity Listeners and Callback Methods"/>
                    <section id="5.1" name="Entity Listeners"/>
                    <section id="5.2" name="Lifecycle Callback Methods"/>
                    <section id="5.3"
                             name="Semantics of the Life Cycle Callback Methods for Entities"/>
                    <section id="5.4" name="Example"/>
                    <section id="5.5"
                             name="Multiple Lifecycle Callback Methods for an Entity Lifecycle Event"/>
                    <section id="5.6" name="Example"/>
                    <section id="5.7" name="Exceptions"/>
                    <section id="5.8"
                             name="Specification of Callback Listener Classes and Lifecycle Methods in the XML Descriptor"/>
                    <section id="5.8.1"
                             name="Specification of Callback Listeners"/>
                    <section id="5.8.2"
                             name="Specification of the Binding of Entity Listener Classes to Entities"/>
                    <section id="6" name="Bean Validation"/>
                    <section id="6.1"
                             name="Automatic Validation Upon Lifecycle Events"/>
                    <section id="6.1.1" name="Enabling Automatic Validation"/>
                    <section id="6.1.2"
                             name="Requirements for Automatic Validation upon Lifecycle Events"/>
                    <section id="6.2" name="Providing the ValidatorFactory"/>
                    <section id="7" name="Entity Graphs"/>
                    <section id="7.4"
                             name="Use of Entity Graphs in find and query operations"/>
                    <section id="7.4.1" name="Fetch Graph Semantics"/>
                    <section id="7.4.2" name="Load Graph Semantics"/>
                    <section id="8" name="Type Conversion of Basic Attributes"/>
                    <section id="9" name="Caching"/>
                    <section id="9.1" name="The shared-cache-mode Element"/>
                    <section id="9.2"
                             name="Cache Retrieve Mode and Cache Store Mode Properties"/>
                    <section id="10" name="Query APIs"/>
                    <section id="10.1" name="Query Interface"/>
                    <section id="10.2" name="TypedQuery Interface"/>
                    <section id="10.3" name="Tuple Interface"/>
                    <section id="10.4" name="TupleElement Interface"/>
                    <section id="10.5" name="Parameter Interface"/>
                    <section id="10.6" name="StoredProcedureQuery Interface"/>
                    <section id="10.7" name="Query Execution"/>
                    <section id="10.7.1" name="Example"/>
                    <section id="10.8" name="Queries and Flush Mode"/>
                    <section id="10.9" name="Queries and Lock Mode"/>
                    <section id="10.10" name="Query Hints"/>
                    <section id="10.11" name="Parameter Objects"/>
                    <section id="10.12" name="Named Parameters"/>
                    <section id="10.13" name="Positional Parameters"/>
                    <section id="10.14" name="Named Queries"/>
                    <section id="10.15" name="Polymorphic Queries"/>
                    <section id="10.16" name="SQL Queries"/>
                    <section id="10.16.1"
                             name="Returning Managed Entities from Native Queries"/>
                    <section id="10.16.2" name="Returning Unmanaged Instances"/>
                    <section id="10.16.2.1" name="Scalar Results"/>
                    <section id="10.16.2.2" name="Constructor Results"/>
                    <section id="10.16.3" name="Combinations of Result Types"/>
                    <section id="10.16.4" name="Restrictions"/>
                    <section id="10.17" name="Stored Procedures"/>
                    <section id="10.17.1"
                             name="Named Stored Procedure Queries"/>
                    <section id="10.17.2"
                             name="Dynamically-specified Stored Procedure Queries"/>
                    <section id="10.17.3"
                             name="Stored Procedure Query Execution"/>
                    <section id="11" name="Summary of Exceptions"/>
                </sections>
            </chapter>
            <chapter id="4" name="Query Language">
                <sections>
                    <section id="1" name="Overview"/>
                    <section id="2" name="Statement Types"/>
                    <section id="2.1" name="Select Statements"/>
                    <section id="2.2" name="Update and Delete Statements"/>
                    <section id="3"
                             name="Abstract Schema Types and Query Domains"/>
                    <section id="3.1" name="Naming"/>
                    <section id="3.2" name="Example"/>
                    <section id="4"
                             name="The FROM Clause and Navigational Declarations"/>
                    <section id="4.1" name="Identifiers"/>
                    <section id="4.2" name="Identification Variables"/>
                    <section id="4.3" name="Range Variable Declarations"/>
                    <section id="4.4" name="Path Expressions"/>
                    <section id="4.4.1" name="Path Expression Syntax"/>
                    <section id="4.5" name="Joins"/>
                    <section id="4.5.1"
                             name="Inner Joins (Relationship Joins)"/>
                    <section id="4.5.2" name="Left Outer Joins"/>
                    <section id="4.5.3" name="Fetch Joins"/>
                    <section id="4.6" name="Collection Member Declarations"/>
                    <section id="4.7" name="FROM Clause and SQL"/>
                    <section id="4.8" name="Polymorphism"/>
                    <section id="4.9" name="Downcasting"/>
                    <section id="5" name="WHERE Clause"/>
                    <section id="6" name="Conditional Expressions"/>
                    <section id="6.1" name="Literals"/>
                    <section id="6.2" name="Identification Variables"/>
                    <section id="6.3" name="Path Expressions"/>
                    <section id="6.4" name="Input Parameters"/>
                    <section id="6.4.1" name="Positional Parameters"/>
                    <section id="6.4.2" name="Named Parameters"/>
                    <section id="6.5"
                             name="Conditional Expression Composition"/>
                    <section id="6.6" name="Operators and Operator Precedence"/>
                    <section id="6.7" name="Comparison Expressions"/>
                    <section id="6.8" name="Between Expressions"/>
                    <section id="6.9" name="In Expressions"/>
                    <section id="6.10" name="Like Expressions"/>
                    <section id="6.11" name="Null Comparison Expressions"/>
                    <section id="6.12"
                             name="Empty Collection Comparison Expressions"/>
                    <section id="6.13" name="Collection Member Expressions"/>
                    <section id="6.14" name="Exists Expressions"/>
                    <section id="6.15" name="All or Any Expressions"/>
                    <section id="6.16" name="Subqueries"/>
                    <section id="6.17" name="Scalar Expressions"/>
                    <section id="6.17.1" name="Arithmetic Expressions"/>
                    <section id="6.17.2"
                             name="Built-in String, Arithmetic, and Datetime Functional Expressions"/>
                    <section id="6.17.2.1" name="String Functions"/>
                    <section id="6.17.2.2" name="Arithmetic Functions"/>
                    <section id="6.17.2.3" name="Datetime Functions"/>
                    <section id="6.17.3"
                             name="Invocation of Predefined and User-defined Database Functions"/>
                    <section id="6.17.4" name="Case Expressions"/>
                    <section id="6.17.5" name="Entity Type Expressions"/>
                    <section id="7" name="GROUP BY, HAVING"/>
                    <section id="8" name="SELECT Clause"/>
                    <section id="8.1" name="Result Type of the SELECT Clause"/>
                    <section id="8.2"
                             name="Constructor Expressions in the SELECT Clause"/>
                    <section id="8.3" name="Null Values in the Query Result"/>
                    <section id="8.4" name="Embeddables in the Query Result"/>
                    <section id="8.5"
                             name="Aggregate Functions in the SELECT Clause"/>
                    <section id="8.5.1" name="Examples"/>
                    <section id="8.6"
                             name="Numeric Expressions in the SELECT Clause"/>
                    <section id="9" name="ORDER BY Clause"/>
                    <section id="10" name="Bulk Update and Delete Operations"/>
                    <section id="11" name="Null Values"/>
                    <section id="12" name="Equality and Comparison Semantics"/>
                    <section id="13" name="Examples"/>
                    <section id="13.1" name="Simple Queries"/>
                    <section id="13.2" name="Queries with Relationships"/>
                    <section id="13.3" name="Queries Using Input Parameters"/>
                    <section id="14" name="BNF"/>
                </sections>
            </chapter>
            <chapter id="5" name="Metamodel API">
                <sections>
                    <section id="1" name="Metamodel API Interfaces"/>
                    <section id="1.1" name="Metamodel Interface"/>
                    <section id="1.2" name="Type Interface"/>
                    <section id="1.3" name="ManagedType Interface"/>
                    <section id="1.4" name="IdentifiableType Interface"/>
                    <section id="1.5" name="EntityType Interface"/>
                    <section id="1.6" name="EmbeddableType Interface"/>
                    <section id="1.7" name="MappedSuperclassType Interface"/>
                    <section id="1.8" name="BasicType Interface"/>
                    <section id="1.9" name="Bindable Interface"/>
                    <section id="1.10" name="Attribute Interface"/>
                    <section id="1.11" name="SingularAttribute Interface"/>
                    <section id="1.12" name="PluralAttribute Interface"/>
                    <section id="1.13" name="CollectionAttribute Interface"/>
                    <section id="1.14" name="SetAttribute Interface"/>
                    <section id="1.15" name="ListAttribute Interface"/>
                    <section id="1.16" name="MapAttribute Interface"/>
                    <section id="1.17" name="StaticMetamodel Annotation"/>
                </sections>
            </chapter>
            <chapter id="6" name="Criteria API">
                <sections>
                    <section id="1" name="Overview"/>
                    <section id="2" name="Metamodel"/>
                    <section id="2.1" name="Static Metamodel Classes"/>
                    <section id="2.1.1" name="Canonical Metamodel"/>
                    <section id="2.1.2" name="Example"/>
                    <section id="2.2" name="Bootstrapping"/>
                    <section id="3" name="Criteria API Interfaces"/>
                    <section id="3.1" name="CriteriaBuilder Interface"/>
                    <section id="3.2" name="CommonAbstractQuery Interface"/>
                    <section id="3.3" name="AbstractQuery Interface"/>
                    <section id="3.4" name="CriteriaQuery Interface"/>
                    <section id="3.5" name="CriteriaUpdate Interface"/>
                    <section id="3.6" name="CriteriaDelete Interface"/>
                    <section id="3.7" name="Subquery Interface"/>
                    <section id="3.8" name="Selection Interface"/>
                    <section id="3.9" name="CompoundSelection Interface"/>
                    <section id="3.10" name="Expression Interface"/>
                    <section id="3.11" name="Predicate Interface"/>
                    <section id="3.12" name="Path Interface"/>
                    <section id="3.13" name="FetchParent Interface"/>
                    <section id="3.14" name="Fetch Interface"/>
                    <section id="3.15" name="From Interface"/>
                    <section id="3.16" name="Root Interface"/>
                    <section id="3.17" name="Join Interface"/>
                    <section id="3.18" name="JoinType"/>
                    <section id="3.19" name="PluralJoin Interface"/>
                    <section id="3.20" name="CollectionJoin Interface"/>
                    <section id="3.21" name="SetJoin Interface"/>
                    <section id="3.22" name="ListJoin Interface"/>
                    <section id="3.23" name="MapJoin Interface"/>
                    <section id="3.24" name="Order Interface"/>
                    <section id="3.25" name="ParameterExpression Interface"/>
                    <section id="4" name="Criteria Query API Usage"/>
                    <section id="5" name="Constructing Criteria Queries"/>
                    <section id="5.1" name="CriteriaQuery Creation"/>
                    <section id="5.2" name="Query Roots"/>
                    <section id="5.3" name="Joins"/>
                    <section id="5.4" name="Fetch Joins"/>
                    <section id="5.5" name="Path Navigation"/>
                    <section id="5.6" name="Restricting the Query Result"/>
                    <section id="5.7" name="Downcasting"/>
                    <section id="5.8" name="Expressions"/>
                    <section id="5.8.1" name="Result Types of Expressions"/>
                    <section id="5.9" name="Literals"/>
                    <section id="5.10" name="Parameter Expressions"/>
                    <section id="5.11" name="Specifying the Select List"/>
                    <section id="5.11.1"
                             name="Assigning Aliases to Selection Items"/>
                    <section id="5.12" name="Subqueries"/>
                    <section id="5.13" name="GroupBy and Having"/>
                    <section id="5.14" name="Ordering the Query Results"/>
                    <section id="5.15"
                             name="Bulk Update and Delete Operations"/>
                    <section id="6"
                             name="Constructing Strongly-typed Queries using the javax.persistence.metamodel Interfaces"/>
                    <section id="7"
                             name="Use of the Criteria API with Strings to Reference Attributes"/>
                    <section id="8" name="Query Modification"/>
                    <section id="9" name="Query Execution"/>
                </sections>
            </chapter>
            <chapter id="7" name="Entity Managers and Persistence Contexts">
                <sections>
                    <section id="1" name="Persistence Contexts"/>
                    <section id="2" name="Obtaining an EntityManager"/>
                    <section id="2.1"
                             name="Obtaining an Entity Manager in the Java EE Environment"/>
                    <section id="2.2"
                             name="Obtaining an Application-managed Entity Manager"/>
                    <section id="3" name="Obtaining an Entity Manager Factory"/>
                    <section id="3.1"
                             name="Obtaining an Entity Manager Factory in a Java EE Container"/>
                    <section id="3.2"
                             name="Obtaining an Entity Manager Factory in a Java SE Environment"/>
                    <section id="4" name="EntityManagerFactory Interface"/>
                    <section id="5" name="Controlling Transactions"/>
                    <section id="5.1" name="JTA EntityManagers"/>
                    <section id="5.2" name="Resource-local EntityManagers"/>
                    <section id="5.3" name="The EntityTransaction Interface"/>
                    <section id="5.4" name="Example"/>
                    <section id="6"
                             name="Container-managed Persistence Contexts"/>
                    <section id="6.1"
                             name="Persistence Context Synchronization Type"/>
                    <section id="6.2"
                             name="Container-managed Transaction-scoped Persistence Context"/>
                    <section id="6.3"
                             name="Container-managed Extended Persistence Context"/>
                    <section id="6.3.1"
                             name="Inheritance of Extended Persistence Context"/>
                    <section id="6.4" name="Persistence Context Propagation"/>
                    <section id="6.4.1"
                             name="Requirements for Persistence Context Propagation"/>
                    <section id="6.5" name="Examples"/>
                    <section id="6.5.1"
                             name="Container-managed Transaction-scoped Persistence Context"/>
                    <section id="6.5.2"
                             name="Container-managed Extended Persistence Context"/>
                    <section id="7"
                             name="Application-managed Persistence Contexts"/>
                    <section id="7.1" name="Examples"/>
                    <section id="7.1.1"
                             name="Application-managed Persistence Context used in Stateless Session Bean"/>
                    <section id="7.1.2"
                             name="Application-managed Persistence Context used in Stateless Session Bean"/>
                    <section id="7.1.3"
                             name="Application-managed Persistence Context used in Stateful Session Bean"/>
                    <section id="7.1.4"
                             name="Application-managed Persistence Context with Resource Transaction"/>
                    <section id="8" name="Requirements on the Container"/>
                    <section id="8.1"
                             name="Application-managed Persistence Contexts"/>
                    <section id="8.2"
                             name="Container Managed Persistence Contexts"/>
                    <section id="9"
                             name="Runtime Contracts between the Container and Persistence Provider"/>
                    <section id="9.1" name="Container Responsibilities"/>
                    <section id="9.2" name="Provider Responsibilities"/>
                    <section id="10" name="Cache Interface"/>
                    <section id="11" name="PersistenceUnitUtil Interface"/>
                </sections>
            </chapter>
            <chapter id="8" name="Entity Packaging">
                <sections>
                    <section id="1" name="Persistence Unit"/>
                    <section id="2" name="Persistence Unit Packaging"/>
                    <section id="2.1" name="persistence.xml file"/>
                    <section id="2.1.1" name="name"/>
                    <section id="2.1.2" name="transaction-type"/>
                    <section id="2.1.3" name="description"/>
                    <section id="2.1.4" name="provider"/>
                    <section id="2.1.5"
                             name="jta-data-source, non-jta-data-source"/>
                    <section id="2.1.6"
                             name="mapping-file, jar-file, class, exclude-unlisted-classes"/>
                    <section id="2.1.6.1"
                             name="Annotated Classes in the Root of the Persistence Unit"/>
                    <section id="2.1.6.2"
                             name="Object/relational Mapping Files"/>
                    <section id="2.1.6.3" name="Jar Files"/>
                    <section id="2.1.6.4" name="List of Managed Classes"/>
                    <section id="2.1.7" name="shared-cache-mode"/>
                    <section id="2.1.8" name="validation-mode"/>
                    <section id="2.1.9" name="properties"/>
                    <section id="2.1.10" name="Examples"/>
                    <section id="2.2" name="Persistence Unit Scope"/>
                    <section id="3" name="persistence.xml Schema"/>
                </sections>
            </chapter>
            <chapter id="9"
                     name="Container and Provider Contracts for Deployment and Bootstrapping">
                <sections>
                    <section id="1" name="Java EE Deployment"/>
                    <section id="2"
                             name="Bootstrapping in Java SE Environments"/>
                    <section id="2.1" name="Schema Generation"/>
                    <section id="3"
                             name="Determining the Available Persistence Providers"/>
                    <section id="3.1"
                             name="PersistenceProviderResolver interface"/>
                    <section id="3.2"
                             name="PersistenceProviderResolverHolder class"/>
                    <section id="4" name="Schema Generation"/>
                    <section id="4.1" name="Data Loading"/>
                    <section id="5"
                             name="Responsibilities of the Persistence Provider"/>
                    <section id="5.1"
                             name="javax.persistence.spi.PersistenceProvider"/>
                    <section id="5.2"
                             name="javax.persistence.spi.ProviderUtil"/>
                    <section id="5.3" name="Persistence Unit Properties"/>
                    <section id="6"
                             name="javax.persistence.spi.PersistenceUnitInfo Interface"/>
                    <section id="6.1"
                             name="javax.persistence.spi.ClassTransformer Interface"/>
                    <section id="7" name="javax.persistence.Persistence Class"/>
                    <section id="8" name="PersistenceUtil Interface"/>
                    <section id="8.1"
                             name="Contracts for Determining the Load State of an Entity or Entity Attribute"/>
                </sections>
            </chapter>
            <chapter id="10" name="Metadata Annotations">
                <sections>
                    <section id="1" name="Entity"/>
                    <section id="2" name="Callback Annotations"/>
                    <section id="3" name="EntityGraph Annotations"/>
                    <section id="3.1"
                             name="NamedEntityGraph and NamedEntityGraphs Annotations"/>
                    <section id="3.2" name="Callback Annotations"/>
                    <section id="3.3" name="NamedSubgraph Annotation"/>
                    <section id="4" name="Annotations for Queries"/>
                    <section id="4.1" name="NamedQuery Annotation"/>
                    <section id="4.2" name="NamedNativeQuery Annotation"/>
                    <section id="4.3"
                             name="NamedStoredProcedureQuery Annotation"/>
                    <section id="4.4"
                             name="Annotations for SQL Result Set Mappings"/>
                    <section id="5"
                             name="References to EntityManager and EntityManagerFactory"/>
                    <section id="5.1" name="PersistenceContext Annotation"/>
                    <section id="5.2" name="PersistenceUnit Annotation"/>
                    <section id="6"
                             name="Annotations for Type Converter Classes"/>
                </sections>
            </chapter>
            <chapter id="11" name="Metadata for Object/Relational Mapping">
                <sections>
                    <section id="1"
                             name="Annotations for Object/Relational Mapping"/>
                    <section id="1.1" name="Access Annotation"/>
                    <section id="1.2" name="AssociationOverride Annotation"/>
                    <section id="1.3" name="AssociationOverrides Annotation"/>
                    <section id="1.4" name="AttributeOverride Annotation"/>
                    <section id="1.5" name="AttributeOverrides Annotation"/>
                    <section id="1.6" name="Basic Annotation"/>
                    <section id="1.7" name="Cacheable Annotation"/>
                    <section id="1.8" name="CollectionTable Annotation"/>
                    <section id="1.9" name="Column Annotation"/>
                    <section id="1.10" name="Convert Annotation"/>
                    <section id="1.11" name="Converts Annotation"/>
                    <section id="1.12" name="DiscriminatorColumn Annotation"/>
                    <section id="1.13" name="DiscriminatorValue Annotation"/>
                    <section id="1.14" name="ElementCollection Annotation"/>
                    <section id="1.15" name="Embeddable Annotation"/>
                    <section id="1.16" name="Embedded Annotation"/>
                    <section id="1.17" name="EmbeddedId Annotation"/>
                    <section id="1.18" name="Enumerated Annotation"/>
                    <section id="1.19" name="ForeignKey Annotation"/>
                    <section id="1.20" name="GeneratedValue Annotation"/>
                    <section id="1.21" name="Id Annotation"/>
                    <section id="1.22" name="IdClass Annotation"/>
                    <section id="1.23" name="Index Annotation Elements"/>
                    <section id="1.24" name="Inheritance Annotation"/>
                    <section id="1.25" name="JoinColumn Annotation"/>
                    <section id="1.26" name="JoinColumns Annotation"/>
                    <section id="1.27" name="JoinTable Annotation"/>
                    <section id="1.28" name="Lob Annotation"/>
                    <section id="1.29" name="ManyToMany Annotation"/>
                    <section id="1.30" name="ManyToOne Annotation"/>
                    <section id="1.31" name="MapKey Annotation"/>
                    <section id="1.32" name="MapKeyClass Annotation"/>
                    <section id="1.33" name="MapKeyColumn Annotation"/>
                    <section id="1.34" name="MapKeyEnumerated Annotation"/>
                    <section id="1.35" name="MapKeyJoinColumn Annotation"/>
                    <section id="1.36" name="MapKeyJoinColumns Annotation"/>
                    <section id="1.37" name="MapKeyTemporal Annotation"/>
                    <section id="1.38" name="MappedSuperclass Annotation"/>
                    <section id="1.39" name="MapsId Annotation"/>
                    <section id="1.40" name="OneToMany Annotation"/>
                    <section id="1.41" name="OneToOne Annotation"/>
                    <section id="1.42" name="OrderBy Annotation"/>
                    <section id="1.43" name="OrderColumn Annotation"/>
                    <section id="1.44" name="PrimaryKeyJoinColumn Annotation"/>
                    <section id="1.45" name="PrimaryKeyJoinColumns Annotation"/>
                    <section id="1.46" name="SecondaryTable Annotation"/>
                    <section id="1.47" name="SecondaryTables Annotation"/>
                    <section id="1.48" name="SequenceGenerator Annotation"/>
                    <section id="1.49" name="Table Annotation"/>
                    <section id="1.50" name="TableGenerator Annotation"/>
                    <section id="1.51" name="Temporal Annotation"/>
                    <section id="1.52" name="Transient Annotation"/>
                    <section id="1.53" name="UniqueConstraint Annotation"/>
                    <section id="1.54" name="Version Annotation"/>
                    <section id="2"
                             name="Object/Relational Metadata Used in Schema Generation"/>
                    <section id="2.1" name="Table-level elements"/>
                    <section id="2.1.1" name="Table"/>
                    <section id="2.1.2" name="Inheritance"/>
                    <section id="2.1.3" name="SecondaryTabke"/>
                    <section id="2.1.4" name="CollectionTable"/>
                    <section id="2.1.5" name="JoinTable"/>
                    <section id="2.1.6" name="TableGenerator"/>
                    <section id="2.2" name="Column-level elements"/>
                    <section id="2.2.1" name="Column"/>
                    <section id="2.2.2" name="MapKeyColumn"/>
                    <section id="2.2.3" name="Enumerated, MapKeyEnumerated"/>
                    <section id="2.2.4" name="Temporal, MapKeyTemporal"/>
                    <section id="2.2.5" name="Lob"/>
                    <section id="2.2.6" name="OrderColumn"/>
                    <section id="2.2.7" name="DiscriminatorColumn"/>
                    <section id="2.2.8" name="Version"/>
                    <section id="2.3" name="Primary Key mappings"/>
                    <section id="2.3.1" name="Id"/>
                    <section id="2.3.2" name="EmbeddedId"/>
                    <section id="2.3.3" name="GeneratedValue"/>
                    <section id="2.4" name="Foreign Key Column Mappings"/>
                    <section id="2.4.1" name="JoinColumn"/>
                    <section id="2.4.2" name="MapKeyJoinColumn"/>
                    <section id="2.4.3" name="PrimaryKeyJoinColumn"/>
                    <section id="2.4.4" name="ForeignKey"/>
                    <section id="2.5" name="Other Elements"/>
                    <section id="2.5.1" name="SequenceGenerator"/>
                    <section id="2.5.2" name="Index"/>
                    <section id="2.5.3" name="UniqueConstraint"/>
                    <section id="3"
                             name="Examples of the Application of Annotations for Object/Relational Mapping"/>
                    <section id="3.1" name="Examples of Simple Mappings"/>
                    <section id="3.2" name="A More Complex Example"/>
                </sections>
            </chapter>
            <chapter id="12" name="XML Object/Relational Mapping Descriptor">
                <sections>
                    <section id="1" name="Use of the XML Descriptor"/>
                    <section id="2" name="XML Overriding Rules"/>
                    <section id="2.1"
                             name="persistence-unit-defaults Subelements"/>
                    <section id="2.1.1" name="schema"/>
                    <section id="2.1.2" name="catalog"/>
                    <section id="2.1.3" name="delimited-identifiers"/>
                    <section id="2.1.4" name="access"/>
                    <section id="2.1.5" name="cascade-persist"/>
                    <section id="2.1.6" name="entity-listeners"/>
                    <section id="2.2"
                             name="Other Subelements of the entity-mappings element"/>
                    <section id="2.2.1" name="package"/>
                    <section id="2.2.2" name="schema"/>
                    <section id="2.2.3" name="catalog"/>
                    <section id="2.2.4" name="access"/>
                    <section id="2.2.5" name="sequence-generator"/>
                    <section id="2.2.6" name="table-generator"/>
                    <section id="2.2.7" name="named-query"/>
                    <section id="2.2.8" name="named-native-query"/>
                    <section id="2.2.9" name="named-stored-procedure-query"/>
                    <section id="2.2.10" name="sql-result-set-mapping"/>
                    <section id="2.2.11" name="entity"/>
                    <section id="2.2.12" name="mapped-superclass"/>
                    <section id="2.2.13" name="embeddable"/>
                    <section id="2.2.14" name="converter"/>
                    <section id="2.3" name="entity Subelements and Attributes"/>
                    <section id="2.3.1" name="metadata-complete"/>
                    <section id="2.3.2" name="access"/>
                    <section id="2.3.3" name="cacheable"/>
                    <section id="2.3.4" name="name"/>
                    <section id="2.3.5" name="table"/>
                    <section id="2.3.6" name="secondary-table"/>
                    <section id="2.3.7" name="primary-key-join-column"/>
                    <section id="2.3.8" name="id-class"/>
                    <section id="2.3.9" name="inheritance"/>
                    <section id="2.3.10" name="discriminator-value"/>
                    <section id="2.3.11" name="discriminator-column"/>
                    <section id="2.3.12" name="sequence-generator"/>
                    <section id="2.3.13" name="table-generator"/>
                    <section id="2.3.14" name="attribute-override"/>
                    <section id="2.3.15" name="association-override"/>
                    <section id="2.3.16" name="convert"/>
                    <section id="2.3.18" name="named-query"/>
                    <section id="2.3.19" name="named-native-query"/>
                    <section id="2.3.20" name="named-stored-procedure-query"/>
                    <section id="2.3.21" name="sql-result-set-mapping"/>
                    <section id="2.3.22" name="exclude-default-listeners"/>
                    <section id="2.3.23" name="exclude-superclass-listeners"/>
                    <section id="2.3.24" name="entity-listeners"/>
                    <section id="2.3.25"
                             name="pre-persist, post-persist, pre-remove, post-remove, pre-update, post-update, post-load"/>
                    <section id="2.3.26" name="attributes"/>
                    <section id="2.3.26.1" name="id"/>
                    <section id="2.3.26.2" name="embedded-id"/>
                    <section id="2.3.26.3" name="basic"/>
                    <section id="2.3.26.4" name="version"/>
                    <section id="2.3.26.5" name="many-to-one"/>
                    <section id="2.3.26.6" name="one-to-many"/>
                    <section id="2.3.26.7" name="one-to-one"/>
                    <section id="2.3.26.8" name="many-to-many"/>
                    <section id="2.3.26.9" name="element-collection"/>
                    <section id="2.3.26.10" name="embedded"/>
                    <section id="2.3.26.11" name="transient"/>
                    <section id="2.4"
                             name="mapped-superclass Subelements and Attributes"/>
                    <section id="2.4.1" name="metadata-complete"/>
                    <section id="2.4.2" name="access"/>
                    <section id="2.4.3" name="id-class"/>
                    <section id="2.4.4" name="exclude-default-listeners"/>
                    <section id="2.4.5" name="exclude-superclass-listeners"/>
                    <section id="2.4.6" name="entity-listeners"/>
                    <section id="2.4.7"
                             name="pre-persist, post-persist, pre-remove, post-remove, pre-update, post-update, post-load"/>
                    <section id="2.4.8" name="attributes"/>
                    <section id="2.4.8.1" name="id"/>
                    <section id="2.4.8.2" name="embedded-id"/>
                    <section id="2.4.8.3" name="basic"/>
                    <section id="2.4.8.4" name="version"/>
                    <section id="2.4.8.5" name="many-to-one"/>
                    <section id="2.4.8.6" name="one-to-many"/>
                    <section id="2.4.8.7" name="one-to-one"/>
                    <section id="2.4.8.8" name="many-to-many"/>
                    <section id="2.4.8.9" name="element-collection"/>
                    <section id="2.4.8.10" name="embedded"/>
                    <section id="2.4.8.11" name="transient"/>
                    <section id="2.5"
                             name="embeddable Subelements and Attributes"/>
                    <section id="2.5.1" name="metadata-complete"/>
                    <section id="2.5.2" name="access"/>
                    <section id="2.5.3" name="attributes"/>
                    <section id="2.5.3.1" name="basic"/>
                    <section id="2.5.3.2" name="many-to-one"/>
                    <section id="2.5.3.3" name="one-to-many"/>
                    <section id="2.5.3.4" name="one-to-one"/>
                    <section id="2.5.3.5" name="many-to-many"/>
                    <section id="2.5.3.6" name="element-collection"/>
                    <section id="2.5.3.7" name="embedded"/>
                    <section id="2.5.3.8" name="transient"/>
                    <section id="3" name="XML Schema"/>
                </sections>
            </chapter>
        </chapters>
    </location-names>
    <assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:500</id>
            <description>The entity class must:</description>
            <location chapter="2" section="1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:501</id>
                    <description>be annotated with the Entity annotation
                    </description>
                    <location chapter="2" section="1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:502</id>
                    <description>be denoted in the XML descriptor as an Entity
                    </description>
                    <location chapter="2" section="1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:503</id>
            <description>The entity must have a no-arg constructor.
            </description>
            <location chapter="2" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:504</id>
            <description>The entity may have other constructors as well.
            </description>
            <location chapter="2" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:505</id>
            <description>The no-arg constructor must be public or protected.
            </description>
            <location chapter="2" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1318</id>
            <description>The entity class must be a top-level class
            </description>
            <location chapter="2" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1145</id>
            <description>An enum or interface must not be designated as an
                entity.
            </description>
            <location chapter="2" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:506</id>
            <description>If an entity instance is to be passed by value as a
                detached object (e.g., through a remote
                interface), the entity class must implement the Serializable
                interface.
            </description>
            <location chapter="2" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:507</id>
            <description>The entity class must not be final.</description>
            <location chapter="2" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:508</id>
            <description>No methods or persistent instances of the entity class
                may be final.
            </description>
            <location chapter="2" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1146</id>
            <description>An instance variable must be directly accessed only
                from within the methods of the entity by
                the entity instance itself.
            </description>
            <location chapter="2" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:509</id>
            <description>Both abstract and concrete classes can be entities.
            </description>
            <location chapter="2" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:510</id>
            <description>Entities may extend non-entity classes as well as
                entity classes and non-entity classes may
                extend entity classes.
            </description>
            <location chapter="2" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:511</id>
            <description>Instance variables must not be accessed by clients of
                the entity. The state of the entity is
                available to clients only through the entity's methodsâi.e.,
                accessor methods (getter/setter methods) or
                other business methods.
            </description>
            <location chapter="2" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:516</id>
            <description>It is required that the entity class follow the method
                conventions for a JavaBean when
                property-based access is used.
            </description>
            <location chapter="2" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:512</id>
            <description>Instance variables of a class must be private,
                protected, or package visibility independent of
                whether field access or property access is used.
            </description>
            <location chapter="2" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:515</id>
            <description>When property access is used, the property accessor
                methods must be public or protected.
            </description>
            <location chapter="2" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1319</id>
            <description>for every persistent property property of type T of the
                entity, there is a getter method,
                getProperty, and setter method setProperty.
            </description>
            <location chapter="2" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1320</id>
            <description>For boolean properties, isProperty may be used as an
                alternative name for the getter method
            </description>
            <location chapter="2" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:517</id>
            <description>Collection-valued persistent fields and properties must
                be defined in terms of one of the
                following collection-valued interfaces regardless of whether the
                entity class otherwise adheres to the
                JavaBeans method conventions noted above and whether field or
                property access is used
            </description>
            <location chapter="2" section="2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:518</id>
                    <description>The following collection interfaces are
                        supported: java.util.Collection,
                        java.util.set,
                        java.util.List, java.util.Map
                    </description>
                    <location chapter="2" section="2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1321</id>
            <description>The collection implementation type may be used by the
                application to initialize fields or
                properties before the entity is made persistent.
            </description>
            <location chapter="2" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1322</id>
            <description>Once the entity becomes managed (or detached),
                subsequent access must be through the
                interface type.
            </description>
            <location chapter="2" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:519</id>
            <description>For collection-valued persistent properties, type T
                must be one of these collection interface
                types in the method signatures above. Use of the generic
                variants of these collection types is
                encouraged
            </description>
            <location chapter="2" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:520</id>
            <description>In addition to returning and setting persistent state
                of the instance, the property accessor
                methods may contain other business logic as well, for example,
                to perform validation. The persistence
                provider runtime executes this logic when property-based access
                is used.
            </description>
            <location chapter="2" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:521</id>
            <description>If a persistence context is joined to a transaction,
                runtime exceptions thrown by
                property accessor methods cause the current transaction to be
                rolled back.
            </description>
            <location chapter="2" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:522</id>
            <description>Exceptions thrown by such methods when used by the
                persistence runtime to load or store
                persistent state cause the persistence runtime to mark the
                current transaction for rollback and to throw
                a PersistenceException that wraps the application exception.
            </description>
            <location chapter="2" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:523</id>
            <description>Entity subclasses may override the property accessor
                methods. However, portable applications
                must not override the object/relational mapping metadata that
                applies to the persistent fields or
                properties of
                entity superclasses.
            </description>
            <location chapter="2" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:524</id>
            <description>The persistent fields or properties of an entity may be
                one of the following types:
            </description>
            <location chapter="2" section="2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:525</id>
                    <description>Java primitive types</description>
                    <location chapter="2" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:526</id>
                    <description>java.lang.String</description>
                    <location chapter="2" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:527</id>
                    <description>other Java serializable types (including
                        wrappers of the primitive types,
                        java.math.BigInteger, java.math.BigDecimal,
                        java.util.Date,
                        java.util.Calendar, java.sql.Date, java.sql.Time,
                        java.sql.TimeStamp
                    </description>
                    <location chapter="2" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:528</id>
                    <description>user-defined serializable types, byte[],
                        Byte[], char[], and Character[]
                    </description>
                    <location chapter="2" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:529</id>
                    <description>enums</description>
                    <location chapter="2" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:530</id>
                    <description>entity types</description>
                    <location chapter="2" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:531</id>
                    <description>collection of entity types</description>
                    <location chapter="2" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:532</id>
                    <description>embeddable classes</description>
                    <location chapter="2" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:524.1</id>
                    <description>collections of basic types</description>
                    <location chapter="2" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:524.2</id>
                    <description>collections of embeddable types</description>
                    <location chapter="2" section="2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1149</id>
            <description>By default, a single access type(field or property
                access) applies to an entity hierarchy.
            </description>
            <location chapter="2" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1323</id>
            <description>The default
                access type of an entity hierarchy is determined by the
                placement of mapping annotations on the
                attributes of the entity classes and mapped superclasses of the
                entity hierarchy that do not explicitly
                specify an access type.
            </description>
            <location chapter="2" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1324</id>
            <description>An access type is explicitly specified by means of the
                Access annotation
            </description>
            <location chapter="2" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:513</id>
            <description>When field-based access is used, the object/relational
                mapping annotations for the entity class
                annotate the instance variables, and the persistence provider
                runtime accesses instance variables
                directly. All non-transient instance variables that are not
                annotated with the Transient
                annotation are persistent.
            </description>
            <location chapter="2" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:514</id>
            <description>When property-based access is used, the
                object/relational mapping annotations for the entity
                class annotate the getter property accessors, and the
                persistence provider runtime accesses persistent
                state via the property accessor methods. All properties not
                annotated with the
                Transient annotation are persistent.
            </description>
            <location chapter="2" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1150</id>
            <description>Mapping annotations must not be applied to fields or
                properties that are transient or
                Transient.
            </description>
            <location chapter="2" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1325</id>
            <description>All such classes in the entity hierarchy whose access
                type is defaulted in this way must be
                consistent in
                their placement of annotations on either fields or properties,
                such that a single, consistent default
                access type applies within the hierarchy. Any embeddable classes
                used by such classes will have the same
                access type as the default access type of the hierarchy unless
                the Access annotation is specified as
                defined below.
            </description>
            <location chapter="2" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1326</id>
            <description>An access type for an individual entity class, mapped
                superclass, or embeddable class can be
                specified for that class independent of the default for the
                entity hierarchy by means of the Access
                annotation applied to the class.
            </description>
            <location chapter="2" section="3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1327</id>
            <description>This explicit access type specification does not affect
                the access type of other entity
                classes or mapped superclasses in the entity hierarchy. The
                following rules apply:
            </description>
            <location chapter="2" section="3.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1327.1</id>
                    <description>When Access(FIELD) is applied to an entity
                        class, mapped superclass, or embeddable
                        class, mapping annotations may be placed on the instance
                        variables of that class, and the
                        persistence
                        provider runtime accesses persistent state via the
                        instance variables defined by the
                        class.
                    </description>
                    <location chapter="2" section="3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1327.2</id>
                    <description>All non-transient instance variables that are
                        not annotated with the Transient
                        annotation
                        are persistent.
                    </description>
                    <location chapter="2" section="3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1327.3</id>
                    <description>When Access(FIELD) is applied to such a class,
                        it is possible to
                        selectively designate individual attributes within the
                        class for property access.
                    </description>
                    <location chapter="2" section="3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1153</id>
                    <description>To specify a persistent property for access by
                        the persistence provider runtime,
                        that
                        property
                        must be designated Access(PROPERTY.)
                    </description>
                    <location chapter="2" section="3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1327.4</id>
                    <description>It is permitted (but redundant) to place
                        Access(FIELD) on a persistent field whose
                        class has field access type or Access(PROPERTY)
                        on a persistent property whose class has property access
                        type
                    </description>
                    <location chapter="2" section="3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1327.5</id>
                    <description>It is not permitted to specify a field as
                        Access(PROPERTY) or a property as
                        Access(FIELD)
                    </description>
                    <location chapter="2" section="3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1327.6</id>
                    <description>Note that Access(PROPERTY) must not be placed
                        on the setter methods.
                    </description>
                    <location chapter="2" section="3.2"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1154</id>
                    <description>The behavior is undefined if mapping
                        annotations are placed on any properties
                        defined
                        by the
                        class for which Access(PROPERTY) is not specified.
                    </description>
                    <location chapter="2" section="3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1327.7</id>
                    <description>Persistent state inherited from superclasses is
                        accessed in accordance with the
                        access
                        types of those superclasses.
                    </description>
                    <location chapter="2" section="3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1327.8</id>
                    <description>When Access(PROPERTY) is applied to an entity
                        class, mapped superclass, or
                        embeddable
                        class, mapping annotations may be placed on the
                        properties of that class, and the
                        persistence
                        provider runtime accesses persistent state via the
                        properties defined by that class.
                    </description>
                    <location chapter="2" section="3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1327.9</id>
                    <description>All properties that are not annotated with the
                        Transient annotation are persistent.
                    </description>
                    <location chapter="2" section="3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1327.10</id>
                    <description>When Access(PROPERTY) is applied to such a
                        class, it is possible to selectively
                        designate individual attributes within the class for
                        instance variable access.
                    </description>
                    <location chapter="2" section="3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1155</id>
                    <description>To specify a persistent instance variable for
                        access by the persistence provider
                        runtime, that
                        instance variable must be designated Access(FIELD)
                    </description>
                    <location chapter="2" section="3.2"/>
                </assertion>
                <assertion required="true" impl-spec=" true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1156</id>
                    <description>The behavior is undefined if mapping
                        annotations are placed on any instance
                        variables
                        defined
                        by the class for which Access(FIELD) is not specified.
                    </description>
                    <location chapter="2" section="3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1327.11</id>
                    <description>Persistent state inherited from superclasses is
                        accessed in accordance with the
                        access
                        types of those superclasses.
                    </description>
                    <location chapter="2" section="3.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1328</id>
            <description>The access type of an embeddable class is determined by
                the access type of the entity class,
                mapped superclass, or embeddable class in which it is embedded
                (including as a member of an element
                collection) independent of whether the access type of the
                containing class has been explicitly specified
                or defaulted.
            </description>
            <location chapter="2" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1329</id>
            <description>A different access type for an embeddable class can be
                specified for that embeddable class
                by means of the Access annotation as described above.
            </description>
            <location chapter="2" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:533</id>
            <description>Every entity must have a primary key.</description>
            <location chapter="2" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1158</id>
            <description>The primary key must be defined on the entity class
                that is the root of the entity hierarchy or
                on a mapped superclass that is a (direct or indirect) superclass
                of all entity classes in the entity
                hierarchy.
            </description>
            <location chapter="2" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1159</id>
            <description>The primary key must be defined exactly once in an
                entity hierarchy.
            </description>
            <location chapter="2" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:534</id>
            <description>A simple (i.e., non-composite) primary key must
                correspond to a single persistent field or
                property of the entity class. The Id annotation or id XML
                element must be used to denote a simple
                primary key.
            </description>
            <location chapter="2" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:535</id>
            <description>Composite primary key must correspond to either a
                single persistent field or property or to a
                set of such fields or properties
            </description>
            <location chapter="2" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1162</id>
            <description>A primary key class must be defined to represent a
                composite primary key.
            </description>
            <location chapter="2" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1330</id>
            <description>The EmbeddedId or IdClass annotation is used to denote
                a composite primary key
            </description>
            <location chapter="2" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:536</id>
            <description>A simple primary key or a field or property of a
                composite primary key should be one of the
                following types:
            </description>
            <location chapter="2" section="4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:537</id>
                    <description>any Java primitive type</description>
                    <location chapter="2" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:538</id>
                    <description>any primitive wrapper type</description>
                    <location chapter="2" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:539</id>
                    <description>java.lang.String</description>
                    <location chapter="2" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:540</id>
                    <description>java.util.Date. If java.util.Date is used as a
                        primary key field or property,the
                        temporal type should be specified as DATE.
                    </description>
                    <location chapter="2" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:541</id>
                    <description>java.sql.Date</description>
                    <location chapter="2" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1169</id>
                    <description>java.math.BigDecimal</description>
                    <location chapter="2" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1170</id>
                    <description>java.math.BigInteger</description>
                    <location chapter="2" section="4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1331</id>
            <description>If the primary key is a composite primary key derived
                from the primary key of another entity,
                the primary key may contain an attribute whose type is that of
                the primary key of the referenced entity
            </description>
            <location chapter="2" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1172</id>
            <description>If generated primary keys are used, only integral types
                will be portable.
            </description>
            <location chapter="2" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:543</id>
            <description>The following rules apply for composite primary keys:
            </description>
            <location chapter="2" section="4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:544</id>
                    <description>The primary key class must be public and must
                        have a public no-arg constructor.
                    </description>
                    <location chapter="2" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:542</id>
                    <description>The access type (field- or property-based
                        access) of a primary key class is
                        determined
                        by the access type of the entity for which it is the
                        primary key unless the primary key is a
                        embedded id and a different access type is specified.
                    </description>
                    <location chapter="2" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:546</id>
                    <description>If property-based access is used, the
                        properties of the primary key class must be
                        public or protected.
                    </description>
                    <location chapter="2" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:545</id>
                    <description>The primary key class must be serializable.
                    </description>
                    <location chapter="2" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:547</id>
                    <description>The primary key class must define equals and
                        hashCode methods.
                    </description>
                    <location chapter="2" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:548</id>
                    <description>A composite primary key must either be
                        represented and mapped as an embeddable
                        class
                        (EmbeddedId annotation) or must be represented as an id
                        class and mapped to multiple fields
                        or
                        properties of the entity class (IdClass annotation).
                    </description>
                    <location chapter="2" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:549</id>
                    <description>If the composite primary key class is
                        represented as an id class, the names of
                        primary
                        key fields or properties in the primary key class and
                        those of the entity class to which the
                        id
                        class is mapped must correspond and their types must be
                        the same.
                    </description>
                    <location chapter="2" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1177</id>
                    <description>A primary key that corresponds to a derived
                        identity must conform to the rules
                    </description>
                    <location chapter="2" section="4"/>
                </assertion>

            </sub-assertions>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:550</id>
            <description>The application must not change the value of the
                primary key. The behavior is undefined
                if this occurs.
            </description>
            <location chapter="2" section="4"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1179</id>
            <description>The identity of an entity may be derived from the
                identity of another entity (the "parent"
                entity) when the former entity (the "dependent" entity) is the
                owner of a many-to-one or one-to-one
                relationship to the parent entity and a foreign key maps the
                relationship from dependent to parent.
            </description>
            <location chapter="2" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1332</id>
            <description>If a many-to-one or one-to-one entity relationship
                corresponds to a primary key attribute, the
                entity containing this relationship cannot be persisted without
                the relationship having been assigned an
                entity
                since the identity of the entity containing the relationship is
                derived from the referenced entity.
            </description>
            <location chapter="2" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1333</id>
            <description>Derived identities may be captured by means of simple
                primary keys or by means of composite
                primary keys
            </description>
            <location chapter="2" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1180</id>
            <description>If the dependent entity class has primary key
                attributes in addition to those of the parent's
                primary key or if the parent has a composite primary key, an
                embedded id or id class must be used to
                specify the primary key of the dependent entity.
            </description>
            <location chapter="2" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1334</id>
            <description>It is not necessary that parent entity and dependent
                entity both use embedded ids or both use
                id classes to represent composite primary keys when the parent
                has a composite key.
            </description>
            <location chapter="2" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1181</id>
            <description>A dependent entity may have more than one parent
                entity.
            </description>
            <location chapter="2" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1182</id>
            <description>If the dependent entity uses an id class to represent
                its primary key, one of the two following
                rules must be observed: The names of the attributes of the id
                class and the Id attributes of the
                dependent entity class
                must correspond as follows:
            </description>
            <location chapter="2" section="4.1.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1183</id>
                    <description>The Id attribute in the entity class and the
                        corresponding attribute in the id
                        class
                        must have
                        the same name.
                    </description>
                    <location chapter="2" section="4.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1184</id>
                    <description>If an Id attribute in the entity class is of
                        basic type, the corresponding
                        attribute in
                        the id
                        class must have the same type.
                    </description>
                    <location chapter="2" section="4.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1185</id>
                    <description>If an Id attribute in the entity is a
                        many-to-one or one-to-one reference to a
                        parent
                        entity,
                        the type of the corresponding attribute in the id class
                        must be the same Java type as the id
                        class or
                        embedded id of the parent entity (if the parent entity
                        has a composite primary key) or the
                        type
                        of the
                        Id attribute of the parent entity (if the parent entity
                        has a simple primary key).
                    </description>
                    <location chapter="2" section="4.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1182.1</id>
                    <description>If the dependent entity has a single primary
                        key attribute (i.e., the relationship
                        attribute), the id class specified by the dependent
                        entity must be the same as the primary
                        key
                        class of the parent entity. The Id annotation is applied
                        to the relationship to the parent
                        entity.
                    </description>
                    <location chapter="2" section="4.1.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1335</id>
            <description>If the dependent entity uses an embedded id to
                represent its primary key, the attribute in the
                embedded
                id corresponding to the relationship attribute must be of the
                same type as the primary key of the parent
                entity and must be designated by the MapsId annotation applied
                to the relationship attribute.
            </description>
            <location chapter="2" section="4.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1336</id>
            <description>The
                value element of the MapsId annotation must be used to specify
                the name of the attribute within the
                embedded id to which the relationship attribute corresponds.
            </description>
            <location chapter="2" section="4.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1337</id>
            <description>If the embedded id of the dependent entity
                is of the same Java type as the primary key of the parent
                entity, the relationship attribute maps both
                the
                relationship to the parent and the primary key of the dependent
                entity, and in this case the MapsId
                annotation is specified without the value element
            </description>
            <location chapter="2" section="4.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1338</id>
            <description>Note that the parentâs primary key might be represented
                as either an embedded id or as an id
                class.
            </description>
            <location chapter="2" section="4.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1339</id>
            <description>If the dependent entity has a single primary key
                attribute (i.e, the relationship attribute or
                an attribute
                that corresponds to the relationship attribute) and the primary
                key of the parent entity is a simple
                primary
                key, the primary key of the dependent entity is a simple primary
                key of the same type as that of the
                parent entity (and neither EmbeddedId nor IdClass is specified).
                In this case, either (1) the
                relationship
                attribute is annotated Id, or (2) a separate Id attribute is
                specified and the relationship attribute
                is annotated MapsId (and the value element of the MapsId
                annotation is not specified).
            </description>
            <location chapter="2" section="4.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1340</id>
            <description>A primary key attribute that is derived from the
                identity of a parent entity is mapped by the
                corresponding relationship attribute.
            </description>
            <location chapter="2" section="4.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1341</id>
            <description>The default mapping for this relationship is as
                specified in section 2.10. In
                the case where a default mapping does not apply or where a
                default mapping is to be overridden, the
                JoinColumn or JoinColumns annotation is used on the relationship
                attribute.
            </description>
            <location chapter="2" section="4.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1342</id>
            <description>If the dependent entity uses an embedded id to
                represent its primary key, the AttributeOverride
                annotation may be used to override the default mapping of
                embedded id attributes that do not correspond
                to the relationship attributes mapping the derived identity.
            </description>
            <location chapter="2" section="4.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1343</id>
            <description>The embedded id attributes that correspond to the
                relationship are treated by the provider as
                âread onlyââthat is, any updates to them on the part of the
                application are not propagated to the
                database.
            </description>
            <location chapter="2" section="4.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1344</id>
            <description>If the dependent uses an id class, the Column
                annotation may be used to override the default
                mapping of Id attributes that are not relationship attributes.
            </description>
            <location chapter="2" section="4.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1188</id>
            <description>An entity may have collections of embeddables as well
                as single-valued embeddable attributes.
            </description>
            <location chapter="2" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1189</id>
            <description>Embeddable may be used as map keys and map values.
            </description>
            <location chapter="2" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:551</id>
            <description>Embedded objects belong strictly to their owning entity
                and are not shareable across
                persistent entities. Attempting to share an embedded object
                across entities has undefined semantics.
            </description>
            <location chapter="2" section="5"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:553</id>
            <description>Embeddable classes must adhere to the requirements as
                specified in section 2.1 for entities
                with the exception that embeddable classes are not annotated as
                Entity.
            </description>
            <location chapter="2" section="5"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1190</id>
            <description>Embeddable classes must be annotated as Embeddable or
                denoted in XML descriptors.
            </description>
            <location chapter="2" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1191</id>
            <description>An embeddable class may be used to represent the state
                of another embeddable class.
            </description>
            <location chapter="2" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1192</id>
            <description>An embeddable class (including an embeddable class
                within another embeddable class) may contain
                a collection of a basic type or other embeddable class. Direct
                or indirect circular containment
                dependencies among embeddable classes are not permitted.
            </description>
            <location chapter="2" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1193</id>
            <description>An embeddable class may contain a relationship to an
                entity or collection of entities.
            </description>
            <location chapter="2" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1194</id>
            <description>Since instances of
                embeddable classes themselves have no persistent identity, the
                relationship from the referenced entity
                is to the entity that contains the embeddable instance(s) and
                not to the embeddable itself. An
                embeddable
                class that is used as an embedded id or as map key must not
                contain such a relationship. An entity
                cannot have a unidirectional relationship to the embeddable
                class of another entity (or itself).
            </description>
            <location chapter="2" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1195</id>
            <description>A persistent field or property of an entity or
                embeddable class may correspond to a collection
                of a basic type or embeddable class (âelement collectionâ). Such
                a collection, when specified as such by
                the ElementCollection annotation, is mapped by means of a
                collection table
            </description>
            <location chapter="2" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1195</id>
            <description>If the ElementCollection annotation (or XML equivalent)
                is not specified for the
                collection-valued
                field or property, the rules of Section 2.8 apply.
            </description>
            <location chapter="2" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1196</id>
            <description>An embeddable class (including an embeddable class
                within another embeddable class) that is
                contained within an element collection must not contain an
                element collection, nor may it contain a
                relationship
                to an entity other than a many-to-one or one-to-one
                relationship.
            </description>
            <location chapter="2" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1197</id>
            <description>The embeddable class must be on the owning side of the
                relationship and the relationship must
                be mapped by a foreign key mapping.
            </description>
            <location chapter="2" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1198</id>
            <description>Collections of elements and entity relationships can be
                represented as java.util.Map
                collections.
            </description>
            <location chapter="2" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1199</id>
            <description>The map key type and the map value independently can
                each be a basic type, embeddable class,
                or an entity.
            </description>
            <location chapter="2" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1200</id>
            <description>The ElementCollection, OneToMany, and ManyToMany
                annotations are used to specify the
                map as an element collection or entity relationship as follows:
                when the map value is a basic type or
                embeddable class, the ElementCollection annotation is used; when
                the map value is an entity, the
                OneToMany or ManyToMany annotation is used.
            </description>
            <location chapter="2" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1201</id>
            <description>Bidirectional relationships represented as
                java.util.Map collections support the use of the Map
                datatype on one side of the relationship only.
            </description>
            <location chapter="2" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1202</id>
            <description>If the map key type is a basic type, the MapKeyColumn
                annotation is used to specify the column
                mapping for the map key. If the MapKeyColumn annotation is not
                specified, the default values of the
                MapKeyColumn annotation apply.
            </description>
            <location chapter="2" section="7.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1203</id>
            <description>If the map key type is an embeddable class, the
                mappings for the map key columns are defaulted
                according to the default column mappings for the embeddable
                class. The AttributeOverride and
                AttributeOverrides annotations can be used to override these
                mappings
            </description>
            <location chapter="2" section="7.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1345</id>
            <description>If an embeddable class is used as a map key, the
                embeddable class must implement the hashCode
                and equals methods consistently with the database columns to
                which the embeddable is mapped
            </description>
            <location chapter="2" section="7.1"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1204</id>
            <description>If the map key type is an entity, the MapKeyJoinColumn
                and MapKeyJoinColumns annotations are
                used to specify the column mappings for the map key. If the
                primary key of the referenced entity is a
                simple primary key and the MapKeyJoinColumn annotation is not
                specified, the default values of the
                MapKeyJoinColumn annotation apply.
            </description>
            <location chapter="2" section="7.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1205</id>
            <description>If Java generic types are not used in the declaration
                of a relationship attribute of type
                java.util.Map, the MapKeyClass annotation must be used to
                specify the type of the key of the map.
            </description>
            <location chapter="2" section="7.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1346</id>
            <description>The MapKey annotation is used to specify the special
                case where the map key is itself the
                primary key or a persistent field or property of the entity that
                is the value of the map. The
                MapKeyClass annotation is not used when MapKey is specified.
            </description>
            <location chapter="2" section="7.1"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1347</id>
            <description>When the value type of the map is a basic type or an
                embeddable class, a collection table is
                used to map the map.
            </description>
            <location chapter="2" section="7.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1206</id>
            <description>If Java generic types are not used, the targetClass
                element of the ElementCollection annotation
                must be used to specify the value type for the map. The default
                column mappings for the map value are
                derived according to the default mapping rules for the
                CollectionTable annotation. The Column annotation
                is used to override these defaults for a map value
                of basic type.
            </description>
            <location chapter="2" section="7.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1348</id>
            <description>The AttributeOverride(s) and AssociationOverride(s)
                annotations are used to override the
                mappings for a map value that is an embeddable class.
            </description>
            <location chapter="2" section="7.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1207</id>
            <description>When the value type of the map is an entity, a join
                table is used to map for a many-to-many
                relationship or, by default, for a one-to-many unidirectional
                relationship.
            </description>
            <location chapter="2" section="7.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1208</id>
            <description>If the relationship is a bidirectional
                one-to-many/many-to-one relationship, by default the map
                is mapped in the table of the entity that is the value of the
                map.
            </description>
            <location chapter="2" section="7.2"/>
        </assertion>
        <assertion required="true" impl-spec=" false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1209</id>
            <description>If Java generic types are not used, the targetEntity
                element of the OneToMany or ManyToMany
                annotation must be used to specify the value type for the map.
            </description>
            <location chapter="2" section="7.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:555</id>
            <description>If a persistent field or property other than a
                relationship property is not annotated with a
                mapping annotation, the the following default mappings rules are
                applied in order
            </description>
            <location chapter="2" section="8"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:557</id>
                    <description>If the type is a class that is annotated with
                        the @Embeddable annotation, it is
                        mapped
                        as if the field or property were annotated with the
                        Embedded annotation.
                    </description>
                    <location chapter="2" section="8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:556</id>
                    <description>If the type of the field or property is one of
                        the following, it is mapped in the
                        same
                        way as it would if it were annotated as Basic:
                        Java primitive types, wrappers of primitive types,
                        java.lang.String, java.math.BigInteger,
                        java.math.BigDecimal, java.util.Date,
                        java.util.Calendar,java.sql.Date, java.sql.Time,
                        java.sql.TimeStamp, byte[], Byte[], char[], Character[],
                        enums, any other types that
                        implement
                        Serializable.
                    </description>
                    <location chapter="2" section="8"/>
                </assertion>

                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:560</id>
                    <description>It is an error if no annotation is present and
                        none of the above rules apply.
                    </description>
                    <location chapter="2" section="8"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:561</id>
            <description>If there is an association between two entities, one of
                the following relationship modeling
                annotations must be applied to the corresponding property or
                field of the referencing entity:
            </description>
            <location chapter="2" section="9"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:562</id>
                    <description>OneToOne</description>
                    <location chapter="2" section="9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:563</id>
                    <description>OneToMany</description>
                    <location chapter="2" section="9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:564</id>
                    <description>ManyToOne</description>
                    <location chapter="2" section="9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:565</id>
                    <description>ManyToMany</description>
                    <location chapter="2" section="9"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:566</id>
            <description>For associations that do not specify the targe type
                (e.g., where Java generic types are not
                used for collections) it is necessary to also specify the entity
                that is the target of the relationship.
            </description>
            <location chapter="2" section="9"/>
        </assertion>
        <assertion required="false" impl-spec=" false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1210</id>
            <description>Relationships may be bidirectional or unidirectional.
            </description>
            <location chapter="2" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:567</id>
            <description>A bidirectional relationship has both an owning side
                and an inverse (non-owning)side
            </description>
            <location chapter="2" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:568</id>
            <description>A unidirectional relationship has only an owning
                side.
            </description>
            <location chapter="2" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:569</id>
            <description>The following rules apply to bidirectional
                relationships:
            </description>
            <location chapter="2" section="9"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:570</id>
                    <description>The inverse side of a bidirectional
                        relationship must refer to its owning side by
                        use
                        of the mappedBy element of the OneToOne, OneToMany, or
                        ManyToMany annotation.
                    </description>
                    <location chapter="2" section="9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:571</id>
                    <description>The mappedBy element designates the property or
                        field in the entity that is the
                        owner
                        of the relationship.
                    </description>
                    <location chapter="2" section="9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:572</id>
                    <description>The many side of one-to-many/many-to-one
                        bidirectional relationships must be the
                        owning
                        side, hence the mappedBy element cannot be specified on
                        the ManyToOne annotation.
                    </description>
                    <location chapter="2" section="9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:573</id>
                    <description>For one-to-one bidirectional relationships, the
                        owning side corresponds to the side
                        that contains the corresponding foreign key.
                    </description>
                    <location chapter="2" section="9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:574</id>
                    <description>For many-to-many bidirectional relationships,
                        either side may be the owning side.
                    </description>
                    <location chapter="2" section="9"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:575</id>
            <description>The cascade=REMOVE specification should only be applied
                to associations that are specified as
                OneToOne or OneToMany.
            </description>
            <location chapter="2" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:576</id>
            <description>Applications that apply cascade=REMOVE to other
                assocations are not portable.
            </description>
            <location chapter="2" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1349</id>
            <description>Associations that are specified as OneToOne or
                OneToMany support use of the orphanRemoval
                option. The following behaviors apply when orphanRemoval is in
                effect:
            </description>
            <location chapter="2" section="9"/>
            <sub-assertions>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1349.1</id>
                    <description>If an entity that is the target of the
                        relationship is removed from the
                        relationship
                        (by setting the relationship to null or removing the
                        entity from the relationship
                        collection),
                        the remove operation will be applied to the entity being
                        orphaned. The remove operation is
                        applied at the time of the flush operation. The
                        orphanRemoval functionality is intended for
                        entities that are privately "owned" by their parent
                        entity.
                    </description>
                    <location chapter="2" section="9"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1349.2</id>
                    <description>If the entity being orphaned is a detached,
                        new, or removed entity, the semantics
                        of
                        orphanRemoval do not apply.
                    </description>
                    <location chapter="2" section="9"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1349.3</id>
                    <description>If the remove operation is applied to a managed
                        source entity, the remove operation
                        will be cascaded to the relationship target in
                        accordance with the rules of section 3.2.3,
                        (and
                        hence it is not necessary to specify cascade=REMOVE for
                        the relationship). If the parent is
                        detached or new or was previously removed before the
                        orphan was associated with it, the
                        remove
                        operation is not
                        applied to the entity being orphaned.
                    </description>
                    <location chapter="2" section="9"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="false" impl-spec=" false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1211</id>
            <description>In addition, this specification also requires support
                for the following alternative mapping
                strategies:
            </description>
            <location chapter="2" section="9"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1212</id>
                    <description>The mapping of unidirectional one-to-many
                        relationships by means of foreign key
                        mappings.
                    </description>
                    <location chapter="2" section="9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1214</id>
                    <description>The JoinColumn annotation or corresponding XML
                        element must be used to specify such
                        non-default
                        mappings.
                    </description>
                    <location chapter="2" section="9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1213</id>
                    <description>The mapping of unidirectional and bidirectional
                        one-to-one relationships and
                        bidirectional
                        many-to-one/one-to-many relationships by means of join
                        table mappings.
                    </description>
                    <location chapter="2" section="9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1211.1</id>
                    <description>The JoinTable annotation or corresponding XML
                        element must be used to specify such
                        non-default mappings
                    </description>
                    <location chapter="2" section="9"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:577</id>
            <description>Such mapping annotations must be specified on the
                owning side of the relationship.
                Any overriding of mapping defaults must be consistent with the
                relationship modeling annotation that is
                specified.
            </description>
            <location chapter="2" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1350</id>
            <description>If there are no associated entities for a multi-valued
                relationship of an entity fetched from
                the database, the persistence provider is responsible for
                returning an empty collection as the value of
                the relationship.
            </description>
            <location chapter="2" section="9"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:578</id>
            <description>Assuming that:
                Entity A references a single instance of Entity B.
                Entity B references a single instance of Entity A.
                Entity A is specified as the owner of the relationship.
                The following mapping defaults apply:
                Entity A is mapped to a table named A.
                Entity B is mapped to a table named B.
                Table A contains a foreign key to table B. The foreign key
                column name is formed as the concatenation
                of the following: the name of the relationship property or field
                of entity A; "_"; the
                name of the primary key column in table B. The foreign key
                column has the same type as the
                primary key of table B and there is a unique key constraint on
                it.
            </description>
            <location chapter="2" section="10.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:579</id>
            <description>Assuming that:
                Entity A references a single instance of Entity B.
                Entity B references a collection of Entity A.
                Entity A must be the owner of the relationship.
                The following mapping defaults apply:
                Entity A is mapped to a table named A.
                Entity B is mapped to a table named B.
                Table A contains a foreign key to table B. The foreign key
                column name is formed as the concatenation
                of the following: the name of the relationship property or field
                of entity A; "_"; the name of the
                primary key column in table B. The foreign key column has the
                same type as the
                primary key of table B.
            </description>
            <location chapter="2" section="10.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1351</id>
            <description>When the relationship is modeled as a java.util.Map,
                âEntity B references a collection of
                Entity Aâ means that Entity B references a map collection in
                which the type of the Map value is Entity
                A. The map key may be a basic type, embeddable class, or an
                entity.
            </description>
            <location chapter="2" section="10.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:580</id>
            <description>Assuming that:
                Entity A references a single instance of Entity B.
                Entity B does not reference Entity A.
                A unidirectional relationship has only an owning side, which in
                this case must be Entity A.
                The unidirectional single-valued relationship modeling case can
                be specified as either a unidirectional
                OneToOne or as a unidirectional ManyToOne relationship.
            </description>
            <location chapter="2" section="10.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:581</id>
            <description>The following mapping defaults apply:
                Entity A is mapped to a table named A.
                Entity B is mapped to a table named B.
                Table A contains a foreign key to table B. The foreign key
                column name is formed as the concatenation
                of the following: the name of the relationship property or field
                of entity A; "_"; the
                name of the primary key column in table B. The foreign key
                column has the same type as the
                primary key of table B and there is a unique key constraint on
                it.
            </description>
            <location chapter="2" section="10.3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:582</id>
            <description>The following mapping defaults apply:
                Entity A is mapped to a table named A.
                Entity B is mapped to a table named B.
                Table A contains a foreign key to table B. The foreign key
                column name is formed as the concatenation
                of the following: the name of the relationship property or field
                of entity A; "_"; the
                name of the primary key column in table B. The foreign key
                column has the same type as the
                primary key of table B.
            </description>
            <location chapter="2" section="10.3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:583</id>
            <description>Assuming that:
                Entity A references a collection of Entity B.
                Entity B references a collection of Entity A.
                Entity A is the owner of the relationship.
                The following mapping defaults apply:
                Entity A is mapped to a table named A.
                Entity B is mapped to a table named B.
                There is a join table that is named A_B (owner name first). This
                join table has two foreign key
                columns. One foreign key column refers to table A and has the
                same type as the primary key of
                table A. The name of this foreign key column is formed as the
                concatenation of the following:
                the name of the relationship property or field of entity B; "_";
                the name of the primary key column
                in table A. The other foreign key column refers to table B and
                has the same type as the primary
                key of table B. The name of this foreign key column is formed as
                the concatenation of the
                following: the name of the relationship property or field of
                entity A; "_"; the name of the primary
                key column in table B.
            </description>
            <location chapter="2" section="10.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:584</id>
            <description>Assuming that:
                Entity A references a collection of Entity B.
                Entity B does not reference Entity A.
                A unidirectional relationship has only an owning side, which in
                this case must be Entity A.
                The unidirectional multi-valued relationship modeling case can
                be
            </description>
            <location chapter="2" section="10.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:585</id>
            <description>The following mapping defaults apply:
                Entity A is mapped to a table named A.
                Entity B is mapped to a table named B.
                There is a join table that is named A_B (owner name first). This
                join table has two foreign key
                columns. One foreign key column refers to table A and has the
                same type as the primary key of
                table A. The name of this foreign key column is formed as the
                concatenation of the following:
                the name of entity A; "_"; the name of the primary key column in
                table A. The other foreign
                key column refers to table B and has the same type as the
                primary key of table B and there is a
                unique key constraint on it. The name of this foreign key column
                is formed as the concatenation
                of the following: the name of the relationship property or field
                of entity A; "_"; the name
                of the primary key column in table B.
            </description>
            <location chapter="2" section="10.5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:586</id>
            <description>Entity A is mapped to a table named A.
                Entity B is mapped to a table named B.
                There is a join table that is named A_B (owner name first). This
                join table has two foreign key
                columns. One foreign key column refers to table A and has the
                same type as the primary key of
                table A. The name of this foreign key column is formed as the
                concatenation of the following:
                the name of entity A; "_"; the name of the primary key column in
                table A. The other foreign
                key column refers to table B and has the same type as the
                primary key of table B. The name of
                this foreign key column is formed as the concatenation of the
                following: the name of the relationship
                property or field of entity A; "_"; the name of the primary key
                column in table B.
            </description>
            <location chapter="2" section="10.5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1217</id>
            <description>An entity may inherit from another entity class.
            </description>
            <location chapter="2" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1218</id>
            <description>Entities support inheritance,polymorphic associations,
                and polymorphic queries.
            </description>
            <location chapter="2" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1219</id>
            <description>Both abstract and concrete classes can be entities.
            </description>
            <location chapter="2" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1352</id>
            <description>Both abstract and concrete classes can be annotated
                with the Entity annotation, mapped as
                entities, and queried for as entities.
            </description>
            <location chapter="2" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1220</id>
            <description>Entities can extend non-entity classes and non-entity
                classes can extend entity classes.
            </description>
            <location chapter="2" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1353</id>
            <description>An abstract class can be specified as an entity. An
                abstract entity differs from a concrete
                entity only in that it cannot be directly instantiated.
            </description>
            <location chapter="2" section="11.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:588</id>
            <description>An abstract entity class is annotated with the Entity
                annotation or denoted in the XML
                descriptor as an entity.
            </description>
            <location chapter="2" section="11.1"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:588.1</id>
            <description>An abstract entity is mapped as an entity and can be
                the target of queries (which will operate
                over and/or retrieve instances of its concrete subclass).
            </description>
            <location chapter="2" section="11.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:593</id>
            <description>An entity may inherit from a superclass that provides
                persistent entity state and mapping
                information, but which is not itself an entity.
            </description>
            <location chapter="2" section="11.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:594</id>
            <description>A mapped superclass, unlike an entity, is not queryable
                and must not be passed as an argument
                to
                EntityManager or Query operations.
            </description>
            <location chapter="2" section="11.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1354</id>
            <description>Persistent relationships defined by a mapped superclass
                must be unidirectional.
            </description>
            <location chapter="2" section="11.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:595</id>
            <description>An mapped superclass cannot be the target of a
                persistent relationship.
            </description>
            <location chapter="2" section="11.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:596</id>
            <description>Both abstract or concrete classes may be specified as
                mapped superclasses.
            </description>
            <location chapter="2" section="11.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:597</id>
            <description>The MappedSuperclass annotation (or mapped-superclass
                XML descriptor element) is used to
                designate an mapped superclass.
            </description>
            <location chapter="2" section="11.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:598</id>
            <description>A class designated as an mapped superclass has no
                separate table defined for it. Its mapping
                information is applied to entities that inherit from it.
            </description>
            <location chapter="2" section="11.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:599</id>
            <description>A classes designated as mapped superclass can be mapped
                in the same way as an entity except
                that
                the mapping will only apply to its subclesses since no table
                exists for the mapped superclass. When
                applied to the subclasses the inherited mappings will apply in
                the context of the subclass tables.
            </description>
            <location chapter="2" section="11.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:600</id>
            <description>Mapping information may be overridden in such
                subclasses by using the AttributeOverride and
                AssociationOverride annotations or corresponding XML elements.
            </description>
            <location chapter="2" section="11.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:601</id>
            <description>All other entity mapping defaults apply equally to a
                class designated as mapped superclass.
            </description>
            <location chapter="2" section="11.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:589</id>
            <description>An entity can have a non-entity superclass, which may
                be either a concrete or abstract class.
            </description>
            <location chapter="2" section="11.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:589</id>
                    <description>The superclass must not be an embeddable class
                        or id class.
                    </description>
                    <location chapter="2" section="11.3"/>

                </assertion>
            </sub-assertions>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:590</id>
            <description>The state of a non-entity superclass is not
                persistent.
            </description>
            <location chapter="2" section="11.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:591</id>
            <description>Any state inherited from non-entity superclasses is
                non-persistent in an inheriting entity
                class. This non-persistent state is not managed by the entity
                manager.
            </description>
            <location chapter="2" section="11.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1355</id>
            <description>Any annotations on such superclasses are ignored.
            </description>
            <location chapter="2" section="11.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:592</id>
            <description>Non-entity classes cannot be passed as arguments to
                methods of the EntityManager or Query
                interfaces and cannot bear mapping information.
            </description>
            <location chapter="2" section="11.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:592.1</id>
                    <description>This includes instances of a non-entity class
                        that extends an entity class.
                    </description>
                    <location chapter="2" section="11.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:602</id>
            <description>There are three basic strategies that are used when
                mapping a class or class hierarchy to a
                relational database schema:
            </description>
            <location chapter="2" section="12"/>
            <sub-assertions>
                <assertion required="false" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:603</id>
                    <description>a single table per class hierarchy
                    </description>
                    <location chapter="2" section="12"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:605</id>
                    <description>a joined subclass strategy, in which fields
                        that are specific to a subclass are
                        mapped
                        to a separate table than the fields that are common to
                        the parent class, and a join is
                        performed
                        to instantiate
                        the subclass.
                    </description>
                    <location chapter="2" section="12"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:604</id>
                    <description>a table per concrete entity class</description>
                    <location chapter="2" section="12"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1356</id>
            <description>
                An implementation is required to support the single table per
                class hierarchy inheritance mapping
                strategy and the joined subclass strategy.
            </description>
            <location chapter="2" section="12"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1357</id>
            <description>
                all the classes in a hierarchy are mapped to a single table. The
                table has a column that
                serves as a âdiscriminator columnâ, that is, a column whose
                value identifies the specific subclass to
                which the instance that is represented by the row belongs.
            </description>
            <location chapter="2" section="12.1"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1358</id>
            <description>
                It has the drawback, however, that it requires that the columns
                that correspond to state specific to the
                subclasses be nullable.
            </description>
            <location chapter="2" section="12.1"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1359</id>
            <description>In the joined subclass strategy, the root of the class
                hierarchy is represented by a single
                table. Each subclass
                is represented by a separate table that contains those fields
                that are specific to the subclass (not
                inherited from its superclass), as well as the column(s) that
                represent its primary key. The primary key
                column(s) of the subclass table serves as a foreign key to the
                primary key of the superclass table.
            </description>
            <location chapter="2" section="12.2"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1360</id>
            <description>It has the drawback that it requires that one or more
                join operations be performed to
                instantiate instances of a subclass. In deep class hierarchies,
                this may lead to unacceptable
                performance. Queries that range over the class hierarchy
                likewise require joins.
            </description>
            <location chapter="2" section="12.2"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1361</id>
            <description>
                each class is mapped to a separate table. All properties of the
                class, including inherited properties,
                are mapped to columns of the table for the class.
            </description>
            <location chapter="2" section="12.3"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1362</id>
            <description>This specification requires the following with regard
                to the interpretation of the names
                referencing database
                objects. These names include the names of tables, columns, and
                other database elements. Such
                names also include names that result from defaulting (e.g., a
                table name that is defaulted from an
                entity
                name or a column name that is defaulted from a field or property
                name).
            </description>
            <location chapter="2" section="13"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1363</id>
            <description>
                By default, the names of database objects must be treated as
                undelimited identifiers and passed to the
                database as such.
            </description>
            <location chapter="2" section="13"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1369</id>
            <description>
                To specify delimited identifiers, one of the following
                approaches must be used:
            </description>
            <location chapter="2" section="13"/>
            <sub-assertions>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1369.1</id>
                    <description>
                        It is possible to specify that all database identifiers
                        in use for a persistence unit be
                        treated
                        as
                        delimited identifiers by specifying the
                        <delimited-identifiers/>
                        element within the
                        persistence-unit-defaults element of the
                        object/relational xml mapping file.
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1369.2</id>
                    <description>
                        If the
                        <delimited-identifiers/>
                        element is specified, it cannot be overridden.
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1369.3</id>
                    <description>
                        It is possible to specify on a per-name basis that a
                        name for a database object is to be
                        interpreted
                        as a delimited identifier as follows: Using annotations,
                        a name is specified as a delimited
                        identifier by enclosing the name within double quotes,
                        whereby the inner quotes are escaped
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1369.4</id>
                    <description>
                        It is possible to specify on a per-name basis that a
                        name for a database object is to be
                        interpreted
                        as a delimited identifier as follows: When using XML, a
                        name is specified as a delimited
                        identifier by use of double quotes
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1370</id>
            <description>
                The following annotations contain elements whose values
                correspond to names of database identifiers
                and for which the above rules apply, including when their use is
                nested within that of other
                annotations:
            </description>
            <location chapter="2" section="13"/>
            <sub-assertions>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.1</id>
                    <description>
                        EntityResult (discriminatorColumn element)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.2</id>
                    <description>FieldResult (column element)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.3</id>
                    <description>ColumnResult (name element)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.4</id>
                    <description>CollectionTable (name, catalog, schema
                        elements)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.5</id>
                    <description>Column (name, columnDefinition, table elements)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.6</id>
                    <description>DiscriminatorColumn (name, columnDefinition
                        elements)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.7</id>
                    <description>ForeignKey (name, foreignKeyDefinition
                        elements)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.8</id>
                    <description>Index (name, columnList elements)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.9</id>
                    <description>JoinColumn (name, referencedColumnName,
                        columnDefinition, table elements)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.10</id>
                    <description>JoinTable (name, catalog, schema elements)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.11</id>
                    <description>MapKeyColumn (name, columnDefinition, table
                        elements)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.12</id>
                    <description>MapKeyJoinColumn (name, referencedColumnName,
                        columnDefinition, table elements)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.13</id>
                    <description>NamedStoredProcedureQuery (procedureName
                        element)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.14</id>
                    <description>OrderColumn (name, columnDefinition elements)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.15</id>
                    <description>PrimaryKeyJoinColumn (name,
                        referencedColumnName, columnDefinition elements)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.16</id>
                    <description>
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.17</id>
                    <description>SecondaryTable (name, catalog, schema elements)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.18</id>
                    <description>SequenceGenerator (sequenceName, catalog,
                        schema elements)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.19</id>
                    <description>StoredProcedureParameter (name element)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.20</id>
                    <description>Table (name, catalog, schema elements)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.21</id>
                    <description>TableGenerator (table, catalog, schema,
                        pkColumnName, valueColumnName elements)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1370.22</id>
                    <description>UniqueConstraint (name, columnNames elements)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1371</id>
            <description>
                The following XML elements and types contain elements or
                attributes whose values correspond to
                names of database identifiers and for which the above rules
                apply:
            </description>
            <location chapter="2" section="13"/>
            <sub-assertions>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.1</id>
                    <description>entity-mappings (schema, catalog elements)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.2</id>
                    <description>persistence-unit-defaults (schema, catalog
                        elements)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.3</id>
                    <description>collection-table (name, catalog, schema
                        attributes)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.4</id>
                    <description>column (name, table, column-definition
                        attributes)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.5</id>
                    <description>column-result (name attribute)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.6</id>
                    <description>discriminator-column (name, column-definition
                        attributes)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.7</id>
                    <description>entity-result (discriminator-column attribute)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.8</id>
                    <description>field-result (column attribute)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.9</id>
                    <description>foreign-key (name, foreign-key-definition
                        attributes)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.10</id>
                    <description>index (name attribute, column-list element)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.11</id>
                    <description>join-column (name, referenced-column-name,
                        column-definition, table attributes)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.12</id>
                    <description>join-table (name, catalog, schema attributes)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.13</id>
                    <description>map-key-column (name, column-definition, table
                        attributes)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.14</id>
                    <description>map-key-join-column (name,
                        referenced-column-name, column-definition, table
                        attributes)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.15</id>
                    <description>named-stored-procedure-query (procedure-name
                        attribute)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.16</id>
                    <description>order-column (name, column-definition
                        attributes)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.17</id>
                    <description>primary-key-join-column (name,
                        referenced-column-name, column-definition
                        attributes)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.18</id>
                    <description>secondary-table (name, catalog, schema
                        attributes)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.19</id>
                    <description>sequence-generator (sequence-name, catalog,
                        schema attributes)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.20</id>
                    <description>stored-procedure-parameter (name attribute)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.21</id>
                    <description>table (name, catalog, schema attributes)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.22</id>
                    <description>table-generator (table, catalog, schema,
                        pk-column-name, value-column-name
                        attributes)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1371.23</id>
                    <description>unique-constraint (name attribute, column-name
                        element)
                    </description>
                    <location chapter="2" section="13"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:606</id>
            <description>The persist, merge, remove, and refresh methods must be
                invoked within a transaction
                context when an entity manager with a transaction-scoped
                persistence context is used. If there is no
                transaction context, the
                javax.persistence.TransactionRequiredException is thrown.
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1313</id>
            <description>Methods that specify a lock mode other than
                LockModeType.NONE must be invoked within a
                transaction. If there is no transaction or if the entity manager
                has not been joined to the transaction,
                the javax.persistence.TransactionRequiredException is thrown.
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:607</id>
            <description>The find method (provided it is invoked without a lock
                or invoked with LockModeType.NONE)
                and the getReference method are not required to be invoked
                within a transaction. If an entity manager
                with transaction-scoped persistence context is in use, the
                resulting entities will be detached; if an
                entity manager with an extended persistence context is used,
                they will be managed.
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:608</id>
            <description>The Query, TypedQuery, CriteriaBuilder, Metamodel, and
                EntityTransaction
                objects obtained from an entity manager are valid while that
                entity manager is open.
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:609</id>
            <description>If the argument to the createQuery method is not a
                valid Java Persistence query string or a
                valid
                CriteriaQuery object, the IllegalArgumentException may be thrown
                or the query execution
                will fail and a PersistenceException will be thrown.
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1372</id>
            <description>
                If the result class specification of a Java Persistence query
                language query is incompatible with the
                result
                of the query, the IllegalArgumentException may be thrown when
                the createQuery method is invoked or the
                query
                execution will fail and a PersistenceException will be thrown
                when the query is executed.
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:610</id>
            <description>If a native query is not a valid query for the database
                in use or if the results set
                specification is incompatible with the result of the query, the
                query execution will fail and a
                PersistenceException will be thrown when the query is executed.
                The PersistenceException should wrap the
                underlying database exception when possible.
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:611</id>
            <description>Runtime exceptions thrown by the methods of the
                EntityManager interface other than the Lock-
                TimeoutException will cause the current transaction to be marked
                for rollback if the persistence
                context is joined to that transaction.
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:612</id>
            <description>The methods close, isOpen, joinTransaction and
                getTransaction are used to managed
                application-managed entity managers and their life cycle.
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1373</id>
            <description>A property defined by this specification must be
                observed by the provider unless otherwise
                explicitly stated.
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1374</id>
            <description>A hint specifies a preference on the part of the
                application. While a hint defined by this
                specification should be observed by the provider if possible, a
                hint may or may not always be observed.
                A portable application must not depend on the observance of a
                hint.
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:613</id>
            <description>Entity Instance's Life Cycle:</description>
            <location chapter="3" section="2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:614</id>
                    <description>A new entity instance has no persistent
                        identity and is not yet associated with a
                        persistence context.
                    </description>
                    <location chapter="3" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:615</id>
                    <description>A managed entity instance is an instance with a
                        persistent identity that is
                        currently
                        associated with a persistence context.
                    </description>
                    <location chapter="3" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:616</id>
                    <description>A detached entity is an instance with a
                        persistent identity that is not (or no
                        longer)
                        associated with a persistence context.
                    </description>
                    <location chapter="3" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:617</id>
                    <description>A removed entity instance is an instance with a
                        persistent identity associated with
                        a
                        persistence context that will be removed from the
                        database.
                    </description>
                    <location chapter="3" section="2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1375</id>
            <description>Entity instances are created by means of the new
                operation. An entity instance, when first
                created by new is not yet persistent.
            </description>
            <location chapter="3" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:618</id>
            <description>A new entity instance becomes both managed and
                persistent by
                invoking the persist method on it or by cascading the persist
                operation. The semantics of the persist
                operation, applied to an entity X, are as follows:
            </description>
            <location chapter="3" section="2.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:619</id>
                    <description>If X is a new entity, it becomes managed.
                    </description>
                    <location chapter="3" section="2.2"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:620</id>
                    <description>The entity X will be entered into the database
                        at or before transaction commit or
                        as a
                        result of the flush operation.
                    </description>
                    <location chapter="3" section="2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:621</id>
                    <description>If X is a preexisting managed entity, it is
                        ignored by the persist operation.
                    </description>
                    <location chapter="3" section="2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:622</id>
                    <description>However, the persist operation is cascaded to
                        entities referenced by X, if the
                        relationships from X to these other entities are
                        annotated with the cascade=PERSIST
                        annotation
                        element value or specified with the equivalent XML
                        descriptor element.
                    </description>
                    <location chapter="3" section="2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:623</id>
                    <description>However, the persist operation is cascaded to
                        entities referenced by X, if the
                        relationships from X to these other entities are
                        annotated with the cascade=ALL annotation
                        element value or specified with the equivalent XML
                        descriptor element.
                    </description>
                    <location chapter="3" section="2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:624</id>
                    <description>If X is a removed entity, it becomes managed.
                    </description>
                    <location chapter="3" section="2.2"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:625</id>
                    <description>If X is a detached object, an
                        IllegalArgumentException will be thrown by the
                        persist
                        operation (or the transaction comit will fail).
                    </description>
                    <location chapter="3" section="2.2"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:618.1</id>
                    <description>If X is a detached object, the
                        EntityExistsException may be thrown when the persist
                        operation is invoked
                    </description>
                    <location chapter="3" section="2.2"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:618.2</id>
                    <description>If X is a detached object, the
                        EntityExistsException or another
                        PersistenceException
                        may be thrown at flush or commit time.
                    </description>
                    <location chapter="3" section="2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:626</id>
                    <description>For all entities Y referenced by a relationship
                        from X, if the relationship to Y
                        has
                        been annotated with the cascade element value
                        cascade=PERSIST, the persist operation is
                        applied
                        to Y.
                    </description>
                    <location chapter="3" section="2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:627</id>
                    <description>For all entities Y referenced by a relationship
                        from X, if the relationship to Y
                        has
                        been annotated with the cascade element value
                        cascade=ALL, the persist operation is applied
                        to
                        Y.
                    </description>
                    <location chapter="3" section="2.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:628</id>
            <description>A managed entity instance becomes removed by invoking
                the remove method on it or by cascading
                the remove operation. The semantics of the remove operation,
                applied to an entity X, are as follows:
            </description>
            <location chapter="3" section="2.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:629</id>
                    <description>If X is a new entity, it is ignored by the
                        remove operation.
                    </description>
                    <location chapter="3" section="2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:630</id>
                    <description>However, the remove operation is cascaded to
                        entities referenced by X, if the
                        relationship from X to these other entities is annotated
                        with cascade=REMOVE annotation
                        element.
                    </description>
                    <location chapter="3" section="2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:631</id>
                    <description>However, the remove operation is cascaded to
                        entities referenced by X, if the
                        relationship from X to these other entities is annotated
                        with cascade=ALL annotation
                        element.
                    </description>
                    <location chapter="3" section="2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:632</id>
                    <description>If X is a managed entity, the remove operation
                        causes it to become removed.
                    </description>
                    <location chapter="3" section="2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:633</id>
                    <description>The remove operation is cascaded to entities
                        referenced by X, if the relationship
                        from
                        X to these other entities is annotated with
                        cascade=REMOVE annotation element value.
                    </description>
                    <location chapter="3" section="2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:634</id>
                    <description>The remove operation is cascaded to entities
                        referenced by X, if the relationship
                        from
                        X to these other entities is annotated with cascade=ALL
                        annotation element value.
                    </description>
                    <location chapter="3" section="2.3"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:635</id>
                    <description>If X is a detached entity, an
                        IllegalArgumentException will be thrown by the remove
                        operation (or the transaction commit will fail).
                    </description>
                    <location chapter="3" section="2.3"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:636</id>
                    <description>If X is a removed entity, it is ignored by the
                        remove operation.
                    </description>
                    <location chapter="3" section="2.3"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:637</id>
                    <description>A removed entity X will be removed from the
                        database at or before transaction
                        commit or
                        as a result of the flush operation.
                    </description>
                    <location chapter="3" section="2.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1376</id>
            <description>After an entity has been removed, its state (except for
                generated state) will be that of the
                entity at the point at which the remove operation was called.
            </description>
            <location chapter="3" section="2.3"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1275</id>
            <description>a persistence context of type
                SynchronizationType.UNSYNCHRONIZED or an application-managed
                persistence context that has been created outside the scope of
                the current transaction will only be
                synchronized to the database if it has been joined to the
                current transaction by the applicationâs use
                of the EntityManager joinTransaction method.
            </description>
            <location chapter="3" section="2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:639</id>
            <description>The state of persistent entities is synchronized with
                the database at transaction commit.
            </description>
            <location chapter="3" section="2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1377</id>
            <description>
                An update to the state of an entity includes both the assignment
                of a new value to a persistent property
                or field of the entity as well as the modification of a mutable
                value of a persistent property or field.
                This includes, for example. modifications to persistent
                attributes of type char[] and byte[].
            </description>
            <location chapter="3" section="2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1378</id>
            <description>Synchronization to the database does not involve a
                refresh of any managed entities unless the
                refresh operation is explicitly invoked on those entities or
                cascaded to them as a result of the
                specification of the cascade=REFRESH annotation element value.
            </description>
            <location chapter="3" section="2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1379</id>
            <description>Synchronization to the database does not involve a
                refresh of any managed entities unless the
                refresh operation is explicitly invoked on those entities or
                cascaded to them as a result of the
                specification of the cascade=ALL annotation element value.
            </description>
            <location chapter="3" section="2.4"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:640</id>
            <description>The persistence provider runtime is permitted to
                perform synchronization to the database at
                other times as well when a transaction is active and the
                persistence context is joined to the
                transaction.
            </description>
            <location chapter="3" section="2.4"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1380</id>
            <description>The flush method can be used by the application to
                force synchronization. It applies to
                entities associated with the persistence context.
            </description>
            <location chapter="3" section="2.4"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1314</id>
            <description>The setFlushMode methods of the Entity-
                Manager, Query, TypedQuery, and StoredProcedureQuery interfaces can be
                used to
                control synchronization semantics. If FlushModeType.COMMIT is
                specified, flushing will occur at
                transaction commit; the persistence provider is permitted, but
                not required, to perform to flush at
                other times. If there is no transaction active or if the
                persistence context has not been joined to the
                current transaction, the persistence provider must not flush to
                the database.
            </description>
            <location chapter="3" section="2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:641</id>
            <description>The semantics of the flush operation, applied to entity
                X are as follows:
            </description>
            <location chapter="3" section="2.4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:642</id>
                    <description>If X is a managed entity, it is synchronized to
                        the database.
                    </description>
                    <location chapter="3" section="2.4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:643</id>
                    <description>For all entities Y referenced by a relationship
                        from X, if the relationship to Y
                        has
                        been annotated with the cascade element value
                        cascade=PERSIST, the persist operation is
                        applied
                        to Y.
                    </description>
                    <location chapter="3" section="2.4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:644</id>
                    <description>For all entities Y referenced by a relationship
                        from X, if the relationship to Y
                        has
                        been annotated with the cascade element value
                        cascade=ALL, the persist operation is applied
                        to
                        Y.
                    </description>
                    <location chapter="3" section="2.4"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:645</id>
                    <description>For any entity Y referenced by a relationship
                        from X, where the relationship to Y
                        has
                        not been annotated with the cascade element value
                        cascade=PERSIST or cascade=ALL
                    </description>
                    <location chapter="3" section="2.4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:646</id>
                    <description>If Y is new or removed, an
                        IllegalStateException will be thrown by the flush
                        operation
                        (and the transaction marked for rollback) or the
                        transaction commit will fail.
                    </description>
                    <location chapter="3" section="2.4"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:647</id>
                    <description>If Y is detached, the semantics depend upon the
                        ownership of the relationship. If X
                        owns the relationship, any changes to the relationship
                        are synchronized with the database;
                        otherwise, if Y owns the relationships, the behavior is
                        undefined.
                    </description>
                    <location chapter="3" section="2.4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:648</id>
                    <description>If X is a removed entity, it is removed from
                        the database. No cascade options are
                        relevant
                    </description>
                    <location chapter="3" section="2.4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1222</id>
            <description>The state of a managed entity instance is refreshed
                from the database by invoking the refresh
                method on it or by cascading the refresh operation. The
                semantics of the refresh operation, applied to
                an entity X are as follows:
            </description>
            <location chapter="3" section="2.5"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1223</id>
                    <description>If X is a managed entity, the state of X is
                        refreshed from the database,
                        overwriting
                        changes made to the entity, if any. The refresh
                        operation is cascaded to entities referenced
                        by
                        X, if the relationship from X to these other entities is
                        annotated with the cascade=REFRESH
                        annotation element value.
                    </description>
                    <location chapter="3" section="2.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1222.1</id>
                    <description>If X is a managed entity, the state of X is
                        refreshed from the database,
                        overwriting
                        changes made to the entity, if any. The refresh
                        operation is cascaded to entities referenced
                        by
                        X, if the relationship from X to these other entities is
                        annotated with the cascade=ALL
                        annotation element value.
                    </description>
                    <location chapter="3" section="2.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1222.2</id>
                    <description>If X is a new, detached, or removed entity, the
                        IllegalArgumentException is thrown
                    </description>
                    <location chapter="3" section="2.5"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1224</id>
            <description>An entity instance is removed from the persistence
                context by invoking the detach method on it
                or cascading the detach operation.
            </description>
            <location chapter="3" section="2.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1225</id>
            <description>Changes made to the entity, if any (including removal
                of the entity), will not be synchronized
                to the database after such eviction has taken place.
            </description>
            <location chapter="3" section="2.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1226</id>
            <description>Applications must use the flush method prior to the
                detach method to ensure portable semantics
                if changes have been made to the entity (including removal of
                the entity).
            </description>
            <location chapter="3" section="2.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1227</id>
            <description>portable applications must not assume that changes have
                not been written to the database if the
                flush method has not been called prior to detach.
            </description>
            <location chapter="3" section="2.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1227</id>
            <description>The semantics of the detach operation, applied to an
                entity X are as follows:
            </description>
            <location chapter="3" section="2.6"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1228</id>
                    <description>If X is a managed entity, the detach operation
                        causes it to become detached. The
                        detach
                        operation
                        is cascaded to entities referenced by X, if the
                        relationships from X to these other entities
                        is
                        annotated with the cascade=DETACH annotation element
                        value. Entities which
                        previously
                        referenced X will continue to reference X.
                    </description>
                    <location chapter="3" section="2.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1227.1</id>
                    <description>If X is a managed entity, the detach operation
                        causes it to become detached. The
                        detach
                        operation
                        is cascaded to entities referenced by X, if the
                        relationships from X to these other entities
                        is
                        annotated with the cascade=ALL annotation element value.
                        Entities which
                        previously
                        referenced X will continue to reference X.
                    </description>
                    <location chapter="3" section="2.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1229</id>
                    <description>If X is a new or detached entity,it is ignored
                        by the detach operation.
                    </description>
                    <location chapter="3" section="2.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1230</id>
                    <description>If X is a removed entity, the detach operation
                        is cascaded to entities referenced
                        by X,
                        if the
                        relationships from X to these other entities is
                        annotated with the cascade=DETACH annotation
                        element value. Entities which previously referenced X
                        will continue to reference X.
                        Portable
                        applications should not pass removed entities that have
                        been detached from the persistence
                        context to
                        further EntityManager operations.
                    </description>
                    <location chapter="3" section="2.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1230</id>
                    <description>If X is a removed entity, the detach operation
                        is cascaded to entities referenced
                        by X,
                        if the
                        relationships from X to these other entities is
                        annotated with the cascade=ALL
                        annotation element value. Entities which previously
                        referenced X will continue to reference
                        X.
                        Portable
                        applications should not pass removed entities that have
                        been detached from the persistence
                        context to
                        further EntityManager operations.
                    </description>
                    <location chapter="3" section="2.6"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1381</id>
            <description>
                A detached entity results from transaction commit if a
                transaction-scoped persistence context is used;
                from transaction rollback; from detaching the entity from the
                persistence context; from
                clearing the persistence context; from closing an entity manager
            </description>
            <location chapter="3" section="2.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:657</id>
            <description>A detached entity results
                from serializing an entity or otherwise passing an entity by
                valueâe.g., to a separate application tier,
                through a remote interface, etc.
            </description>
            <location chapter="3" section="2.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1382</id>
            <description>
                Detached entity instances continue to live outside of the
                persistence context in which they were
                persisted
                or retrieved. Their state is no longer guaranteed to be
                synchronized with the database state.
            </description>
            <location chapter="3" section="2.7"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:649</id>
            <description>The application may access the available state of
                available detached entity instances after the
                persistence context ends. The available state includes:
            </description>
            <location chapter="3" section="2.7"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:650</id>
                    <description>Any persistent field or property not marked
                        fetch=LAZY
                    </description>
                    <location chapter="3" section="2.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:651</id>
                    <description>Any persistent field or property that was
                        accessed by the application.
                    </description>
                    <location chapter="3" section="2.7"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:652</id>
            <description>If the persistent field or property is an association,
                the available state of an associated
                instance may only be safely accessed if the associated instance
                is available. The available instances
                include:
            </description>
            <location chapter="3" section="2.7"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:653</id>
                    <description>All entity instances retrieved using find().
                    </description>
                    <location chapter="3" section="2.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:654</id>
                    <description>Any entity instances retrieved using a query or
                        explictly requested ina fetch join
                    </description>
                    <location chapter="3" section="2.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:655</id>
                    <description>Any entity instance for which an instance
                        variable holding non-primary-key
                        persistent
                        state was accessed by the application.
                    </description>
                    <location chapter="3" section="2.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:656</id>
                    <description>Any entity instance that may be reached from
                        another available instance by
                        navigating
                        associations marked fetch=EAGER.
                    </description>
                    <location chapter="3" section="2.7"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:658</id>
            <description>The merge operation allows for the propagation of state
                from detached entities onto persistent
                entities managed by the entity manager. The semantics of the
                merge operation applied to an entity X are
                as follows:
            </description>
            <location chapter="3" section="2.7.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:659</id>
                    <description>If X is a detached entity, the state of X is
                        copied onto a pre-existing managed
                        entity
                        instance X' of the same identity or a new managed copy
                        X' of X is created.
                    </description>
                    <location chapter="3" section="2.7.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:660</id>
                    <description>If X is a new entity instance, a new managed
                        entity instance X' is created and the
                        state of X is copied into the new managed entity
                        instance X'.
                    </description>
                    <location chapter="3" section="2.7.1"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:661</id>
                    <description>If X is a removed entity instance, an
                        IllegalArgumentException will be thrown by
                        the
                        merge operation (or the transaction commit will fail).
                    </description>
                    <location chapter="3" section="2.7.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:662</id>
                    <description>If X is a managed entity, it is ignored by the
                        merge operation, however, the merge
                        operation is cascaded to entities referenced by
                        relationships from X if these relationships
                        have
                        been annotated with the cascade element value
                        cascade=MERGE annotation.
                    </description>
                    <location chapter="3" section="2.7.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:663</id>
                    <description>If X is a managed entity, it is ignored by the
                        merge operation, however, the merge
                        operation is cascaded to entities referenced by
                        relationships from X if these relationships
                        have
                        been annotated with the cascade element value
                        cascade=ALL annotation.
                    </description>
                    <location chapter="3" section="2.7.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:664</id>
                    <description>For all entities Y referenced by relationships
                        from X having the cascade element
                        value
                        cascade=MERGE, Y is merged recursively as Y'. For all
                        such Y referenced by X, X' is set to
                        reference Y'.
                    </description>
                    <location chapter="3" section="2.7.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:665</id>
                    <description>For all entities Y referenced by relationships
                        from X having the cascade element
                        value
                        cascade=ALL, Y is merged recursively as Y'. For all such
                        Y referenced by X, X' is set to
                        reference Y'.
                    </description>
                    <location chapter="3" section="2.7.1"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:658.1</id>
                    <description>If X is an entity merged to X', with a
                        reference to another entity Y, where
                        cascade=MERGE
                        is not specified, then navigation of the same
                        association from X' yields a
                        reference to a managed object Y' with the same
                        persistent identity as Y.
                    </description>
                    <location chapter="3" section="2.7.1"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:658.2</id>
                    <description>If X is an entity merged to X', with a
                        reference to another entity Y, where
                        cascade=ALL
                        is not specified, then navigation of the same
                        association from X' yields a
                        reference to a managed object Y' with the same
                        persistent identity as Y.
                    </description>
                    <location chapter="3" section="2.7.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1383</id>
            <description>The persistence provider must not merge fields marked
                LAZY that have not been fetched: it must
                ignore such fields when merging.
            </description>
            <location chapter="3" section="2.7.1"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:666</id>
            <description>Any Version columns used by the entity must be checked
                by the persistence runtime
                implementation during the merge operation and/or at flush or
                commit time
            </description>
            <location chapter="3" section="2.7.1"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1231</id>
            <description>Serializing entities and merging those entities back
                into a persistence context may not be
                interoperable across vendors when lazy properties or fields
                and/or relationships are used.
            </description>
            <location chapter="3" section="2.7.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1384</id>
            <description>A vendor is required to support the serialization and
                subsequent deserialization and merging of
                detached entity instances (which may contain lazy properties or
                fields and/or relationships that have
                not been
                fetched) back into a separate JVM instance of that vendor's
                runtime, where both runtime instances have
                access to the entity classes and any required vendor persistence
                implementation classes.
            </description>
            <location chapter="3" section="2.7.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1232</id>
            <description>When interoperability across vendors is required, the
                application must not use lazy loading.
            </description>
            <location chapter="3" section="2.7.2"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:667</id>
            <description>The contains method returns true:
            </description>
            <location chapter="3" section="2.8"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:668</id>
                    <description>If the entity has been retrieved from the
                        database or has returned by the
                        getReference,and has not been removed or detached.
                    </description>
                    <location chapter="3" section="2.8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:669</id>
                    <description>If the entity instance is new and the persist
                        method has been called on the entity.
                    </description>
                    <location chapter="3" section="2.8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:670</id>
                    <description>If the entity instance is new and the persist
                        operation has been cascaded to it.
                    </description>
                    <location chapter="3" section="2.8"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:671</id>
            <description>The contains method returns false:
            </description>
            <location chapter="3" section="2.8"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:672</id>
                    <description>If the instance is detached.</description>
                    <location chapter="3" section="2.8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:673</id>
                    <description>If the remove method has been called on the
                        entity.
                    </description>
                    <location chapter="3" section="2.8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:674</id>
                    <description>If the remove operation has been cascaded to
                        it.
                    </description>
                    <location chapter="3" section="2.8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:675</id>
                    <description>If the entity instance is new and the persist
                        method has not been called on the
                        entity.
                    </description>
                    <location chapter="3" section="2.8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:676</id>
                    <description>If the entity instance is new and the persist
                        operation has not been cascaded to
                        it.
                    </description>
                    <location chapter="3" section="2.8"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:677</id>
            <description>Not that the effect of cascading
                persist,merge,remove,or detach is immediately visible to the
                contains method, whereas, the actual
                insertion, modification, or deletion of the database
                representation for the entity may be deferred until
                the end of the transaction.
            </description>
            <location chapter="3" section="2.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1385</id>
            <description>An entity is considered to be loaded if all attributes
                with FetchType.EAGERâwhether explictly
                specified or by defaultâ(including relationship and other
                collection-valued attributes) have been
                loaded from the database or assigned by the application.
            </description>
            <location chapter="3" section="2.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1386</id>
            <description>An attribute that is an embeddable is considered to be
                loaded if the embeddable attribute was
                loaded from the database or assigned by the application, and, if
                the attribute references an embeddable
                instance
                (i.e., is not null), the embeddable instance state is known to
                be loaded (i.e., all attributes of the
                embeddable with FetchType.EAGER have been loaded from the
                database or assigned by the application).
            </description>
            <location chapter="3" section="2.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1387</id>
            <description>A collection-valued attribute is considered to be
                loaded if the collection was loaded from the
                database or the value of the attribute was assigned by the
                application, and, if the attribute references
                a collection
                instance (i.e., is not null), each element of the collection
                (e.g. entity or embeddable) is considered
                to be
                loaded.
            </description>
            <location chapter="3" section="2.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1388</id>
            <description>A single-valued relationship attribute is considered to
                be loaded if the relationship attribute
                was loaded from the database or assigned by the application,
                and, if the attribute references an entity
                instance (i.e.,
                is not null), the entity instance state is known to be loaded.
            </description>
            <location chapter="3" section="2.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1389</id>
            <description>A basic attribute is considered to be loaded if its
                state has been loaded from the database or
                assigned by the application.
            </description>
            <location chapter="3" section="2.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1390</id>
            <description>The PersistenceUtil.isLoaded methods can be used to
                determine the load state of an entity
                and its attributes regardless of the persistence unit with which
                the entity is associated. The
                PersistenceUtil.
                isLoaded methods return true if the above conditions hold
            </description>
            <location chapter="3" section="2.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1391</id>
            <description>The PersistenceUtil.isLoaded methods return false
                otherwise
            </description>
            <location chapter="3" section="2.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1392</id>
            <description>If the persistence unit is known, the
                PersistenceUnitUtil.isLoaded methods can be used instead.
            </description>
            <location chapter="3" section="2.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:678</id>
            <description>The enum PersistenceContextType is used to define
                persistence context lifetime scope for
                container-managed entity managers.
            </description>
            <location chapter="3" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:679</id>
            <description>By default, the lifetime of the persistence context of
                a container-managed entity manager
                corresponds to the scope of a transaction (i.e., it is of type
                PersistenceContextType.TRANSACTION)
            </description>
            <location chapter="3" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:680</id>
            <description>When an extended persistence context is used, the
                extended persistence contexts exists from the
                time the EntityManager instance is created until it is closed.
                This persistence context might span
                multiple transactions and non-transactional invocations of the
                EntityManager.
            </description>
            <location chapter="3" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:681</id>
            <description>An EntityManager with an extended persistence context
                maintains its references to the entity
                objects after a transaction has committed.
                Those objects remain managed by the EntityManager and they may
                be updated as managed objects between
                transactions.
            </description>
            <location chapter="3" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1394</id>
            <description>Note that when a new transaction is begun, the managed
                objects in an extended persistence
                context are not reloaded from the database.
            </description>
            <location chapter="3" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:682</id>
            <description>Navigation from a managed object in an extended
                persistence context results in one or more
                other managed objects regardless of whether a transaction is
                active.
            </description>
            <location chapter="3" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:683</id>
            <description>When an EntityManager with an extended persistence
                context is used, the persist, remove, merge
                and refresh operations may be called regardless of whether a
                transaction is active. The effects of these
                operations will be committed to the database when the extended
                persistence context is entlisted in a
                transaction and the transaction commits.
            </description>
            <location chapter="3" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:684</id>
            <description>The scope of the persistence context of an
                application-managed entity manager is extended. It
                is the responsibility of the application to manage the lifecycle
                of the persistence context.
            </description>
            <location chapter="3" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1276</id>
            <description>By default, a container-managed persistence context is
                of SynchronizationType.SYNCHRONIZED
                and is automatically joined to the current transaction. A
                persistence context of SynchronizationType.
                UNSYNCHRONIZED will not be enlisted in the current transaction,
                unless the
                EntityManager joinTransaction method is invoked.
            </description>
            <location chapter="3" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1315</id>
            <description>By default, an application-managed persistence context
                that is associated with a JTA entity
                manager and
                that is created within the scope of an active transaction is
                automatically joined to that transaction.
                An
                application-managed JTA persistence context that is created
                outside the scope of a transaction or an
                application-managed persistence context of type
                SynchronizationType.UNSYNCHRONIZED
                will not be joined to that transaction unless the EntityManager
                joinTransaction method is
                invoked.
            </description>
            <location chapter="3" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1316</id>
            <description>An application-managed persistence context associated
                with a resource-local entity manager is
                always automatically joined to any resource-local transaction
                that is begun for that entity manager.
            </description>
            <location chapter="3" section="3.1"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:685</id>
            <description>The managed entities of a transaction-scoped
                persistence context become detached when the
                transaction commits.
            </description>
            <location chapter="3" section="3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:686</id>
            <description>The managed entities of an extended persistence context
                remain managed.
            </description>
            <location chapter="3" section="3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:687</id>
            <description>For both transaction-scoped persistence contexts and
                for extended persistence contexts that are
                joined to the current transaction, transaction rollback causes
                all pre-existing managed instances and
                removed instances to become detached.
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1317</id>
            <description>Because a transaction-scoped persistence contextâs
                lifetime is scoped to a transaction
                regardless of whether it is joined to that transaction, the
                container closes the persistence context
                upon transaction rollback. However, an extended persistence
                context that is not joined to a
                transaction is unaffected by transaction rollback
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1395</id>
            <description>Optimistic locking is a technique that is used to
                insure that updates to the database data
                corresponding to the state of an entity are made only when no
                intervening transaction has updated that
                data since the
                entity state was read. This insures that updates or deletes to
                that data are consistent with the current
                state of the database and that intervening updates are not lost.
                Transactions that would cause this
                constraint
                to be violated result in an OptimisticLockException being thrown
                and the transaction
                marked for rollback.
            </description>
            <location chapter="3" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1396</id>
            <description>Portable applications that wish to enable optimistic
                locking for entities must specify Version
                attributes for those entitiesâi.e., persistent properties or
                fields annotated with the Version
                annotation
                or specified in the XML descriptor as version attributes.
            </description>
            <location chapter="3" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:690</id>
            <description>The Version field or property is used by the
                persistence provider to perform optimistic
                locking. It is accessed and/or set by the persistence provider
                in the course of performing lifecycle
                operations on the
                entity instance.
            </description>
            <location chapter="3" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1397</id>
            <description>The Version field or property is used by the
                persistence provider to perform optimistic
                locking. It is accessed and/or set by the persistence provider
                in the course of performing lifecycle
                operations on the
                entity instance.
            </description>
            <location chapter="3" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1398</id>
            <description>An entity may access the state of its version field or
                property or export a method for use by
                the application to access the version, but must not modify the
                version value. Bulk update statements,
                however, are permitted to set the value of version attributes
            </description>
            <location chapter="3" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1399</id>
            <description>With the exception noted in section 4.10, only the
                persistence provider is permitted to set or
                update the value of the version attribute in the object.
            </description>
            <location chapter="3" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1400</id>
            <description>The version attribute is updated by the persistence
                provider runtime when the object is written
                to the database. All non-relationship fields and properties and
                all relationships owned by the entity
                are
                included in version checks. This includes owned relationships
                maintained in join tables
            </description>
            <location chapter="3" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1401</id>
            <description>
                The persistence provider's implementation of the merge operation
                must examine the version attribute
                when an entity is being merged and throw an
                OptimisticLockException if it is discovered that
                the object being merged is a stale copy of the entityâi.e. that
                the entity has been updated since the
                entity became detached. Depending on the implementation strategy
                used, it is possible that this
                exception
                may not be thrown until flush is called or commit time,
                whichever happens first.
            </description>
            <location chapter="3" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1402</id>
            <description>
                The persistence provider runtime is required to use only the
                version attribute when performing
                optimistic
                lock checking.
            </description>
            <location chapter="3" section="4.2"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1403</id>
            <description>
                Persistence provider implementations may provide additional
                mechanisms beside
                version attributes to enable optimistic lock checking. However,
                support for such mechanisms is not
                required of an implementation of this specification.
            </description>
            <location chapter="3" section="4.2"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1404</id>
            <description>
                If only some entities contain version attributes, the
                persistence provider runtime is required to check
                those entities for which version attributes have been specified.
                The consistency of the object graph is
                not guaranteed, but the absence of version attributes on some of
                the entities will not stop operations
                from completing.
            </description>
            <location chapter="3" section="4.2"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1405</id>
            <description>
                Pessimistic locking guarantees that once a transaction has
                obtained a pessimistic lock on an entity
                instance:
            </description>
            <location chapter="3" section="4.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1405.1</id>
                    <description>
                        no other transaction (whether a transaction of an
                        application using the Java Persistence API
                        or
                        any other transaction using the underlying resource) may
                        successfully modify or delete that
                        instance until the transaction holding the lock has
                        ended.
                    </description>
                    <location chapter="3" section="4.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1405.2</id>
                    <description>
                        if the pessimistic lock is an exclusive lock, that same
                        transaction may modify or delete
                        that
                        entity instance.
                    </description>
                    <location chapter="3" section="4.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1406</id>
            <description>
                When an entity instance is locked using pessimistic locking, the
                persistence provider must lock the
                database
                row(s) that correspond to the non-collection-valued persistent
                state of that instance.
            </description>
            <location chapter="3" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1407</id>
            <description>
                If a joined inheritance strategy is used, or if the entity is
                otherwise mapped to a secondary table,
                this entails locking
                the row(s) for the entity instance in the additional table(s).
            </description>
            <location chapter="3" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1408</id>
            <description>
                Entity relationships for which the locked entity contains the
                foreign key will also be locked, but not
                the state of the referenced entities (unless those entities are
                explicitly locked).
            </description>
            <location chapter="3" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1409</id>
            <description>
                Element collections and relationships for which the entity does
                not
                contain the foreign key (such as relationships that are mapped
                to join tables or unidirectional
                one-to-many relationships for which the target entity contains
                the foreign key) will not be locked by
                default.
            </description>
            <location chapter="3" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1410</id>
            <description>
                Element collections and relationships owned by the entity that
                are contained in join tables will be
                locked if the javax.persistence.lock.scope property is specified
                with a value of
                PessimisticLockScope.EXTENDED.
            </description>
            <location chapter="3" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1411</id>
            <description>
                The state of entities referenced by such relationships will not
                be locked (unless those entities are
                explicitly locked).
            </description>
            <location chapter="3" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1412</id>
            <description>
                Locking such a relationship or element collection generally
                locks only the rows in the join table or
                collection
                table for that relationship or collection. This means that
                phantoms will be possible.
            </description>
            <location chapter="3" section="4.3"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1413</id>
            <description>
                This specification does not define the mechanisms a persistence
                provider uses to obtain database locks,
                and a portable application should not rely on how pessimistic
                locking is achieved on the database.[39]
                In
                particular, a persistence provider or the underlying database
                management system may lock more rows
                than the ones selected by the application.
            </description>
            <location chapter="3" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1414</id>
            <description>
                Whenever a pessimistically locked entity containing a version
                attribute is updated on the database, the
                persistence provider must also update (increment) the entity's
                version column to enable correct
                interaction
                with applications using optimistic locking.
            </description>
            <location chapter="3" section="4.3"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1415</id>
            <description>
                Pessimistic locking may be applied to entities that do not
                contain version attributes. However, in this
                case correct interaction with applications using optimistic
                locking cannot be ensured.
            </description>
            <location chapter="3" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:691</id>
            <description>Lock Modes</description>
            <location chapter="3" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1416</id>
            <description>
                If transaction T1 calls lock(entity, LockModeType.OPTIMISTIC) on
                a versioned object, the
                entity manager must ensure that neither of the following
                phenomena can occur:
            </description>
            <location chapter="3" section="4.4.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1416.1</id>
                    <description>
                        P1 (Dirty read): Transaction T1 modifies a row. Another
                        transaction T2 then reads that row
                        and
                        obtains the modified value, before T1 has committed.
                        Transaction T2 eventually
                        commits successfully; it does not matter whether T1
                        commits or rolls back and whether it
                        does
                        so before or after T2 commits.
                    </description>
                    <location chapter="3" section="4.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1416.2</id>
                    <description>
                        P1 (Dirty read): Transaction T1 modifies a row. Another
                        transaction T2 then reads that row
                        and
                        obtains the modified value, before T1 has rolled back.
                        Transaction T2 eventually
                        commits successfully; it does not matter whether T1
                        commits or rolls back and whether it
                        does
                        so before or after T2 commits.
                    </description>
                    <location chapter="3" section="4.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1416.3</id>
                    <description>
                        P2 (Non-repeatable read): Transaction T1 reads a row.
                        Another transaction T2 then modifies
                        that
                        row, before T1 has committed. Both transactions
                        eventually commit successfully.
                    </description>
                    <location chapter="3" section="4.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1416.4</id>
                    <description>
                        P2 (Non-repeatable read): Transaction T1 reads a row.
                        Another transaction T2 then deletes
                        that
                        row, before T1 has committed. Both transactions
                        eventually commit successfully.
                    </description>
                    <location chapter="3" section="4.4.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1417</id>
            <description>
                While with optimistic concurrency concurrency, long-term
                database read locks are typically not
                obtained immediately, a compliant implementation is permitted to
                obtain an immediate lock (so long as
                it is retained until commit completes).
            </description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1418</id>
            <description>
                If the lock is deferred until commit time, it must be retained
                until the commit completes.
            </description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1419</id>
            <description>
                The persistence implementation is not required to support
                calling lock(entity, LockModeType.OPTIMISTIC)
                on a non-versioned object.
            </description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1420</id>
            <description>
                When it cannot support such a lock call, it must throw the
                PersistenceException.
            </description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1421</id>
            <description>
                When supported, whether for versioned or non-versioned objects,
                LockModeType.OPTIMISTIC must always
                prevent the phenomena P1 and P2.
            </description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1422</id>
            <description>
                Applications that call lock(entity, LockModeType.OPTIMISTIC) on
                non-versioned objects will not be
                portable.
            </description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1423</id>
            <description>
                If transaction T1 calls lock(entity,
                LockModeType.OPTIMISTIC_FORCE_INCREMENT) on a versioned object,
                the
                entity manager must avoid the phenomena P1 and P2 (as with
                LockModeType.OPTIMISTIC) and must also force
                an update (increment) to the entity's version column.
            </description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1234</id>
            <description>A forced version update may be performed immediately,
                or may be deferred until a flush or
                commit.
            </description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1424</id>
            <description>
                If an entity is removed before a deferred version update was to
                have been applied, the forced version
                update is omitted.
            </description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1425</id>
            <description>
                The persistence implementation is not required to support
                calling lock(entity,
                LockModeType.OPTIMISTIC_FORCE_INCREMENT) on a non-versioned
                object.
            </description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1426</id>
            <description>
                When it cannot support such a lock call, it must throw the
                PersistenceException.
            </description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1427</id>
            <description>
                When supported, whether for versioned or non-versioned objects,
                LockModeType.OPTIMISTIC_FORCE_INCREMENT
                must always prevent the phenomena P1 and P2.
            </description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1428</id>
            <description>
                For non-versioned objects, whether or not
                LockModeType.OPTIMISTIC_FORCE_INCREMENT has any additional
                behavior is vendor-specific.
            </description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1429</id>
            <description>
                Applications that call lock(entity,
                LockModeType.OPTIMISTIC_FORCE_INCREMENT) on non-versioned
                objects
                will not be portable.
            </description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="false">
            <id>PERSISTENCE:SPEC:1430</id>
            <description>
                For versioned objects, it is permissible for an implementation
                to use
                LockModeType.OPTIMISTIC_FORCE_INCREMENT where
                LockModeType.OPTIMISTIC was requested, but not vice versa.
            </description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="false">
            <id>PERSISTENCE:SPEC:1431</id>
            <description>
                If a versioned object is otherwise updated or removed, then the
                implementation must ensure that the
                requirements of LockModeType.OPTIMISTIC_FORCE_INCREMENT are met,
                even if no explicit
                call to EntityManager.lock was made.
            </description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1236</id>
            <description>For portability, an application should not depend on
                vendor-specific hints or configuration to
                ensure repeatable read for objects that are not updated or
                removed via any mechanism other than the use
                of version attributes and the EntityManager lock method.
            </description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1237</id>
            <description>It should be noted that if an implementation has
                acquired upfront pessimistic locks on some
                database rows, then it is free to ignore lock(entity,
                LockModeType.OPTIMISTIC)) calls on the entity
                objects representing those rows.
            </description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1432</id>
            <description>
                If transaction T1 calls lock(entity,
                LockModeType.PESSIMISTIC_READ) or lock(entity,
                LockModeType.PESSIMISTIC_WRITE)on an object, the entity manager
                must ensure that neither of the
                following phenomena can occur:
            </description>
            <location chapter="3" section="4.4.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1432.1</id>
                    <description>
                        P1 (Dirty read): Transaction T1 modifies a row. Another
                        transaction T2 then reads that row
                        and
                        obtains the modified value, before T1 has committed.
                    </description>
                    <location chapter="3" section="4.4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1432.2</id>
                    <description>
                        P1 (Dirty read): Transaction T1 modifies a row. Another
                        transaction T2 then reads that row
                        and
                        obtains the modified value, before T1 has rolled back.
                    </description>
                    <location chapter="3" section="4.4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1432.3</id>
                    <description>
                        P2 (Non-repeatable read): Transaction T1 reads a row.
                        Another transaction T2 then modifies
                        or
                        deletes that row, before T1 has committed.
                    </description>
                    <location chapter="3" section="4.4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1432.4</id>
                    <description>
                        P2 (Non-repeatable read): Transaction T1 reads a row.
                        Another transaction T2 then modifies
                        or
                        deletes that row, before T1 has rolled back.
                    </description>
                    <location chapter="3" section="4.4.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1433</id>
            <description>
                Any such lock must be obtained immediately and retained until
                transaction T1 completes (commits or rolls
                back).
            </description>
            <location chapter="3" section="4.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1434</id>
            <description>
                The persistence implementation must support calling lock(entity,
                LockModeType.PESSIMISTIC_READ) and
                lock(entity, LockModeType.PESSIMISTIC_WRITE)on a non-versioned
                entity as well as on a versioned entity.
            </description>
            <location chapter="3" section="4.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1435</id>
            <description>
                It is permissible for an implementation to use
                LockModeType.PESSIMISTIC_WRITE where
                LockModeType.PESSIMISTIC_READ was requested, but not vice versa.
            </description>
            <location chapter="3" section="4.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1436</id>
            <description>
                When the lock cannot be obtained, and the database locking
                failure results in transaction-level
                rollback, the provider must throw the PessimisticLockException
                and ensure that the JTA transaction or
                EntityTransaction has been marked for rollback.
            </description>
            <location chapter="3" section="4.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1437</id>
            <description>
                When the lock cannot be obtained, and the database locking
                failure results in only statement-level
                rollback, the provider must throw the LockTimeoutException (and
                must not mark the transaction for
                rollback).
            </description>
            <location chapter="3" section="4.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1438</id>
            <description>
                When an application locks an entity with
                LockModeType.PESSIMISTIC_READ and later updates
                that entity, the lock must be converted to an exclusive lock
                when the entity is flushed to the database.
                If the lock conversion fails, and the database locking failure
                results in transaction-level rollback,
                the
                provider must throw the PessimisticLockException and ensure that
                the JTA transaction or
                EntityTransaction has been marked for rollback. When the lock
                conversion fails, and the database locking
                failure results in only statement-level rollback, the provider
                must throw the LockTimeoutException
                (and must not mark the transaction for rollback).
            </description>
            <location chapter="3" section="4.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1439</id>
            <description>
                When lock(entity, LockModeType.PESSIMISTIC_READ), lock(entity,
                LockModeType.PESSIMISTIC_WRITE), or
                lock(entity, LockModeType.PESSIMISTIC_FORCE_INCREMENT)is invoked
                on a versioned entity that is already
                in the persistence context, the
                provider must also perform optimistic version checks when
                obtaining the lock. An OptimisticLockException
                must be thrown if the version checks fail. Depending on the
                implementation strategy
                used by the provider, it is possible that this exception may not
                be thrown until flush is called or
                commit time, whichever occurs first.
            </description>
            <location chapter="3" section="4.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1440</id>
            <description>
                The persistence implementation is not required to support
                calling lock(entity,
                LockModeType.PESSIMISTIC_FORCE_INCREMENT) on a non-versioned
                object. When it cannot support such a lock
                call, it must throw the PersistenceException.
            </description>
            <location chapter="3" section="4.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1441</id>
            <description>
                When supported, whether for versioned or non-versioned objects,
                LockModeType.PESSIMISTIC_FORCE_INCREMENT
                must always prevent the phenomena P1 and P2.
            </description>
            <location chapter="3" section="4.4.2"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1442</id>
            <description>
                For non-versioned objects, whether or not
                LockModeType.PESSIMISTIC_FORCE_INCREMENT has any additional
                behavior is vendor-specific.
            </description>
            <location chapter="3" section="4.4.2"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1443</id>
            <description>
                Applications that call lock(entity,
                LockModeType.PESSIMISTIC_FORCE_INCREMENT) on non-versioned
                objects
                will not be portable.
            </description>
            <location chapter="3" section="4.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1444</id>
            <description>
                For versioned objects, it is permissible for an implementation
                to use
                LockModeType.PESSIMISTIC_FORCE_INCREMENT where
                LockModeType.PESSIMISTIC_READ or
                LockModeType.PESSIMISTIC_WRITE was requested, but not vice
                versa.
            </description>
            <location chapter="3" section="4.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1445</id>
            <description>
                If a versioned object locked with LockModeType.PESSIMISTIC_READ
                or LockModeType.PESSIMISTIC_WRITE is
                updated, then the implementation must ensure that the
                requirements of
                LockModeType.PESSIMISTIC_FORCE_INCREMENT are met.
            </description>
            <location chapter="3" section="4.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1446</id>
            <description>
                javax.persistence.lock.scope
            </description>
            <location chapter="3" section="4.4.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1446.1</id>
                    <description>
                        This property may be used with the methods of the
                        EntityManager interface that allow lock
                        modes
                        to be specified, the Query.setLockMode method and the
                        NamedQuery annotation. When specified,
                        this property must be observed.
                    </description>
                    <location chapter="3" section="4.4.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1446.2</id>
                    <description>
                        The provider is permitted to lock more (but not fewer)
                        rows than requested.
                    </description>
                    <location chapter="3" section="4.4.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1447</id>
            <description>
                javax.persistence.lock.timeout
            </description>
            <location chapter="3" section="4.4.3"/>
            <sub-assertions>
                <assertion required="false" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1447.1</id>
                    <description>
                        This hint may be used with the methods of the
                        EntityManager interface that allow lock modes
                        to
                        be
                        specified, the Query.setLockMode method and the
                        NamedQuery annotation. It may also be
                        passed as a property to the
                        Persistence.createEntityManagerFactory method and used
                        in the properties element of the persistence.xml file.
                    </description>
                    <location chapter="3" section="4.4.3"/>
                </assertion>
                <assertion required="false" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1447.2</id>
                    <description>
                        When used in the createEntityManagerFactory method, the
                        persistence.
                        xml file, and the NamedQuery annotation, the timeout
                        hint serves as a default value which
                        can be selectively overridden by use in the methods of
                        the EntityManager,
                        Query, and TypedQuery
                        interfaces as
                        specified above.
                    </description>
                    <location chapter="3" section="4.4.3"/>
                </assertion>
                <assertion required="false" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1447.3</id>
                    <description>
                        A timeout value of 0 is used to specify âno waitâ
                        locking
                    </description>
                    <location chapter="3" section="4.4.3"/>
                </assertion>
                <assertion required="false" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1447.4</id>
                    <description>
                        Portable applications should not rely on this hint.
                        Depending on the database in use and the
                        locking
                        mechanisms used by the persistence provider, the hint
                        may or may not be observed.
                    </description>
                    <location chapter="3" section="4.4.3"/>
                </assertion>
                <assertion required="false" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1447.5</id>
                    <description>
                        Vendors are permitted to support the use of additional,
                        vendor-specific locking hints.
                        Vendor-specific
                        hints must not use the javax.persistence namespace.
                        Vendor-specific hints must be ignored if
                        they are not understood.
                    </description>
                    <location chapter="3" section="4.4.3"/>
                </assertion>
                <assertion required="false" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1447.6</id>
                    <description>
                        If the same property or hint is specified more than
                        once, the following order of overriding
                        applies, in
                        order of decreasing precedence:
                        â¢ argument to method of EntityManager EntityManager, Query, or TypedQuery interface
                        â¢ specification to NamedQuery (annotation or XML)
                        â¢ argument to createEntityManagerFactory method
                        â¢ specification in persistence.xml
                    </description>
                    <location chapter="3" section="4.4.3"/>
                </assertion>

            </sub-assertions>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1448</id>
            <description>
                Provider implementations may defer writing to the database until
                the end of the transaction, when
                consistent
                with the lock mode and flush mode settings in effect. In this
                case, an optimistic lock check may
                not occur until commit time, and the OptimisticLockException may
                be thrown in the "before
                completion" phase of the commit. If the OptimisticLockException
                must be caught or handled
                by the application, the flush method should be used by the
                application to force the database writes to
                occur. This will allow the application to catch and handle
                optimistic lock exceptions.
            </description>
            <location chapter="3" section="4.5"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1449</id>
            <description>
                The OptimisticLockException provides an API to return the object
                that caused the exception to
                be thrown. The object reference is not guaranteed to be present
                every time the exception is thrown but
                should be provided whenever the persistence provider can supply
                it. Applications cannot rely upon this
                object being available.
            </description>
            <location chapter="3" section="4.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:692</id>
            <description>OptimisticLockException</description>
            <location chapter="3" section="4.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1450</id>
            <description>
                In some cases an OptimisticLockException will be thrown and
                wrapped by another exception,
                such as a RemoteException, when VM boundaries are crossed.
                Entities that may be referenced in
                wrapped exceptions should implement Serializable so that
                marshalling will not fail.
            </description>
            <location chapter="3" section="4.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:693</id>
            <description>An OptimisticLockException always causes the
                transaction to be marked for roll back.
            </description>
            <location chapter="3" section="4.5"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1316</id>
            <description>A lifecycle callback method can be defined on an entity
                class, a mapped superclass, or an
                entity
                listener class associated with an entity or mapped superclass
            </description>
            <location chapter="3" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1451</id>
            <description>
                An entity listener class is a class whose methods are invoked in
                response to lifecycle events on an
                entity. Any number of entity listener classes can be defined for
                an entity class or mapped superclass.
            </description>
            <location chapter="3" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1317</id>
            <description>Default entity listenersâentity listener classes whose
                callback methods apply to all entities
                in the persistenceunitâcan be specified by means of the XML
                descriptor
            </description>
            <location chapter="3" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:694</id>
            <description>Lifecycle callback methods and entity listener classes
                are defined by means of metadata
                annotations or in the XML descriptor.
            </description>
            <location chapter="3" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:695</id>
            <description>When annotations are used, one or more entity listener
                classes are denoted using the
                EntityListeners annoation on the entity class or mapped
                superclass.
            </description>
            <location chapter="3" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:696</id>
            <description>If multiple entity listeners are defined, the order in
                wihch they are invoked is determined by
                the order in which they are specified in the EntityListeners
                annotation.
            </description>
            <location chapter="3" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:697</id>
            <description>The XML descriptor may be used as an alternative to
                specify the invocation order of the entity
                listeners or to override the order specified in metadata
                annotations..
            </description>
            <location chapter="3" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:698</id>
            <description>Any subset or combination of annotations may be
                specified on an entity class, mapped
                superclass, of listener class.
            </description>
            <location chapter="3" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:699</id>
            <description>A single class may not have more than one lifecycle
                callback method for the same lifecycle
                event. The same method may be used for multiple callback events.
            </description>
            <location chapter="3" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:700</id>
            <description>Multple entity classes and mapped superclasses in an
                inheritance hierarchy may define listener
                classes and/or lifecycle callback methods directly on the class.
            </description>
            <location chapter="3" section="5"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:701</id>
            <description>The entity listener class must have a public no-arg
                constructor.
            </description>
            <location chapter="3" section="5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1318</id>
            <description>Entity listener classes in Java EE environments support
                dependency injection through the
                Contexts and
                Dependency Injection API (CDI) when the CDI is enabled. An entity listener
                class that makes use of CDI injection may also define lifecycle
                callback methods annotated with the
                PostConstruct and PreDestroy annotations. These methods will be
                invoked after injection has
                taken place and before the entity listener instance is destroyed
                respectively.
            </description>
            <location chapter="3" section="5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1452</id>
            <description>The persistence provider is responsible for using the
                CDI SPI to create instances of the entity
                listener
                class; to perform injection upon such instances; to invoke their
                PostConstruct and PreDestroy
                methods, if any; and to dispose of the entity listener
                instances.
            </description>
            <location chapter="3" section="5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1453</id>
            <description>The persistence provider is only required to support
                CDI injection into entity listeners in
                Java EE container
                environments. If the CDI is not enabled,
                the persistence provider must not invoke entity
                listeners that depend upon CDI injection.

                If the containing archive CDI is not a bean archive,
            </description>
            <location chapter="3" section="5.1"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1454</id>
            <description>An entity listener is a noncontextual object. In
                supporting injection into entity listeners,
                the persistence
                provider must behave as if it carries out the following steps
                involving the use of the CDI SPI.
            </description>
            <location chapter="3" section="5.1"/>
            <sub-assertions>
                <assertion required="false" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1454.1</id>
                    <description>Obtain a BeanManager instance.</description>
                    <location chapter="3" section="5.1"/>
                </assertion>
                <assertion required="false" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1454.2</id>
                    <description>Create an AnnotatedType instance for the entity
                        listener class.
                    </description>
                    <location chapter="3" section="5.1"/>
                </assertion>
                <assertion required="false" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1454.3</id>
                    <description>Create an InjectionTarget instance for the
                        annotated type.
                    </description>
                    <location chapter="3" section="5.1"/>
                </assertion>
                <assertion required="false" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1454.4</id>
                    <description>Create a Creational Context.</description>
                    <location chapter="3" section="5.1"/>
                </assertion>
                <assertion required="false" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1454.5</id>
                    <description>Instantiate the listener by calling the
                        InjectionTarget produce method.
                    </description>
                    <location chapter="3" section="5.1"/>
                </assertion>
                <assertion required="false" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1454.6</id>
                    <description>Inject the listener instance by calling the
                        InjectionTarget inject method on the
                        instance.
                    </description>
                    <location chapter="3" section="5.1"/>
                </assertion>
                <assertion required="false" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1454.7</id>
                    <description>Invoke the PostConstruct callback, if any, by
                        calling the InjectionTarget
                        postConstruct
                        method on the instance.
                    </description>
                    <location chapter="3" section="5.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1455</id>
            <description>When the listener instance is to be destroyed, the
                persistence provider must behave as if it
                carries out the following steps.
            </description>
            <location chapter="3" section="5.1"/>
            <sub-assertions>
                <assertion required="false" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1455.1</id>
                    <description>Call the InjectionTarget preDestroy method on
                        the instance.
                    </description>
                    <location chapter="3" section="5.1"/>
                </assertion>
                <assertion required="false" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1455.2</id>
                    <description>Call the InjectionTarget dispose method on the
                        instance.
                    </description>
                    <location chapter="3" section="5.1"/>
                </assertion>
                <assertion required="false" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1455.3</id>
                    <description>Call the CreationalContext release method..
                    </description>
                    <location chapter="3" section="5.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1456</id>
            <description>Persistence providers may optimize the steps above,
                e.g. by avoiding calls to the actual CDI
                SPI and
                relying on container-specific interfaces instead, as long as the
                outcome is the same.
            </description>
            <location chapter="3" section="5.1"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1457</id>
            <description>Entity listeners that do not make use of CDI injection
                are stateless. The lifecycle of such
                entity listeners
                is unspecified.
            </description>
            <location chapter="3" section="5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:707</id>
            <description>When invoked from within a JavaEE environment, the
                callback listener for an entity
                share the enterprise naming context of the invoking component,
                and the entity callback methods
                are invoked in the transaction and security contexts of the
                calling component at the time at
                which the callback method is invoked.
            </description>
            <location chapter="3" section="5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1277</id>
            <description>Entity lifecycle callback methods can be defined on an
                entity listener class and/or directly on
                an entity class or mapped superclass.
            </description>
            <location chapter="3" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1278</id>
            <description>Lifecycle callback methods are annotated with
                annotations designating the callback events for
                which they are invoked or are mapped to the callback event using
                the XML descriptor.
            </description>
            <location chapter="3" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1279</id>
            <description>The annotations (and XML elements) used for callback
                methods on the entity class or mapped
                superclass and for callback methods on the entity listener class
                are the same. The signatures of
                individual
                methods, however, differ.
            </description>
            <location chapter="3" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1280</id>
            <description>Callback methods defined on an entity class or mapped
                superclass have the following signature:
                void &lt;METHOD&gt;()
            </description>
            <location chapter="3" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1281</id>
            <description>Callback methods defined on an entity listener class
                have the following signature: void &lt;METHOD&gt;(Object)
                The Object argument is the entity instance for which the
                callback method is invoked. It may be declared
                as the actual entity type.
            </description>
            <location chapter="3" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1282</id>
            <description>The callback methods can have public, private,
                protected, or package level access, but must not
                be static or final.
            </description>
            <location chapter="3" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:702</id>
            <description>The following rules apply to lifecycle event callback
                methods:
            </description>
            <location chapter="3" section="5.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:703</id>
                    <description>Lifecycle callback methods may throw
                        unchecked/runtime exceptions.
                    </description>
                    <location chapter="3" section="5.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:704</id>
                    <description>A runtime exception thrown by a callback method
                        that executes within a transaction
                        causes that transaction to be marked for rollback if the
                        persistence context is joined to
                        the
                        transaction.
                    </description>
                    <location chapter="3" section="5.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:705</id>
                    <description>Lifecycle callbacks can invoke JNDI, JDBC, JMS,
                        and enterprise beans.
                    </description>
                    <location chapter="3" section="5.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:706</id>
                    <description>In general, the lifecycle method of a portable
                        application should not invoke
                        EntityManager or query operations, access other entity
                        instances, or modify relationships
                        within
                        the same persistence context.
                    </description>
                    <location chapter="3" section="5.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:702.1</id>
                    <description>
                        A lifecycle callback method may modify the
                        non-relationship state of the entity on which it
                        is
                        invoked.
                    </description>
                    <location chapter="3" section="5.2"/>
                </assertion>
            </sub-assertions>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:708</id>
            <description>The PrePersist and PreRemove callback methods are
                invoked for a given entity before the
                respective EntityManager persist and remove operation for that
                entity are executed
            </description>
            <location chapter="3" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:710</id>
            <description>For entities to which the merge operation has been
                applied and causes the creation of newly
                managed instances, the PrePersist callback methods will be
                invoked for the managed instance after the
                entity state has been copied to it.
            </description>
            <location chapter="3" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:709</id>
            <description>These PrePersist and PreRemove callbacks will also be
                invoked on all entities
                to which these operations are cascaded
            </description>
            <location chapter="3" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:711</id>
            <description>The PrePersist and PreRemove callbacks will always be
                invoked as part of the synchronous
                persist, merge, and remove operations.
            </description>
            <location chapter="3" section="5.3"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:712</id>
            <description>The PostPersist and PostRemove callback methods are
                invoked after the entity has been made
                persistent or removed. These callbacks will also be invoked on
                entities to which these operations are
                cascaded.
            </description>
            <location chapter="3" section="5.3"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:713</id>
            <description>The PostPersist and PostRemove methods will be invoked
                after the database insert and delete
                operations respectively.
            </description>
            <location chapter="3" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:714</id>
            <description>These database operations may occur directly after the
                persist, merge, or remove operations
                have been invoked or they may occur directly
                after a flush operation has occurred (which may be at the end of
                the transaction).
            </description>
            <location chapter="3" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:715</id>
            <description>Generated primary key values are available in the
                PostPersist method.
            </description>
            <location chapter="3" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:716</id>
            <description>The PreUpdate and PostUpdate callbacks occur before and
                after the database update operations to
                entity data respectively.
            </description>
            <location chapter="3" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:717</id>
            <description>These database operations may occur at the time the
                entity state is updated or they may occur
                at the time state is flushed to the database (which may be at
                the end of the transaction).
            </description>
            <location chapter="3" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:718</id>
            <description>Note that it is implementation-dependent as to whether
                PreUpdate and PostUpdate callbacks occur
                when an entity is persisted and subsequently modified in a
                single transaction or when an entity is
                modified and subsequently removed within a single transaction.
                Portable applications should not rely on
                such behavior.
            </description>
            <location chapter="3" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:719</id>
            <description>The PostLoad method for an entity is invoked after the
                entity has been loaded into the current
                persistence context from the database
            </description>
            <location chapter="3" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:720</id>
            <description>The PostLoad method is invoked before a query result is
                returned or accessed or before an
                association is traversed.
            </description>
            <location chapter="3" section="5.3"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:721</id>
            <description>It is implementation-dependent as to whether callback
                methods are invoked before or after the
                cascading of the lifecycle events to related entities.
                Applications should not depend on this ordering.
            </description>
            <location chapter="3" section="5.3"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1458</id>
            <description>If multiple callback methods are defined for an entity
                lifecycle event, the ordering of the
                invocation of these methods is as follows.
            </description>
            <location chapter="3" section="5.5"/>
            <sub-assertions>

                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:722</id>
                    <description>Default listeners, if any, are invoked first,
                        in the order specified in the XML
                        descriptor. Default listeners apply to all entities in
                        the persistence unit, unless
                        explicitly
                        excluded by means of the ExcludeDefaultListeners
                        annotation or exclude-default-listeners XML
                        element.
                    </description>
                    <location chapter="3" section="5.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:723</id>
                    <description>The lifecycle callback methods defined on the
                        entity listener classes for an entity
                        class or mapped superclass are invoked in the same order
                        as the specification of the entity
                        listener classes in the EntityListeners annotation.
                    </description>
                    <location chapter="3" section="5.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:724</id>
                    <description>If multiple classes in an inheritance hierarchy
                        - entity classes and/or mapped
                        superclasses - define entity listeners the listeners
                        defined for a superclass are invoked
                        before
                        the listeners and defined for its subclasses in this
                        order.
                    </description>
                    <location chapter="3" section="5.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:725</id>
                    <description>The ExcludeSuperclassListeners annotation or
                        exclude-superclass-listeners XML
                        element
                        may be
                        applied to an
                        entity class or mapped super class to exclude the
                        invocation of the listeners defined by the
                        entity
                        listener classes for the
                        superclasses of the entity or mapped supeclass. The
                        excluded listeners are excluded from the
                        class to
                        which the
                        ExcludeSuperclassListeners annotation is specified and
                        its subclasses.
                    </description>
                    <location chapter="3" section="5.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:726</id>
                    <description>Excluded listeners may reintroduced on an
                        entity class by listing them explicitly
                        in
                        the
                        EntityListeners annotation or XML entity-listeners
                        element.
                    </description>
                    <location chapter="3" section="5.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:727</id>
                    <description>The ExcludeSuperclassListeners annotation or
                        exclude-superclass-listeners XML
                        element)
                        does not
                        cause the default entity listeners to be excluded from
                        invocation.
                    </description>
                    <location chapter="3" section="5.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1458.1</id>
                    <description>If a lifecycle callback method for the same
                        lifecycle event is also specified on
                        the
                        entity class and/or one
                        or more of its entity or mapped superclasses, the
                        callback methods on the entity class
                        and/or
                        superclasses
                        are invoked after the other lifecycle callback methods,
                        most general superclass first.
                    </description>
                    <location chapter="3" section="5.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1458.2</id>
                    <description>A class is
                        permitted to override an inherited callback method of
                        the same callback type, and in this
                        case,
                        the overridden
                        method is not invoked. If a method overrides an
                        inherited callback method but specifies a
                        different lifecycle event or is not a lifecycle callback
                        method,
                        the overridden method will not be invoked
                    </description>
                    <location chapter="3" section="5.5"/>
                </assertion>

            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1459</id>
            <description>
                Callback methods are invoked by the persistence provider runtime
                in the order specified. If the callback
                method execution terminates normally, the persistence provider
                runtime then invokes the next callback
                method, if any.
            </description>
            <location chapter="3" section="5.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1460</id>
            <description>
                The XML descriptor may be used to override the lifecycle
                callback method invocation order specified in
                annotations.
            </description>
            <location chapter="3" section="5.5"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1461</id>
            <description>Lifecycle callback methods may throw runtime
                exceptions. A runtime exception thrown by a
                callback
                method that executes within a transaction causes that
                transaction to be marked for rollback if the
                persistence
                context is joined to the transaction.
            </description>
            <location chapter="3" section="5.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1462</id>
            <description>No further lifecycle callback methods will be invoked
                after a runtime exception is thrown.
            </description>
            <location chapter="3" section="5.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1463</id>
            <description>The XML descriptor can be used as an alternative to
                metadata annotations to specify entity
                listener
                classes and their binding to entities or to override the
                invocation order of lifecycle callback methods
                as
                specified in annotations.
            </description>
            <location chapter="3" section="5.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1464</id>
            <description>The entity-listener XML descriptor element is used to
                specify the lifecycle listener methods of
                an entity listener class. The lifecycle listener methods are
                specified by using the pre-persist,
                post-persist, pre-remove, post-remove, pre-update, post-update,
                and/or
                post-load elements.
            </description>
            <location chapter="3" section="5.8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1465</id>
            <description>An entity listener class can define multiple callback
                methods. However, at most one method of
                an entity
                listener class can be designated as a pre-persist method,
                post-persist method, pre-remove method,
                post-remove method, pre-update method, post-update method,
                and/or post-load method, regardless of
                whether the XML descriptor is used to define entity listeners or
                whether some combination of annotations
                and XML descriptor elements is used.
            </description>
            <location chapter="3" section="5.8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1466</id>
            <description>The entity-listeners subelement of the
                persistence-unit-defaults element is used to
                specify the default entity listeners for the persistence unit.
            </description>
            <location chapter="3" section="5.8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1467</id>
            <description>The entity-listeners subelement of the entity or
                mapped-superclass element is used to
                specify the entity listener classes for the respective entity or
                mapped superclass and its subclasses.
            </description>
            <location chapter="3" section="5.8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1468</id>
            <description>The binding of entity listeners to entity classes is
                additive. The entity listener classes
                bound to the
                superclasses of an entity or mapped superclass are applied to it
                as well.
            </description>
            <location chapter="3" section="5.8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1469</id>
            <description>The exclude-superclass-listeners element specifies that
                the listener methods for superclasses
                are not to be invoked for an entity class (or mapped superclass)
                and its subclasses.
            </description>
            <location chapter="3" section="5.8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1470</id>
            <description>The exclude-default-listeners element specifies that
                default entity listeners are not to be
                invoked for an entity class (or mapped superclass) and its
                subclasses.
            </description>
            <location chapter="3" section="5.8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1471</id>
            <description>Explicitly listing an excluded default or superclass
                listener for a given entity class or
                mapped superclass
                causes it to be applied to that entity or mapped superclass and
                its subclasses.
            </description>
            <location chapter="3" section="5.8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1472</id>
            <description>In the case of multiple callback methods for a single
                lifecycle event, the invocation order
                rules
                described in section 3.5.5 apply.
            </description>
            <location chapter="3" section="5.8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1283</id>
            <description>Managed classes (entities, mapped superclasses, and
                embeddable classes) may be configured to
                include Bean Validation constraints. Automatic validation using
                these constraints is achieved by
                specifying that Java Persistence delegate validation to the Bean
                Validation implementation upon the
                pre-persist, pre-update, and pre-remove
                entity lifecycle events
            </description>
            <location chapter="3" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1284</id>
            <description>Validation can also be achieved by the application
                calling the validate method of a Validator
                instance upon an instance of a managed class, as described in
                the Bean Validation specification
            </description>
            <location chapter="3" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1285</id>
            <description>This specification supports the use of bean validation
                for the automatic validation of entities
                upon the
                pre-persist, pre-update, and pre-remove lifecycle validation
                events.
            </description>
            <location chapter="3" section="6.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1285.1</id>
                    <description>These lifecycle validation events
                        occur immediately after the point at which all the
                        PrePersist, PreUpdate, and PreRemove
                        lifecycle
                        callback method invocations respectively have been
                        completed
                    </description>
                    <location chapter="3" section="6.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1285.2</id>
                    <description>or immediately after the point at
                        which such lifecycle callback methods would have been
                        completed (in the event that such
                        callback
                        methods are not present).
                    </description>
                    <location chapter="3" section="6.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1473</id>
            <description>In the case where an entity is persisted and
                subsequently modified in a single transaction or
                when an entity is modified and subsequently removed in a single
                transaction, it is implementation
                dependent as to whether the pre-update validation event occurs.
            </description>
            <location chapter="3" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1286</id>
            <description>The validation-mode element of the persistence.xml file
                determines whether the automatic
                lifecycle event validation is in effect. The values of the
                validation-mode element are AUTO,
                CALLBACK, NONE. The default validation mode is AUTO.
            </description>
            <location chapter="3" section="6.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1287</id>
            <description>If the application creates the entity manager factory
                using the
                Persistence.createEntityManagerFactory
                method, the validation mode can be specified using the
                javax.persistence.
                validation.mode map key, which will override the value specified
                (or defaulted) in the
                persistence.xml file.
            </description>
            <location chapter="3" section="6.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1474</id>
            <description>The map values for this key are "auto", "callback",
                "none".
            </description>
            <location chapter="3" section="6.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1288</id>
            <description>If the auto validation mode is specified by the
                validation-mode element or the
                javax.persistence.
                validation.mode property, or if neither the validation-mode
                element nor the
                javax.persistence.validation.mode property is specified, and a
                Bean Validation provider
                is present in the environment, the persistence provider must
                perform the automatic validation of
                entities
                as described in section 3.6.1.2.
            </description>
            <location chapter="3" section="6.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1289</id>
            <description>If no Bean Validation provider is present in the
                environment, no lifecycle
                event validation takes place.
            </description>
            <location chapter="3" section="6.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1290</id>
            <description>If the callback validation mode is specified by the
                validation-mode element or the
                javax.persistence.
                validation.mode property, the persistence provider must perform
                the lifecycle event
                validation as described in section 3.6.1.2.
            </description>
            <location chapter="3" section="6.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1291</id>
            <description>It is an error if there is no Bean Validation provider
                present in
                the environment, and the provider must throw the
                PersistenceException if the javax.persistence.
                validation.mode property value "callback" has been passed to the
                Persistence.
                createEntityManagerFactory method.
            </description>
            <location chapter="3" section="6.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1292</id>
            <description>If the none validation mode is specified by the
                validation-mode element or the
                javax.persistence.
                validation.mode property, the persistence provider must not
                perform lifecycle event
                validation.
            </description>
            <location chapter="3" section="6.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1293</id>
            <description>the default Bean Validation group (the group Default)
                will be validated upon
            </description>
            <location chapter="3" section="6.1.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1293.1</id>
                    <description>pre-persist lifecycle validation event
                    </description>
                    <location chapter="3" section="6.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1293.2</id>
                    <description>pre-update lifecycle validation event
                    </description>
                    <location chapter="3" section="6.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1293.3</id>
                    <description>no group will be validated upon the pre-remove
                        event
                    </description>
                    <location chapter="3" section="6.1.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1294</id>
            <description>This default validation behavior can be overridden by
                specifying the target groups using the
                following
                validation properties in the persistence.xml file or by passing
                these properties in the configuration
                of the entity manager factory through the
                createEntityManagerFactory method:
            </description>
            <location chapter="3" section="6.1.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1294.1</id>
                    <description>
                        javax.persistence.validation.group.pre-persist
                    </description>
                    <location chapter="3" section="6.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1294.2</id>
                    <description>javax.persistence.validation.group.pre-update
                    </description>
                    <location chapter="3" section="6.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1294.3</id>
                    <description>javax.persistence.validation.group.pre-remove
                    </description>
                    <location chapter="3" section="6.1.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1295</id>
            <description>The value of a validation property must be a list of
                the targeted groups.
            </description>
            <location chapter="3" section="6.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1475</id>
            <description>A targeted group must be specified by its fully
                qualified class name.
            </description>
            <location chapter="3" section="6.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1476</id>
            <description>Names must be separated by a comma.
            </description>
            <location chapter="3" section="6.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1296</id>
            <description>When one of the above events occurs for an entity, the
                persistence provider must validate that
                entity by
                obtaining a Validator instance from the validator factory in use
                (see section 3.6.2) and invoking its
                validate method with the targeted groups.
            </description>
            <location chapter="3" section="6.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1477</id>
            <description>If the list of targeted groups is empty, no validation
                is performed.
            </description>
            <location chapter="3" section="6.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1297</id>
            <description>If the set of ConstraintViolation objects returned by
                the validate method is not
                empty, the persistence provider must throw the
                jakarta.validation.ConstraintViolation-
                Exception containing a reference to the returned set of
                ConstraintViolation objects, and
                must mark the transaction for rollback if the persistence
                context is joined to the transaction.
            </description>
            <location chapter="3" section="6.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1298</id>
            <description>The validator instance that is used for automatic
                validation upon lifecycle events must use a
                TraversableResolver that has the following behavior:
            </description>
            <location chapter="3" section="6.1.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1298.1</id>
                    <description>Attributes that have not been loaded must not
                        be loaded.
                    </description>
                    <location chapter="3" section="6.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1298.2</id>
                    <description>Validation cascade (@Valid) must not occur for
                        entity associations (single- or
                        multi-valued).
                    </description>
                    <location chapter="3" section="6.1.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1299</id>
            <description>Embeddable attributes must be validated only if the
                Valid annotation has been specified on
                them.
            </description>
            <location chapter="3" section="6.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1300</id>
            <description>It is the responsibility of the persistence provider to
                pass an instance implementing the
                jakarta.validation. TraversableResolver interface to the Bean
                Validation provider by calling
                ValidatorFactory.
                usingContext().traversableResolver(tr).getValidator(), where
                tr is the resolver having the behavior described above.
            </description>
            <location chapter="3" section="6.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1300</id>
            <description>In Java EE environments, a ValidatorFactory instance is
                made available by the Java EE
                container.
                The container is responsible for passing this validator factory
                to the persistence provider via the
                map that is passed as an argument to the
                createContainerEntityManagerFactory call.
            </description>
            <location chapter="3" section="6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1478</id>
            <description>The map key used by the container must be the standard
                property name
                javax.persistence.validation.
                factory.
            </description>
            <location chapter="3" section="6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1301</id>
            <description>In Java SE environments, the application can pass the
                ValidatorFactory instance via the map
                that
                is passed as an argument to the
                Persistence.createEntityManagerFactory call.
            </description>
            <location chapter="3" section="6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1479</id>
            <description>The map key used must be the standard property name
                javax.persistence.validation.factory
            </description>
            <location chapter="3" section="6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1480</id>
            <description>If no ValidatorFactory instance is provided by the
                application, and if a Bean Validation
                provider is
                present in the classpath, the persistence provider must
                instantiate the ValidatorFactory using the
                default bootstrapping approach defined by the Bean Validation
                specification [8], namely
                Validation.buildDefaultValidatorFactory().
            </description>
            <location chapter="3" section="6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2425</id>
            <description>Entity graphs are used in the specification of âfetch
                plansâ for query operations
            </description>
            <location chapter="3" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2426</id>
            <description>Entity graphs are used in the specification of âfetch
                plansâ for find operations
            </description>
            <location chapter="3" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:2427</id>
            <description>Entity graphs are used in the specification of âfetch
                plansâ as specifications
                for the boundaries of merge operations
            </description>
            <location chapter="3" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2429</id>
            <description>The named-entity-graph XML element and its subelements
                may be used to override these
                annotations
                or to define additional named entity graphs.
            </description>
            <location chapter="3" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2430</id>
            <description>An entity graph can be used with the find method
            </description>
            <location chapter="3" section="7.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2431</id>
            <description>An entity graph can be used as a query hint to override
                or augment FetchType semantics
            </description>
            <location chapter="3" section="7.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2432</id>
            <description>The standard properties javax.persistence.fetchgraph
                and javax.persistence.
                loadgraph are used to specify such graphs to queries and find
                operations.
            </description>
            <location chapter="3" section="7.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2433</id>
            <description>The default fetch graph for an entity or embeddable is
                defined to consist of the transitive
                closure of all
                of its attributes that are specified as FetchType.EAGER (or
                defaulted as such)
            </description>
            <location chapter="3" section="7.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2434</id>
            <description>The persistence provider is permitted to fetch
                additional entity state beyond that specified by
                a fetch
                graph or load graph.
            </description>
            <location chapter="3" section="7.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2435</id>
            <description>It is required, however, that the persistence provider
                fetch all state specified by the
                fetch or load graph.
            </description>
            <location chapter="3" section="7.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2436</id>
            <description>When the javax.persistence.fetchgraph property is used
                to specify an entity graph,
                attributes that are specified by attribute nodes of the entity
                graph are treated as FetchType.EAGER
                and attributes that are not specified are treated as
                FetchType.LAZY.
            </description>
            <location chapter="3" section="7.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2437</id>
            <description>A primary key or version attribute never needs to be
                specified in an attribute node of a fetch
                graph.
                (This applies to composite primary keys as well, including
                embedded id primary keys.)
            </description>
            <location chapter="3" section="7.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2438</id>
            <description>When an entity
                is fetched, its primary key and version attributes are always
                fetched. It is not incorrect, however, to
                specify primary key attributes or version attributes
            </description>
            <location chapter="3" section="7.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2439</id>
            <description>Attributes other than primary key and version
                attributes are assumed not to be fetched unless
                the
                attribute is specified.
            </description>
            <location chapter="3" section="7.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2440</id>
            <description>The following rules apply to the specification of
                attributes.
            </description>
            <location chapter="3" section="7.4.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2440.1</id>
                    <description>If the attribute is an embedded attribute, and
                        the attribute is specified in an
                        attribute node, but a
                        subgraph is not specified for the attribute, the default
                        fetch graph for the embeddable is
                        fetched. If a subgraph is specified for the attribute,
                        the attributes of the embeddable are
                        fetched
                        according to their specification in the corresponding
                        subgraph.
                    </description>
                    <location chapter="3" section="7.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2440.2</id>
                    <description>If the attribute is an element collection of
                        basic type, and the attribute is specified
                        in an
                        attribute node, the element collection together with its
                        basic elements is fetched.
                    </description>
                    <location chapter="3" section="7.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2440.3</id>
                    <description>If the attribute is an element collection of
                        embeddables, and the attribute is
                        specified in an
                        attribute node, but a subgraph is not specified for the
                        attribute, the element collection
                        together
                        with the default fetch graph of its embeddable elements
                        is fetched. If a subgraph is specified
                        for the attribute, the attributes of the embeddable
                        elements are fetched according to the
                        corresponding
                        subgraph specification.
                    </description>
                    <location chapter="3" section="7.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2440.4</id>
                    <description>If the attribute is a one-to-one or many-to-one
                        relationship, and the attribute is
                        specified in an
                        attribute node, but a subgraph is not specified for the
                        attribute, the default fetch graph of
                        the
                        target entity is fetched. If a subgraph is specified for
                        the attribute, the attributes of the
                        target
                        entity are fetched according to the corresponding
                        subgraph specification.
                    </description>
                    <location chapter="3" section="7.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2440.5</id>
                    <description>If the attribute is a one-to-many or
                        many-to-many relationship, and the attribute is
                        specified in
                        an attribute node, but a subgraph is not specified, the
                        collection is fetched and the default
                        fetch
                        graphs of the referenced entities are fetched. If a
                        subgraph is specified for the attribute, the
                        entities in the collection are fetched according to the
                        corresponding subgraph specification.
                    </description>
                    <location chapter="3" section="7.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2440.6</id>
                    <description>If the key of a map which has been specified in
                        an attribute node is a basic type, it
                        is fetched. If
                        the key of a map which has been specified in an
                        attribute node is an embedded type, the default
                        fetch graph is fetched for the embeddable. Otherwise, if
                        the key of the map is an entity, and a
                        map key subgraph is not specified for the attribute
                        node, the map key is fetched according to
                        its
                        default fetch graph. If a key subgraph is specified for
                        the map key attribute, the map key
                        attribute is fetched according to the map key subgraph
                        specification.
                    </description>
                    <location chapter="3" section="7.4.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2441</id>
            <description>When the javax.persistence.loadgraph property is used
                to specify an entity graph, attributes
                that are specified by attribute nodes of the entity graph are
                treated as FetchType.EAGER and
                attributes that are not specified are treated according to their
                specified or default FetchType.
            </description>
            <location chapter="3" section="7.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2442</id>
            <description>The following rules apply. The rules of this section
                are applied recursively.
            </description>
            <location chapter="3" section="7.4.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2442.1</id>
                    <description>A primary key or version attribute never needs
                        to be specified in an attribute node of
                        a load
                        graph. (This applies to composite primary keys as well,
                        including embedded id primary keys.)
                        When an entity is fetched, its primary key and version
                        attributes are always fetched. It is not
                        incorrect, however, to specify primary key attributes or
                        version attributes.
                    </description>
                    <location chapter="3" section="7.4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2442.2</id>
                    <description>If the attribute is an embedded attribute, and
                        the attribute is specified in an
                        attribute node, but a
                        subgraph is not specified for the attribute, the default
                        fetch graph for the embeddable is
                        fetched. If a subgraph is specified for the attribute,
                        attributes that are specified by the
                        subgraph
                        are also fetched.
                    </description>
                    <location chapter="3" section="7.4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2442.3</id>
                    <description>If the attribute is an element collection of
                        basic type, and the attribute is specified
                        in an
                        attribute node, the element collection together with its
                        basic elements is fetched.
                    </description>
                    <location chapter="3" section="7.4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2442.4</id>
                    <description>If the attribute is an element collection of
                        embeddables, and the attribute is
                        specified in an
                        attribute node, the element collection together with the
                        default fetch graph of its embeddable
                        elements is fetched. If a subgraph is specified for the
                        attribute, attributes that are specified
                        by
                        the subgraph are also fetched.
                    </description>
                    <location chapter="3" section="7.4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2442.5</id>
                    <description>If the attribute is a one-to-one or many-to-one
                        relationship, and the attribute is
                        specified in an
                        attribute node, the default fetch graph of the target
                        entity is fetched. If a subgraph is
                        specified
                        for the attribute, attributes that are specified by the
                        subgraph are also fetched.
                    </description>
                    <location chapter="3" section="7.4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2442.6</id>
                    <description>If the attribute is a one-to-many or
                        many-to-many relationship, and the attribute is
                        specified in
                        an attribute node, the collection is fetched and the
                        default fetch graphs of the referenced
                        entities
                        are fetched. If a subgraph is specified for the
                        attribute, attributes that are specified by the
                        subgraph are also fetched
                    </description>
                    <location chapter="3" section="7.4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2442.7</id>
                    <description>If the key of a map which has been specified in
                        an attribute node is a basic type, it
                        is fetched. If
                        the key of a map which has been specified in an
                        attribute node is an embedded type, the default
                        fetch graph is fetched for the embeddable. Otherwise, if
                        the key of the map is an entity, the
                        map key is fetched according to its default fetch graph.
                        If a key subgraph is specified for the
                        map key attribute, additional attributes are fetched as
                        specified in the key subgraph.
                    </description>
                    <location chapter="3" section="7.4.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:2443</id>
            <description>An entity graph may be used as a âmerge graphâ and
                passed as an argument to the merge method.
            </description>
            <location chapter="3" section="7.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:2444</id>
            <description>A merge graph attribute node specified within an entity
                graph or subgraph specifies how an attribute is
                to be merged. Primary key and version attributes do not need to
                be specified in the merge graph. If
                other attributes are not specified, they are not merged. Note
                that cascade=MERGE specifications are
                ignored.
            </description>
            <location chapter="3" section="7.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:2445</id>
            <description>The persistence provider must observe the scope and
                boundaries of a merge graph specification exactly.
            </description>
            <location chapter="3" section="7.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:2446</id>
            <description>The following additional rules apply for attributes
                that are specified in attribute nodes. These rules are
                applied recursively.
            </description>
            <location chapter="3" section="7.5"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2446.1</id>
                    <description>If the attribute is an embedded attribute and a
                        subgraph is not specified for the attribute, the
                        embedded attribute is merged but the attributes of the
                        embeddable are not merged. If a subgraph
                        is specified for the attribute, the attributes of the
                        embeddable are merged according to
                        their specification in the corresponding subgraph.
                    </description>
                    <location chapter="3" section="7.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2446.2</id>
                    <description>If the attribute is an element collection of
                        basic type, the element collection is merged. The
                        values in the element collection are replaced.
                    </description>
                    <location chapter="3" section="7.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2446.3</id>
                    <description>If the attribute is an element collection of
                        embeddables and a subgraph is not specified for the
                        attribute, the element collection is merged. The values
                        in the element collection are replaced
                        and all attributes of the embeddables are included. If a
                        subgraph is specified for the attribute,
                        the values in the element collection are replaced and
                        all attributes of the embeddables are
                        included, and the attributes specified in the subgraph
                        are processed according to the subgraph
                        specification.
                    </description>
                    <location chapter="3" section="7.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2446.4</id>
                    <description>If the attribute is a one-to-one or many-to-one
                        relationship and a subgraph is not specified for
                        the attribute, the attribute is merged, but the
                        attributes of the target entity are not merged. If a
                        subgraph is specified for the attribute, the attributes
                        of the target entity are merged according to
                        the corresponding subgraph specification.
                    </description>
                    <location chapter="3" section="7.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2446.5</id>
                    <description>If the attribute is a one-to-many or
                        many-to-many relationship and a subgraph is not
                        specified
                        for the attribute, the attribute is merged, but the
                        attributes of the target entity are not merged. If
                        a subgraph is specified for the attribute, the entities
                        in the collection are merged according to
                        the corresponding subgraph specification.
                    </description>
                    <location chapter="3" section="7.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2446.6</id>
                    <description>In both of the two relationship cases above,
                        note that if a new entity (entity in the ânewâ state)
                        was added to the relationship and only a subset of its
                        attributes is specified in the subgraph,
                        only those specified attributes are copied.
                    </description>
                    <location chapter="3" section="7.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2446.7</id>
                    <description>If the attribute is a map, the map key is
                        merged. If the map key is an embeddable, all attributes
                        of the embeddable are included. If the map key is an
                        entity, the attribute is merged, but the
                        attributes of the target entity are not merged. If a
                        subgraph is specified for the attribute, the target
                        entity is merged according to the corresponding subgraph
                        specification.
                    </description>
                    <location chapter="3" section="7.5"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:2447</id>
            <description>An entity graph may be used as a âcopy graphâ and
                passed as an argument to the copy method.
            </description>
            <location chapter="3" section="7.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:2448</id>
            <description>When
                using an entity graph in combination with the copy method, a
                copy of the entity is created and the
                attributes of the copied entity are populated based on copies of
                the attributes listed in the entity graph.
            </description>
            <location chapter="3" section="7.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:2449</id>
            <description>The persistence provider must observe the scope and
                boundaries of a copy graph specification exactly.
            </description>
            <location chapter="3" section="7.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:2450</id>
            <description>The following rules apply to the specification of
                attributes. The rules of this section are applied recursively.
            </description>
            <location chapter="3" section="7.6"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2450.1</id>
                    <description>Primary key and version attributes are always
                        copied. Attributes are otherwise not copied
                        unless they are specified.
                    </description>
                    <location chapter="3" section="7.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2450.2</id>
                    <description>If the attribute is an embedded attribute and
                        an attribute node is specified for the attribute, but a
                        subgraph is not specified, a new instance of the
                        embeddable is inserted into the resulting copy
                        of the entity graph, but no state is copied. If a
                        subgraph is specified for the attribute, the
                        attributes of the embeddable are copied according to
                        their specification in the corresponding
                        subgraph.
                    </description>
                    <location chapter="3" section="7.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2450.3</id>
                    <description>If the attribute is an element collection of
                        basic type, the element collection and its contents are
                        copied.
                    </description>
                    <location chapter="3" section="7.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2450.4</id>
                    <description>If the attribute is an element collection of
                        embeddables and an attribute node is specified for
                        the attribute, but a subgraph is not specified, a new
                        collection is created and new embeddable
                        instances are inserted into it, but no state is copied.
                        If a subgraph is specified for the attribute,
                        the embeddables are copied according to their
                        specification in the subgraph.
                    </description>
                    <location chapter="3" section="7.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2450.5</id>
                    <description>If the attribute is a one-to-one or many-to-one
                        relationship and an attribute node is specified for
                        the attribute, but a subgraph is not specified, a copy
                        of the entity is created and inserted. Only
                        the primary key and version attributes of the entity are
                        copied. If a subgraph is specified for
                        the attribute, a copy of the entity is created and
                        inserted and the attributes of the target entity
                        are copied according to the corresponding subgraph
                        specification along with the primary key
                        and version attributes.
                    </description>
                    <location chapter="3" section="7.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2450.6</id>
                    <description>If the attribute is a one-to-many or
                        many-to-many relationship and an attribute node is
                        specified
                        for the attribute, but a subgraph is not specified, a
                        new collection is created and inserted,
                        and copies of the referenced entities are created and
                        inserted into the collection. Only the primary
                        key and version attributes of these entities are copied.
                        If a subgraph is specified for the
                        attribute, the entities in the collection are copied
                        according to the corresponding subgraph
                        specification along with the primary key and version
                        attributes.
                    </description>
                    <location chapter="3" section="7.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2450.7</id>
                    <description>If the attribute is a map and an attribute node
                        has been specified for the attribute:
                        â¢ If the map key is a basic type, it is copied.
                        â¢ If the map key is an embedded attribute, a new
                        instance of the embeddable is inserted
                        but no state is copied.
                        â¢ If the map key is an entity, a copy of the entity is
                        created, and only the primary key
                        and version attributes of the entity are copied.
                        â¢ If a map key subgraph is specified for the embeddable
                        or entity, the attributes of the
                        target are copied according to the corresponding map key
                        subgraph specification.
                    </description>
                    <location chapter="3" section="7.6"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1481</id>
            <description>Converters can be used to convert basic attributes
                defined by entity classes, mapped
                superclasses, or embeddable classes
            </description>
            <location chapter="3" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1482</id>
            <description>An attribute converter must implement the
                javax.persistence.AttributeConverter interface.
            </description>
            <location chapter="3" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1483</id>
            <description>A converter implementation class must be</description>
            <location chapter="3" section="8"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1483.1</id>
                    <description>annotated with the Converter annotation
                    </description>
                    <location chapter="3" section="8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1483.2</id>
                    <description>defined in the XML descriptor as a converter.
                    </description>
                    <location chapter="3" section="8"/>
                </assertion>

            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1484</id>
            <description>
                If the value of the autoApply element of the Converter
                annotation is true, the converter will be applied
                to all attributes of the target type, including to basic
                attribute values that are contained within
                other, more complex attribute types.
            </description>
            <location chapter="3" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1485</id>
            <description>The conversion of all basic types is supported except
                for the following:
            </description>
            <location chapter="3" section="8"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1485.1</id>
                    <description>Id attributes (including
                        the attributes of embedded ids and derived identities)
                    </description>
                    <location chapter="3" section="8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1485.2</id>
                    <description>version attributes</description>
                    <location chapter="3" section="8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1485.3</id>
                    <description>relationship attributes</description>
                    <location chapter="3" section="8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1485.4</id>
                    <description>attributes explicitly annotated as Enumerated
                    </description>
                    <location chapter="3" section="8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1485.5</id>
                    <description>attributes explicitly annotated as Temporal
                    </description>
                    <location chapter="3" section="8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1485.6</id>
                    <description>
                        attributes explicitly designated as such in the XML
                        descriptor
                    </description>
                    <location chapter="3" section="8"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1486</id>
            <description>Auto-apply converters will not be applied to such
                attributes, and applications that apply
                converters to such attributes through use of the Convert
                annotation will not be portable.
            </description>
            <location chapter="3" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1487</id>
            <description>Type conversion may be specified at the level of
                individual attributes by means of the Convert
                annotation.
            </description>
            <location chapter="3" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1488</id>
            <description>The Convert annotation may also be used to override or
                disable an auto-apply conversion.
            </description>
            <location chapter="3" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1489</id>
            <description>The Convert annotation may be applied directly to an
                attribute of an ... to specify conversion
                of the attribute or to override the use of a converter that has
                been specified as autoApply=true.
            </description>
            <location chapter="3" section="8"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1489.1</id>
                    <description>entity</description>
                    <location chapter="3" section="8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1489.2</id>
                    <description>mapped superclass</description>
                    <location chapter="3" section="8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1489.3</id>
                    <description>embeddable class</description>
                    <location chapter="3" section="8"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1490</id>
            <description>When persistent properties are used, the Convert
                annotation is applied to the getter method.
            </description>
            <location chapter="3" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1491</id>
            <description>
                The Convert annotation may be applied to an entity that extends
                a mapped superclass to specify or
                override the conversion mapping for an inherited basic or
                embedded attribute.
            </description>
            <location chapter="3" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1492</id>
            <description>
                The persistence provider runtime is responsible for invoking the
                specified conversion methods for the
                target attribute type when loading the entity attribute from the
                database and before storing the entity
                attribute state to the database.
            </description>
            <location chapter="3" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1493</id>
            <description>
                The persistence provider must apply any conversion methods to
                instances of attribute values in path expressions used within
                Java Persistence query language queries or criteria queries
                (such as in comparisons, bulk updates, etc.)
                before sending them to the database for the query execution.
            </description>
            <location chapter="3" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2486</id>
            <description>When such converted attributes are used in comparison
                operations with literals or parameters, the value of the literal
                or parameter to which they are compared must also be converted
            </description>
            <location chapter="3" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1494</id>
            <description>
                If the result of a Java Persistence query language query or
                criteria query includes one or more entity
                attributes for which conversion mappings have been specified,
                the persistence provider must apply the
                specified conversions to the corresponding values in the query
                result before returning them to the
                application.
            </description>
            <location chapter="3" section="8"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2487</id>
            <description>The use of functions, including aggregates, on
                converted attributes is undefined.
            </description>
            <location chapter="3" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1495</id>
            <description>
                If an exception is thrown from a conversion method, the
                persistence provider must wrap
                the exception in a PersistenceException and, if the persistence
                context is joined to a transaction, mark
                the transaction for rollback.
            </description>
            <location chapter="3" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1496</id>
            <description>A value of ALL causes all entities and entity-related
                state and data to be cached.
            </description>
            <location chapter="3" section="9.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1497</id>
            <description>A value of NONE causes caching to be disabled for the
                persistence unit. Persistence providers
                must not
                cache if NONE is specified.
            </description>
            <location chapter="3" section="9.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1498</id>
            <description>The values ENABLE_SELECTIVE and DISABLE_SELECTIVE are
                used in conjunction with the
                Cacheable annotation (or XML element). The Cacheable annotation
                specifies whether an entity
                should be cached if such selective caching is enabled by the
                persistence.xml shared-cache-mode element.
                The Cacheable element is specified on the entity class. It
                applies to the given entity and its
                subclasses
                unless subsequently overridden by a subclass.
            </description>
            <location chapter="3" section="9.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1498.1</id>
                    <description>Cacheable(false) means that the entity and its
                        state must not be cached by the
                        provider.
                    </description>
                    <location chapter="3" section="9.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1498.2</id>
                    <description>A value of ENABLE_SELECTIVE enables the cache
                        and causes entities for which
                        Cacheable(
                        true) (or its XML equivalent) is specified to be cached.
                        Entities for which Cacheable(true)
                        is
                        not specified or for which Cacheable(false) is specified
                        must not be
                        cached.
                    </description>
                    <location chapter="3" section="9.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1498.3</id>
                    <description>A value of DISABLE_SELECTIVE enables the cache
                        and causes all entities to be cached
                        except those for which Cacheable(false) is specified.
                        Entities for which Cacheable(false) is
                        specified must not be cached.
                    </description>
                    <location chapter="3" section="9.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1499</id>
            <description>If either the shared-cache-mode element is not
                specified in the persistence.xml file or the
                value of the shared-cache-mode element is UNSPECIFIED, and the
                javax.persistence.sharedCache.mode
                property is not specified, the behavior is not defined, and
                provider-specific defaults may apply.
            </description>
            <location chapter="3" section="9.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1500</id>
            <description>If the shared-cache-mode element and the
                javax.persistence.sharedCache.mode property are not
                specified, the semantics of the Cacheable annotation (and XML
                equivalent) are undefined.
            </description>
            <location chapter="3" section="9.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1501</id>
            <description>Cache retrieve mode and cache store mode properties may
                be specified at the level of the
                persistence
                context by means of the EntityManager setProperty method.
            </description>
            <location chapter="3" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1502</id>
            <description>These properties may be specified for
                the EntityManager find and refresh methods and the Query, TypedQuery, and StoredProcedureQuery setHint methods.
            </description>
            <location chapter="3" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1503</id>
            <description>Cache retrieve mode and/or cache store mode properties
                specified for the find, refresh, and
                Query and TypedQuery, and StoredProcedureQuery setHint methods override those specified
                for the persistence context for the
                specified find and refresh invocations, and for the execution of
                the specified queries respectively.
            </description>
            <location chapter="3" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1504</id>
            <description>If caching is disabled by the NONE value of the
                shared-cache-mode element, cache retrieve mode
                and cache store mode properties must be ignored.
            </description>
            <location chapter="3" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1505</id>
            <description>if the ENABLE_SELECTIVE value is specified, but
                Cacheable(true) is not specified for a
                particular entity, they are ignored for that entity; if the
                DISABLE_SELECTIVE value is specified, they
                are ignored for any entities for which Cacheable(false) is
                specified.
            </description>
            <location chapter="3" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1506</id>
            <description>Cache retrieve mode and cache store mode properties
                must be observed when caching is enabled,
                regardless of whether caching is enabled due to the
                specification of the shared-cache-mode element or
                enabled due to provider-specific options.
            </description>
            <location chapter="3" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1507</id>
            <description>Java Persistence query language queries are executed
                using the getResultList method.
            </description>
            <location chapter="3" section="10.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1508</id>
            <description>Java Persistence query language queries are executed
                using the getSingleResult method.
            </description>
            <location chapter="3" section="10.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1509</id>
            <description>Criteria API queries are executed using the
                getResultList method.
            </description>
            <location chapter="3" section="10.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1510</id>
            <description>Criteria API queries are executed using the
                getSingleResult method.
            </description>
            <location chapter="3" section="10.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1511</id>
            <description>native SQL select queries are executed using the
                getResultList method.
            </description>
            <location chapter="3" section="10.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1512</id>
            <description>native SQL select queries are executed using the
                getSingleResult method.
            </description>
            <location chapter="3" section="10.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1513</id>
            <description>For TypedQuery instances, the query result type is
                determined in the case of criteria queries
                by the type of the query specified when the CriteriaQuery object
                is created,
            </description>
            <location chapter="3" section="10.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1514</id>
            <description>In the case of Java Persistence query language queries,
                the type of the result is determined by
                the
            </description>
            <location chapter="3" section="10.7"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1514.1</id>
                    <description>resultClass argument to the createQuery method
                        and the select list of the query
                        must
                        contain only a
                        single item which must be assignable to the specified
                        type.
                    </description>
                    <location chapter="3" section="10.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1514.2</id>
                    <description>resultClass argument to the createNamedQuery
                        method and the select list of the
                        query
                        must contain only a
                        single item which must be assignable to the specified
                        type.
                    </description>
                    <location chapter="3" section="10.7"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:728</id>
            <description>For Query instances
            </description>
            <location chapter="3" section="10.7"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:728.1</id>
                    <description>the elements of a query result whose select
                        list consists of more than one select
                        expression are of type Object[].
                    </description>
                    <location chapter="3" section="10.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:728.2</id>
                    <description>If the select list consists of only one select
                        expression, the elements of the
                        query
                        result are of type Object
                    </description>
                    <location chapter="3" section="10.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:728.3</id>
                    <description>When native SQL queries are used, the SQL
                        result set mapping, determines how many
                        items
                        (entities, scalar values, etc.) are returned.
                    </description>
                    <location chapter="3" section="10.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:728.4</id>
                    <description>If multiple items are returned, the elements of
                        the query result are of type
                        Object[]
                    </description>
                    <location chapter="3" section="10.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:728.5</id>
                    <description>If only a single item is returned as a result
                        of the SQL result set mapping, the
                        elements of the query result are of type Object.
                    </description>
                    <location chapter="3" section="10.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:728.6</id>
                    <description>
                        if a result class is specified, the elements of the
                        query result are of type Object.
                    </description>
                    <location chapter="3" section="10.7"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1515</id>
            <description>Stored procedure queries can be executed using the
                getResultList, getSingleResult, and
                execute methods.
            </description>
            <location chapter="3" section="10.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1516</id>
            <description>Stored procedures that perform only updates or deletes
                can be executed using the executeUpdate
                method.
            </description>
            <location chapter="3" section="10.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:729</id>
            <description>An IllegalArgumentException is thrown if:</description>
            <location chapter="3" section="10.7"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:730</id>
                    <description>a parameter name is specified that does not
                        correspond to a named parameter of the
                        query.
                    </description>
                    <location chapter="3" section="10.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:731</id>
                    <description>a positional value is specified that does not
                        correspond to a positional parameter
                        of
                        the query.
                    </description>
                    <location chapter="3" section="10.7"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:732</id>
                    <description>If the type of the parameter is not valid for
                        the query.
                    </description>
                    <location chapter="3" section="10.7"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:733</id>
                    <description>This exception may be thrown when the parameter
                        is bound, or the execution of the
                        query
                        may fail.
                    </description>
                    <location chapter="3" section="10.7"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1517</id>
            <description>The use of setMaxResults and setFirstResult is not
                supported for stored procedure queries.
            </description>
            <location chapter="3" section="10.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1518</id>
            <description>Query methods other than the executeUpdate method are
                not required to be
                invoked within a transaction context, unless a lock mode other
                than LockModeType.NONE has been
                specified for the query.
            </description>
            <location chapter="3" section="10.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1519</id>
            <description>TypedQuery methods other than the executeUpdate method
                are not required to be
                invoked within a transaction context, unless a lock mode other
                than LockModeType.NONE has been
                specified for the query.
            </description>
            <location chapter="3" section="10.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1520</id>
            <description>the getResultList method are not required to be invoked
                within a transaction context unless
                such a lock mode has been specified for the
                query.
            </description>
            <location chapter="3" section="10.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1521</id>
            <description>the getSingleResult method are not required to be
                invoked within a transaction context unless
                such a lock mode has been specified for the
                query.
            </description>
            <location chapter="3" section="10.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1522</id>
            <description>If an entity manager with transaction-scoped
                persistence context is in use, the resulting
                entities
                will be detached
            </description>
            <location chapter="3" section="10.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1523</id>
            <description>if an entity manager with an extended persistence
                context is used, they will be managed.
            </description>
            <location chapter="3" section="10.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1524</id>
            <description>Runtime exceptions other than the NoResultException,
                NonUniqueResultException,
                QueryTimeoutException, and LockTimeoutException thrown by the
                methods of the Query, TypedQuery, and
                StoredProcedureQuery interfaces other than those methods
                specified below cause the current transaction
                to be marked for rollback if the persistence context is joined
                to the transaction.
            </description>
            <location chapter="3" section="10.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1302</id>
            <description>
                Runtime exceptions thrown by the following methods of the Query,
                TypedQuery, and StoredProcedureQuery
                interfaces do not cause the current transaction to be marked for
                rollback:
            </description>
            <location chapter="3" section="10.7"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1302.1</id>
                    <description>getParameters</description>
                    <location chapter="3" section="10.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1302.2</id>
                    <description>getParameter</description>
                    <location chapter="3" section="10.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1302.3</id>
                    <description>getParameterValue</description>
                    <location chapter="3" section="10.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1302.4</id>
                    <description>getOutputParameterValue</description>
                    <location chapter="3" section="10.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1302.5</id>
                    <description>getLockMode</description>
                    <location chapter="3" section="10.7"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1303</id>
            <description>Runtime exceptions thrown by the methods of the Tuple,
                TupleElement, and Parameter interfaces
                do not cause the current transaction to be marked for rollback.
            </description>
            <location chapter="3" section="10.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1525</id>
            <description>If the persistence context has not been joined to the
                current transaction, the persistence
                provider must
                not flush to the database regardless of the flush mode setting.
            </description>
            <location chapter="3" section="10.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1526</id>
            <description>If there is no transaction active, the persistence
                provider must not flush to the database.
            </description>
            <location chapter="3" section="10.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1527</id>
            <description>The setLockMode method of the Query or TypedQuery
                interface or the lockMode element of
                the NamedQuery annotation may be used to lock the results of a
                query.
            </description>
            <location chapter="3" section="10.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1528</id>
            <description>A lock is obtained for each entity specified in the
                query result (including entities passed to
                constructors in the query SELECT clause).
            </description>
            <location chapter="3" section="10.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1529</id>
            <description>Note that the setLockMode method may be called more
                than once (with different values) on a
                Query or
                TypedQuery object.
            </description>
            <location chapter="3" section="10.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1530</id>
            <description>If the lock mode type is PESSIMISTIC_READ,
                PESSIMISTIC_WRITE, or
                PESSIMISTIC_FORCE_INCREMENT, and the query returns scalar data
                (e.g., the values of entity
                field or properties, including scalar data passed to
                constructors in the query SELECT clause), the
                underlying database rows will be locked[50], but the version
                columns (if any) for any entities
                corresponding to
                such scalar data will not be updated unless the entities
                themselves are also otherwise retrieved and
                updated.
            </description>
            <location chapter="3" section="10.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1531</id>
            <description>If the lock mode type is PESSIMISTIC_READ,
                PESSIMISTIC_WRITE, or
                PESSIMISTIC_FORCE_INCREMENT, and the query returns scalar data
                (e.g., the values of entity
                field or properties, including scalar data passed to
                constructors in the query SELECT clause), the
                underlying database rows will be locked[50], but the version
                columns (if any) for any entities
                corresponding to
                such scalar data will not be updated unless the entities
                themselves are also otherwise retrieved and
                updated.
            </description>
            <location chapter="3" section="10.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1532</id>
            <description>Note that locking will not occur for data passed to
                aggregate functions.
            </description>
            <location chapter="3" section="10.9"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1533</id>
            <description>queries involving aggregates with pessimistic locking
                may not be supported on all database
                platforms.
            </description>
            <location chapter="3" section="10.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1534</id>
            <description>If the lock mode type is OPTIMISTIC or
                OPTIMISTIC_FORCE_INCREMENT, and the query returns
                scalar data, any entities returned by the query will be locked,
                but no locking will occur for scalar
                data that does not correspond to the state of any entity
                instance in the query result.
            </description>
            <location chapter="3" section="10.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1535</id>
            <description>If a lock mode other than NONE is specified for a
                query, the query must be executed within a
                transaction (and the persistence context must be joined to the
                transaction) or the
                TransactionRequiredException
                will be thrown.
            </description>
            <location chapter="3" section="10.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1536</id>
            <description>Locking is supported for Java Persistence query
                language queries and criteria queries only.
            </description>
            <location chapter="3" section="10.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1537</id>
            <description>If the setLockMode or getLockMode method is invoked on
                a query that is not a Java Persistence
                query language select query or a criteria query, the
                IllegalStateException may be thrown or the query
                execution will fail.
            </description>
            <location chapter="3" section="10.9"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1538</id>
            <description>This entire section is optional
            </description>
            <location chapter="3" section="10.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:734</id>
            <description>Parameter objects can be used for criteria queries and
                for Java Persistence query language
                queries.
            </description>
            <location chapter="3" section="10.11"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1539</id>
            <description>Implementations may support the use of Parameter
                objects for native queries, however support
                for
                Parameter objects with native queries is not required by this
                specification.
            </description>
            <location chapter="3" section="10.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1305</id>
            <description>Named parameters can be used for Java Persistence query
                language queries, for criteria queries
                (although use of Parameter objects is to be preferred), and for
                stored procedure queries that support
                named parameters.
            </description>
            <location chapter="3" section="10.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1306</id>
            <description>Named parameters are case-sensitive.
            </description>
            <location chapter="3" section="10.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1540</id>
            <description>A named parameter of a Java Persistence query language
                query is an identifier that is prefixed
                by the ":" symbol.
            </description>
            <location chapter="3" section="10.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1307</id>
            <description>The parameter names passed to the setParameter methods
                of the Query and TypedQuery interfaces
                do not include this ":" prefix
            </description>
            <location chapter="3" section="10.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1308</id>
            <description>Only positional parameter binding and positional access
                to result items may be portably used
                for native
                queries, except for stored procedure queries for which named
                parameters have been defined.
            </description>
            <location chapter="3" section="10.13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1309</id>
            <description>When binding the values of positional parameters, the
                numbering starts as â1â. It is assumed
                that for native
                queries the parameters themselves use the SQL syntax (i.e., â?â,
                rather than â?1â).
            </description>
            <location chapter="3" section="10.13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1311</id>
            <description>Named queries are static queries expressed in metadata
                or queries registered by means of the
                EntityManagerFactory addNamedQuery method. Named queries can be
                defined in the Java Persistence query
                language
                or in SQL.
            </description>
            <location chapter="3" section="10.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1312</id>
            <description>Query names are scoped to the persistence unit.
            </description>
            <location chapter="3" section="10.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:735</id>
            <description>By default, all queries are polymorphic. By default,
                all queries are polymorphic. That is, the
                FROM clause of a query designates not only instances of the
                specific entity class(es) to which it
                explicitly refers, but subclasses as well. The
                instances returned by a query include instances of the
                subclasses that satisfy the query conditions
            </description>
            <location chapter="3" section="10.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1541</id>
            <description>Entity type expressions, described in section 4.6.17.5,
                as well as the use of downcasting,
                described in
                section 4.4.9, can be used to restrict query polymorphism.
            </description>
            <location chapter="3" section="10.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1542</id>
            <description>Queries may be expressed in native SQL. The result of a
                native SQL query may consist of
                entities,
                unmanaged instances created via constructors, scalar values, or
                some combination of these.
            </description>
            <location chapter="3" section="10.16"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:736</id>
            <description>The SQL query facility is intended to provide support
                for those cases where it is necessary to
                use the native SQL of the target database in use (and/or where
                Java Persistence QL cannot be used).
                Native SQL queries are not expected to be portable across
                databases.
            </description>
            <location chapter="3" section="10.16"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1543</id>
            <description>mapping includes the mapping of the attributes of any
                embeddable classes that are part of the non-collection-valued
                entity state and attributes corresponding
                to
                foreign keys contained as part of the entity state
            </description>
            <location chapter="3" section="10.16.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1544</id>
            <description>Support for joins is currently limited to single-valued
                relationships that are mapped
                directlyâi.e., not via join tables.
            </description>
            <location chapter="3" section="10.16.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1545</id>
            <description>When an entity is to be returned from a native query,
                the SQL statement should select all of
                the columns
                that are mapped to the entity object. This should include
                foreign key columns to related entities.
            </description>
            <location chapter="3" section="10.16.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1546</id>
            <description>when the results of the query are limited to entities
                of a single entity class and
                the mapping information can be derived from the columns of the
                SQL result and the object/relational
                mapping metadataâit is sufficient to specify only the expected
                class of the entity result.
            </description>
            <location chapter="3" section="10.16.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1547</id>
            <description>When multiple entities are returned by a SQL query or
                when the column names of the SQL result
                do not
                correspond to those of the object/relational mapping metadata, a
                SqlResultSetMapping metadata
                definition must be provided to specify the entity mapping.
            </description>
            <location chapter="3" section="10.16.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1548</id>
            <description>When the column names of the SQL result do not
                correspond to those of the object/relational
                mapping
                metadata, more explicit SQL result mapping metadata must be
                provided to enable the persistence provider
                runtime to map the JDBC results into the expected objects. This
                might arise, for example, when
                column aliases must be used in the SQL SELECT clause when the
                SQL result would otherwise contain
                multiple columns of the same name or when columns in the SQL
                result are the results of operators or
                functions. The FieldResult annotation element within the
                EntityResult annotation is used to
                specify the mapping of such columns to entity attributes.
            </description>
            <location chapter="3" section="10.16.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1549</id>
            <description>When the returned entity type contains an embeddable
                class, the FieldResult element must use a
                dot (â.â) notation to indicate which column maps to which field
                or property of the contained embeddable.
            </description>
            <location chapter="3" section="10.16.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1550</id>
            <description>When the returned entity type is the owner of a
                single-valued relationship and the foreign key
                is a composite
                foreign key (composed of multiple columns), a FieldResult
                element should be used for each of the foreign
                key columns. The FieldResult element must use the dot (â.â)
                notation form to indicate the column that
                maps to each property or field of the target entity primary key.
            </description>
            <location chapter="3" section="10.16.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1551</id>
            <description>If the target entity has a primary key of type IdClass,
                this specification takes the form of
                the name of
                the field or property for the relationship, followed by a dot
                (â.â), followed by the name of the field
                or property of the primary key in the target entity. The latter
                will be annotated with Id, as specified
                in section 11.1.19.
            </description>
            <location chapter="3" section="10.16.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1552</id>
            <description>If the target entity has a primary key of type
                EmbeddedId, this specification is composed of
                the name
                of the field or property for the relationship, followed by a dot
                (â.â), followed by the name or the
                field or
                property of the primary key (i.e., the name of the field or
                property annotated as EmbeddedId), followed
                by the name of the corresponding field or property of the
                embedded primary key class.
            </description>
            <location chapter="3" section="10.16.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1553</id>
            <description>The FieldResult elements for the composite foreign key
                are combined to form the primary key
                EmbeddedId class for the target entity. This may then be used to
                subsequently retrieve the entity if the
                relationship is to be eagerly loaded.
            </description>
            <location chapter="3" section="10.16.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1554</id>
            <description>The dot-notation form is not required to be supported
                for any usage other than for embeddables,
                composite
                foreign keys, or composite primary keys.
            </description>
            <location chapter="3" section="10.16.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1555</id>
            <description>Instances of other classes (including non-managed
                entity instances) as well as scalar results
                can be
                returned by a native query. These can be used singly, or in
                combination, including with entity results.
            </description>
            <location chapter="3" section="10.16.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1556</id>
            <description>Scalar results can be included in the query result by
                specifying the ColumnResult annotation
                element
                of the SqlResultSetMapping annotation. The intended type of the
                result can be specified using the type
                element of the ColumnResult annotation.
            </description>
            <location chapter="3" section="10.16.2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1557</id>
            <description>The mapping to constructors is specified using the
                ConstructorResult annotation element of the
                SqlResultSetMapping annotation. The targetClass element of the
                ConstructorResult
                annotation specifies the class whose constructor corresponds to
                the specified columns. All columns
                corresponding to arguments of the intended constructor must be
                specified using the columns element of
                the ConstructorResult annotation in the same order as that of
                the argument list of the constructor.
                Any entities returned as constructor results will be in either
                the new or the detached state, depending
                on whether a primary key is retrieved for the constructed
                object.
            </description>
            <location chapter="3" section="10.16.2.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1558</id>
            <description>When a SqlResultSetMapping specifies more than one
                mapping type (i.e., more than one of
                EntityResult, ConstructorResult, ColumnResult), then for each
                row in the SQL result,
                the query execution will result in an Object[] instance whose
                elements are as follows, in order:
            </description>
            <location chapter="3" section="10.16.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1558.1</id>
                    <description>any entity results (in the order in which they
                        are defined in the entities
                        element);
                    </description>
                    <location chapter="3" section="10.16.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1558.2</id>
                    <description>any instances of classes corresponding to
                        constructor results (in the order defined
                        in
                        the classes element);
                    </description>
                    <location chapter="3" section="10.16.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1558.3</id>
                    <description>and any instances corresponding to column
                        results (in the order defined in the
                        columns
                        element).
                    </description>
                    <location chapter="3" section="10.16.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1559</id>
            <description>If there are any columns whose result mappings have not
                been specified, they are ignored.
            </description>
            <location chapter="3" section="10.16.3"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:737</id>
            <description>The use of named parameters is not defined for native
                SQL queries. Only positional parameter
                binding for SQL queries may be used by portable applications.
            </description>
            <location chapter="3" section="10.16.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1560</id>
            <description>Stored procedures can be specified either by means of
                the NamedStoredProcedureQuery annotation
                or dynamically.
            </description>
            <location chapter="3" section="10.17"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1561</id>
            <description>A stored procedure may return more than one result set.
            </description>
            <location chapter="3" section="10.17.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1562</id>
            <description>the mapping of result sets can be specified either in
                terms of a resultClasses or as a
                resultSetMappings annotation element.
            </description>
            <location chapter="3" section="10.17.1"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1563</id>
            <description>If there are multiple result sets, it is assumed that
                they will be mapped using the same
                mechanism â e.g., all via a set of result class mappings or all
                via a set of result set mappings. The
                order of the specification of these mappings must be the same as
                the order in which the result sets will
                be returned by the stored procedure invocation.
            </description>
            <location chapter="3" section="10.17.1"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1564</id>
            <description>If the stored procedure returns one or more result sets
                and no resultClasses or
                resultSetMappings element has been specified, any result set
                will be returned as a list of type
                Object[].
            </description>
            <location chapter="3" section="10.17.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1565</id>
            <description>StoredProcedureParameter metadata needs to be provided
                for all parameters.
            </description>
            <location chapter="3" section="10.17.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1566</id>
            <description>Parameters must be specified in the order in which they
                occur in the parameter list of the
                stored procedure.
            </description>
            <location chapter="3" section="10.17.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1567</id>
            <description>If parameter names are used, the parameter name is used
                to bind the parameter value and to
                extract the output value (if the parameter is an INOUT or OUT
                parameter).
            </description>
            <location chapter="3" section="10.17.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1568</id>
            <description>If parameter names are not specified, it is assumed
                that positional parameters are used.
            </description>
            <location chapter="3" section="10.17.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1569</id>
            <description>If the stored procedure is not defined using metadata,
                parameter and result set information
                must be provided
                dynamically.
            </description>
            <location chapter="3" section="10.17.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1570</id>
            <description>All parameters of a dynamically-specified stored
                procedure query must be registered using the
                registerStoredProcedureParameter method of the
                StoredProcedureQuery interface.
            </description>
            <location chapter="3" section="10.17.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1571</id>
            <description>Result set mapping information can be provided by means
                of the createStoredProcedure-
                Query method.
            </description>
            <location chapter="3" section="10.17.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1572</id>
            <description>The setParameter methods are used to set the values of
                all required IN and INOUT parameters. It
                is not required to set the values of stored procedure parameters
                for which default values have been
                defined by the stored procedure.
            </description>
            <location chapter="3" section="10.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1573</id>
            <description>The case where there is only a single result set (or a
                single result) plus any results passed
                back via
                INOUT and OUT parameters is supported using the getResultList
                and getSingleResult
                methods.
            </description>
            <location chapter="3" section="10.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1574</id>
            <description>The case where there is only an update count plus any
                results passed back via INOUT and OUT
                parameters
                is supported using the executeUpdate method.
            </description>
            <location chapter="3" section="10.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1575</id>
            <description>The execute method supports both the simple case where
                scalar results are passed back only via
                INOUT and OUT parameters as well as the most general case
                (multiple result sets and/or update counts,
                possibly also in combination with output parameter values).
            </description>
            <location chapter="3" section="10.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1576</id>
            <description>The execute method returns true if the first result is
                a result set, and false if it is an
                update count
                or there are no results other than through INOUT and OUT
                parameters, if any.
            </description>
            <location chapter="3" section="10.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1577</id>
            <description>If the execute method returns true, the pending result
                set can be obtained by calling
                getResultList.
            </description>
            <location chapter="3" section="10.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2496</id>
            <description>If the execute method returns true, the pending result
                set can be obtained by calling
                getSingleResult.
            </description>
            <location chapter="3" section="10.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1578</id>
            <description>The hasMoreResults method can then be used to test for
                further results.
            </description>
            <location chapter="3" section="10.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1579</id>
            <description>If execute or hasMoreResults returns false, the
                getUpdateCount method can be called to
                obtain the pending result if it is an update count.
            </description>
            <location chapter="3" section="10.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1580</id>
            <description>The getUpdateCount method will return either the
                update count (zero or greater) or -1 if there is no update count
                (i.e., either the next result is a
                result set or
                there is no next update count).
            </description>
            <location chapter="3" section="10.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2497</id>
            <description>For portability, results that correspond to JDBC result sets and update counts need to be processed
                before the values of any INOUT or OUT parameters are extracted.
            </description>
            <location chapter="3" section="10.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1581</id>
            <description>After results returned through getResultList and
                getUpdateCount have been exhausted,
                results returned through INOUT and OUT parameters can be
                retrieved.
            </description>
            <location chapter="3" section="10.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1582</id>
            <description>results that correspond to JDBC result sets and update
                counts need to be processed
                before the values of any INOUT or OUT parameters are extracted.
            </description>
            <location chapter="3" section="10.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2498</id>
            <description>The getOutputParameterValue methods are used to retrieve the values passed back from the
                procedure through INOUT and OUT parameters.
            </description>
            <location chapter="3" section="10.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2499</id>
            <description>When using REF_CURSOR parameters for result sets, the update counts should be exhausted before
                calling getResultList to retrieve the result set.
            </description>
            <location chapter="3" section="10.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2500</id>
            <description>Alternatively, the REF_CURSOR result set can be retrieved through getOutputParameterValue.
            </description>
            <location chapter="3" section="10.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2501</id>
            <description>Result set mappings will be applied to results corresponding
                to REF_CURSOR parameters in the order the REF_CURSOR parameters were registered
                with the query.
            </description>
            <location chapter="3" section="10.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1583</id>
            <description>In the simplest case, where results are returned only
                via INOUT and OUT parameters, execute can
                be
                followed immediately by calls to getOutputParameterValue.
            </description>
            <location chapter="3" section="10.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:738</id>
            <description>Summary of Exceptions</description>
            <location chapter="3" section="11"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:739</id>
                    <description>PersistenceException</description>
                    <location chapter="3" section="11"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:740</id>
                    <description>TransactionRequiredException</description>
                    <location chapter="3" section="11"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:738.1</id>
                    <description>OptimisticLockException</description>
                    <location chapter="3" section="11"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:738.2</id>
                    <description>PessimisticLockException</description>
                    <location chapter="3" section="11"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:738.3</id>
                    <description>LockTimeoutException</description>
                    <location chapter="3" section="11"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:741</id>
                    <description>RollbackException</description>
                    <location chapter="3" section="11"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:742</id>
                    <description>EntityExistsException</description>
                    <location chapter="3" section="11"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:743</id>
                    <description>EntityNotFoundException</description>
                    <location chapter="3" section="11"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:744</id>
                    <description>NoResultException</description>
                    <location chapter="3" section="11"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:745</id>
                    <description>NonUniqueResultException</description>
                    <location chapter="3" section="11"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:738.4</id>
                    <description>QueryTimeoutException</description>
                    <location chapter="3" section="11"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:746</id>
            <description>A Java Persistence query language statement may be
                either:
            </description>
            <location chapter="4" section="2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:746.1</id>
                    <description>a select statement</description>
                    <location chapter="4" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:746.2</id>
                    <description>an update statement</description>
                    <location chapter="4" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:746.3</id>
                    <description>a delete statement</description>
                    <location chapter="4" section="2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:750</id>
            <description>Any Any Java Persistence query language statement may
                be constructed dynically or may be
                statically defined in a metadata annotation or XML descriptor
                element.
            </description>
            <location chapter="4" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:751</id>
            <description>All statement types may have parameters.</description>
            <location chapter="4" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:752</id>
            <description>A select statement is a string which consists of the
                following clauses:
            </description>
            <location chapter="4" section="2.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:753</id>
                    <description>a SELECT clause, which determines the type of
                        the objects or values to be selected.
                    </description>
                    <location chapter="4" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:754</id>
                    <description>a FROM clause, which provides declaration that
                        designate the domain to which the
                        expressions specified in the other clauses of the query
                        apply
                    </description>
                    <location chapter="4" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:755</id>
                    <description>an optional WHERE clause, which may be used to
                        restrict the results that are
                        returned
                        by the query
                    </description>
                    <location chapter="4" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:756</id>
                    <description>an optional GROUP BY clause, which allows query
                        results to be aggregated in terms
                        of
                        groups
                    </description>
                    <location chapter="4" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:757</id>
                    <description>an optional HAVING clause, which allows
                        filtering over aggregated groups
                    </description>
                    <location chapter="4" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:758</id>
                    <description>an optional ORDER BY clause, which may be used
                        to order the results that are
                        returned
                        by the query
                    </description>
                    <location chapter="4" section="2.1"/>
                </assertion>
            </sub-assertions>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:312</id>
            <description>A select statement must always have a SELECT and a FROM
                clause.
            </description>
            <location chapter="4" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:759</id>
            <description>Update and delete statements provide bulk operations
                over sets of entities. The update and
                delete clauses determine the type
                of the entities to be updated or deleted. The WHERE clause may
                be used to restrict the scope of the
                update or delete operation.
            </description>
            <location chapter="4" section="2.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1584</id>
            <description>The type of
                an expression is derived from the structure of the expression,
                the abstract schema types of the
                identification
                variable declarations, the types to which the persistent
                attributes evaluate, and the types of literals.
            </description>
            <location chapter="4" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:760</id>
            <description>The abstract schema type of an entity or embeddable is
                derived from its class and the metadata
                information provided by Java language annotations or in the XML
                descriptor.
            </description>
            <location chapter="4" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:761</id>
            <description>Abstract schema types are specific to the query
                language data model. The persistence provider
                is not
                required to implement or otherwise materialize an abstract
                schema type.
            </description>
            <location chapter="4" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:761</id>
            <description>The domain of a query consists of the abstract schema
                types of all entities that are defined in
                the same persistence unit.
            </description>
            <location chapter="4" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:762</id>
            <description>Entities are designated in query strings by their
                entity names. The entity name is defined by
                the name element of the Entity annotation (or the entity-name
                XML descriptor element), and defaults to
                the unqualified name of the entity class
            </description>
            <location chapter="4" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1585</id>
            <description>Entity names are scoped within the persistence unit and
                must be unique within the persistence
                unit.
            </description>
            <location chapter="4" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active"
                   testable="true">
            <id>PERSISTENCE:SPEC:2451</id>
            <description>Identification variables designate instances of a
                particular abstract schema type. The FROM clause can
                contain multiple identification variable declarations separated
                by a comma
            </description>
            <location chapter="4" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:317</id>
            <description>Identification variables designate instances of a
                particular abstract schema type. The
                FROM clause can contain multiple identification variable
                declarations separated by a comma:
            </description>
            <location chapter="4" section="4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:317.4</id>
                    <description>identification_variable_declaration
                    </description>
                    <location chapter="4" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:317.1</id>
                    <description>range_variable_declaration
                    </description>
                    <location chapter="4" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:317.5</id>
                    <description>join
                    </description>
                    <location chapter="4" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:317.6</id>
                    <description>fetch_join
                    </description>
                    <location chapter="4" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:317.7</id>
                    <description>join_association_path_expression
                    </description>
                    <location chapter="4" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:317.8</id>
                    <description>join_collection_valued_path_expression
                    </description>
                    <location chapter="4" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:317.9</id>
                    <description>join_single_valued_path_expression
                    </description>
                    <location chapter="4" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:317.10</id>
                    <description>join_spec
                    </description>
                    <location chapter="4" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:317.2</id>
                    <description>collection_member_declaration
                    </description>
                    <location chapter="4" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:317.3</id>
                    <description>join_spec</description>
                    <location chapter="4" section="4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1586</id>
            <description>An identifier is a character sequence of unlimited
                length. The character sequence must begin
                with a Java identifier start character, and all other characters
                must be Java identifier part
                characters.
            </description>
            <location chapter="4" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1587</id>
            <description>
                An identifier start character is any character for which the
                method Character.isJavaIdentifierStart
                returns true. This includes the underscore (_) character and the
                dollar sign ($) character.
            </description>
            <location chapter="4" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1588</id>
            <description>
                An identifier part character is any character for which the
                method Character.isJavaIdentifierPart
                returns true
            </description>
            <location chapter="4" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:763</id>
            <description>Reserved identifiers are case insensitive. Reserved
                identifiers must not be used as
                identification variables or result variables
            </description>
            <location chapter="4" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:764</id>
            <description>All identification variables must be declared in the
                FROM clause. Identification variables
                cannot be declared in other clauses.
            </description>
            <location chapter="4" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1589</id>
            <description>
                An identification variable must not be a reserved identifier or
                have the same name as any entity in the
                same persistence unit.
            </description>
            <location chapter="4" section="4.2"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:319</id>
            <description>Identification variables are case insensitive.
            </description>
            <location chapter="4" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1590</id>
            <description>
                An identification variable evaluates to a value of the type of
                the expression used in declaring the
                variable.
            </description>
            <location chapter="4" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1591</id>
            <description>
                An identification variable can range over an entity, embeddable,
                or basic abstract schema type.
            </description>
            <location chapter="4" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1592</id>
            <description>
                Note that for identification variables referring to an instance
                of an association or collection
                represented
                as a java.util.Map, the identification variable is of the
                abstract schema type of the map value.
            </description>
            <location chapter="4" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1593</id>
            <description>
                An identification variable always designates a reference to a
                single value. It is declared in one of
                three
                ways:
            </description>
            <location chapter="4" section="4.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1593.1</id>
                    <description>in a range variable declaration
                    </description>
                    <location chapter="4" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1593.2</id>
                    <description>in a join clause
                    </description>
                    <location chapter="4" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1593.3</id>
                    <description>in a collection member declaration
                    </description>
                    <location chapter="4" section="4.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1594</id>
            <description>
                The identification
                variable declarations are evaluated from left to right in the
                FROM clause, and an identification
                variable declaration can use the result of a preceding
                identification variable declaration of the query
                string.
            </description>
            <location chapter="4" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1595</id>
            <description>
                All identification variables used in the SELECT, WHERE, ORDER
                BY, GROUP BY, or HAVING
                clause of a SELECT statement must be declared in the FROM
                clause.
            </description>
            <location chapter="4" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1596</id>
            <description>
                All identification variables used in the SELECT, WHERE, ORDER
                BY, GROUP BY, or HAVING
                clause of a DELETE statement must be declared in the FROM
                clause.
            </description>
            <location chapter="4" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1597</id>
            <description>
                The identification variables used in the WHERE clause of an
                UPDATE statement must be declared in the
                UPDATE clause
            </description>
            <location chapter="4" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1599</id>
            <description>
                An identification variable is scoped to the query (or subquery)
                in which it is defined and is also
                visible
                to any subqueries within that query scope that do not define an
                identification variable of the same
                name.
            </description>
            <location chapter="4" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1600</id>
            <description>
                The syntax for declaring an identification variable as a range
                variable is similar to that of SQL;
                optionally,
                it uses the AS keyword. A range variable designates an entity
                abstract schema type. A range variable
                must not designate an embeddable class abstract schema type.
            </description>
            <location chapter="4" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:320</id>
            <description>
                In order to select values by comparing more than one instance of
                an entity abstract schema type, more
                than one identification variable ranging over the entity's
                abstract schema type is needed in the FROM
                clause.
            </description>
            <location chapter="4" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:328</id>
            <description>The evaluation of a path expression terminating in a
                state-field results in the abstract schema
                type corresponding to the Java type designed by the state-field.
            </description>
            <location chapter="4" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1601</id>
            <description>
                An identification variable followed by the navigation operator
                (.) and a state field or association
                field is
                a path expression. The type of the path expression is the type
                computed as the result of navigation;
            </description>
            <location chapter="4" section="4.4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1601.1</id>
                    <description>
                        the type of the state field
                    </description>
                    <location chapter="4" section="4.4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1601.2</id>
                    <description>
                        association field to which the expression navigates
                    </description>
                    <location chapter="4" section="4.4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1602</id>
            <description>
                The type of a path
                expression that navigates to an association field may be
                specified as a subtype of the declared type of
                the association field by means of the TREAT operator.
            </description>
            <location chapter="4" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1603</id>
            <description>
                An identification variable qualified by the KEY, VALUE, or ENTRY
                operator is a path expression. The
                KEY, VALUE, and ENTRY operators may only be applied to
                identification variables that correspond to
            </description>
            <location chapter="4" section="4.4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1603.1</id>
                    <description>
                        map-valued associations
                    </description>
                    <location chapter="4" section="4.4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1603.2</id>
                    <description>
                        map-valued element collections
                    </description>
                    <location chapter="4" section="4.4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1604</id>
            <description>
                The type of the path expression is the type
                computed as the result of the operation; that is, the abstract
                schema type of the field that is the
                value of
                the KEY, VALUE, or ENTRY operator (the map key, map value, or
                map entry respectively)
            </description>
            <location chapter="4" section="4.4"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1605</id>
            <description>
                Note that use of VALUE is optional, as an identification
                variable referring to an association of type
                java.util.Map is of the abstract schema type of the map value.
            </description>
            <location chapter="4" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1606</id>
            <description>
                A path expression using the KEY or VALUE operator can be further
                composed.
            </description>
            <location chapter="4" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1607</id>
            <description>
                A path expression using the ENTRY operator is terminal. It
                cannot be further composed and can only
                appear in the
                SELECT list of a query.
            </description>
            <location chapter="4" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:326</id>
            <description>a path expression that leads to an association field or
                to a field whose type is an embeddable
                class may be further composed. Path expressions can be composed
                from other path expressions if the
                original path expression evaluates to a single-valued type (not
                a collection).
            </description>
            <location chapter="4" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:329</id>
            <description>
                Path expression navigability is composed using "inner join"
                semantics. That is, if the value of a
                non-terminal association-field in the path expression is null,
                the path is considered to have no value,
                and does not participate in the determination of the result.
            </description>
            <location chapter="4" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1608</id>
            <description>
                An identification variable used in a
                single_valued_object_path_expression or in a
                collection_valued_path_expression may be an unqualified
                identification variable or an identification
                variable to which the KEY or VALUE function has been applied.
            </description>
            <location chapter="4" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1609</id>
            <description>
                general_identification_variable ::= identification_variable |
                map_field_identification_variable
            </description>
            <location chapter="4" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1610</id>
            <description>
                The type of an entity-valued path expression or an entity-valued
                subpath of a path expression used in a
                WHERE clause may be specified as a subtype of the corresponding
                declared type by means of the
                TREAT operator.
            </description>
            <location chapter="4" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:765</id>
            <description>The syntax for single-valued path expressions and
                collection-valued path expression is as
                follows:
            </description>
            <location chapter="4" section="4.4.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:766</id>
                    <description>single_valued_path_expression ::=
                        qualified_identification_variable |
                        TREAT(qualified_identification_variable AS subtype) |
                        state_field_path_expression |
                        single_valued_object_path_expression
                    </description>
                    <location chapter="4" section="4.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:767</id>
                    <description>state_field_path_expression ::=
                        {identification_variable |
                        single_valued_association_path_expression}.state_field
                    </description>
                    <location chapter="4" section="4.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:768</id>
                    <description>single_valued_association_path_expression ::=
                        identification_variable.{single_valued_association_field.}*single_valued_association_field
                    </description>
                    <location chapter="4" section="4.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:769</id>
                    <description>collection_valued_path_expression ::=
                        identification_variable.{single_valued_association_field.}*collection_valued_association_field
                    </description>
                    <location chapter="4" section="4.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:770</id>
                    <description>state_field := simple_state_field |
                        {embedded_class_state_field.}*simple_state_field
                    </description>
                    <location chapter="4" section="4.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:765.1</id>
                    <description>general_subpath ::= simple_subpath |
                        treated_subpath{.single_valued_object_field}*
                    </description>
                    <location chapter="4" section="4.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:765.2</id>
                    <description>simple_subpath ::=
                        general_identification_variable |
                        general_identification_variable{.single_valued_object_field}*
                    </description>
                    <location chapter="4" section="4.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:765.3</id>
                    <description>treated_subpath ::= TREAT(general_subpath AS
                        subtype)
                    </description>
                    <location chapter="4" section="4.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:765.4</id>
                    <description>state_field_path_expression ::=
                        general_subpath.state_field
                    </description>
                    <location chapter="4" section="4.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:765.5</id>
                    <description>state_valued_path_expression ::=
                        state_field_path_expression
                    </description>
                    <location chapter="4" section="4.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:765.6</id>
                    <description>single_valued_object_path_expression ::=
                        general_subpath.single_valued_object_field
                    </description>
                    <location chapter="4" section="4.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:765.7</id>
                    <description>collection_valued_path_expression ::=
                        general_subpath.collection_valued_field
                    </description>
                    <location chapter="4" section="4.4.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:322</id>
            <description>
                A single_valued_object_field is designated by the name of an
                association field in a one-to-one or
                many-to-one relationship or a field of embeddable class type.
                The type of a
                single_valued_object_field is the abstract schema type of the
                related entity or embeddable class.
            </description>
            <location chapter="4" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1611</id>
            <description>
                A state _field is designated by the name of an entity or
                embeddable class state field that corresponds
                to
                a basic type.
            </description>
            <location chapter="4" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:323</id>
            <description>
                A collection_valued_field is designated by the name of an
                association field in a one-to-many or a
                many-to-many relationship or by the name of an element
                collection field. The type of a
                collection_valued_field is a collection of values of the
                abstract schema type of the related entity or
                element
                type.
            </description>
            <location chapter="4" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1612</id>
            <description>
                It is illegal to use a collection_valued_path_expression other
                than in the FROM clause of a query
                except
            </description>
            <location chapter="4" section="4.4.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1612.1</id>
                    <description>
                        in an empty_collection_comparison_expression
                    </description>
                    <location chapter="4" section="4.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1612.2</id>
                    <description>
                        in a collection_member_expression
                    </description>
                    <location chapter="4" section="4.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1612.3</id>
                    <description>
                        as an argument to the SIZE operator
                    </description>
                    <location chapter="4" section="4.4.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:773</id>
            <description>An inner join may be implicitly specified by the use of
                a cartesian product in the FROM clause
                and a join condition in the WHERE clause.
            </description>
            <location chapter="4" section="4.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:774</id>
            <description>The syntax for explicit join operations is as
                follows:
            </description>
            <location chapter="4" section="4.5"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:775</id>
                    <description>join::= join_spec
                        join_association_path_expression [AS]
                        identification_variable
                        [join_condition]
                    </description>
                    <location chapter="4" section="4.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:776</id>
                    <description>fetch_join ::= join_spec FETCH
                        join_association_path_expression
                    </description>
                    <location chapter="4" section="4.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:777</id>
                    <description>join_association_path_expression ::=
                        join_collection_valued_path_expression |
                        join_single_valued_path_expression |
                        TREAT(join_collection_valued_path_expression AS
                        subtype)
                    </description>
                    <location chapter="4" section="4.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:778</id>
                    <description>join_spec::= [ LEFT [OUTER] | INNER ] JOIN
                    </description>
                    <location chapter="4" section="4.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:774.1</id>
                    <description>join_condition ::= ON conditional_expression
                    </description>
                    <location chapter="4" section="4.5"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:779</id>
            <description>The syntax for the inner join operation is: [ INNER ]
                JOIN join_association_path_expression
                [AS] identification_variable [join_condition]
            </description>
            <location chapter="4" section="4.5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1613</id>
            <description>
                The keyword INNER may optionally be used
            </description>
            <location chapter="4" section="4.5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1614</id>
            <description>
                A join condition may be specified for an inner join. This is
                equivalent to specification of the same
                condition in the WHERE clause.
            </description>
            <location chapter="4" section="4.5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:780</id>
            <description>LEFT JOIN and LEFT OUTER JOIN are synonymous. They
                enable retrieval of a set of entities where
                matching values in the join condition may be absent. The syntax
                for a left outer join is: LEFT [OUTER]
                JOIN join_association_path_expression [AS]
                identification_variable [join_condition]
            </description>
            <location chapter="4" section="4.5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1615</id>
            <description>
                An outer join without a specified join condition has an implicit
                join condition over the foreign key
                relationship corresponding to the
                join_association_path_expression.
            </description>
            <location chapter="4" section="4.5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1616</id>
            <description>
                An outer join with an explicit ON condition would cause an
                additional specified join condition to be
                added to the generated SQL:
            </description>
            <location chapter="4" section="4.5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:781</id>
            <description>
                A FETCH JOIN enables the fetching of an association or element
                collection as a side effect of the
                execution of a query. The syntax for a fetch join is fetch_join
                ::= [ LEFT [OUTER] | INNER ] JOIN FETCH
                join_association_path_expression
            </description>
            <location chapter="4" section="4.5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:782</id>
            <description>
                The association referenced by the right side of the FETCH JOIN
                clause must be an association or element
                collection that is referenced from an entity or embeddable that
                is returned as a result of the query. It
                is not permitted to specify an identification variable for the
                objects referenced by the right side of
                the FETCH JOIN clause, and hence references to the implicitly
                fetched entities or elements cannot appear
                elsewhere in the query.
            </description>
            <location chapter="4" section="4.5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:321</id>
            <description>
                An identification variable of a collection member declaration is
                declared using a special operator, the
                reserved identifier IN. The argument to the IN operator takes a
                collection valued path expression.
            </description>
            <location chapter="4" section="4.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:783</id>
            <description>The path expression evaluates to a collection type
                specified as a result of navigation to a
                collection-valued association field of an entity or embeddable
                class abstract schema type.
            </description>
            <location chapter="4" section="4.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1617</id>
            <description>
                collection_member_declaration ::= IN
                (collection_valued_path_expression) [AS] identification_variable
            </description>
            <location chapter="4" section="4.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1618</id>
            <description>
                The Java Persistence query language treats the FROM clause
                similarly to SQL in that the declared
                identification
                variables affect the results of the query even if they are not
                used in the WHERE clause.
            </description>
            <location chapter="4" section="4.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:784</id>
            <description>Java Persistence queries are automatically polymorphic.
                The FROM clause of a query designates
                not only instances of the specific entity class(es) to which it
                explicitly refers but instances of
                subclasses of those classes as well. The instances returned by a
                query thus include instances of the
                subclasses that satisfy the query criteria.
            </description>
            <location chapter="4" section="4.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1619</id>
            <description>
                Non-polymorphic queries or queries whose polymorphism is
                restricted can be specified using entity
                type expressions in the WHERE clause to restrict the domain of
                the query.
            </description>
            <location chapter="4" section="4.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1620</id>
            <description>
                The use of the TREAT operator is supported for downcasting
                within path expressions in the FROM and
                WHERE clauses.
            </description>
            <location chapter="4" section="4.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1621</id>
            <description>
                If during query execution the first argument to the TREAT
                operator is not a subtype (proper or
                improper) of the target type, the path is considered to have no
                value, and does not participate in the
                determination of the result. That is, in the case of a join, the
                referenced object does not participate
                in the
                result, and in the case of a restriction, the associated
                predicate is false.
            </description>
            <location chapter="4" section="4.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1622</id>
            <description>
                If the target type is not a subtype (proper or improper) of the
                static type of the first argument,
                the query is invalid.
            </description>
            <location chapter="4" section="4.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:785</id>
            <description>The WHERE clause restricts the result of a select
                statement or the scope of an update or
                delete operation. A WHERE clause is defined as follows:
                where_clause ::= WHERE conditional_expression
            </description>
            <location chapter="4" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1623</id>
            <description>
                The GROUP BY construct enables the aggregation of values
                according to the properties of an entity class
            </description>
            <location chapter="4" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1624</id>
            <description>
                The HAVING construct enables conditions to be specified that
                further restrict the query result as
                restrictions upon the groups. The syntax of the HAVING clause is
                as follows: having_clause ::= HAVING
                conditional_expression
            </description>
            <location chapter="4" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:330</id>
            <description>
                A string literal is enclosed in single quotesâfor example:
                âliteralâ. A string literal that includes a
                single quote is represented by two single quotesâfor example:
                âliteralââsâ. String literals in queries,
                like Java String literals, use unicode character encoding.
            </description>
            <location chapter="4" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1625</id>
            <description>The use of Java escape notation is not supported in
                query string literals.
            </description>
            <location chapter="4" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1626</id>
            <description>
                Exact numeric literals support the use of Java integer literal
                syntax as well as SQL exact numeric
                literal syntax.
            </description>
            <location chapter="4" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1627</id>
            <description>
                Approximate literals support the use Java floating point literal
                syntax as well as SQL approximate
                numeric literal syntax.
            </description>
            <location chapter="4" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1628</id>
            <description>
                Appropriate suffixes can be used to indicate the specific type
                of a numeric literal in accordance with
                the
                Java Language Specification.
            </description>
            <location chapter="4" section="6.1"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1629</id>
            <description>
                Support for the use of hexadecimal and octal numeric literals is
                not required by this specification.
            </description>
            <location chapter="4" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1630</id>
            <description>
                Enum literals support the use of Java enum literal syntax. The
                fully qualified enum class name must be
                specified.
            </description>
            <location chapter="4" section="6.1"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1631</id>
            <description>
                The JDBC escape syntax may be used for the specification of
                date, time, and timestamp literals. The
                portability of this syntax for date, time, and timestamp
                literals is dependent upon the JDBC driver in
                use. Persistence providers are not required to translate from
                this syntax into the native syntax of the
                database or driver.
            </description>
            <location chapter="4" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:334</id>
            <description>The boolean literals are TRUE and FALSE.</description>
            <location chapter="4" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1632</id>
            <description>Entity type literals are specified by entity names
            </description>
            <location chapter="4" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:331</id>
            <description>An exact numeric literal is a numeric value without a
                decimal point. Exact numeric literals
                support numbers in the range of Java long.
            </description>
            <location chapter="4" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:332</id>
            <description>Although predefined reserved literals appear in upper
                case, they are case insensitive.
            </description>
            <location chapter="4" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:786</id>
            <description>All identification variables used in the WHERE or
                HAVING clause of a SELECT or DELETE statement
                must be declared in the FROM clause.
            </description>
            <location chapter="4" section="6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:787</id>
            <description>The identification variables used in the WHERE clause
                of an UPDATE statement must be declared
                in the UPDATE clause.
            </description>
            <location chapter="4" section="6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:788</id>
            <description>It is illegal to use a
                collection_valued_path_expression within a WHERE or HAVING
                clause as
                part of a conditional expression except in an
                empty_collection_comparison_expression, in a
                collection_member_expression, or as an argument to the SIZE
                operator.
            </description>
            <location chapter="4" section="6.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1634</id>
            <description>Either positional or named parameters may be used.
            </description>
            <location chapter="4" section="6.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1635</id>
            <description>Positional and named parameters must not be mixed in a
                single query.
            </description>
            <location chapter="4" section="6.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1636</id>
            <description>Input parameters can only be used in the WHERE clause
                or HAVING clause of a query or as the new
                value for an update item in the SET clause of an update
                statement.
            </description>
            <location chapter="4" section="6.4"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:342</id>
            <description>Note that if an input parameter value is null,
                comparison operations involving the input
                parameter will return an unknown value.
            </description>
            <location chapter="4" section="6.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:343</id>
            <description>Note that if an input parameter value is null,
                arithmetic operations involving the input
                parameter will return an unknown value.
            </description>
            <location chapter="4" section="6.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1637</id>
            <description>All input parameters must be single-valued, except in
                IN expressions
            </description>
            <location chapter="4" section="6.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1638</id>
            <description>Input parameters are designated by the question mark
                (?) prefix followed by an integer.
            </description>
            <location chapter="4" section="6.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:338</id>
            <description>Input parameters are numbered starting from 1
            </description>
            <location chapter="4" section="6.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1639</id>
            <description>The same parameter can be used more than once in the
                query string.
            </description>
            <location chapter="4" section="6.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1640</id>
            <description>The ordering of the use of parameters within the query
                string need not conform to the order of
                the positional parameters.
            </description>
            <location chapter="4" section="6.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:789</id>
            <description>A named parameter is denoted by an identifier that is
                prefixed by the ":" symbol.
            </description>
            <location chapter="4" section="6.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1641</id>
            <description>Named parameters are case sensitive.</description>
            <location chapter="4" section="6.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1642</id>
            <description>The same named parameter can be used more than once in
                the query string.
            </description>
            <location chapter="4" section="6.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:345</id>
            <description>
                Conditional expressions are composed of other conditional
                expressions, comparison operators, logical
                operations, path expressions that evaluate to boolean values and
                boolean literals and boolean input
                parameters.
            </description>
            <location chapter="4" section="6.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:347</id>
            <description>
                Arithmetic expressions can be used in comparison expressions.
            </description>
            <location chapter="4" section="6.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1643</id>
            <description>
                The scalar expressions can be used in conditional expressions
            </description>
            <location chapter="4" section="6.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1644</id>
            <description>
                Aggregate functions can only be used in conditional expressions
                in a HAVING clause.
            </description>
            <location chapter="4" section="6.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:346</id>
            <description>
                Standard bracketing () for ordering expression evaluation is
                supported.
            </description>
            <location chapter="4" section="6.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1645</id>
            <description>
                Conditional expressions are defined as follows:
            </description>
            <location chapter="4" section="6.5"/>
            <sub-assertions>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1645.1</id>
                    <description>conditional_expression ::= conditional_term |
                        conditional_expression OR
                        conditional_term
                    </description>
                    <location chapter="4" section="6.5"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1645.2</id>
                    <description>conditional_term ::= conditional_factor |
                        conditional_term AND conditional_factor
                    </description>
                    <location chapter="4" section="6.5"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1645.3</id>
                    <description>conditional_factor ::= [ NOT ]
                        conditional_primary
                    </description>
                    <location chapter="4" section="6.5"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1645.4</id>
                    <description>conditional_primary ::= simple_cond_expression
                        | (conditional_expression)
                    </description>
                    <location chapter="4" section="6.5"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1645.5</id>
                    <description>
                        simple_cond_expression ::= comparison_expression |
                        between_expression | in_expression |
                        like_expression | null_comparison_expression |
                        empty_collection_comparison_expression |
                        collection_member_expression | exists_expression
                    </description>
                    <location chapter="4" section="6.5"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:348</id>
            <description>
                operators are listed below in order of decreasing precedence.
            </description>
            <location chapter="4" section="6.6"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:348.1</id>
                    <description>Navigation operator (.)</description>
                    <location chapter="4" section="6.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:348.2</id>
                    <description>
                        Arithmetic operators:
                        +, - unary
                        *, / multiplication and division
                        +, - addition and subtraction
                    </description>
                    <location chapter="4" section="6.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:348.3</id>
                    <description>Comparison operators : =, &gt;, &gt;=,&lt;,&lt;=,
                        &lt;&gt;, (not equal), [NOT] BETWEEN, [NOT] LIKE,
                        [NOT] IN, IS [NOT] NULL, IS [NOT] EMPTY, [NOT] MEMBER
                        [OF], [NOT] EXISTS
                    </description>
                    <location chapter="4" section="6.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:348.4</id>
                    <description>Logical operators: NOT AND OR</description>
                    <location chapter="4" section="6.6"/>
                </assertion>
            </sub-assertions>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1646</id>
            <description>
                The syntax for the use of comparison expressions in a
                conditional expression is as follows
            </description>
            <location chapter="4" section="6.7"/>
            <sub-assertions>

                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1646.1</id>
                    <description>
                        comparison_expression ::=
                        string_expression comparison_operator {string_expression
                        | all_or_any_expression} |
                        boolean_expression { =|
                        &lt;&gt;
                        } {boolean_expression | all_or_any_expression} |
                        enum_expression { =|&lt;&gt;} {enum_expression |
                        all_or_any_expression} |
                        datetime_expression comparison_operator
                        {datetime_expression | all_or_any_expression} |
                        entity_expression { = |&lt;&gt;} {entity_expression |
                        all_or_any_expression} |
                        arithmetic_expression comparison_operator
                        {arithmetic_expression | all_or_any_expression} |
                        entity_type_expression { = |&lt;&gt;}
                        entity_type_expression}
                    </description>
                    <location chapter="4" section="6.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1646.2</id>
                    <description>
                        comparison_operator ::= = | &gt; | &gt;= | &lt; | &lt;=
                        | &lt;&gt;
                    </description>
                    <location chapter="4" section="6.7"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:349</id>
            <description>
                The syntax for the use of the comparison operator [NOT] BETWEEN
                in a conditional expression is as
                follows: arithmetic_expression [NOT] BETWEEN arithmetic-expr AND
                arithmetic-expr
            </description>
            <location chapter="4" section="6.8"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:349.1</id>
                    <description>
                        string_expression [NOT] BETWEEN string-expression AND
                        string-expression
                    </description>
                    <location chapter="4" section="6.8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:349.2</id>
                    <description>
                        datetime_expression [NOT] BETWEEN datetime-expression
                        AND datetime-expression
                    </description>
                    <location chapter="4" section="6.8"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:350</id>
            <description>
                The BETWEEN expression x BETWEEN y and z is semantically
                equivalent to: y less than = x AND x less than
                = z
            </description>
            <location chapter="4" section="6.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1647</id>
            <description>
                The rules for unknown and NULL values in comparison operations
                apply.
            </description>
            <location chapter="4" section="6.8"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:352</id>
            <description>
                in_expression ::=
                {state_valued_path_expression | type_discriminator} [NOT] IN
                { ( in_item {, in_item}* ) | (subquery) |
                collection_valued_input_parameter }
            </description>
            <location chapter="4" section="6.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1648</id>
            <description>
                in_item ::= literal | single_valued_input_parameter
            </description>
            <location chapter="4" section="6.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1649</id>
            <description>
                The state_valued_path_expression must have a string, numeric,
                date, time, timestamp, or enum
                value.
            </description>
            <location chapter="4" section="6.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:352.1</id>
            <description>
                The literal and/or input parameter values must be like the same
                abstract schema type of the
                state_valued_path_expression in type.
            </description>
            <location chapter="4" section="6.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:352.2</id>
            <description>
                The results of the subquery must be like the same abstract
                schema type of the
                state_valued_path_expression in type.
            </description>
            <location chapter="4" section="6.9"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:353</id>
            <description>
                There must be at least one element in the comma separated list
                that defines the set of values for the IN
                expression.
            </description>
            <location chapter="4" section="6.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:354</id>
            <description>
                The expression o.country IN ('UK', 'US', 'France') is equivalent
                to the expression (o.country = 'UK') OR
                (o.country = 'US') OR (o.country = 'France')
            </description>
            <location chapter="4" section="6.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:351</id>
            <description>
                If the value of a state_valued_path_expression or in_item in an
                IN or NOT IN expression is NULL or
                unknown, the value of the expression is unknown.
            </description>
            <location chapter="4" section="6.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:358</id>
            <description>
                like_expression ::= string_expression [NOT] LIKE pattern_value
                [ESCAPE escape_character].The
                string_expression must have a string value. The pattern_value is
                a string literal or a string-valued
                input parameter in which an underscore (_) stands for any single
                character, a percent (%) character
                stands for any sequence of characters (including the empty
                sequence), and all other characters stand for
                themselves. The optional escape_character is a single-character
                string literal or a character-valued
                input parameter (i.e., char or Character) and is used to escape
                the special meaning of the underscore
                and percent characters in pattern_value.
            </description>
            <location chapter="4" section="6.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:356</id>
            <description>
                If the value of the string_expression or pattern_value is NULL
                or unknown, the value of the LIKE
                expression is unknown.
            </description>
            <location chapter="4" section="6.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:357</id>
            <description>
                If the escape_character is specified and is NULL, the value of
                the LIKE expression is unknown.
            </description>
            <location chapter="4" section="6.10"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:359</id>
            <description>
                null_comparison_expression ::= {single_valued_path_expression |
                input_parameter } IS [NOT] NULL. A null
                comparison expression tests whether or not the single-valued
                path expression or input parameter
                is a NULL value.
            </description>
            <location chapter="4" section="6.11"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1650</id>
            <description>
                Null comparisons over instances of embeddable class types are
                not supported.
            </description>
            <location chapter="4" section="6.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:361</id>
            <description>
                empty_collection_comparison_expression ::=
                collection_valued_path_expression IS [NOT] EMPTY
            </description>
            <location chapter="4" section="6.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:362</id>
            <description>
                If the value of the collection-valued path expression in an
                empty collection comparison expression is
                unknown, the value of the empty comparison expression is
                unknown.
            </description>
            <location chapter="4" section="6.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:363</id>
            <description>
                collection_member_expression ::= entity_or_value_expression
                [NOT] MEMBER [OF]
                collection_valued_path_expression
            </description>
            <location chapter="4" section="6.13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:363.1</id>
            <description>
                entity_or_value_expression ::=
                single_valued_object_path_expression |
                state_valued_path_expression |
                simple_entity_or_value_expression
            </description>
            <location chapter="4" section="6.13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:363.2</id>
            <description>
                simple_entity_or_value_expression ::= identification_variable |
                input_parameter | literal
            </description>
            <location chapter="4" section="6.13"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1651</id>
            <description>
                Expressions that evaluate to embeddable types are not supported
                in collection member expressions.
            </description>
            <location chapter="4" section="6.13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:365</id>
            <description>
                If the collection valued path expression designates an empty
                collection, the value of the MEMBER OF
                expression is FALSE and the value of the NOT MEMBER OF
                expression is TRUE.
            </description>
            <location chapter="4" section="6.13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:364</id>
            <description>
                if the value of the collection_valued_path_expression or
                entity_or_value_expression in the collection
                member expression is NULL or unknown, the value of the
                collection member expression is unknown.
            </description>
            <location chapter="4" section="6.13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:791</id>
            <description>An EXISTS expression is a predicate that is true only
                if the result of the subquery consists of
                one or more values and that is false otherwise.
            </description>
            <location chapter="4" section="6.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:792</id>
            <description>exists_expression::= [NOT] EXISTS (subquery)
            </description>
            <location chapter="4" section="6.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:793</id>
            <description>An ALL conditional expression is a predicate over a
                subquery that is true if the comparison
                operation is true for all values in the result of the subquery
                or the result of the subquery is empty.
                An ALL conditional
                expression is false if the result of the comparison is false for
                at least one value of the result of the
                subquery, and is unknown if neither true nor false.
            </description>
            <location chapter="4" section="6.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:794</id>
            <description>An ANY conditional expression is a predicate over a
                subquery that is true if the comparison
                operation is true for some value in the result of the subquery.
                An ANY conditional expression is false
                if the result of
                the subquery is empty or if the comparison operation is false
                for every value in the result of the
                subquery,
                and is unknown if neither true nor false.
            </description>
            <location chapter="4" section="6.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:795</id>
            <description>The keyword SOME is synonymous with ANY.</description>
            <location chapter="4" section="6.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:797</id>
            <description>The comparison operators used with ALL or ANY
                conditional expressions are =, &lt;, &lt;=, &gt;,
                &gt; =, &lt; &gt;. The result of the subquery must be like that
                of the other argument to the comparison
                operator in type.
            </description>
            <location chapter="4" section="6.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:798</id>
            <description>all_or_any_expression ::= {ALL | ANY | SOME} (subquery)
            </description>
            <location chapter="4" section="6.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:799</id>
            <description>Subqueries may be used in the WHERE or HAVING clause.
            </description>
            <location chapter="4" section="6.16"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:800</id>
            <description>The syntax for subqueries is as follows.</description>
            <location chapter="4" section="6.16"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:801</id>
                    <description>subquery ::= simple_select_clause
                        subquery_from_clause [where_clause]
                        [groupby_clause]
                        [having_clause]
                    </description>
                    <location chapter="4" section="6.16"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:802</id>
                    <description>simple_select_clause ::= SELECT [DISTINCT]
                        simple_select_expression
                    </description>
                    <location chapter="4" section="6.16"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:800.1</id>
                    <description>
                        subquery_from_clause ::= FROM
                        subselect_identification_variable_declaration
                        {,subselect_identification_variable_declaration |
                        collection_member_declaration }*
                    </description>
                    <location chapter="4" section="6.16"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:800.2</id>
                    <description>
                        subselect_identification_variable_declaration ::=
                        identification_variable_declaration |
                        derived_path_expression [AS] identification_variable
                        {join}* |
                        derived_collection_member_declaration
                    </description>
                    <location chapter="4" section="6.16"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:800.3</id>
                    <description>
                        simple_select_expression::=
                        single_valued_path_expression | scalar_expression |
                        aggregate_expression | identification_variable
                    </description>
                    <location chapter="4" section="6.16"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:800.4</id>
                    <description>
                        derived_path_expression ::=
                        general_derived_path.single_valued_object_field |
                        general_derived_path.collection_valued_field
                    </description>
                    <location chapter="4" section="6.16"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:800.5</id>
                    <description>
                        general_derived_path ::= simple_derived_path |
                        treated_derived_path{.single_valued_object_field}*
                    </description>
                    <location chapter="4" section="6.16"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:800.6</id>
                    <description>
                        simple_derived_path ::=
                        superquery_identification_variable{.single_valued_object_field}*
                    </description>
                    <location chapter="4" section="6.16"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:800.7</id>
                    <description>treated_derived_path ::=
                        TREAT(general_derived_path AS subtype)
                    </description>
                    <location chapter="4" section="6.16"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:800.8</id>
                    <description>
                        derived_collection_member_declaration ::= IN
                        superquery_identification_variable.{single_valued_object_field.}*collection_valued_field
                    </description>
                    <location chapter="4" section="6.16"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2512</id>
            <description>
                scalar_expression::=
                arithmetic_expression |
                string_expression |
                enum_expression |
                datetime_expression |
                boolean_expression |
                case_expression |
                entity_type_expression
            </description>
            <location chapter="4" section="6.17"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1652</id>
            <description>
                +, - unary
                *, / multiplication and division
                +, - addition and subtraction
            </description>
            <location chapter="4" section="6.17.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:344</id>
            <description>Arithmetic operations use numeric promotion.
            </description>
            <location chapter="4" section="6.17.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1653</id>
            <description>
                The Java Persistence query language includes the built-in
                functions which may be used in the SELECT,
                WHERE or HAVING clause of a query.
            </description>
            <location chapter="4" section="6.17.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:367</id>
            <description>
                If the value of any argument to a functional expression is NULL
                or UNKNOWN, the value of the functional
                expression is UNKNOWN.
            </description>
            <location chapter="4" section="6.17.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:369</id>
            <description>String Functions</description>
            <location chapter="4" section="6.17.2.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:369.1</id>
                    <description>
                        functions_returning_strings ::=
                        CONCAT(string_expression, string_expression {,
                        string_expression}* ). The CONCAT function returns a
                        string that is
                        a
                        concatenation of its arguments.
                    </description>
                    <location chapter="4" section="6.17.2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:369.2</id>
                    <description>
                        SUBSTRING(string_expression, arithmetic_expression [,
                        arithmetic_expression]). The second
                        and
                        third arguments of the SUBSTRING function denote the
                        starting position and length of the
                        substring to be returned. These arguments are integers.
                        The third argument is optional. If
                        it is
                        not specified, the substring from the start position to
                        the end of the string is returned.
                        The
                        first position of a string is denoted by 1. The
                        SUBSTRING function returns a string.
                    </description>
                    <location chapter="4" section="6.17.2.1"/>
                </assertion>

                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:369.9</id>
                    <description>trim_specification ::= LEADING | TRAILING |
                        BOTH. The TRIM function trims the
                        specified
                        character from a string. If the character to be trimmed
                        is not
                        specified, it will be assumed to be space (or blank).
                        The optional trim_character is a
                        single-character
                        string literal or a character-valued input parameter
                        (i.e., char or Character). If a trim
                        specification
                        is not provided, it defaults to BOTH. The TRIM function
                        returns the trimmed string. Note
                        that
                        not all
                        databases support the use of a trim character other than
                        the space character;
                    </description>
                    <location chapter="4" section="6.17.2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:369.10</id>
                    <description>
                        LOWER(string_expression). The LOWER function converts a
                        string to upper case. LOWER returns
                        a
                        string.
                    </description>
                    <location chapter="4" section="6.17.2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:369.11</id>
                    <description>
                        UPPER (string_expression). The UPPER function converts a
                        string to upper case. UPPER returns
                        a
                        string.
                    </description>
                    <location chapter="4" section="6.17.2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:369.4</id>
                    <description>LENGTH(string_expression). The LENGTH function
                        returns the length of the string in
                        characters as an integer.
                    </description>
                    <location chapter="4" section="6.17.2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:369.3</id>
                    <description>
                        LOCATE(string_expression, string_expression[,
                        arithmetic_expression]). The LOCATE function
                        returns the position of a given string within a string,
                        starting the search at a
                        specified
                        position. It returns the first position at which the
                        string was found as an integer. The
                        first
                        argument
                        is the string to be located; the second argument is the
                        string to be searched; the optional
                        third
                        argument
                        is an integer that represents the string position at
                        which the search is started (by
                        default,
                        the
                        beginning of
                        the string to be searched). The first position in a
                        string is denoted by 1. If the string is
                        not
                        found,
                        0 is
                        returned. Note that not all databases support the use of
                        the third argument to LOCATE
                    </description>
                    <location chapter="4" section="6.17.2.1"/>
                </assertion>
            </sub-assertions>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:368</id>
            <description>
                Numeric arguments to these functions may correspond to the
                numeric Java object types as well as the
                primitive numeric types.
            </description>
            <location chapter="4" section="6.17.2.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:369.5</id>
            <description>
                ABS(arithmetic_expression). The ABS function takes a numeric
                argument and returns a number (integer,
                float, double) of the same type as the argument to the function.
            </description>
            <location chapter="4" section="6.17.2.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:369.6</id>
            <description>
                SQRT(arithmetic_expression). The SQRT function takes a numeric
                argument and returns a double.
            </description>
            <location chapter="4" section="6.17.2.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:369.7</id>
            <description>
                MOD(arithmetic_expression, arithmetic_expression). The MOD
                function takes two integer arguments and
                returns an integer.
            </description>
            <location chapter="4" section="6.17.2.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:369.8</id>
            <description>
                SIZE(collection_valued_path_expression). The SIZE function
                returns an integer value, the number of
                elements of the collection. If the collection is empty, the SIZE
                function evaluates to zero.
            </description>
            <location chapter="4" section="6.17.2.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1654</id>
            <description>
                INDEX(identification_variable). The INDEX function returns an
                integer value corresponding to the
                position of its argument in an ordered list. The INDEX function
                can only be applied to identification
                variables denoting types for which an order column has been
                specified.
            </description>
            <location chapter="4" section="6.17.2.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1655</id>
            <description>
                functions_returning_datetime:= CURRENT_DATE | CURRENT_TIME |
                CURRENT_TIMESTAMP. The datetime functions
                return the value of current date, time, and timestamp on the
                database server.
            </description>
            <location chapter="4" section="6.17.2.3"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1656</id>
            <description>
                The invocation of functions other than the built-in functions of
                the Java Persistence query language is
                supported by means of the function_invocation syntax. This
                includes the invocation of predefined
                database
                functions and user-defined database functions.
            </description>
            <location chapter="4" section="6.17.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1656.1</id>
                    <description>
                        function_invocation::= FUNCTION(function_name {,
                        function_arg}*)
                        function_arg ::= literal | state_valued_path_expression
                        | input_parameter |
                        scalar_expression
                    </description>
                    <location chapter="4" section="6.17.3"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1656.2</id>
                    <description>
                        The function_name argument is a string that denotes the
                        database function that is to be
                        invoked.
                        The
                        arguments must be suitable for the database function
                        that is to be invoked. The result of
                        the
                        function
                        must be suitable for the invocation context.
                    </description>
                    <location chapter="4" section="6.17.3"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1656.3</id>
                    <description>
                        The function may be a database-defined function or a
                        user-defined function. The function may
                        be
                        a scalar
                        function or an aggregate function.
                    </description>
                    <location chapter="4" section="6.17.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1657</id>
            <description>
                The following forms of case expressions are supported: general
                case expressions, simple case
                expressions,
                coalesce expressions, and nullif expressions. Note that not all
                databases support the use of SQL case
                expressions.
            </description>
            <location chapter="4" section="6.17.4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1657.1</id>
                    <description>
                        general_case_expression::=
                        CASE when_clause {when_clause}* ELSE scalar_expression
                        END
                        when_clause::= WHEN conditional_expression THEN
                        scalar_expression
                    </description>
                    <location chapter="4" section="6.17.4"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1657.2</id>
                    <description>
                        simple_case_expression::=
                        CASE case_operand simple_when_clause
                        {simple_when_clause}*
                        ELSE scalar_expression
                        END
                        case_operand::= state_valued_path_expression |
                        type_discriminator
                        simple_when_clause::= WHEN scalar_expression THEN
                        scalar_expression
                    </description>
                    <location chapter="4" section="6.17.4"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1657.3</id>
                    <description>
                        coalesce_expression::= COALESCE(scalar_expression {,
                        scalar_expression}+)
                    </description>
                    <location chapter="4" section="6.17.4"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1657.4</id>
                    <description>
                        nullif_expression::= NULLIF(scalar_expression,
                        scalar_expression)
                    </description>
                    <location chapter="4" section="6.17.4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1658</id>
            <description>
                An entity type expression can be used to restrict query
                polymorphism. The TYPE operator returns the
                exact type of the argument.
            </description>
            <location chapter="4" section="6.17.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1659</id>
            <description>The syntax of an entity type expression is as
                follows:
            </description>
            <location chapter="4" section="6.17.5"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1659.1</id>
                    <description>type_discriminator.
                        TYPE(general_identification_variable |
                        single_valued_object_path_expression
                        | input_parameter )
                    </description>
                    <location chapter="4" section="6.17.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1659.2</id>
                    <description>entity_type_literal. An entity_type_literal is
                        designated by the entity name.
                    </description>
                    <location chapter="4" section="6.17.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1659.3</id>
                    <description>input_parameter</description>
                    <location chapter="4" section="6.17.5"/>
                </assertion>
            </sub-assertions>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:803</id>
            <description>The GROUP BY construct enables the aggregation of
                values according to a set of properties. The
                HAVING construct enables conditions to be specified that further
                restrict the query result. Such
                conditions are restrictions upon the groups.
            </description>
            <location chapter="4" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:804</id>
            <description>The syntax of the GROUP BY and HAVING clauses is as
                follows:
            </description>
            <location chapter="4" section="7"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:805</id>
                    <description>groupby_clause ::= GROUP BY
                        groupby_item[,groupby_item]*
                    </description>
                    <location chapter="4" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:806</id>
                    <description>groupby_item ::= single_valued_path_expression
                        | identification_variable
                    </description>
                    <location chapter="4" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:807</id>
                    <description>having_clause ::= HAVING
                        conditional_expression
                    </description>
                    <location chapter="4" section="7"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:808</id>
            <description>If the query contains both a WHERE clause and a GROUP
                BY clause, the effect is that of first
                applying the where clause, and then forming the groups and
                filtering them to the HAVING clause. The
                HAVING clause causes those groups to be retained that satisfy
                the condition of the HAVING clause.
            </description>
            <location chapter="4" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:810</id>
            <description>The requirements for the SELECT clause when GROUP BY is
                used follow those of SQL; namely, any
                property that appears in the SELECT clause (other than as an
                argument to an aggregate function) must
                also appear in the GROUP BY clause. In forming groups. null
                values are treated as the same for grouping
                purposes.
            </description>
            <location chapter="4" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1660</id>
            <description>
                Grouping by an entity is permitted. In this case, the entity
                must contain no serialized state fields or
                lob-valued state fields that are eagerly fetched.
            </description>
            <location chapter="4" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1661</id>
            <description>
                Grouping by an entity that contains serialized state fields
                or lob-valued state fields is not portable, since the
                implementation is permitted to eagerly fetch
                fields or
                properties that have been specified as LAZY.
            </description>
            <location chapter="4" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1662</id>
            <description>Grouping by embeddables is not supported.</description>
            <location chapter="4" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1663</id>
            <description>
                The HAVING clause is used to filter over the groups, and can
                contain aggregate functions over
                attributes included in the groups and/or functions or other
                query language operators over the attributes
                that are used for grouping. It is not required that an aggregate
                function used in the HAVING clause also
                be used in the SELECT clause.
            </description>
            <location chapter="4" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:809</id>
            <description>If there is no GROUP BY clause and the HAVING clause is
                used, the result is treated as a single
                group, and the select list can only consist of aggregate
                functions. The use of HAVING in the absence of
                GROUP BY is not required to be supported by an implementation of
                this specification. Portable
                applications should not rely on HAVING without the use of GROUP
                BY
            </description>
            <location chapter="4" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:811</id>
            <description>The SELECT clause denotes the query result. More than
                one value may be returned from the SELECT
                clause of a query.
            </description>
            <location chapter="4" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:372</id>
            <description>
                The SELECT clause may contain one or more of the following
                elements:
            </description>
            <location chapter="4" section="8"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:372.2</id>
                    <description>
                        identification variable that ranges over an entity
                        abstract schema type
                    </description>
                    <location chapter="4" section="8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:372.3</id>
                    <description>a single-valued path expression</description>
                    <location chapter="4" section="8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:372.4</id>
                    <description>an aggregate expression</description>
                    <location chapter="4" section="8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:372.5</id>
                    <description>a constructor expression</description>
                    <location chapter="4" section="8"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:814</id>
            <description>The SELECT clause has the following syntax:
            </description>
            <location chapter="4" section="8"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:815</id>
                    <description>select_clause ::= SELECT [DISTINCT] select_item
                        {, select_item}*
                    </description>
                    <location chapter="4" section="8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:816</id>
                    <description>select_expression ::=
                        {single_valued_path_expression | scalar_expression |
                        aggregate_select_expression | identification_variable |
                        OBJECT(identification variable) |
                        constructor_expression
                    </description>
                    <location chapter="4" section="8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:817</id>
                    <description>constructor_expression ::= NEW
                        constructor_name(constructor_item
                        {,single_valued_path_expression | scalar_expression |
                        aggregate_expression |
                        identification_variable}*)
                    </description>
                    <location chapter="4" section="8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:814.1</id>
                    <description>constructor_item ::=
                        single_valued_path_expression | scalar_expression |
                        aggregate_expression | identification_variable
                    </description>
                    <location chapter="4" section="8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:818</id>
                    <description>aggregate_expression ::= {AVG | MAX | MIN |
                        SUM}([DISTINCT]
                        state_valued_path_expression) | COUNT ([DISTINCT]
                        identification_variable |
                        state_valued_path_expression |
                        single_valued_object_path_expression)
                    </description>
                    <location chapter="4" section="8"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:374</id>
            <description>The DISTINCT keyword is used to specify that duplicate
                values must be eliminated from the query
                result.
            </description>
            <location chapter="4" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1664</id>
            <description>If DISTINCT is not specified, duplicate values are not
                eliminated.
            </description>
            <location chapter="4" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1665</id>
            <description>The result of DISTINCT over embeddable objects or map
                entry results is undefined.
            </description>
            <location chapter="4" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:373</id>
            <description>
                Standalone identification variables in the SELECT clause may
                optionally be qualified by the OBJECT
                operator. Note that the keyword OBJECT is not required. It is
                preferred that it be omitted for new
                queries.
            </description>
            <location chapter="4" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1666</id>
            <description>A result_variable may be used to name a select_item in
                the query result
            </description>
            <location chapter="4" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1667</id>
            <description>
                The SELECT clause must not use the OBJECT operator to qualify
                path expressions.
            </description>
            <location chapter="4" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:406</id>
            <description>
                The type of the query result specified by the SELECT clause of a
                query is an entity abstract schema
                type, a state field type, the result of a scalar expression, the
                result of an aggregate function, the
                result of a construction operation, or some sequence of these.
            </description>
            <location chapter="4" section="8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:408</id>
            <description>
                The result type of the SELECT clause is defined by the the
                result types of the select expressions
                contained
                in it. When multiple select expressions are used in the SELECT
                clause, the elements in this result
                correspond in order to the order of their specification in the
                SELECT clause and in type to the result
                types of each of the select expressions.
            </description>
            <location chapter="4" section="8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1668</id>
            <description>The type of the result of a select_expression is as
                follows:
            </description>
            <location chapter="4" section="8.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:394</id>
                    <description>
                        The result type of an identification_variable is the
                        type of the entity object or embeddable
                        object to which the identification variable corresponds.
                        The type of an
                        identification_variable
                        that refers to an entity abstract schema type is the
                        type of the entity to which that
                        identification
                        variable corresponds or a subtype as determined by the
                        object/relational mapping.
                    </description>
                    <location chapter="4" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:409</id>
                    <description>The result type of a
                        single_valued_path_expression that is a
                        state_field_path_expression is the same type as the
                        corresponding state field of the entity
                        or
                        embeddable class. If the state field of the entity is a
                        primitive type, the result type is
                        the
                        corresponding
                        object type.
                    </description>
                    <location chapter="4" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:410</id>
                    <description>
                        The result type is a single_valued_path_expression that
                        is a
                        single_valued_object_path_expression is the type of the
                        entity object or embeddable object
                        to
                        which the
                        path expression corresponds. A
                        single_valued_object_path_expression that results in an
                        entity
                        object
                        will result in an entity of the type of the relationship
                        field or the subtype of the
                        relationship field
                        of the entity object as determined by the
                        object/relational mapping.
                    </description>
                    <location chapter="4" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1668.1</id>
                    <description>
                        The result type of a single_valued_path_expression that
                        is an identification_variable to
                        which the KEY or VALUE function has been applied is
                        determined by the type of the map key
                        or value respectively, as defined by the above rules.
                    </description>
                    <location chapter="4" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1668.2</id>
                    <description>
                        The result type of a single_valued_path_expression that
                        is an identification_variable to
                        which the ENTRY function has been applied is
                        java.util.Map.Entry, where the key
                        and value types of the map entry are determined by the
                        above rules as applied to the map key
                        and map value respectively.
                    </description>
                    <location chapter="4" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1668.3</id>
                    <description>
                        The result type of a scalar_expression is the type of
                        the scalar value to which the
                        expression
                        evaluates. The result type of a numeric
                        scalar_expression is defined in section 4.8.6.
                    </description>
                    <location chapter="4" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1668.4</id>
                    <description>
                        The result type of an entity_type_expression scalar
                        expression is the Java class to which
                        the
                        resulting abstract schema type corresponds.
                    </description>
                    <location chapter="4" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1668.5</id>
                    <description>
                        The result type of aggregate_expression is defined in
                        section 4.8.5.
                    </description>
                    <location chapter="4" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:395</id>
                    <description>
                        The result type of a constructor_expression is the type
                        of the class for which the
                        constructor
                        is
                        defined.
                    </description>
                    <location chapter="4" section="8.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:819</id>
            <description>A constructor may be used in the SELECT list to return
                an instance of a Java
                class. The specified class is not required to be an entity or to
                be mapped to the database.
            </description>
            <location chapter="4" section="8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1669</id>
            <description>The constructor name must be fully qualified.
            </description>
            <location chapter="4" section="8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:820</id>
            <description>If an entity class name is specified as the constructor
                name in the SELECT NEW clause, the
                resulting entity instances will be in either the new or the
                detached state, depending on whether a
                primary key is retrieved for the constructed object.
            </description>
            <location chapter="4" section="8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1670</id>
            <description>
                If a single_valued_path_expression or identification_variable
                that is an argument to the constructor
                references an entity, the resulting entity instance referenced
                by that single_valued_path_expression
                or identification_variable will be in the managed state.
            </description>
            <location chapter="4" section="8.2"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:375</id>
            <description>
                If the result of an query corresponds to an association field or
                state field whose value is null, that
                null value is returned in the result of the query method.
            </description>
            <location chapter="4" section="8.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:376</id>
            <description>
                The IS NOT NULL construct can be used to eliminate the null from
                the result set of the query.
            </description>
            <location chapter="4" section="8.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:379</id>
            <description>
                Note, however, that state field types in terms of Java numeric
                primitive types cannot produce NULL
                values in the query results. An query that returns such a state
                field type as a result type must not
                return a null value.
            </description>
            <location chapter="4" section="8.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1671</id>
            <description>
                If the result of a query corresponds to an identification
                variable or state field whose value is an
                embeddable, the embeddable instance returned by the query will
                not be in the managed state (i.e., it
                will
                not be part of the state of any managed entity).
            </description>
            <location chapter="4" section="8.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1672</id>
            <description>
                The following aggregate functions can be used in the SELECT
                clause of a query:
            </description>
            <location chapter="4" section="8.5"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:380</id>
                    <description>AVG</description>
                    <location chapter="4" section="8.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:384</id>
                    <description>COUNT</description>
                    <location chapter="4" section="8.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:382</id>
                    <description>MAX</description>
                    <location chapter="4" section="8.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:381</id>
                    <description>MIN</description>
                    <location chapter="4" section="8.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:383</id>
                    <description>SUM</description>
                    <location chapter="4" section="8.5"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1672.1</id>
                    <description>aggregate functions defined in the database.
                        The invocation of aggregate database
                        functions, including user defined functions, is
                        supported by means
                        of the FUNCTION operator
                    </description>
                    <location chapter="4" section="8.5"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1673</id>
            <description>
                For all aggregate functions except COUNT, the path expression
                that is the argument to the aggregate
                function must terminate in a state field.
            </description>
            <location chapter="4" section="8.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:389</id>
            <description>
                The path expression argument to COUNT may terminate in a state
                field.
            </description>
            <location chapter="4" section="8.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:390</id>
            <description>
                The path expression argument to COUNT may terminate in a
                association field.
            </description>
            <location chapter="4" section="8.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:391</id>
            <description>
                The argument to COUNT may be an identification variable.
            </description>
            <location chapter="4" section="8.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:821</id>
            <description>Arguments to the functions SUM and AVG must be
                numeric.
            </description>
            <location chapter="4" section="8.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:822</id>
            <description>Arguments to the functions MAX and MIN must correspond
                to orderable state field types (i.e.,
                numeric types, string types, character types, or date type).
            </description>
            <location chapter="4" section="8.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:823</id>
            <description>The Java type that is contained in the result of a
                query using an aggregate function is as
                follows:
            </description>
            <location chapter="4" section="8.5"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:824</id>
                    <description>COUNT returns long</description>
                    <location chapter="4" section="8.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:825</id>
                    <description>MAX, MIN return the type of the state field to
                        which they are applied
                    </description>
                    <location chapter="4" section="8.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:826</id>
                    <description>AVG returns Double</description>
                    <location chapter="4" section="8.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:827</id>
                    <description>SUM returns Long when applied to state fields
                        of integral types (other than
                        BigInteger); Double when applied to state fields of
                        floating-point types; BigInteger when applied to state
                        fields of type BigInteger, and
                        BigDecimal
                        when applied to state fields of type BigDecimal.
                    </description>
                    <location chapter="4" section="8.5"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:393</id>
            <description>
                Null values are eliminated before the aggregate function is
                applied regardless whether the keyword
                DISTINCT is specified.
            </description>
            <location chapter="4" section="8.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:828</id>
            <description>If SUM, AVG, MAX, or MIN is used, and there are no
                values to which the aggreate function can be
                applied, the result of the aggregate function is NULL.
            </description>
            <location chapter="4" section="8.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:829</id>
            <description>If COUNT is used, and there are no values to which
                COUNT can be applied, the result of the
                aggregate function is 0.
            </description>
            <location chapter="4" section="8.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:392</id>
            <description>
                The argument to an aggregate function may be preceded by the
                keyword DISTINCT to specify that duplicate
                values are to be eliminated before the aggregate function is
                applied.
            </description>
            <location chapter="4" section="8.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1674</id>
            <description>
                It is legal to specify DISTINCT with MAX or MIN, but it does not
                affect the result.
            </description>
            <location chapter="4" section="8.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1675</id>
            <description>
                The use of DISTINCT with COUNT is not supported for arguments of
                embeddable types or map entry
                types.
            </description>
            <location chapter="4" section="8.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1676</id>
            <description>
                An operand that corresponds to a persistent state field is of
                the same type as that persistent state
                field.
            </description>
            <location chapter="4" section="8.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1677</id>
            <description>
                The result of a case expression, coalesce expression, nullif
                expression, or arithmetic expression
                (+, -,*,/) is determined by applying the following rule to its
                operands. In the case of a general or
                simple case expression, these are the scalar expressions of the
                THEN and ELSE clauses.
            </description>
            <location chapter="4" section="8.6"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1677.1</id>
                    <description>If there is an operand of type Double or
                        double, the result of the operation is of
                        type
                        Double;
                    </description>
                    <location chapter="4" section="8.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1677.2</id>
                    <description>otherwise, if there is an operand of type Float
                        or float, the result of the
                        operation
                        is of type Float;
                    </description>
                    <location chapter="4" section="8.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1677.3</id>
                    <description>otherwise, if there is an operand of type
                        BigDecimal, the result of the operation
                        is of
                        type BigDecimal;
                    </description>
                    <location chapter="4" section="8.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1677.4</id>
                    <description>otherwise, if there is an operand of type
                        BigInteger, the result of the operation
                        is
                        of type BigInteger, unless the operator is / (division),
                        in which case the numeric result
                        type
                        is not further defined;
                    </description>
                    <location chapter="4" section="8.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1677.5</id>
                    <description>otherwise, if there is an operand of type Long
                        or long, the result of the operation
                        is
                        of type Long, unless the operator is / (division), in
                        which case the numeric result type is
                        not
                        further defined;
                    </description>
                    <location chapter="4" section="8.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1677.6</id>
                    <description>otherwise, if there is an operand of integral
                        type, the result of the operation is
                        of
                        type Integer, unless the operator is / (division), in
                        which case the numeric result type is
                        not
                        further defined.
                    </description>
                    <location chapter="4" section="8.6"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1678</id>
            <description>
                Users should note that the semantics of the SQL division
                operation are not standard across
                databases. In particular, when both operands are of integral
                types, the result of the division
                operation will be an integral type in some databases, and an
                non-integral type in others. Portable
                applications should not assume a particular result type.
            </description>
            <location chapter="4" section="8.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1679</id>
            <description>
                orderby_clause ::= ORDER BY orderby_item {, orderby_item}*
                orderby_item ::= { state_field_path_expression |
                general_identification_variable | result_variable }
            </description>
            <location chapter="4" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:399</id>
            <description>
                An orderby_item MUST be one of the following
            </description>
            <location chapter="4" section="9"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:399.1</id>
                    <description>
                        A state_field_path_expression that evaluates to an
                        orderable state field of an entity or
                        embeddable class abstract schema type designated in the
                        SELECT clause
                    </description>
                    <location chapter="4" section="9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:399.4</id>
                    <description>a general_identification_variable</description>
                    <location chapter="4" section="9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:399.5</id>
                    <description>a single_valued_object_path_expression
                    </description>
                    <location chapter="4" section="9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:399.3</id>
                    <description>
                        A state_field_path_expression that evaluates to the same
                        state field of the same entity or
                        embeddable abstract schema type as a
                        state_field_path_expression in the SELECT clause
                    </description>
                    <location chapter="4" section="9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:399.6</id>
                    <description>
                        A general_identification_variable that evaluates to the
                        same map field of the same entity or
                        embeddable abstract schema type as a
                        general_identification_variable in the SELECT clause
                    </description>
                    <location chapter="4" section="9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:399.7</id>
                    <description>
                        A result_variable that refers to an orderable item in
                        the SELECT clause for which the same
                        result_variable has been specified. This may be the
                        result of an aggregate_expression, a
                        scalar_expression, or a state_field_path_expression in
                        the SELECT clause.
                    </description>
                    <location chapter="4" section="9"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:400</id>
            <description>
                If more than one orderby_item is specified, the left-to-right
                sequence of the orderby_item elements
                determines the precedence, whereby the leftmost orderby_item has
                the highest precedence.
            </description>
            <location chapter="4" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:401</id>
            <description>
                The keyword ASC specifies that ascending order is used.
                Ascending ordering is the default.
            </description>
            <location chapter="4" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:402</id>
            <description>
                The keyword DESC specified that descending order is used.
            </description>
            <location chapter="4" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:403</id>
            <description>
                SQL rules for ordering of NULLS apply: that is, all null values
                must appear before all non-null values
                in the ordering or all null values must appear after all
                non-null values in the ordering, but it is not
                specified which.
            </description>
            <location chapter="4" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:404</id>
            <description>
                The ordering of the query result is preserved in the result of
                the query method if the ORDER BY clause
                is used.
            </description>
            <location chapter="4" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:834</id>
            <description>Bulk update and delete operations apply to entities of
                a single entity class (together with its
                subclasses, if any).
                Only one entity abstract schema type may be specified in the
                FROM or UPDATE clause.
            </description>
            <location chapter="4" section="10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:836</id>
            <description>The syntax of these operations are as follows:
            </description>
            <location chapter="4" section="10"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:837</id>
                    <description>update_statement
                        ::=update_clause[where_clause]
                    </description>
                    <location chapter="4" section="10"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:838</id>
                    <description>update_clause ::=UPDATE entity_name [[AS]
                        identification_variable]
                        SET update_item {, update_item}*
                    </description>
                    <location chapter="4" section="10"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:839</id>
                    <description>update_item
                        ::=[identification_variable.]{single_valued_embeddable_object_field.}*
                        {state_field | single_valued_object_field} = new_value
                    </description>
                    <location chapter="4" section="10"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:836.1</id>
                    <description>new_value ::= scalar_expression |
                        simple_entity_expression | NULL
                    </description>
                    <location chapter="4" section="10"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:840</id>
                    <description>delete_statement ::=delete_clause
                        [where_clause]
                    </description>
                    <location chapter="4" section="10"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:841</id>
                    <description>delete_clause ::= DELETE FROM entity_name [[AS]
                        identification_variable]
                    </description>
                    <location chapter="4" section="10"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:835</id>
            <description>A delete operation only applies to entities of the
                specified class and its subclasses. It does
                not cascade to related entities.
            </description>
            <location chapter="4" section="10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1680</id>
            <description>
                The new_value specified for an update operation must be
                compatible in type with the field to which it
                is assigned.
            </description>
            <location chapter="4" section="10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1681</id>
            <description>
                Bulk update maps directly to a database update operation,
                bypassing optimistic locking checks. Portable
                applications must manually update the value of the version
                column, if desired, and/or manually validate
                the value of the version column.
            </description>
            <location chapter="4" section="10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1682</id>
            <description>
                The persistence context is not synchronized with the result of
                the bulk update or delete.
            </description>
            <location chapter="4" section="10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:416</id>
            <description>
                Comparison operations with a NULL value always yield an UNKNOWN
                value.
            </description>
            <location chapter="4" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:415</id>
            <description>
                Two NULL values are not considered to be equal, the comparison
                yield an UNKNOWN value.
            </description>
            <location chapter="4" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:417</id>
            <description>
                Comparison operations with an UNKNOWN value always yield an
                UNKNOWN value.
            </description>
            <location chapter="4" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:418</id>
            <description>
                Arithmetic operators with a NULL value always yield an UNKNOWN
                value.
            </description>
            <location chapter="4" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:419</id>
            <description>
                Arithmetic operators with an UNKNOWN value always yield an
                UNKNOWN value.
            </description>
            <location chapter="4" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1683</id>
            <description>
                The IS NULL operators convert a NULL state field into the
                respective TRUE or FALSE value.
            </description>
            <location chapter="4" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1684</id>
            <description>
                The IS NULL operators convert a NULL single-valued object field
                into the respective TRUE or FALSE
            </description>
            <location chapter="4" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:422</id>
            <description>
                The IS NOT NULL operators convert a NULL state field into the
                respective TRUE or FALSE value.
            </description>
            <location chapter="4" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:423</id>
            <description>
                The IS NOT NULL operators convert a NULL single-valued object
                field into the respective TRUE or FALSE
                value.
            </description>
            <location chapter="4" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:424</id>
            <description>
                Boolean operators use three valued logic: Table 1: Definition of
                the AND Operator
            </description>
            <location chapter="4" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:425</id>
            <description>
                Boolean operators use three valued logic: Table 2: Definition of
                the OR Operator
            </description>
            <location chapter="4" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:426</id>
            <description>
                Boolean operators use three valued logic: Table 3: Definition of
                the NOT Operator
            </description>
            <location chapter="4" section="11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:430</id>
            <description>
                Only the values of like types are permitted to be compared. A
                type is like another type if they
                correspond
                to the same Java language type, or if one is a primitive Java
                language type and the other is the
                wrappered Java class type equivalent (e.g., int and Integer are
                like types in this sense).
                There is one exception to this rule: it is valid to compare
                numeric values for which the rules of
                numeric promotion apply. Conditional expressions attempting to
                compare non-like type values are
                disallowed except for
                this numeric case.
            </description>
            <location chapter="4" section="12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1685</id>
            <description>
                Note that the arithmetic operators and comparison operators are
                permitted to be applied to
                state fields and input parameters of the wrappered Java class
                equivalents to the primitive
                numeric Java types.
            </description>
            <location chapter="4" section="12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:427</id>
            <description>
                Two entities of the same abstract schema type are equal if and
                only if they have the same primary key
                value.
            </description>
            <location chapter="4" section="12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:428</id>
            <description>
                Only equality/inequality comparisons over enums are required to
                be supported.
            </description>
            <location chapter="4" section="12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1686</id>
            <description>
                For each managed class X in package p, a metamodel class X_ in
                package p is created.
            </description>
            <location chapter="6" section="2.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1687</id>
            <description>
                The name of the metamodel class is derived from the name of the
                managed class by appending "_" to the
                name of the managed class.
            </description>
            <location chapter="6" section="2.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1688</id>
            <description>
                The metamodel class X_ must be annotated with the
                javax.persistence.StaticMetamodel annotation.
            </description>
            <location chapter="6" section="2.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1689</id>
            <description>
                If the class was generated, the javax.annotation.Generated
                annotation should be used to annotate the
                class.
            </description>
            <location chapter="6" section="2.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1690</id>
            <description>
                If class X extends another class S, where S is the most derived
                managed class (i.e., entity or
                mapped superclass) extended by X, then class X_ must extend
                class S_, where S_ is the metamodel
                class created for S.
            </description>
            <location chapter="6" section="2.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1691</id>
            <description>
                For every persistent non-collection-valued attribute y declared
                by class X, where the type of y
                is Y, the metamodel class must contain a declaration as follows:
                public static volatile SingularAttribute&lt;X, Y&gt; y;
            </description>
            <location chapter="6" section="2.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1692</id>
            <description>
                For every persistent collection-valued attribute z declared by
                class X, where the element type
                of z is Z, the metamodel class must contain a declaration as
                follows:
            </description>
            <location chapter="6" section="2.1.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1692.1</id>
                    <description>
                        if the collection type of z is java.util.Collection,
                        then
                        public static volatile CollectionAttribute&lt;X, Z&gt;
                        z;
                    </description>
                    <location chapter="6" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1692.2</id>
                    <description>
                        if the collection type of z is java.util.Set, then
                        public static volatile SetAttribute&lt;X, Z&gt; z;
                    </description>
                    <location chapter="6" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1692.3</id>
                    <description>
                        if the collection type of z is java.util.List, then
                        public static volatile ListAttribute&lt;X, Z&gt; z;
                    </description>
                    <location chapter="6" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1692.4</id>
                    <description>
                        if the collection type of z is java.util.Map, then
                        public static volatile MapAttribute&lt;X, K, Z&gt; z;
                        where K is the type of the key of the map in class X
                    </description>
                    <location chapter="6" section="2.1.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1693</id>
            <description>
                Import statements must be included for the needed
                javax.persistence.metamodel types as
                appropriate
            </description>
            <location chapter="6" section="2.1.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1693.1</id>
                    <description>
                        javax.persistence.metamodel.SingularAttribute
                    </description>
                    <location chapter="6" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1693.2</id>
                    <description>
                        javax.persistence.metamodel.CollectionAttribute
                    </description>
                    <location chapter="6" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1693.3</id>
                    <description>
                        javax.persistence.metamodel.SetAttribute
                    </description>
                    <location chapter="6" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1693.4</id>
                    <description>
                        javax.persistence.metamodel.ListAttribute
                    </description>
                    <location chapter="6" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1693.5</id>
                    <description>
                        javax.persistence.metamodel.MapAttribute
                    </description>
                    <location chapter="6" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1693.6</id>
                    <description>
                        all classes X, Y, Z, and K.
                    </description>
                    <location chapter="6" section="2.1.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1694</id>
            <description>
                Implementations of this specification are not required to
                support the use of non-canonical
                metamodel classes. Applications that use non-canonical metamodel
                classes will not be portable.
            </description>
            <location chapter="6" section="2.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1695</id>
            <description>
                When the entity manager factory for a persistence unit is
                created, it is the responsibility of the
                persistence
                provider to initialize the state of the metamodel classes of the
                persistence unit.
            </description>
            <location chapter="6" section="2.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1696</id>
            <description>Persistence providers must support the use of canonical
                metamodel classes.
            </description>
            <location chapter="6" section="2.2"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1697</id>
            <description>Persistence providers may, but are not required to,
                support the use of non-canonical metamodel
                classes.
            </description>
            <location chapter="6" section="2.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1698</id>
            <description>Strings may be used as an alternative to metamodel
                objects, whereby joins and navigation are
                specified by use of strings that correspond to attribute names.
            </description>
            <location chapter="6" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1700</id>
            <description>
                A criteria query is constructed through the creation and
                modification of a javax.persistence.
                criteria.CriteriaQuery object.
            </description>
            <location chapter="6" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1701</id>
            <description>
                The CriteriaBuilder interface is used to construct
                CriteriaQuery, CriteriaUpdate, and CriteriaDelete
                objects.
            </description>
            <location chapter="6" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1702</id>
            <description>
                The CriteriaBuilder implementation is accessed through the
                getCriteriaBuilder method of the
                EntityManager or EntityManagerFactory interface.
            </description>
            <location chapter="6" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1703</id>
            <description>
                A CriteriaQuery object is created by means of one of the
                createQuery methods or the createTupleQuery
                method of the CriteriaBuilder interface.
            </description>
            <location chapter="6" section="5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1704</id>
            <description>
                A CriteriaQuery object is typed according to its expected result
                type when the CriteriaQuery object is
                created.
            </description>
            <location chapter="6" section="5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1705</id>
            <description>
                A TypedQuery instance created from the CriteriaQuery object by
                means of the EntityManager createQuery
                method will result in instances of this type when the resulting
                query is executed.
            </description>
            <location chapter="6" section="5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1706</id>
            <description>
                The effect of the createTupleQuery method is semantically
                equivalent to invoking the createQuery method
                with the Tuple.class argument.
            </description>
            <location chapter="6" section="5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1707</id>
            <description>
                The CriteriaQuery
                &lt;Object&gt;
                createQuery() method supports both the case where the select or
                multiselect method specifies only a
                single selection item and where the multiselect method specifies
                multiple selection items.
            </description>
            <location chapter="6" section="5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1708</id>
            <description>
                If only a single item is specified, an instance of type Object
                will be returned for each result of the
                query execution.
            </description>
            <location chapter="6" section="5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1709</id>
            <description>
                If multiple selection items are specified, an instance of type
                Object[] will be instantiated and
                returned for each result of the execution
            </description>
            <location chapter="6" section="5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1711</id>
            <description>
                A CriteriaQuery object may have more than one root. The addition
                of a query root has the semantic effect
                of creating a
                cartesian product between the entity type referenced by the
                added root and those of the other roots.
            </description>
            <location chapter="6" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1712</id>
            <description>
                Joins can be chained,
            </description>
            <location chapter="6" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1713</id>
            <description>By default, the join method defines an inner join.
            </description>
            <location chapter="6" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1714</id>
            <description>Outer joins are defined by specifying a JoinType
                argument.
            </description>
            <location chapter="6" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1715</id>
            <description>Only left outer joins and left outer fetch joins are
                required to be supported
            </description>
            <location chapter="6" section="5.3"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1716</id>
            <description>
                Applications that make use of right outer joins or right outer
                fetch joins will not be portable.
            </description>
            <location chapter="6" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1717</id>
            <description>On-conditions can be specified for joins.</description>
            <location chapter="6" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1718</id>
            <description>
                An association or attribute referenced by the fetch method must
                be referenced from an entity or
                embeddable that is returned as the result of the query.
            </description>
            <location chapter="6" section="5.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1720</id>
            <description>
                The fetch method must not be used in a subquery.
            </description>
            <location chapter="6" section="5.4"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1721</id>
            <description>
                Multiple levels of fetch joins are not required to be supported
                by an implementation of this
                specification.
            </description>
            <location chapter="6" section="5.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1722</id>
            <description>A Path instance can be</description>
            <location chapter="6" section="5.5"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1722.1</id>
                    <description>a Root instance</description>
                    <location chapter="6" section="5.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1722.2</id>
                    <description>a Join instance</description>
                    <location chapter="6" section="5.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1722.3</id>
                    <description>a Path instance that has been derived from
                        another Path instance by means of the
                        get
                        navigation method
                    </description>
                    <location chapter="6" section="5.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1722.4</id>
                    <description>a Path instance derived from a map-valued
                        association by use of the key or value
                        method
                    </description>
                    <location chapter="6" section="5.5"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1722.5</id>
                    <description>a Path instance derived from a element
                        collection by use of the key or value
                        method.
                    </description>
                    <location chapter="6" section="5.5"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1723</id>
            <description>
                if the value of a non-terminal Path
                instance is null, the path is considered to have no value, and
                does not participate in the determination
                of
                the query result.
            </description>
            <location chapter="6" section="5.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1724</id>
            <description>
                The get method is used for path navigation. The argument to the
                get method is specified by the
                corresponding
                SingularAttribute or collection-valued attribute
                (CollectionAttribute,
                SetAttribute, ListAttribute, or MapAttribute) of the
                corresponding metamodel class. Attribute names
                serve this role for string-based queries.
            </description>
            <location chapter="6" section="5.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1725</id>
            <description>
                The result of a query can be restricted by specifying one or
                more predicate conditions. Restriction
                predicates
                are applied to the CriteriaQuery object by means of the where
                method. Invocation of the
                where method results in the modification of the CriteriaQuery
                object with the specified restriction(
                s).
            </description>
            <location chapter="6" section="5.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1726</id>
            <description>
                The argument to the where method can be either an Expression
                &lt;Boolean&gt;
                instance or zero or more Predicate instances.
            </description>
            <location chapter="6" section="5.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1727</id>
            <description>A predicate can be either simple or compound.
            </description>
            <location chapter="6" section="5.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1728</id>
            <description>
                A simple predicate is created by invoking
            </description>
            <location chapter="6" section="5.6"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1728.1</id>
                    <description>one of the conditional methods of the
                        CriteriaBuilder interface
                    </description>
                    <location chapter="6" section="5.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1728.2</id>
                    <description>isNull method of the Expression interface
                    </description>
                    <location chapter="6" section="5.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1728.3</id>
                    <description>isNotNull method of the Expression interface
                    </description>
                    <location chapter="6" section="5.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1728.4</id>
                    <description>in method of the Expression interface
                    </description>
                    <location chapter="6" section="5.6"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1729</id>
            <description>
                Compound predicates are constructed by means of the and, or, and
                not methods of the CriteriaBuilder
                interface.
            </description>
            <location chapter="6" section="5.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1730</id>
            <description>The restrictions upon the types to which conditional
                operations are permitted to be applied are
                the same
                as the respective operators of the Java Persistence query
                language as described in subsections 4.6.7
                through 4.6.17.
            </description>
            <location chapter="6" section="5.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1731</id>
            <description>The same null value semantics as described in section
                4.11
            </description>
            <location chapter="6" section="5.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1732</id>
            <description>the subsections of section 4.6 apply</description>
            <location chapter="6" section="5.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1733</id>
            <description>The equality and comparison semantics described in
                section 4.12
            </description>
            <location chapter="6" section="5.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1734</id>
            <description>
                Downcasting by means of the treat method is supported
            </description>
            <location chapter="6" section="5.7"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1734.1</id>
                    <description>in joins</description>
                    <location chapter="6" section="5.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1734.2</id>
                    <description>in the construction of where conditions
                    </description>
                    <location chapter="6" section="5.7"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1735</id>
            <description>An Expression or one of its subtypes can be used in the
                construction of the queryâs
            </description>
            <location chapter="6" section="5.8"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1735.1</id>
                    <description>select list</description>
                    <location chapter="6" section="5.8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1735.2</id>
                    <description>in the construction of where method
                        conditions
                    </description>
                    <location chapter="6" section="5.8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1735.3</id>
                    <description>in the construction of having method
                        conditions
                    </description>
                    <location chapter="6" section="5.8"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1736</id>
            <description>Path predicates are expressions.</description>
            <location chapter="6" section="5.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1737</id>
            <description>boolean predicates are expressions.</description>
            <location chapter="6" section="5.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1738</id>
            <description>The type method can only be applied to a path
                expression. Its result denotes the type navigated
                to by the path.
            </description>
            <location chapter="6" section="5.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1739</id>
            <description>The index method can be applied to a ListJoin object
                that corresponds to a list for which an
                order column has been specified. Its result denotes the position
                of the item in the list.
            </description>
            <location chapter="6" section="5.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1740</id>
            <description>The aggregation methods avg, max, min, sum, count can
                only be used in the construction of the
                select list
            </description>
            <location chapter="6" section="5.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1741</id>
            <description>The aggregation methods avg, max, min, sum, count can
                only be used in having method
                conditions.
            </description>
            <location chapter="6" section="5.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1742</id>
            <description>
                The size method can be applied to a path expression that
                corresponds to an association collection.
                Its result denotes the number of elements in the association
                collection.
            </description>
            <location chapter="6" section="5.8"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1744</id>
            <description>Both simple and general case expressions are
                supported.
            </description>
            <location chapter="6" section="5.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1745</id>
            <description>
                For non-numerical operands, the implementation must return the
                most specific common superclass of the
                types of the operands used to form the result.
            </description>
            <location chapter="6" section="5.8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1746</id>
            <description>
                In the case of the two-argument sum, prod, diff, quot, coalesce,
                and nullif methods, and the
                In, Case, SimpleCase, and Coalesce builder methods, the runtime
                result types will differ from
                the Expression type when the latter is Number. The following
                rules must be observed by the
                implementation
                when materializing the results of numeric expressions involving
                these methods.
            </description>
            <location chapter="6" section="5.8.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1746.1</id>
                    <description>If there is an operand of type Double, the
                        result of the operation is of type
                        Double;
                    </description>
                    <location chapter="6" section="5.8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1746.2</id>
                    <description>otherwise, if there is an operand of type
                        Float, the result of the operation is of
                        type
                        Float;
                    </description>
                    <location chapter="6" section="5.8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1746.3</id>
                    <description>otherwise, if there is an operand of type
                        BigDecimal, the result of the operation
                        is of
                        type BigDecimal;
                    </description>
                    <location chapter="6" section="5.8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1746.4</id>
                    <description>otherwise, if there is an operand of type
                        BigInteger, the result of the operation
                        is of
                        type BigInteger, unless the method is quot, in which
                        case the numeric result type is not
                        further
                        defined;
                    </description>
                    <location chapter="6" section="5.8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1746.5</id>
                    <description>otherwise, if there is an operand of type Long,
                        the result of the operation is of
                        type
                        Long, unless the method is quot, in which case the
                        numeric result type is not further
                        defined;
                    </description>
                    <location chapter="6" section="5.8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1746.6</id>
                    <description>otherwise, if there is an operand of integral
                        type, the result of the operation is
                        of
                        type Integer, unless the method is quot, in which case
                        the numeric result type is not
                        further
                        defined.
                    </description>
                    <location chapter="6" section="5.8.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1747</id>
            <description>
                In particular, when both operands are of integral types, the
                result of the division
                operation will be an integral type in some databases, and an
                non-integral type in others. Portable
                applications should not assume a particular result type.
            </description>
            <location chapter="6" section="5.8.1"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1748</id>
            <description>
                An Expression literal instance is obtained by passing a value to
                the literal method of the
                CriteriaBuilder
                interface.
            </description>
            <location chapter="6" section="5.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1749</id>
            <description>
                An Expression instance representing a null is created by the
                nullLiteral method of the CriteriaBuilder
                interface.
            </description>
            <location chapter="6" section="5.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1750</id>
            <description>
                A ParameterExpression instance is an expression that corresponds
                to a parameter whose value
                will be supplied before the query is executed. Parameter
                expressions can only be used in the
                construction
                of conditional predicates.
            </description>
            <location chapter="6" section="5.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1751</id>
            <description>
                The select list of a query is specified by use of the select or
                multiselect methods of the CriteriaQuery
                interface. The arguments to the select and multiselect methods
                are Selection
                instances.
            </description>
            <location chapter="6" section="5.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1752</id>
            <description>
                The select method takes a single Selection argument, which can
                be either an Expression
                instance or a CompoundSelection instance.
            </description>
            <location chapter="6" section="5.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1753</id>
            <description>
                The type of the Selection item must be assignable to the defined
                CriteriaQuery result type,
            </description>
            <location chapter="6" section="5.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1754</id>
            <description>
                The construct, tuple and array methods of the CriteriaBuilder
                interface are used to aggregate multiple
                selection items into a CompoundSelection instance.
            </description>
            <location chapter="6" section="5.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1755</id>
            <description>
                The multiselect method also supports the specification and
                aggregation of multiple selection
                items. When the multiselect method is used, the aggregation of
                the selection items is determined
                by the result type of the CriteriaQuery object
            </description>
            <location chapter="6" section="5.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1756</id>
            <description>
                A Selection instance passed to the construct method can be one
                of the following:
            </description>
            <location chapter="6" section="5.11"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1756.1</id>
                    <description>An Expression instance.</description>
                    <location chapter="6" section="5.11"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1756.2</id>
                    <description>A Selection instance obtained as the result of
                        the invocation of the
                        CriteriaBuilder
                        construct method.
                    </description>
                    <location chapter="6" section="5.11"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1757</id>
            <description>
                A Selection instance passed to the tuple method can be one of
                the following:
            </description>
            <location chapter="6" section="5.11"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1757.1</id>
                    <description>An Expression instance.</description>
                    <location chapter="6" section="5.11"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1757.2</id>
                    <description>A Selection instance obtained as the result of
                        the invocation of the
                        CriteriaBuilder
                        construct method.
                    </description>
                    <location chapter="6" section="5.11"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1758</id>
            <description>
                A Selection instance passed to the array method can be one of
                the following:
            </description>
            <location chapter="6" section="5.11"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1758.1</id>
                    <description>An Expression instance.</description>
                    <location chapter="6" section="5.11"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1758.2</id>
                    <description>A Selection instance obtained as the result of
                        the invocation of the
                        CriteriaBuilder
                        construct method.
                    </description>
                    <location chapter="6" section="5.11"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1759</id>
            <description>
                A Selection instance passed to the multiselect method can be one
                of the following:
            </description>
            <location chapter="6" section="5.11"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1759.1</id>
                    <description>An Expression instance.</description>
                    <location chapter="6" section="5.11"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1759.2</id>
                    <description>A Selection instance obtained as the result of
                        the invocation of the
                        CriteriaBuilder
                        construct method.
                    </description>
                    <location chapter="6" section="5.11"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1760</id>
            <description>The distinct method of the CriteriaQuery interface is
                used to specify that duplicate values
                must be eliminated from the query result.
            </description>
            <location chapter="6" section="5.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1761</id>
            <description>If the distinct method is not used or distinct(
                false) is invoked on the criteria query object, duplicate values
                are not eliminated.
            </description>
            <location chapter="6" section="5.11"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1762</id>
            <description>
                When distinct(true) is used, and the select items include
                embeddable objects or map entry results, the
                elimination of duplicates is undefined.
            </description>
            <location chapter="6" section="5.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1763</id>
            <description>
                The alias method of the Selection interface can be used to
                assign an alias to a selection item. The
                alias may then later be used to extract the corresponding item
                from the query result when the query is
                executed. The alias method assigns the given alias to the
                Selection item. Once assigned, the alias
                cannot be changed.
            </description>
            <location chapter="6" section="5.11.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1764</id>
            <description>Both correlated and non-correlated subqueries can be
                used in restriction predicates.
            </description>
            <location chapter="6" section="5.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1765</id>
            <description>A subquery is constructed through the creation and
                modification of a Subquery object.
            </description>
            <location chapter="6" section="5.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1766</id>
            <description>A Subquery instance can be passed as an argument to
                the
            </description>
            <location chapter="6" section="5.12"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1766.1</id>
                    <description>all</description>
                    <location chapter="6" section="5.12"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1766.2</id>
                    <description>any</description>
                    <location chapter="6" section="5.12"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1766.3</id>
                    <description>some</description>
                    <location chapter="6" section="5.12"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1767</id>
            <description>A Subquery instance can be passed to the
                CriteriaBuilder exists method to create a conditional
                predicate.
            </description>
            <location chapter="6" section="5.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1769</id>
            <description>
                Note that joins involving the derived subquery root do not
                affect the join conditions of the containing
                query.
            </description>
            <location chapter="6" section="5.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1770</id>
            <description>
                The groupBy method of the CriteriaQuery interface is used to
                define a partitioning of the query results
                into groups.
            </description>
            <location chapter="6" section="5.13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1771</id>
            <description>
                The having method of the CriteriaQuery interface can be used to
                filter over the groups.
            </description>
            <location chapter="6" section="5.13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1772</id>
            <description>The arguments to the groupBy method are Expression
                instances.
            </description>
            <location chapter="6" section="5.13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1773</id>
            <description>
                When the groupBy method is used, each selection item that is not
                the result of applying an aggregate
                method must correspond to a path expression that is used for
                defining the grouping.
            </description>
            <location chapter="6" section="5.13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1774</id>
            <description>
                An Order instance is created by means of the asc and desc
                methods of the CriteriaBuilder interface. An
                argument to either of these methods must be one of the
                following:
            </description>
            <location chapter="6" section="5.14"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1774.1</id>
                    <description>
                        Any Expression instance that corresponds to an orderable
                        state field of an entity or
                        embeddable class abstract schema type that is specified
                        as an argument to the select or
                        multiselect method or that is an argument to a tuple or
                        array constructor that is passed as
                        an argument to the select method.
                    </description>
                    <location chapter="6" section="5.14"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1774.2</id>
                    <description>
                        Any Expression instance that corresponds to the same
                        state field of the same entity or
                        embeddable abstract schema type as an Expression
                        instance that is specified as an argument
                        to the select or multiselect method or that is an
                        argument to a tuple or array constructor
                        that is passed as an argument to the select method.
                    </description>
                    <location chapter="6" section="5.14"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1774.3</id>
                    <description>
                        An Expression instance that is specified as an argument
                        to the select or multiselect
                        method or that is an argument to a tuple or array
                        constructor that is passed as an argument
                        to
                        the select method or that is semantically equivalent to
                        such an Expression instance.
                    </description>
                    <location chapter="6" section="5.14"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1775</id>
            <description>
                If more than one Order instance is specified, the order in which
                they appear in the argument list of the
                orderBy method determines the precedence, whereby the first item
                has highest precedence.
            </description>
            <location chapter="6" section="5.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1776</id>
            <description>SQL rules for the ordering of null values apply,
            </description>
            <location chapter="6" section="5.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1777</id>
            <description>
                A bulk update query is constructed through the creation and
                modification of a
                javax.persistence.criteria.CriteriaUpdate object.
            </description>
            <location chapter="6" section="5.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1778</id>
            <description>
                A CriteriaUpdate object is typed according to the entity type
                that is the target of the update.
            </description>
            <location chapter="6" section="5.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1779</id>
            <description>
                A CriteriaUpdate object has a single root, the entity that is
                being updated.
            </description>
            <location chapter="6" section="5.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1780</id>
            <description>
                A bulk delete query is constructed through the creation and
                modification of a
                javax.persistence.criteria.CriteriaDelete object.
            </description>
            <location chapter="6" section="5.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1781</id>
            <description>
                A CriteriaDelete object is typed according to the entity type
                that is the target of the delete.
            </description>
            <location chapter="6" section="5.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1782</id>
            <description>
                A CriteriaDelete object has a single root, the entity that is
                being deleted.
            </description>
            <location chapter="6" section="5.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1783</id>
            <description>
                Like bulk update and delete operations made through the Java
                Persistence query language, criteria API
                bulk update and delete operations map directly to database
                operations, bypassing any optimistic locking
                checks.
            </description>
            <location chapter="6" section="5.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1784</id>
            <description>
                The persistence context is not synchronized with the result of
                the bulk update or delete.
            </description>
            <location chapter="6" section="5.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1786</id>
            <description>
                The Criteria API provides the option of specifying the attribute
                references used in joins and navigation
                by attribute names used as arguments to the various methods.
            </description>
            <location chapter="6" section="7"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1786.1</id>
                    <description>join</description>
                    <location chapter="6" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1786.2</id>
                    <description>fetch</description>
                    <location chapter="6" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1786.3</id>
                    <description>get</description>
                    <location chapter="6" section="7"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1787</id>
            <description>
                A CriteriaQuery object may be modified, either before or after Query or
                TypedQuery objects have been created and
                executed from it.
            </description>
            <location chapter="6" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1788</id>
            <description>
                A CriteriaUpdate object may be modified, either before or after Query or
                TypedQuery objects have been created and
                executed from it.
            </description>
            <location chapter="6" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1789</id>
            <description>
                A CriteriaDelete object may be modified, either before or after Query or
                TypedQuery objects have been created and
                executed from it.
            </description>
            <location chapter="6" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1790</id>
            <description>
                modification may entail replacement of the where predicate or
                the select list. Modifications may thus
                result in the same query object âbaseâ being reused for several
                query instances.
            </description>
            <location chapter="6" section="8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1792</id>
            <description>
                A criteria query is executed by passing the CriteriaQuery object
                to the createQuery method of the
                EntityManager interface to create a TypedQuery object, which can
                then be passed to one of the query
                execution methods of the TypedQuery interface.
            </description>
            <location chapter="6" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1793</id>
            <description>
                A criteria query is executed by passing the CriteriaUpdate
                object to the createQuery method of the
                EntityManager interface to create a an executable
                Query object, which can then be passed to one of the query
                execution methods of the Query interface.
            </description>
            <location chapter="6" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1794</id>
            <description>
                A criteria query is executed by passing the CriteriaDelete
                object to the createQuery method of the
                EntityManager interface to create a Query object, which can then
                be passed to one of the query
                execution methods of the Query interface.
            </description>
            <location chapter="6" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1795</id>
            <description>
                A CriteriaQuery object may be further modified after an
                executable query object has been created from it. The
                modification of the CriteriaQuery object does not have any
                impact on the already created executable query
                object. If the modified CriteriaQuery object is passed to the
                createQuery method, the persistence
                provider must insure that a new executable query object is
                created and returned that reflects the semantics of
                the changed query definition.
            </description>
            <location chapter="6" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1796</id>
            <description>
                A CriteriaUpdate object may be further modified after an
                executable query object has been created from it. The
                modification of the CriteriaUpdate object does not have any
                impact on the already created executable query
                object. If the modified CriteriaQuery object is passed to the
                createQuery method, the persistence
                provider must insure that a new executable query object is
                created and returned that reflects the semantics of
                the changed query definition.
            </description>
            <location chapter="6" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1797</id>
            <description>
                A CriteriaDelete object may be further modified after an
                executable query object has been created from it. The
                modification of the CriteriaDelete object does not have any
                impact on the already created executable query
                object. If the modified CriteriaDelete object is passed to the
                createQuery method, the persistence
                provider must insure that a new executable query object is
                created and returned that reflects the semantics of
                the changed query definition.
            </description>
            <location chapter="6" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1798</id>
            <description>CriteriaQuery, CriteriaUpdate, and CriteriaDelete
                objects must be serializable.
            </description>
            <location chapter="6" section="9"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1799</id>
            <description>CriteriaQuery, CriteriaUpdate, and CriteriaDelete
                objects are not required to be interoperable
                across vendors.
            </description>
            <location chapter="6" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:842</id>
            <description>Both container-managed entity managers and
                application-managed entity managers and their
                persistence contexts are required to be supported in JavaEE web
                containers and EJB containers.
            </description>
            <location chapter="7" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:843</id>
            <description>In Java SE environments and in Java EE application
                client containers, only application-managed
                entity managers are required to be supported. NOTE the use of
                JTA is not required to be supported in
                application client containers.
            </description>
            <location chapter="7" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:844</id>
            <description>When container-managed entity managers are used (in
                Java EE environments), the application does
                not interact with the entity manager factory. The entity
                managers are obtained directly through
                dependency
                injection or from JNDI
            </description>
            <location chapter="7" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1800</id>
            <description>
                An entity manager must not be shared among multiple concurrently
                executing threads, as the entity
                manager and persistence context are not required to be
                threadsafe.
            </description>
            <location chapter="7" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1801</id>
            <description>A container-managed entity manager is obtained by the
                application through dependency injection
                or through direct lookup of the entity manager in the JNDI
                namespace.
            </description>
            <location chapter="7" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:845</id>
            <description>The PersistenceContext annotation is used for entity
                manager injection.
            </description>
            <location chapter="7" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:846</id>
            <description>The unitName element may optionally be specified to
                designate the persistence unit whose
                entity manager factory is used by the container.
            </description>
            <location chapter="7" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:847</id>
            <description>The type element specifies whether a transaction-scoped
                or extended persistence context is to
                be used.
            </description>
            <location chapter="7" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1802</id>
            <description>The synchronization element specifies whether the
                persistence context is always automatically
                joined to the current transaction (the default) or is not joined
                to the current transaction unless
                the joinTransaction method is invoked by the application.
            </description>
            <location chapter="7" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1803</id>
            <description>An application-managed entity manager is obtained by
                the application from an entity manager
                factory.
                The EntityManagerFactory API used to obtain an
                application-managed entity manager is the
                same independent of whether this API is used in Java EE or Java
                SE environments.
            </description>
            <location chapter="7" section="2.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:848</id>
            <description>The EntityManagerFactory interface is used by the
                application to create an application-managed
                entity manager.
            </description>
            <location chapter="7" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:849</id>
            <description>More than one entity manager factory instance may be
                available simultaneously in the JVM.
            </description>
            <location chapter="7" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:850</id>
            <description>Within a JavaEE environment, an entity manager factory
                may be injected using the
                PersistenceUnit annotation or obtained through JNDI lookup.
            </description>
            <location chapter="7" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1804</id>
            <description>The unitName element may optionally be specified to
                designate the persistence unit whose entity
                manager factory is used.
            </description>
            <location chapter="7" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:851</id>
            <description>Outside the JavaEE container environment, the
                javax.persistence.Persistence class is the
                bootstrap class that provides access to an entity manager
                factory. The application creates an entity
                manager factory by called the createEntityManagerFactory method
                of the javax.persistence.Persistence
                class.
            </description>
            <location chapter="7" section="3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:852</id>
            <description>The EntityManagerFactory interface is used by the
                application to obtain an application-managed
                entity manager.
            </description>
            <location chapter="7" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:853</id>
            <description>When the application has finished using the entity
                manager factory, and/or at application
                shutdown, the application should close the entity manager
                factory.
            </description>
            <location chapter="7" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1805</id>
            <description>Once an entity manager factory
                has been closed, all its entity managers are considered to be in
                the closed state.
            </description>
            <location chapter="7" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:854</id>
            <description>Any number of vendor-specific properties may be
                included in the map passed to
                createEntityManager method. Properties that are not recognized
                by a vendor must be ignored.
            </description>
            <location chapter="7" section="4"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2507</id>
            <description>Note that the policies of the installation environment may restrict some information from being made available through the EntityManagerFactory getProperties method
            </description>
            <location chapter="7" section="4"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2503</id>
            <description>
                Vendors should use vendor namespaces for properties (e.g., com.acme.persistence.logging).
                Entries that make use of the namespace javax.persistence and its subnamespaces must not be
                used for vendor-specific information. The namespace javax.persistence is reserved for use by this specification.
            </description>
            <location chapter="7" section="4"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:858</id>
            <description>A container-managed entity manager must be a JTA entity
                manager. JTA entity managers are only
                specified for use in Java EE containers
            </description>
            <location chapter="7" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:859</id>
            <description>An application-managed entity manager may be either a
                JTA entity manager or a resource-local
                entity manager.
            </description>
            <location chapter="7" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1806</id>
            <description>Entries that make use of the namespace
                javax.persistence and its subnamespaces must not be
                used for vendor-specific information.
            </description>
            <location chapter="7" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:855</id>
            <description>An entity manager is defined to be of a given
                transaction type - JTA or resource-local - at the
                time its underlying entity manager factory is configured and
                created.
            </description>
            <location chapter="7" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:856</id>
            <description>Both JTA entity managers and resource-local entity
                managers are required to be supported in
                JavaEE web and EJB containers.
            </description>
            <location chapter="7" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:857</id>
            <description>In general, in JavaSE environments, only resource-local
                entity managers are supported.
            </description>
            <location chapter="7" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1807</id>
            <description>
                A resource-local entity manager transaction is mapped to a
                resource transaction over the resource by the
                persistence provider. Resource-local entity managers may use
                server resources to connect to the database
                and are unaware of the presence of JTA transactions that may or
                may not be active.
            </description>
            <location chapter="7" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1808</id>
            <description>
                A resource-local entity manager transaction is mapped to a
                resource transaction over the resource by the
                persistence provider. Resource-local entity managers may use
                local resources to connect to the database
                and are unaware of the presence of JTA transactions that may or
                may not be active.
            </description>
            <location chapter="7" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:860</id>
            <description>The EntityTransaction interface is used to control
                resource transactions on resource-local
                entity
                managers. The EntityManager.getTransaction() method returns an
                instance of the EntityTransaction
                interface.
            </description>
            <location chapter="7" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1809</id>
            <description>
                When a resource-local entity manager is used, and the
                persistence provider runtime throws an exception
                defined to cause transaction rollback, the persistence provider
                must mark the transaction for rollback.
            </description>
            <location chapter="7" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1810</id>
            <description>
                If the EntityTransaction.commit operation fails, the persistence
                provider must roll back the
                transaction.
            </description>
            <location chapter="7" section="5.3"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:861</id>
            <description>When a container-managed entity manager is used, the
                lifecycle of the persistence context is
                always managed automatically, transparently to the application,
                and the persistence context is
                propagated with the JTA transaction.
            </description>
            <location chapter="7" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1811</id>
            <description>
                A container-managed persistence context may be defined to have
                either a lifetime that is scoped to a
                single
                transaction or an extended lifetime that spans multiple
                transactions, depending on the
                PersistenceContextType
                that is specified when its entity manager is created.
            </description>
            <location chapter="7" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1812</id>
            <description>
                The lifetime of the persistence context is declared using the
            </description>
            <location chapter="7" section="6"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1812.1</id>
                    <description>PersistenceContext annotation</description>
                    <location chapter="7" section="6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1812.2</id>
                    <description>persistence-context-ref deployment descriptor
                        element
                    </description>
                    <location chapter="7" section="6"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1813</id>
            <description>By default, a transaction-scoped persistence context is
                used.
            </description>
            <location chapter="7" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1814</id>
            <description>By default, a container-managed persistence context is
                of type
                SynchronizationType.SYNCHRONIZED.
            </description>
            <location chapter="7" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1815</id>
            <description>Such a persistence context is automatically joined to
                the current JTA transaction, and
                updates made to the persistence context are propagated to the
                underlying resource manager.
            </description>
            <location chapter="7" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1816</id>
            <description>A container-managed persistence context may be
                specified to be of type Synchronization-
                Type.UNSYNCHRONIZED.
            </description>
            <location chapter="7" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1817</id>
            <description>A persistence context of type
                SynchronizationType.UNSYNCHRONIZED is not enlisted in any JTA
                transaction unless explicitly joined to that transaction by the
                application.
            </description>
            <location chapter="7" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1818</id>
            <description>The persistence context remains joined to the
                transaction until the transaction commits or
                rolls back.
            </description>
            <location chapter="7" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1819</id>
            <description>After the transaction commits or rolls back, the
                persistence context will not be joined to any
                subsequent transaction unless the joinTransaction method is
                invoked in the scope of that subsequent
                transaction.
            </description>
            <location chapter="7" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1820</id>
            <description>A persistence context of type
                SynchronizationType.UNSYNCHRONIZED must not be flushed to the
                database unless it is joined to a transaction.
            </description>
            <location chapter="7" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1821</id>
            <description>The application's use of queries with pessimistic
                locks, bulk update or delete queries, etc.
                result in the provider throwing the
                TransactionRequiredException.
            </description>
            <location chapter="7" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1822</id>
            <description>After the persistence context has been joined to the
                JTA transaction, these operations are
                again allowed.
            </description>
            <location chapter="7" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1823</id>
            <description>The application is permitted to invoke the persist,
                merge, remove, and refresh entity lifecycle
                operations on an entity manager of type
                SynchronizationType.UNSYNCHRONIZED independent of whether the
                persistence context is joined to the current transaction.
            </description>
            <location chapter="7" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1824</id>
            <description>After the persistence context has been joined to a
                transaction, changes in a persistence
                context can be flushed to the database either explicitly by the
                application or by the provider.
            </description>
            <location chapter="7" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1825</id>
            <description>If the flush method is not explicitly invoked, the
                persistence provider may defer flushing
                until commit time depending on the operations invoked and the
                flush mode setting in effect.
            </description>
            <location chapter="7" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1826</id>
            <description>If a persistence context of type
                SynchronizationType.UNSYNCHRONIZED has not been joined to the
                current JTA transaction, rollback of the JTA transaction will
                have no effect upon the persistence
                context.
            </description>
            <location chapter="7" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1827</id>
            <description>If an extended persistence context of type
                SynchronizationType.UNSYNCHRONIZED has been joined to the JTA
                transaction, transaction rollback will cause the persistence
                context
            </description>
            <location chapter="7" section="6.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1827.1</id>
                    <description>to be cleared</description>
                    <location chapter="7" section="6.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1827.2</id>
                    <description>and all pre-existing managed instances to
                        become detached.
                    </description>
                    <location chapter="7" section="6.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1827.3</id>
                    <description>and all removed instances to become detached.
                    </description>
                    <location chapter="7" section="6.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1828</id>
            <description>When a JTA transaction exists, a persistence context of
                type SynchronizationType.UNSYNCHRONIZED
                is propagated with that transaction regardless of whether the
                persistence context has been joined to
                that transaction.
            </description>
            <location chapter="7" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1829</id>
            <description>The application can obtain a container-managed entity
                manager with transaction-scoped
                persistence context by
            </description>
            <location chapter="7" section="6.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1829.1</id>
                    <description>injection</description>
                    <location chapter="7" section="6.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1829.2</id>
                    <description>direct lookup in the JNDI namespace
                    </description>
                    <location chapter="7" section="6.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1830</id>
            <description>The persistence context type for the entity manager is
                defaulted or defined as
                PersistenceContextType.TRANSACTION.
            </description>
            <location chapter="7" section="6.2"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:862</id>
            <description>A new persistence context begins when the
                container-managed entity manager is invoked in the
                scope of an active JTA transaction, and there is no current
                persistence context already associated with
                the JTA transaction. The persistence context is created and then
                associated with the JTA transaction
            </description>
            <location chapter="7" section="6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:863</id>
            <description>The persistence context ends when the associated JTA
                transaction commits or rolls back, and all
                entities that were managed by the EntityManager become detached.
                Note that this applies to a
                transaction-scoped persistence context of type
                SynchronizationType.UNSYNCHRONIZED that has not been
                joined to the transaction as well.
            </description>
            <location chapter="7" section="6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:864</id>
            <description>If the entity manager is invoked outside the scope of a
                transaction, any entities loaded from
                the database will immediately become detached at the end of the
                method call.
            </description>
            <location chapter="7" section="6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:865</id>
            <description>A container-managed extended persistence context can
                only be initiated within the scope of a
                stateful session bean. It exists from the point at which the
                stateful session bean that declares a
                dependency on an
                entity manager of type PersistenceContextType.EXTENDED is
                created, and is said to be bound to the
                stateful session bean.
            </description>
            <location chapter="7" section="6.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:866</id>
            <description>The dependency on the extended persistence context is
                declared by means of the
                PersistenceContext annotation or persistence-context-ref
                deployment descriptor element
            </description>
            <location chapter="7" section="6.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:867</id>
            <description>A container-managed extended persistence context can
                only be initiated within the scope of a
                stateful session bean.
            </description>
            <location chapter="7" section="6.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1831</id>
            <description>The persistence context is closed by the container when
                the
            </description>
            <location chapter="7" section="6.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1831.1</id>
                    <description>@Remove method of the stateful session bean
                        completes
                    </description>
                    <location chapter="7" section="6.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1831.2</id>
                    <description>the stateful session bean instance is otherwise
                        destroyed
                    </description>
                    <location chapter="7" section="6.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:868</id>
            <description>If a stateful session bean instantiates a stateful
                session bean (executing in the same EJB
                container instance) which also has such an extended persistence
                context with the same synchronization
                type, the
                extended persistence context of the first stateful session bean
                is inherited by the second stateful
                session
                bean and bound to it, and this rule recursively
                appliesâindependently of whether transactions are active
                or not at the point of the creation of the stateful session
                beans.
            </description>
            <location chapter="7" section="6.3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1832</id>
            <description>If the stateful session beans differ in declared
                synchronization type, the EJBException is
                thrown by the container.
            </description>
            <location chapter="7" section="6.3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:869</id>
            <description>If the persistence context has been inherited by any
                stateful session beans, the container does
                not close the persistence context until all such stateful
                session beans have been removed or otherwise
                destroyed.
            </description>
            <location chapter="7" section="6.3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1833</id>
            <description>a single persistence context may correspond to one or
                more JTA entity manager
                instances (all associated with the same entity manager factory)
            </description>
            <location chapter="7" section="6.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1834</id>
            <description>Entity manager instances obtained from different entity
                manager factories never share the same
                persistence context.
            </description>
            <location chapter="7" section="6.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:870</id>
            <description>The persistence context is propagated across the entity
                manager instances as the JTA
                transaction is propagated. Propagation of persistence contexts
                only applies within a local environment.
                Persistence contexts are not propagated to remote tiers.
            </description>
            <location chapter="7" section="6.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1835</id>
            <description>A persistence context of type
                SynchronizationType.UNSYNCHRONIZED is propagated with the JTA
                transaction regardless of whether it has been joined to the
                transaction.
            </description>
            <location chapter="7" section="6.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:871</id>
            <description>If a component is called and there is no JTA
                transaction or the JTA transaction is not
                propagated, the persistence context is not propagated.
            </description>
            <location chapter="7" section="6.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:872</id>
            <description>If an entity manager is invoked from within the
                component:
            </description>
            <location chapter="7" section="6.4.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:873</id>
                    <description>Invocation of an entity manager defined with
                        PersistenceContextType.TRANSACTION
                        will
                        result in use of a new persistence context.
                    </description>
                    <location chapter="7" section="6.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:874</id>
                    <description>Invocation of an entity manager defined with
                        the PersistenceContextType.EXTENDED
                        will
                        result in the use of the existing extended persistence
                        context bound to that component.
                    </description>
                    <location chapter="7" section="6.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:875</id>
                    <description>If the entity manager is invoked within a JTA
                        transaction the persistence context
                        will
                        be associated to the JTA transaction.
                    </description>
                    <location chapter="7" section="6.4.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:876</id>
            <description>If a component is called and the JTA transaction is
                propagated into that component:
            </description>
            <location chapter="7" section="6.4.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:877</id>
                    <description>If the component is a stateful session bean to
                        which an extended persistence
                        context
                        has been bound and there is a different persistence
                        context bound to the JTA transaction, an
                        EJBException is thrown by the container.
                    </description>
                    <location chapter="7" section="6.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:876.1</id>
                    <description>If there is a persistence context of type
                        SynchronizationType.UNSYNCHRONIZED
                        associated with the JTA transaction and the target
                        component specifies a persistence context
                        of
                        type SynchronizationType.SYNCHRONIZED, the IllegalStateException
                        is thrown by the container.
                    </description>
                    <location chapter="7" section="6.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:878</id>
                    <description>Otherwise, if there is a persistence context
                        associated to the JTA transaction,
                        that
                        persistence context is propagated and used.
                    </description>
                    <location chapter="7" section="6.4.1"/>
                </assertion>
            </sub-assertions>
            <assertion required="true" impl-spec="false" defined-by="technology"
                       status="active"
                       testable="true">
                <id>PERSISTENCE:SPEC:878</id>
                <description>Note that a component with a
                    persistence context of type
                    SynchronizationType.UNSYNCHRONIZED may be called by a
                    component propagating either a persistence context of type
                    SynchronizationType.UNSYNCHRONIZED or a persistence context
                    of type SynchronizationType.SYNCHRONIZED into it.
                </description>
                <location chapter="7" section="6.4.1"/>
            </assertion>

        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:879</id>
            <description>When an application-managed entity manager is used, the
                application interacts directly with the
                persistence provider's entity manager factory to manage the
                entity manager lifecycle and to obtain and
                destroy persistence contexts.
                All such application-managed persistence contexts are extended
                in scope, and can span multiple
                transactions.
            </description>
            <location chapter="7" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:880</id>
            <description>The EntityManagerFactory.createEntityManager method and
                the EntityManager
                close and isOpen methods are used to manage the lifecycle of an
                application-managed entity manager
                and its associated persistence context.
            </description>
            <location chapter="7" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:885</id>
            <description>The extended persistence context exists from the point
                at which the entity manager has been
                created using EntityManagerFactory.createEntityManager until the
                entity manager is closed by means of
                EntityManager.close. An extended persistence context obtained
                from the application-managed entity
                manager is a stand-alone persistence contextâit is not
                propagated with the transaction.
            </description>
            <location chapter="7" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1836</id>
            <description>When a JTA application-managed entity manager is used,
                an application-managed persistence
                context
                may be specified to be of type
                SynchronizationType.UNSYNCHRONIZED. A persistence context
                of type SynchronizationType.UNSYNCHRONIZED is not enlisted in
                any JTA transaction
                unless explicitly joined to that transaction by the application.
            </description>
            <location chapter="7" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1837</id>
            <description>A persistence context of type
                SynchronizationType.UNSYNCHRONIZED is enlisted in a JTA
                transaction and registered for subsequent transaction
                notifications against that transaction by the
                invocation of the EntityManager join Transaction method. The
                persistence context remains joined to the
                transaction until the transaction
                commits or rolls back.
            </description>
            <location chapter="7" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1838</id>
            <description>After the transaction commits or rolls back, the
                persistence context will not be joined to any
                subsequent transaction unless the joinTransaction method is
                invoked in the scope of that subsequent
                transaction.
            </description>
            <location chapter="7" section="7"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:886</id>
            <description>When a JTA application-managed entity manager is used,
                if the entity manager is created outside
                the scope of the current JTA transaction, it is the
                responsibility of the application to join the entity
                manager to the transaction (if desired) by calling
                EntityManager.joinTransaction.
            </description>
            <location chapter="7" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1839</id>
            <description>If the entity manager is created outside the scope of a
                JTA transaction, it is not joined to
                the transaction unless EntityManager.joinTransaction is called.
            </description>
            <location chapter="7" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:881</id>
            <description>The EntityManager.close() closes the entity manager to
                release its persistence context and any
                other resources.
            </description>
            <location chapter="7" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:882</id>
            <description>After calling close, the application must not invoke
                any further methods on the EntityManager
                instance except for getTransaction and IsOpen or the
                IllegalStateException will be thrown.
            </description>
            <location chapter="7" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:883</id>
            <description>If the close method is invoked when a transaction is
                active, the persistence context remains
                managed until the transaction completes.
            </description>
            <location chapter="7" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:884</id>
            <description>The EntityManager.isOpen method indicates whether the
                entity manager is open. The isOpen
                method returns true until the entity manager has been closed.
            </description>
            <location chapter="7" section="7"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:887</id>
            <description>Requirements on the Container</description>
            <location chapter="7" section="8"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:888</id>
                    <description>Application Managed Persistence Contexts
                    </description>
                    <location chapter="7" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:889</id>
                    <description>Container Managed Persistence Contexts
                    </description>
                    <location chapter="7" section="8.2"/>
                </assertion>
            </sub-assertions>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1840</id>
            <description>When application-managed persistence contexts are used,
                the container must instantiate the
                entity manager factory and expose it to the application via
                JNDI.
            </description>
            <location chapter="7" section="8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1841</id>
            <description>However, the container is required to support
                third-party persistence
                providers, and in this case the container must use the
                PersistenceProvider.createContainerEntityManagerFactory method
                to create the
                entity manager factory and the EntityManagerFactory.close method
                to destroy the entity
                manager factory prior to shutdown (if it has not been previously
                closed by the application).
            </description>
            <location chapter="7" section="8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1842</id>
            <description>The container is responsible for managing the lifecycle
                of container-managed persistence
                contexts, for injecting EntityManager references into
            </description>
            <location chapter="7" section="8.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1842.1</id>
                    <description>web components</description>
                    <location chapter="7" section="8.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1842.2</id>
                    <description>session bean</description>
                    <location chapter="7" section="8.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1842.3</id>
                    <description>message-driven bean components</description>
                    <location chapter="7" section="8.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1842.4</id>
                    <description>and for making EntityManager references
                        available to direct lookups in JNDI.
                    </description>
                    <location chapter="7" section="8.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1843</id>
            <description>When operating with a third-party persistence provider,
                the container uses the contracts to
                create and destroy container-managed persistence contexts.
            </description>
            <location chapter="7" section="8.2"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1844</id>
            <description>It is undefined whether a new entity manager instance
                is created for every persistence context,
                or whether entity manager instances are sometimes reused.
            </description>
            <location chapter="7" section="8.2"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1845</id>
            <description>Exactly how the container maintains the association
                between persistence context and JTA
                transaction is not defined.
            </description>
            <location chapter="7" section="8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1846</id>
            <description>If a persistence context is already associated with a
                JTA transaction, the container uses that
                persistence context for subsequent invocations within the scope
                of that transaction
            </description>
            <location chapter="7" section="8.2"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:890</id>
            <description>
                Runtime Contracts between the Container and Persistence Provider
            </description>
            <location chapter="7" section="9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:891</id>
            <description>Container Responsibilities</description>
            <location chapter="7" section="9.1"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:892</id>
            <description>Provider Responsibilities</description>
            <location chapter="7" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1847</id>
            <description>
                For the management of a transaction-scoped persistence context,
                if there is no EntityManager already
                associated with the JTA transaction:
            </description>
            <location chapter="7" section="9.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1847.1</id>
                    <description>
                        The container creates a new entity manager by calling
                        EntityManagerFactory.createEntityManager
                        when the first invocation of an entity manager with
                        PersistenceContextType.TRANSACTION
                        occurs
                        within the scope of a business method executing in the
                        JTA transaction.
                    </description>
                    <location chapter="7" section="9.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1847.2</id>
                    <description>
                        After the JTA transaction has completed (either by
                        transaction commit or rollback), the
                        container closes the entity manager by calling
                        EntityManager.close. Note that the JTA
                        transaction may rollback in a background thread (e.g., as a result of transaction timeout), in
                        which case the container should arrange for the entity manager to be closed but the Entity-
                        Manager.close method should not be concurrently invoked while the application is in an
                        EntityManager invocation.
                    </description>
                    <location chapter="7" section="9.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1848</id>
            <description>
                The container must throw the TransactionRequiredException if a
                transaction-scoped persistence context is
                used and
            </description>
            <location chapter="7" section="9.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1848.1</id>
                    <description>and the EntityManager persist method is invoked
                        when no transaction is active.
                    </description>
                    <location chapter="7" section="9.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1848.2</id>
                    <description>and the EntityManager remove method is invoked
                        when no transaction is active.
                    </description>
                    <location chapter="7" section="9.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1848.3</id>
                    <description>and the EntityManager merge method is invoked
                        when no transaction is active.
                    </description>
                    <location chapter="7" section="9.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1848.4</id>
                    <description>and the EntityManager refresh method is invoked
                        when no transaction is active.
                    </description>
                    <location chapter="7" section="9.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1849</id>
            <description>For stateful session beans with extended persistence
                contexts:
            </description>
            <location chapter="7" section="9.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1849.1</id>
                    <description>
                        The container creates an entity manager by calling
                        EntityManagerFactory.createEntityManager
                        when
                        a stateful session bean is created that declares a
                        dependency on an entity manager with
                        PersistenceContextType.EXTENDED.
                    </description>
                    <location chapter="7" section="9.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1849.2</id>
                    <description>The container closes the entity manager by
                        calling EntityManager.close after the
                        stateful session bean and all other stateful session
                        beans that have inherited the same
                        persistence context as the entity manager have been
                        removed.
                    </description>
                    <location chapter="7" section="9.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1849.3</id>
                    <description>When a business method of the stateful session
                        bean is invoked, if the stateful
                        session
                        bean uses container managed transaction demarcation, and
                        the entity manager is not already
                        associated with the current JTA transaction, the
                        container associates the entity manager
                        with
                        the current JTA transaction and, if the persistence
                        context is of type
                        SynchronizationType.SYNCHRONIZED, the container calls
                        EntityManager. joinTransaction. If
                        there
                        is a different persistence context already associated
                        with the JTA transaction, the
                        container
                        throws the EJBException.
                    </description>
                    <location chapter="7" section="9.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1849.4</id>
                    <description>When a business method of the stateful session
                        bean is invoked, if the stateful
                        session
                        bean uses bean managed transaction demarcation and a
                        UserTransaction is begun within the
                        method,
                        the container associates the persistence context with
                        the JTA transaction and, if the
                        persistence context is of type
                        SynchronizationType.SYNCHRONIZED, the container calls
                        EntityManager.joinTransaction.
                    </description>
                    <location chapter="7" section="9.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1850</id>
            <description>The container must throw the IllegalStateException if
                the application calls EntityManager.
                close on a container-managed entity manager.
            </description>
            <location chapter="7" section="9.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1851</id>
            <description>
                When the container creates an entity manager, it may pass a map
                of properties to the persistence
                provider by using the
                EntityManagerFactory.createEntityManager(Map map) method. If
                properties have been
                specified in the PersistenceContext annotation or the
                persistence-context-ref deployment descriptor
                element, this method must be used and the map must include the
                specified properties.
            </description>
            <location chapter="7" section="9.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1852</id>
            <description>If the application invokes EntityManager.unwrap(Class
                &lt;T&gt;
                cls), and the container cannot
                satisfy the request, the container must delegate the unwrap
                invocation to the providerâs entity manager
                instance.
            </description>
            <location chapter="7" section="9.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1853</id>
            <description>When EntityManagerFactory.createEntityManager is
                invoked, the provider must create and return a
                new entity manager.
            </description>
            <location chapter="7" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1854</id>
            <description>If a JTA transaction is active and the persistence
                context is of type
                SynchronizationType.SYNCHRONIZED, the provider must register for
                synchronization notifications against
                the JTA transaction.
            </description>
            <location chapter="7" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1855</id>
            <description>When EntityManager.joinTransaction is invoked, the
                provider must register for synchronization
                notifications against the current JTA transaction if a previous
                joinTransaction invocation for the
                transaction has not already been processed.
            </description>
            <location chapter="7" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1856</id>
            <description>When the JTA transaction commits, if the persistence
                context is of type SynchronizationType.
                SYNCHRONIZED or has otherwise been joined to the transaction,
                the provider must flush all modified
                entity state to the database.
            </description>
            <location chapter="7" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1857</id>
            <description>When the JTA transaction rolls back, the provider must
                detach all managed entities if the
                persistence context is of type SynchronizationType.SYNCHRONIZED
                or has otherwise been joined to the
                transaction. Note that the JTA transaction may rollback in a background
                thread (e.g., as a result of transaction timeout), in which case the provider should arrange for
                the managed entities to be detached from the persistence context but not concurrently while the
                application is in an EntityManager invocation.
            </description>
            <location chapter="7" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1858</id>
            <description>When the provider throws an exception defined to cause
                transaction rollback, the provider must
                mark the transaction for rollback if the persistence context is
                of type SynchronizationType.SYNCHRONIZED
                or has otherwise been joined to the transaction.
            </description>
            <location chapter="7" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1859</id>
            <description>When EntityManager.close is invoked, the provider
                should release all resources that it may have
                allocated after any outstanding transactions involving the
                entity manager have completed. If the entity
                manager was already in a closed state, the provider must throw
                the IllegalStateException.
            </description>
            <location chapter="7" section="9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1860</id>
            <description>When EntityManager.clear is invoked, the provider must
                detach all managed entities.
            </description>
            <location chapter="7" section="9.2"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:893</id>
            <description>Within Java EE environments, an EJB-JAR, WAR, EAR, or
                application client JAR can define a
                persistence unit. Any number of persistence units may be defined
                within these scopes.
            </description>
            <location chapter="8" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:894</id>
            <description>A persistence unit may be packaged:</description>
            <location chapter="8" section="2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:895</id>
                    <description>within one or more jar files contained within a
                        WAR
                    </description>
                    <location chapter="8" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:896</id>
                    <description>one or more jar files contained within an EAR
                    </description>
                    <location chapter="8" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:897</id>
                    <description>as a set of classes within an EJB-JAR file
                    </description>
                    <location chapter="8" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:898</id>
                    <description>a set of classes in the WAR classes directory
                    </description>
                    <location chapter="8" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:899</id>
                    <description>as a combination of these</description>
                    <location chapter="8" section="2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:900</id>
            <description>A persistence unit is defined by a persistence.xml
                file. The jar file or directory whose
                META-INF directory contains the persistence.xml file is termed
                the root of the persistence unit.
                In Java EE environments, the root of a persistence unit may be
                one of the following:
            </description>
            <location chapter="8" section="2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:901</id>
                    <description>an EJB-JAR file</description>
                    <location chapter="8" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:902</id>
                    <description>the WEB-INF classes directory of a WAR file
                        [the root of the persistence unit - in
                        this
                        case - is the WEB-INF/classes directory; the
                        persistence.xml file is therefore contained in
                        the
                        WEB-INF/classes/META-INF directory.
                    </description>
                    <location chapter="8" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:903</id>
                    <description>a jar file in the WEB-INF/lib directory of a
                        WAR file
                    </description>
                    <location chapter="8" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:904</id>
                    <description>a jar file in the root of the EAR</description>
                    <location chapter="8" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:905</id>
                    <description>a jar file in the EAR library directory
                    </description>
                    <location chapter="8" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:906</id>
                    <description>an application client jar file</description>
                    <location chapter="8" section="2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:907</id>
            <description>It is not required that an EJB-JAR or WAR file
                containing a persistence unit be packaged in an
                EAR unless the persistence unit contains persistence classes in
                addition to those contained in the
                EJB-JAR or WAR.
            </description>
            <location chapter="8" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:908</id>
            <description>A persistence unit must have a name.</description>
            <location chapter="8" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:909</id>
            <description>Only one persistence unit of any given name may be
                defined:
            </description>
            <location chapter="8" section="2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:910</id>
                    <description>within a single EJB-JAR file</description>
                    <location chapter="8" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:911</id>
                    <description>within a single WAR file</description>
                    <location chapter="8" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:912</id>
                    <description>within a single application client jar
                    </description>
                    <location chapter="8" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:913</id>
                    <description>within an EAR</description>
                    <location chapter="8" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:914</id>
                    <description>within an EAR in the lib directory
                    </description>
                    <location chapter="8" section="2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:915</id>
            <description>The persistence.xml file may be used to designate more
                than one persistence unit within the
                same scope.
            </description>
            <location chapter="8" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:916</id>
            <description>All persistence classes defined at the level of the
                Java EE EAR must be accessible to other
                J2EE components in the applicationâi.e. loaded by the
                application classloaderâsuch
                that if the same entity class is referenced by two different
                Java EE components (which may be using
                different persistence units), the referenced class is the same
                identifical class.
            </description>
            <location chapter="8" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:917</id>
            <description>In Java SE environments, the metadata mapping files,
                jar files, and classes described in the
                following sections can be used.
                To insure portability of a Java SE application, it is necessary
                to explicitly list the managed
                persistence classes that are included in the persistence unit
                using the class element of the
                persistence.xml file.
            </description>
            <location chapter="8" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:918</id>
            <description>A persistence.xml file defines a persistence unit. The
                persistence.xml file is located in the
                META-INF directory of the root of the persistence unit. It may
                be used to specify managed persistence
                classes included in the persistence unit, object/relational
                mapping information for those classes,
                scripts
                for use in schema generation and the bulk loading of data, and
                other configuration information for the persistence unit and for
                the entity manager(s) and entity
                manager
                factory for the persistence unit. This information may be
                defined by containment or by reference,
                as described below.
            </description>
            <location chapter="8" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:919</id>
            <description>The object/relational mapping information can take the
                form of:
            </description>
            <location chapter="8" section="2.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:920</id>
                    <description>annotations on the managed persistence classes
                        included in the persistence unit
                    </description>
                    <location chapter="8" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:919.1</id>
                    <description>an orm.xml file contained in the META-INF
                        directory of the root of the persistence
                        unit
                    </description>
                    <location chapter="8" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:921</id>
                    <description>one or more XML files contained in the root of
                        the persistence unit
                    </description>
                    <location chapter="8" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:922</id>
                    <description>one or more XML files on the classpath and
                        referenced from the persistence.xml
                    </description>
                    <location chapter="8" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:923</id>
                    <description>a combination of above</description>
                    <location chapter="8" section="2.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:924</id>
            <description>The managed persistence classes may either be:
            </description>
            <location chapter="8" section="2.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:925</id>
                    <description>contained within the root of the persistence
                        archive
                    </description>
                    <location chapter="8" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:926</id>
                    <description>specified by referenceâi.e., by naming the
                        classes, class archives, or XML mapping
                        files
                        (which in turn reference classes) that are accessible on
                        the application classpath
                    </description>
                    <location chapter="8" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:927</id>
                    <description>specified by some combination of these means.
                    </description>
                    <location chapter="8" section="2.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:928</id>
            <description>The persistence element consists of one or more
                persistence-unit elements.
            </description>
            <location chapter="8" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:929</id>
            <description>The persistence-unit element consists of the name and
                transaction-type attributes and the
                following sub-elements: description, provider, jta-data-source,
                non-jta-data-source, mapping-file,
                jar-file, class, exclude-unlisted-classes, shared-cache-mode,
                validation-mode, and properties.
            </description>
            <location chapter="8" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:930</id>
            <description>The name attribute is required; the other attributes
                and elements are optional.
            </description>
            <location chapter="8" section="2.1"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:932</id>
            <description>The name attribute defines the name for the persistence
                unit. This name is used to identify the
                persistence unit referred to by the PersistenceContext and
                PersistenceUnit annotations and
                the programmatic API for creating EntityManagers and
                EntityManager Factories.
            </description>
            <location chapter="8" section="2.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1861</id>
            <description>The name attribute defines the name for the persistence
                unit. This name is used to identify the
                persistence unit referred to by the PersistenceContext and
                PersistenceUnit annotations and
                the programmatic API for creating an entity manager factory.
            </description>
            <location chapter="8" section="2.1.1"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:936</id>
            <description>The transaction-type attribute is used to specify
                whether the entity managers provided by the
                entity
                manager factory for the persistence unit must be JTA entity
                managers or resource-local entity managers.
            </description>
            <location chapter="8" section="2.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:937</id>
            <description>The value of this element is JTA or RESOURCE_LOCAL.
            </description>
            <location chapter="8" section="2.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1862</id>
            <description>A transaction-type of JTA assumes that a JTA data
                source will be providedâeither as specified
                by the jta-data-source element or provided by the container.
            </description>
            <location chapter="8" section="2.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1863</id>
            <description>in Java EE environments, a transaction-type of
                RESOURCE_LOCAL assumes that a non-JTA datasource
                will be provided.
            </description>
            <location chapter="8" section="2.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:938</id>
            <description>In a Java EE environment, if this element is not
                specified, the default is JTA.
            </description>
            <location chapter="8" section="2.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1864</id>
            <description>In a Java SE environment, if this element is not
                specified,the default is RESOURCE_LOCAL.
            </description>
            <location chapter="8" section="2.1.2"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:931</id>
            <description>The description element provides optional descriptive
                information about the persistence unit.
            </description>
            <location chapter="8" section="2.1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:933</id>
            <description>The provider element specifies the name of the
                persistence provider's
                javax.persistence.spi.PersistenceProvider class.
            </description>
            <location chapter="8" section="2.1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:934</id>
            <description>The provider element is optional, but should be
                specified if the application is dependent upon
                a particular persistence provider being used.
            </description>
            <location chapter="8" section="2.1.4"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:939</id>
            <description>In Java EE environments, the jta-data-source and
                non-jta-data-source elements is used to
                specify the JNDI name of the JTA and/or non-JTA data source to
                be used by the persistence
                provider.
            </description>
            <location chapter="8" section="2.1.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:940</id>
            <description>If neither is specified, the deployer must specify a
                JTA data source at deployment or the default JTA
                data source must be provided by the container and a JTA
                EntityManagerFactory will be created to
                correspond to it.
            </description>
            <location chapter="8" section="2.1.5"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="removed" testable="false">
            <id>PERSISTENCE:SPEC:941</id>
            <description>These elements name the data source in the local
                environment; the format of these names and the
                ability to specify the names are product specific.
            </description>
            <location chapter="8" section="2.1.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:942</id>
            <description>In Java SE environments, these elements may be used or
                the data source information may be
                specified by other means - depending upon the requirements of
                the provider.
            </description>
            <location chapter="8" section="2.1.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:943</id>
            <description>The following classes must be implicitly or explicitly
                denoted as managed persistence classes
                to be included within a persistence unit:
                entity classes; embeddadble classes; mapped superclasses;
                converter classes
            </description>
            <location chapter="8" section="2.1.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:944</id>
            <description>The set of managed persistence classes that are managed
                by a persistence unit is defined by
                using one or more of the following:
            </description>
            <location chapter="8" section="2.1.6"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:948</id>
                    <description>Annotated managed persistence classes contained
                        in the root of the persistence unit
                        (unless the exclude-unlisted-classes element is
                        specified)
                    </description>
                    <location chapter="8" section="2.1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:945</id>
                    <description>One or more object/relational mapping XML
                        files
                    </description>
                    <location chapter="8" section="2.1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:946</id>
                    <description>One or more jar files that will be searched for
                        classes
                    </description>
                    <location chapter="8" section="2.1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:947</id>
                    <description>An explicit list of classes</description>
                    <location chapter="8" section="2.1.6"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:964</id>
            <description>The set of entities managed by the persistence unit is
                the union of these sources, with the
                mapping metadata annotations (or annotation defaults) for any
                given class being overridden by the XML
                mapping information file if there are both annotations as well
                as XML mappings for that class
            </description>
            <location chapter="8" section="2.1.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1865</id>
            <description>
                The minimum portable level of overriding is at the level of the
                persistent field or property.
            </description>
            <location chapter="8" section="2.1.6"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:966</id>
            <description>The classes and/or jars that are named as part of a
                persistence unit must be on the classpath;
                referencing them from the persistence.xml file does not cause
                them to be placed on the classpath.
            </description>
            <location chapter="8" section="2.1.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:967</id>
            <description>All classes must be on the classpath to ensure that
                entity managers from different persistence
                units that map the same class will be accessing the same
                identical class.
            </description>
            <location chapter="8" section="2.1.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:961</id>
            <description>All classes contained in the root of the persistence
                unit are searched for annotated managed
                persistence classesâclasses with the Entity, Embeddable,
                MappedSuperclass, or Converter annotationâand
                any mapping
                metadata annotations found on these classes will be processed,
                or they will be mapped using the mapping
                annotation defaults
            </description>
            <location chapter="8" section="2.1.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:962</id>
            <description>If it is not intended that the annotated persistence
                classes contained in the root of the
                persistence unit be included in the persistence unit, the
                exclude-unlisted-classes element must be
                specified as true.
            </description>
            <location chapter="8" section="2.1.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:963</id>
            <description>The exclude-unlisted-classes element is not intended
                for use in Java SE environments.
            </description>
            <location chapter="8" section="2.1.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:949</id>
            <description>A object/relational mapping XML file named orm.xml
            </description>
            <location chapter="8" section="2.1.6.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:950</id>
                    <description>may be specified in the META-INF directory in
                        the root of the persistence unit
                    </description>
                    <location chapter="8" section="2.1.6.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:951</id>
                    <description>or in the META-INF directory of any jar file
                        referenced by the persistence.xml
                    </description>
                    <location chapter="8" section="2.1.6.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:952</id>
                    <description>Alternatively, or in addition, one or more
                        mapping files may be referenced by the
                        mapping-file elements of the persistence-unit element
                    </description>
                    <location chapter="8" section="2.1.6.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:949.1</id>
                    <description>These mapping files may be present anywhere on
                        the class path.
                    </description>
                    <location chapter="8" section="2.1.6.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:953</id>
            <description>If a mapping file is specified, the classes and mapping
                information specified in the mapping
                file will be used.
            </description>
            <location chapter="8" section="2.1.6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:954</id>
            <description>If multiple mapping files are specified (possibly
                including an orm.xml file), the resulting
                mappings are obtained by combining the mappings from all the
                files
            </description>
            <location chapter="8" section="2.1.6.2"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:955</id>
            <description>The result is undefined if multiple mapping files
                (including any orm.xml file) referenced
                within a single persistence unit contain overlapping mapping
                information for any given class.
            </description>
            <location chapter="8" section="2.1.6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:956</id>
            <description>The object/relational mapping information contained in
                any mapping file referenced within the
                persistence unit must be disjoint at the class-level from
                object/relational mapping information
                contained in any other such mapping file.
            </description>
            <location chapter="8" section="2.1.6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:957</id>
            <description>One or more jar files may be specified using the
                jar-file elements instead of, or in addition
                to the mapping files specified in the mapping-files elements.
                If specified, these JAR files will be searched for managed
                persistence classes and any mapping
                metadata annotations found on them will be processed or they
                will be mapped using the mapping annotation
                defaults defined by this specification.
                Such JAR files are specified relative to the directory or jar
                file that contains the root of the
                persistence unit.
            </description>
            <location chapter="8" section="2.1.6.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:958</id>
            <description>A list of named managed persistence entity classes,
                embeddable classes, mapped
                superclasses, and converter classes may be specified instead of,
                or in addition to, the
                JAR files and mapping files. Any mapping metadata annotations
                found on these classes will be processed,
                or they will be mapped using the mapping annotation defaults.
            </description>
            <location chapter="8" section="2.1.6.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:959</id>
            <description>The class element is used to list a managed persistence
                class.
            </description>
            <location chapter="8" section="2.1.6.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:960</id>
            <description>A list of all named managed persistence classes must be
                specified in Java SE environments to
                insure portability. Portable
                JavaSE applications should not rely on the other mechanisms
                described here to specify the managed
                persistence classes of a
                persistence unit. Persistence providers may require that the set
                of entity classes and classes that
                are to be managed
                must be fully enumerated in each of the persistence.xml files in
                Java SE environments.
            </description>
            <location chapter="8" section="2.1.6.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1866</id>
            <description>The shared-cache-mode element determines whether
                second-level caching is in effect for the
                persistence
                unit.
            </description>
            <location chapter="8" section="2.1.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1867</id>
            <description>The validation-mode element determines whether
                automatic lifecycle event time validation is in
                effect.
            </description>
            <location chapter="8" section="2.1.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:968</id>
            <description>The properties element is used to specify both standard
                and vendor-specific properties and
                hints
                that apply to the persistence unit and its entity manager
                factory configuration.
            </description>
            <location chapter="8" section="2.1.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1868</id>
            <description>The following properties and hints defined by this
                specification are intended for use in both
                Java EE and Java SE environments:
            </description>
            <location chapter="8" section="2.1.9"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1868.1</id>
                    <description>javax.persistence.lock.timeout â value in
                        milliseconds for pessimistic lock
                        timeout.
                    </description>
                    <location chapter="8" section="2.1.9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1868.2</id>
                    <description>javax.persistence.query.timeout â value in
                        milliseconds for query timeout.
                    </description>
                    <location chapter="8" section="2.1.9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1868.3</id>
                    <description>javax.persistence.validation.group.pre-persistâ
                        groups that are targeted
                        for validation upon the pre-persist event (overrides the
                        default behavior).
                    </description>
                    <location chapter="8" section="2.1.9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1868.4</id>
                    <description>javax.persistence.validation.group.pre-updateâ
                        groups that are targeted
                        for validation upon the pre-update event (overrides the
                        default behavior).
                    </description>
                    <location chapter="8" section="2.1.9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1868.5</id>
                    <description>javax.persistence.validation.group.pre-removeâ
                        groups that are targeted
                        for validation upon the pre-remove event (overrides the
                        default behavior).
                    </description>
                    <location chapter="8" section="2.1.9"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1869</id>
            <description>The following properties defined by this specification
                are intended for use in Java SE
                environments.
            </description>
            <location chapter="8" section="2.1.9"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1869.1</id>
                    <description>javax.persistence.jdbc.driver â fully qualified
                        name of the driver class
                    </description>
                    <location chapter="8" section="2.1.9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1869.2</id>
                    <description>javax.persistence.jdbc.url â driver-specific
                        URL
                    </description>
                    <location chapter="8" section="2.1.9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1869.3</id>
                    <description>javax.persistence.jdbc.user â username used by
                        database connection
                    </description>
                    <location chapter="8" section="2.1.9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1869.4</id>
                    <description>javax.persistence.jdbc.password â password for
                        database connection validation
                    </description>
                    <location chapter="8" section="2.1.9"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active"
                   testable="true">
            <id>PERSISTENCE:SPEC:2452</id>
            <description>Scripts for use in schema generation may be specified
                using the
                javax.persistence.schema-generation.create-script-source and
                javax.persistence.schema-generation.drop-script-source
                properties.
            </description>
            <location chapter="8" section="2.1.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active"
                   testable="true">
            <id>PERSISTENCE:SPEC:2453</id>
            <description>A script to specify SQL for the bulk loading of data
                may be specified by the javax.persistence.sql-load-script-source
                property.
            </description>
            <location chapter="8" section="2.1.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1870</id>
            <description>These properties are intended for use in both Java EE
                and Java SE environments:
            </description>
            <location chapter="8" section="2.1.9"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1870.1</id>
                    <description>
                        javax.persistence.schema-generation.create-script-source
                        â name of a script packaged as part of the persistence
                        application or a string corresponding to a file URL
                        string that designates a script.
                    </description>
                    <location chapter="8" section="2.1.9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1870.2</id>
                    <description>
                        javax.persistence.schema-generation.drop-script-source â
                        name of a script packaged as part of the persistence
                        application or a string corresponding to a file URL
                        string that designates a script.
                    </description>
                    <location chapter="8" section="2.1.9"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1870.3</id>
                    <description>javax.persistence.sql-load-script-source âname
                        of a script packaged as part of the persistence unit or
                        a string corresponding to a file URL string that
                        designates a script.
                    </description>
                    <location chapter="8" section="2.1.9"/>
                </assertion>
            </sub-assertions>
        </assertion>

        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2481</id>
            <description>When scripts are packaged as part of the persistence
                application, these properties must specify locations
                relative to the root of the persistence unit.
            </description>
            <location chapter="8" section="2.1.9"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2482</id>
            <description>When scripts are provided externally (or when schema
                generation
                is to occur into script files, as described below), strings
                corresponding to file URLs must be specified.
            </description>
            <location chapter="8" section="2.1.9"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2483</id>
            <description>In Java EE environments, such file URL specifications
                must be absolute paths (not relative).
            </description>
            <location chapter="8" section="2.1.9"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2484</id>
            <description>In
                Java EE environments, all source and target file locations must
                be accessible to the application server
                deploying the persistence unit.
            </description>
            <location chapter="8" section="2.1.9"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2485</id>
            <description>schema generation actions may also be specified by
                means of the following properties
                used in the persistence.xml file.
            </description>
            <location chapter="8" section="2.1.9"/>
            <sub-assertions>
                <assertion required="true" impl-spec="true"
                           defined-by="technology"
                           status="active" testable="true">
                    <id>PERSISTENCE:SPEC:2485.1</id>
                    <description>The
                        javax.persistence.schema-generation.database.action
                        property
                        specifies the action to be taken by the persistence
                        provider with regard to the database artifacts.
                        The values for this property are none, create,
                        drop-and-create, drop. If this property
                        is not specified, it is assumed that schema generation
                        is not needed or will be initiated by
                        other means, and, by default, no schema generation
                        actions will be taken on the database.
                    </description>
                    <location chapter="8" section="2.1.9"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology"
                           status="active" testable="true">
                    <id>PERSISTENCE:SPEC:2485.2</id>
                    <description>The
                        javax.persistence.schema-generation.scripts.action
                        property specifies
                        which scripts are to be generated by the persistence
                        provider. The values for this property
                        are none, create, drop-and-create, drop. Scripts will
                        only be generated if script targets
                        are specified. If this property is not specified, it is
                        assumed that script generation is not
                        needed or will be initiated by other means, and, by
                        default, no scripts will be generated.
                    </description>
                    <location chapter="8" section="2.1.9"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology"
                           status="active" testable="true">
                    <id>PERSISTENCE:SPEC:2485.3</id>
                    <description>The
                        javax.persistence.schema-generation.create-source
                        property specifies
                        whether the creation of database artifacts is to occur
                        on the basis of the object/relational
                        mapping metadata, DDL script, or a combination of the
                        two. The values for this property are
                        metadata, script, metadata-then-script,
                        script-then-metadata. If this
                        property is not specified, and a script is specified by
                        the javax.persistence.
                        schema-generation.create-script-source property, the
                        script (only)
                        will be used for schema generation; otherwise if this
                        property is not specified, schema generation
                        will occur on the basis of the object/relational mapping
                        metadata (only). The metadata-
                        then-script and script-then-metadata values specify that
                        a combination
                        of metadata and script is to be used and the order in
                        which this use is to occur. If either of these
                        values is specified and the resulting database actions
                        are not disjoint, the results are undefined
                        and schema generation may fail.
                    </description>
                    <location chapter="8" section="2.1.9"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology"
                           status="active" testable="true">
                    <id>PERSISTENCE:SPEC:2485.4</id>
                    <description>The
                        javax.persistence.schema-generation.drop-source property
                        specifies
                        whether the dropping of database artifacts is to occur
                        on the basis of the object/relational mapping
                        metadata, DDL script, or a combination of the two. The
                        values for this property are metadata, script,
                        metadata-then-script, script-then-metadata. If this
                        property is not specified, and a script is specified by
                        the javax.persistence.
                        schema-generation.drop-script-source property, the
                        script (only) will
                        be used for the dropping of database artifacts;
                        otherwise if this property is not specified, the
                        dropping of database artifacts will occur on the basis
                        of the object/relational mapping metadata
                        (only). The metadata-then-script and
                        script-then-metadata values specify
                        that a combination of metadata and script is to be used
                        and the order in which this use is to
                        occur. If either of these values is specified and the
                        resulting database actions are not disjoint,
                        the results are undefined and the dropping of database
                        artifacts may fail.
                    </description>
                    <location chapter="8" section="2.1.9"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology"
                           status="active" testable="true">
                    <id>PERSISTENCE:SPEC:2485.5</id>
                    <description>
                        javax.persistence.schema-generation.scripts.drop-target
                        If scripts are to be generated, the target locations for
                        the writing of these scripts must be specified.
                        These targets are specified as strings corresponding to
                        file URLs.
                    </description>
                    <location chapter="8" section="2.1.9"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:969</id>
            <description>If a persistence provider does not recognize properties
                (other than those defined by this
                specification), the provider must ignore it.
            </description>
            <location chapter="8" section="2.1.9"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:969</id>
            <description>If a persistence provider does not recognize properties
                (other than those defined by this
                specification), the provider must ignore it.
            </description>
            <location chapter="8" section="2.1.9"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:970</id>
            <description>An EJB-JAR, WAR, application client jar or EAR can
                define a persistence unit. When referencing
                a persistence unit using the unitName annotation element or
                persistence-unit-name deployment descriptor
                element, the visibility scope of the persistence unit is
                determined by its point of definition:
            </description>
            <location chapter="8" section="2.2"/>
            <sub-assertions>

                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:971</id>
                    <description>A persistence unit that is defined at the level
                        of an EJB-JAR, WAR, or application
                        client jar
                        is
                        scoped to that EJB-JAR, WAR, or application jar
                        respectively and is visible to the
                        components
                        defined in that jar or war.
                    </description>
                    <location chapter="8" section="2.2"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:973</id>
                    <description>A persistence unit is defined at the level of
                        the EAR is generally visible to all
                        components of
                        the application. However, if a persistence unit of the
                        same name is defined by an EJB-JAR,
                        WAR
                        or
                        application jar file within the EAR, the persistence
                        unit of that name defined at the EAR
                        level
                        will not be visible to the components defined by that
                        EJB-JAR, WAR, or application jar file
                        unless the
                        persistence unit reference uses the persistence unit
                        name # syntax to specify a path name to
                        disambiguate the reference.
                    </description>
                    <location chapter="8" section="2.2"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:970.1</id>
                    <description>When the # syntax is used, the path name is
                        relative
                        to the referencing application component jar file.
                    </description>
                    <location chapter="8" section="2.2"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:970.2</id>
                    <description>The # syntax may be used with both the unitName
                        annotation element or
                        persistence-unit-name deployment descriptor element to
                        reference a persistence unit defined
                        at
                        EAR level.
                    </description>
                    <location chapter="8" section="2.2"/>
                </assertion>
            </sub-assertions>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:974</id>
            <description>Each persistence unit deployed into a Java EE container
                consists of a single persistence.xml
                file, any number of mapping files and any number of classes.
            </description>
            <location chapter="9" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:975</id>
            <description>At deployment time the container is responsible for
                scanning locations specified in 8.2 and
                discovering the persistence.xml files and processing them.
            </description>
            <location chapter="9" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:976</id>
            <description>When the container finds a persistence.xml file, it
                must processes the persistence unit
                definitions that it contains. The container must validate the
                persistence.xml file against the
                persistence_2_1.xsd, persistence_2_0.xsd or persistence_1_0.xsd
                schema in accordance with the version
                specified by the persistence.xml file and report any validation
                errors. Provider or data source
                information not specified in the persistence.xml file must be
                provided at deployment time or
                defaulted by the container.
            </description>
            <location chapter="9" section="1"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:977</id>
            <description>The container may optionally add any container-specific
                properties to be passed to the
                provider when creating the entity manager factory for the
                persistence unit.
            </description>
            <location chapter="9" section="1"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1871</id>
            <description>Once the container has read the persistence metadata,
                it determines the javax.persistence.
                spi.PersistenceProvider implementation class for each deployed
                named persistence
                unit. The container then creates an instance of the
                PersistenceProvider implementation class for
                each deployed named persistence unit and invokes the
                createContainerEntityManagerFactory
                method on that instance.
            </description>
            <location chapter="9" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1872</id>
            <description>
                The container must implement the PersistenceUnitInfo interface
                and pass the metadataâin the form of a
                PersistenceUnitInfo instanceâto the persistence provider as part
                of this call.
            </description>
            <location chapter="9" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1873</id>
            <description>
                If a Bean Validation provider exists in the container
                environment and the validation- mode NONE is not
                specified, a ValidatorFactory instance must be made available by
                the container.
            </description>
            <location chapter="9" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1874</id>
            <description>
                The container is responsible for passing this ValidatorFactory
                instance via the map that is passed as an
                argument to the createContainerEntityManagerFactory call. The
                map key used must be the standard property
                name javax.persistence.validation.factory.
            </description>
            <location chapter="9" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1875</id>
            <description>
                If CDI is enabled, a BeanManager instance must be made
                available by the container. The container is responsible for
                passing this BeanManager instance via the
                map that is passed as an argument to the
                createContainerEntityManagerFactory call. The map key used must
                be the standard property name javax.persistence.bean.manager.
            </description>
            <location chapter="9" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1876</id>
            <description>
                The EntityManagerFactory instance obtained as a result will be
                used by the container to create
                container-managed entity managers. Only one EntityManagerFactory
                is permitted to be created for each
                deployed persistence unit configuration.
            </description>
            <location chapter="9" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1877</id>
            <description>Any number of EntityManager instances may be created
                from a given factory.
            </description>
            <location chapter="9" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1878</id>
            <description>In a Java EE environment, the classes of the
                persistence unit should not be loaded by the
                application class loader or any of its parent class loaders
                until after the entity manager factory for
                the persistence unit has been created.
            </description>
            <location chapter="9" section="1"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:978</id>
            <description>When a persistence unit is redeployed, the container
                should call the close method on the
                previous
                EntityManagerFactory instance and call the
                createContainerEntityManagerFactory
                method again, with the required PersistenceUnitInfo metadata, to
                achieve the redeployment.
            </description>
            <location chapter="9" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1060</id>
            <description>Columns in the overrides apply to the current primary
                table for the class that contains the
                annotation.
            </description>
            <location chapter="9" section="1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1061</id>
            <description>The AttributeOverride annotation may be used on an
                entity that extends a mapped superclass or
                on an embeddable class.
            </description>
            <location chapter="9" section="1.10"/>
        </assertion>


        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:992</id>
            <description>BootStrapping in Java SE Environments</description>
            <location chapter="9" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1879</id>
            <description>
                In Java SE environments, the
                Persistence.createEntityManagerFactory method is used by the
                application to
                create an entity manager factory
            </description>
            <location chapter="9" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1880</id>
            <description>
                The provider supplies the provider configuration file by
                creating a text file named
                javax.persistence.spi.PersistenceProvider and placing it in the
                META-INF/services directory of one of
                its JAR files.
            </description>
            <location chapter="9" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1881</id>
            <description>
                The contents of the file should be the name of the provider
                implementation class of the
                javax.persistence.spi.PersistenceProvider interface
            </description>
            <location chapter="9" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1882</id>
            <description>
                The Persistence bootstrap class must locate all of the
                persistence providers using the
                PersistenceProviderResolver mechanism and call
                createEntityManagerFactory on them in turn until an
                appropriate backing provider returns an EntityManagerFactory
                instance.
            </description>
            <location chapter="9" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1883</id>
            <description>
                A provider may deem itself as appropriate for the persistence
                unit if any of the following are true:
            </description>
            <location chapter="9" section="2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1883.1</id>
                    <description>
                        Its implementation class has been specified in the
                        provider element for that persistence
                        unit in
                        the persistence.xml file and has not been overridden by
                        a different
                        javax.persistence.provider
                        property value included in the Map passed to the
                        createEntity ManagerFactory method.
                    </description>
                    <location chapter="9" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1883.2</id>
                    <description>
                        The javax.persistence.provider property was included in
                        the Map passed to
                        createEntityManagerFactory and the value of the property
                        is the providerâs implementation
                        class.
                    </description>
                    <location chapter="9" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1883.3</id>
                    <description>
                        No provider was specified for the persistence unit in
                        either the persistence.xml or the
                        property
                        map.
                    </description>
                    <location chapter="9" section="2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1884</id>
            <description>
                If a provider does not qualify as the provider for the named
                persistence unit it must return null when
                createEntityManagerFactory is invoked on it.
            </description>
            <location chapter="9" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2474</id>
            <description>In Java SE environments, the Persistence.generateSchema
                method may be used by the application to cause schema generation
                to occur as a separate phase from entity manager factory
                creation.
            </description>
            <location chapter="9" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2475</id>
            <description>In this case, the Persistence bootstrap class must
                locate all of the persistence providers using the
                PersistenceProviderResolver mechanism and call generateSchema on
                them in turn until an appropriate backing provider returns true.
            </description>
            <location chapter="9" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2476</id>
            <description>A provider may deem
                itself as appropriate for the persistence unit if any of the
                following are true:
            </description>
            <location chapter="9" section="2.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2477</id>
                    <description>Its implementation class has been specified in
                        the provider element for that persistence unit in the
                        persistence.xml file and has not been overridden by a
                        different javax.persistence.
                        provider property value included in the Map passed to
                        the generateSchema method.
                    </description>
                    <location chapter="9" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2478</id>
                    <description>The javax.persistence.provider property was
                        included in the Map passed to generateSchema and the
                        value of the property is the provider's implementation
                        class.
                    </description>
                    <location chapter="9" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2479</id>
                    <description>No provider was specified for the persistence
                        unit in either the persistence.xml or the property map.
                    </description>
                    <location chapter="9" section="2.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2480</id>
            <description>If a provider does not qualify as the provider for the
                named persistence unit, it must return false when generateSchema
                is invoked on it.
            </description>
            <location chapter="9" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1885</id>
            <description>
                The PersistenceProviderResolver instance is responsible for
                returning the list of providers available in
                the environment.
            </description>
            <location chapter="9" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1886</id>
            <description>
                The PersistenceProviderResolverHolder class holds the
                PersistenceProviderResolver instance that is in
                use.
            </description>
            <location chapter="9" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1887</id>
            <description>
                The container is allowed to implement and set a specific
                PersistenceProviderResolver provided
                that it respects the PersistenceProviderResolver contract. The
                PersistenceProviderResolver
                instance to be used is set by the container using the
                PersistenceProviderResolverHolder.setPersistenceProviderResolver
                method.
            </description>
            <location chapter="9" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1888</id>
            <description>
                If no PersistenceProviderResolver is set, the
                PersistenceProviderResolver-
                Holder must return a PersistenceProviderResolver that returns
                the providers whose persistence
                provider jars have been installed or made available as service
                providers or extensions. This default
                PersistenceProviderResolver instance does not guarantee the
                order in which persistence providers
                are returned.
            </description>
            <location chapter="9" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1889</id>
            <description>
                the following methods must use the
                PersistenceProviderResolver instance returned by the
                PersistenceProviderResolverHolder.
                getPersistenceProviderResolver method to determine the list of
                available
                providers: Persistence.createEntityManagerFactory(String),
                Persistence.createEntityManagerFactory(String, Map),
                PersistenceUtil.isLoaded(Object),
                PersistenceUtil.isLoaded(Object, String)
            </description>
            <location chapter="9" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1890</id>
            <description>
                These methods must not cache the list of providers and must not
                cache the PersistenceProviderResolver
                instance.
            </description>
            <location chapter="9" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1891</id>
            <description>
                Note that only a single PersistenceProviderResolver instance can
                be defined in a given classloader
                hierarchy at a given time.
            </description>
            <location chapter="9" section="3"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1892</id>
            <description>In Java EE environments
            </description>
            <location chapter="9" section="4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1892.1</id>
                    <description>
                        the container may call the PersistenceProvider
                        generateSchema method separately from and/or
                        prior to the creation of the entity manager factory for
                        the persistence unit,
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1892.2</id>
                    <description>
                        or the container may pass additional information to the
                        createContainerEntityManagerFactory
                        call to cause schema generation to happen as part of the
                        entity manager factory creation and
                        application initialization process.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1892.3</id>
                    <description>The information passed to these methods
                        controls whether the generation occurs
                        directly
                        in the target database, whether DDL scripts for schema
                        generation are created, or both.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1893</id>
            <description>In Java SE environments
            </description>
            <location chapter="9" section="4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1893.1</id>
                    <description>the application may call the Persistence
                        generateSchema method separately from
                        and/or
                        prior to the creation of the entity manager factory
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1893.2</id>
                    <description>or may pass information to the
                        createEntityManagerFactory method to cause schema
                        generation
                        to occur as part of the entity manager factory creation.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1894</id>
            <description>The application may provide DDL scripts to be used for
                schema generation.
            </description>
            <location chapter="9" section="4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1894.1</id>
                    <description>The application developer may package these
                        scripts as part of the persistence unit
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1894.2</id>
                    <description>or may specify strings corresponding to file
                        URLs for the location of such scripts.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
            </sub-assertions>

        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1895</id>
            <description>In Java EE environments, such scripts may be executed
                by the container, or the
                container may direct the persistence provider to execute the
                scripts
            </description>
            <location chapter="9" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1896</id>
            <description>In Java SE environments, the execution of the scripts
                is the responsibility of the persistence
                provider.
            </description>
            <location chapter="9" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1897</id>
            <description>In the absence of the specification of
                scripts, schema generation, if requested, will be determined by
                the object/relational metadata of the
                persistence
                unit.
            </description>
            <location chapter="9" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1898</id>
            <description>The following standard properties are defined for
                configuring the schema generation process.
            </description>
            <location chapter="9" section="4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1898.1</id>
                    <description>In Java EE environments, any strings
                        corresponding to file URLs for script sources or targets
                        must specify absolute paths (not relative).
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1898.2</id>
                    <description>In Java EE environments, all source and target
                        file locations must be accessible to the application
                        server deploying the persistence unit
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>

                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1898.3</id>
                    <description>The
                        javax.persistence.schema-generation.database.action
                        property specifies the action to be taken by the
                        persistence provider with regard to the database
                        artifacts. The
                        values for this property are "none", "create",
                        "drop-and-create", "drop". If the javax.persistence.
                        schema-generation.database.action property is not
                        specified, no schema generation actions must be taken on
                        the database.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1898.4</id>
                    <description>The
                        javax.persistence.schema-generation.scripts.action
                        property specifies which scripts are to be generated by
                        the persistence provider. The values for this property
                        are "none", "create", "drop-and-create", "drop". Scripts
                        will only be generated if script targets are specified.
                        If this property is not specified, no scripts will be
                        generated.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>

                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1898.5</id>
                    <description>The
                        javax.persistence.schema-generation.create-source
                        property specifies whether the creation of database
                        artifacts is to occur on the basis of the
                        object/relational mapping metadata, DDL script, or a
                        combination of the two. The values for this property are
                        "metadata", "script", "metadata-then-script",
                        "script-then-metadata". If this property is not
                        specified, and a script is specified by the
                        javax.persistence.
                        schema-generation.create-script-source property, the
                        script (only) will be used for schema generation;
                        otherwise if this property is not specified, schema
                        generation will occur on the basis of the
                        object/relational mapping metadata (only). The
                        "metadata-then-script" and "script-then-metadata" values
                        specify that a combination of metadata and script is to
                        be used and the order in which this use is to occur. If
                        either of these values is specified and the resulting
                        database actions are not disjoint, the results are
                        undefined and schema generation may fail.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>

                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1898.6</id>
                    <description>The
                        javax.persistence.schema-generation.drop-source property
                        specifies whether the dropping of database artifacts is
                        to occur on the basis of the object/relational mapping
                        metadata, DDL script, or a combination of the two. The
                        values for this property are "metadata", "script",
                        "metadata-then-script", "script-then-metadata". If this
                        property is not specified, and a script is specified by
                        the javax.persistence.
                        schema-generation.drop-script-source property, the
                        script (only) will be used for the dropping of database
                        artifacts; otherwise if this property is not specified,
                        the dropping of database artifacts will occur on the
                        basis of the object/relational mapping metadata (only).
                        The "metadata-then-script" and "script-then-metadata"
                        values specify that a combination of metadata and script
                        is to be used and the order in which this use is to
                        occur. If either of these values is specified and the
                        resulting database actions are not disjoint, the results
                        are undefined and the dropping of database artifacts may
                        fail.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>

                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1898.7</id>
                    <description>
                        javax.persistence.schema-generation.create-database-schemas
                        In Java EE environments, it is anticipated that the Java
                        EE platform provider may wish to control the creation of
                        database schemas rather than delegate this task to the
                        persistence provider. The
                        javax.persistence.schema-generation.create-database-schemas
                        property specifies whether the persistence provider is
                        to create the database schema(s) in addition to creating
                        database objects such as tables, sequences, constraints,
                        etc. The value of this boolean property should be set to
                        true if the persistence provider is to create schemas in
                        the database or to generate DDL that contains âCREATE
                        SCHEMAâ commands. If this property is not supplied, the
                        provider should not attempt to create database schemas.
                        This property may also be specified in Java SE
                        environments.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1898.8</id>
                    <description>The
                        javax.persistence.schema-generation.scripts.create-target
                        property specifies a java.IO.Writer
                        configured for use by the persistence provider for
                        output of the DDL script or a string specifying
                        the file
                        URL for the DDL script. This property should only be
                        specified if scripts are to be
                        generated. If scripts are to be generated, the target
                        locations for the writing of these scripts must be
                        specified.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1898.9</id>
                    <description>The
                        javax.persistence.schema-generation.drop-target
                        property specifies a java.IO.Writer
                        configured for use by the persistence provider for
                        output of the DDL script or a string specifying
                        the file
                        URL for the DDL script. This property should only be
                        specified if scripts are to be
                        generated. If scripts are to be generated, the target
                        locations for the writing of these scripts must be
                        specified.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1898.10</id>
                    <description>javax.persistence.database-product-name,
                        javax.persistence.database-major-version,
                        javax.persistence.database-minor-version
                        - If scripts are to be generated by the
                        persistence provider and a connection to the
                        target database
                        is not supplied, the
                        javax.persistence.database-product-name property must
                        be specified. The value of this property should be the
                        value returned for the target
                        database by
                        the JDBC DatabaseMetaData method getDatabaseProductName.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1898.11</id>
                    <description>javax.persistence.database-product-name,
                        javax.persistence.database-major-version,
                        javax.persistence.database-minor-version - If sufficient
                        database version information is not included in the
                        result of this method, the
                        javax.persistence.
                        database-major-version and javax.persistence.database-
                        minor-version properties should be specified as needed.
                        These should contain the
                        values returned by the JDBC getDatabaseMajorVersion and
                        getDatabaseMinor-
                        Version methods respectively.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1898.12</id>
                    <description>The
                        javax.persistence.schema-generation.create-script-source
                        and javax.persistence.schema-generation.drop-script-source properties are used
                        for script
                        execution. In Java EE
                        container environments, it is generally expected that
                        the container will be responsible for
                        executing
                        DDL scripts, although the container is permitted to
                        delegate this task to the persistence
                        provider.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1898.13</id>
                    <description>
                        javax.persistence.schema-generation.create-script-source,
                        javax.persistence.schema-generation.drop-script-source
                        If DDL scripts are to be used in Java SE
                        environments
                        or if the Java EE container
                        delegates the execution of scripts to the persistence
                        provider, these properties must be
                        specified.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1898.14</id>
                    <description>The
                        javax.persistence.schema-generation.create-script-source
                        property specifies a
                        java.IO.Reader configured for reading of the DDL script
                        or a
                        string designating a file URL for the DDL
                        script.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1898.15</id>
                    <description>The
                        javax.persistence.schema-generation.drop-script-source
                        property specifies a java.IO.Reader
                        configured for reading of the DDL script or a string
                        designating a file URL for the DDL script.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1898.16</id>
                    <description>javax.persistence.schema-generation.connection
                        The javax.persistence.schema-generation.connection
                        property specifies
                        the JDBC connection to be used for schema generation.
                        This is intended for use in Java EE
                        environments, where the platform provider may want to
                        control the database privileges that are
                        available to the persistence provider. This connection
                        is provided by the container, and should
                        be closed by the container when the schema generation
                        request or entity manager factory creation
                        completes. The connection provided must have credentials
                        sufficient for the persistence
                        provider to carry out the requested actions. If this
                        property is not specified, the persistence
                        provider should use the DataSource that has otherwise
                        been provided.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
            </sub-assertions>
        </assertion>

        <assertion required="true" impl-spec="false"
                   defined-by="technology" status="active"
                   testable="true">
            <id>PERSISTENCE:SPEC:1899</id>
            <description>javax.persistence.sql-load-script-source
            </description>
            <location chapter="9" section="4.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1899.1</id>
                    <description>If a
                        load script is to be used in Java SE environments or if
                        the Java EE container delegates the
                        execution
                        of the load script to the persistence provider, this
                        property must be specified.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1899.2</id>
                    <description>The javax.persistence.sql-load-script-source
                        property specifies a java.IO.Reader
                        configured for reading of the SQL load script for
                        database initialization or a string
                        designating a file URL for the script.
                    </description>
                    <location chapter="9" section="4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:979</id>
            <description>In Java EE environments, the persistence provider must
                process the metadata that is passed to
                it at the time createContainerEntityManagerFactory method is
                called
            </description>
            <location chapter="9" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:980</id>
            <description>
                and create an instance of EntityManagerFactory using the
                PersistenceUnitInfo metadata for the factory.
            </description>
            <location chapter="9" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1900</id>
            <description>The factory is then returned to the container.
            </description>
            <location chapter="9" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1901</id>
            <description>In Java SE environments, the persistence provider must
                validate the persistence.xml file
                against
                the persistence schema that corresponds to the version specified
                by the persistence.xml file and report
                any validation
                errors.
            </description>
            <location chapter="9" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1902</id>
            <description>
                When the entity manager factory for a persistence unit is
                created, it is the responsibility of the
                persistence provider to initialize the state of the metamodel
                classes of the persistence unit.
            </description>
            <location chapter="9" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1903</id>
            <description>
                When the persistence provider obtains an object/relational
                mapping file, it processes the definitions
                that
                it contains. The persistence provider must validate any
                object/relational mapping files against the
                object/relational mapping schema version specified by the
                object/relational mapping file and report any
                validation errors.
            </description>
            <location chapter="9" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1904</id>
            <description>
                The object relational mapping file must specify the
                object/relational mapping schema
                that it is written against by indicating the version element.
            </description>
            <location chapter="9" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1905</id>
            <description>
                In Java SE environments, the application can pass the
                ValidatorFactory instance via the map that
                is passed as an argument to the
                Persistence.createEntityManagerFactory call. The map
                key used must be the standard property name
                javax.persistence.validation.factory.
            </description>
            <location chapter="9" section="5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1906</id>
            <description>
                If no ValidatorFactory instance is provided by the application,
                and if a Bean Validation provider is
                present in the classpath, the persistence provider must
                instantiate the ValidatorFactory using the
                default bootstrapping approach as defined by the Bean Validation
                specification, namely Validation.
                buildDefaultValidatorFactory().
            </description>
            <location chapter="9" section="5"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:981</id>
            <description>The interface javax.persistence.spi.PersistenceProvider
                is implemented by the persistence
                provider.
            </description>
            <location chapter="9" section="5.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:982</id>
                    <description>It is invoked by the container in Java EE
                        environments.
                    </description>
                    <location chapter="9" section="5.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:983</id>
                    <description>and by the javax.persistence.Persistence class
                        in Java SE environments.
                    </description>
                    <location chapter="9" section="5.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:984</id>
                    <description>The javax.persistence.spi.PersistenceProvider
                        implementation is not intended to be
                        used
                        by the application.
                    </description>
                    <location chapter="9" section="5.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:985</id>
            <description>The PersistenceProvider implementation class must have
                a public no-arg constructor.
            </description>
            <location chapter="9" section="5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:985</id>
            <description>
                The ProviderUtil interface is invoked by the PersistenceUtil
                implementation to determine the load status
                of an entity or entity attribute. It is not intended to be
                invoked by the application.
            </description>
            <location chapter="9" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:986</id>
            <description>Persistence unit properties and hints may be passed to
                persistence providers in the Map
                parameter of the createEntityManagerFactory(String, Map) method.
                These properties correspond to the
                elements in the persistence.xml file. When any of these
                properties are specified in the Map
                parameter, their values override the values of the corresponding
                elements in the persistence.xml
                file for the named persistence unit. They also override any
                defaults that the provider might have
                applied
            </description>
            <location chapter="9" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="false">
            <id>PERSISTENCE:SPEC:987</id>
            <description>The properties listed below are defined by this
                specification.
            </description>
            <location chapter="9" section="5.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="false">
                    <id>PERSISTENCE:SPEC:987.1</id>
                    <description>javax.persistence.lock.timeout â integer value
                        in milliseconds for pessimistic
                        lock timeout or string corresponding to integer value.
                        This is a hint only.
                    </description>
                    <location chapter="9" section="5.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="false">
                    <id>PERSISTENCE:SPEC:987.2</id>
                    <description>javax.persistence.query.timeout â integer value
                        in milliseconds for query timeout
                        or string corresponding to integer value. This is a hint
                        only.
                    </description>
                    <location chapter="9" section="5.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="false">
                    <id>PERSISTENCE:SPEC:988</id>
                    <description>javax.persistence.provider â string
                        corresponding to the provider element in
                        the persistence.xml.
                    </description>
                    <location chapter="9" section="5.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="false">
                    <id>PERSISTENCE:SPEC:989</id>
                    <description>javax.persistence.transactionType â string
                        corresponding to the transaction-type
                        attribute in the persistence.xml.
                    </description>
                    <location chapter="9" section="5.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="false">
                    <id>PERSISTENCE:SPEC:990</id>
                    <description>javax.persistence.jtaDataSource â string
                        corresponding to the jta-data-source
                        element
                        in the persistence.xml.
                    </description>
                    <location chapter="9" section="5.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:987.3</id>
                    <description>javax.persistence.sharedCache.mode â string
                        corresponding to the
                        shared-cache-mode element in the persistence.xml.
                    </description>
                    <location chapter="9" section="5.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:987.4</id>
                    <description>javax.persistence.validation.mode â string
                        corresponding to the validation-mode
                        element
                        in the persistence.xml.
                    </description>
                    <location chapter="9" section="5.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:987.5</id>
                    <description>javax.persistence.validation.group.pre-persist
                        â string corresponding to the
                        javax.persistence.validation.group.pre-persist property
                        in the persistence.xml.
                    </description>
                    <location chapter="9" section="5.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:987.6</id>
                    <description>javax.persistence.validation.group.pre-update â
                        string corresponding to the
                        javax.persistence.validation.group.pre-update property
                        in the persistence.xml.
                    </description>
                    <location chapter="9" section="5.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:987.7</id>
                    <description>javax.persistence.validation.group.pre-remove â
                        string corresponding to the
                        javax.persistence.validation.group.pre-remove property
                        in the persistence.xml.
                    </description>
                    <location chapter="9" section="5.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="false">
            <id>PERSISTENCE:SPEC:1907</id>
            <description>Any number of vendor-specific properties may also be
                included in the map. Properties that are
                not recognized by a vendor must be ignored.
            </description>
            <location chapter="9" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="false">
            <id>PERSISTENCE:SPEC:1908</id>
            <description>Entries that make use of the namespace
                javax.persistence and its subnamespaces must not be used
                for vendor-specific information. The namespace javax.persistence
                is reserved for use by this
                specification.
            </description>
            <location chapter="9" section="5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1909</id>
            <description>
                The enum javax.persistence.spi.PersistenceUnitTransactionType
                defines whether the entity managers
                created by the factory will be JTA or resource-local entity
                managers.
            </description>
            <location chapter="9" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1910</id>
            <description>
                The enum javax.persistence.SharedCacheMode defines the use of
                caching. The persistence. xml
                shared-cache-mode element has no default value.
            </description>
            <location chapter="9" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1911</id>
            <description>
                The getSharedCacheMode method must return UNSPECIFIED if the
                shared-cache-mode element has not been
                specified for the persistence unit.
            </description>
            <location chapter="9" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1912</id>
            <description>The enum javax.persistence.ValidationMode defines the
                validation mode.
            </description>
            <location chapter="9" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1913</id>
            <description>The javax.persistence.spi.ClassTransformer interface is
                implemented by a persistence provider
                that wants to transform entities and managed classes at class
                load time or at class redefinition time.
            </description>
            <location chapter="9" section="6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1914</id>
            <description>
                The Persistence class is used to obtain an EntityManagerFactory
                instance in Java SE environments.
            </description>
            <location chapter="9" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1915</id>
            <description>
                It may also be used for schema generation.
            </description>
            <location chapter="9" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1916</id>
            <description>
                The Persistence class is available in a Java EE container
                environment as well; however, support for the
                Java SE bootstrapping APIs is not required in container
                environments.
            </description>
            <location chapter="9" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1917</id>
            <description>
                The Persistence class is used to obtain a PersistenceUtil
                instance in both Java EE and Java SE
                environments.
            </description>
            <location chapter="9" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1918</id>
            <description>
                The properties argument passed to the createEntityManagerFactory
                method is used to specify both standard
                and vendor-specific properties and hints intended for use in
                creating the entity manager factory.
            </description>
            <location chapter="9" section="7"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1919</id>
            <description>
                The following properties correspond to the elements and
                properties in the persistence.xml file. When any
                of
                these properties are specified in the Map parameter passed to
                the createEntityManagerFactory
                method, their values override the values of the corresponding
                elements and properties in the
                persistence.
                xml file for the named persistence unit. They also override any
                defaults that the persistence
                provider might have applied.
            </description>
            <location chapter="9" section="7"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1919.1</id>
                    <description>
                        javax.persistence.lock.timeout â integer value in
                        milliseconds for pessimistic lock timeout
                        or
                        string corresponding to integer value. This corresponds
                        to the property of the
                        same name in the persistence.xml, and is a hint only.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1919.2</id>
                    <description>
                        javax.persistence.query.timeout â integer value in
                        milliseconds for query timeout or string
                        corresponding to integer value. This corresponds to the
                        property of the same name in the persistence.xml, and is
                        a hint only.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.3</id>
                    <description>
                        javax.persistence.provider â string corresponding to the
                        provider element in the
                        persistence.xml
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.4</id>
                    <description>
                        javax.persistence.transactionType â string corresponding
                        to the transaction type attribute
                        in
                        the persistence.xml.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.5</id>
                    <description>
                        javax.persistence.jtaDataSource â string corresponding
                        to the jta-data-source element in the
                        persistence.xml.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.6</id>
                    <description>
                        javax.persistence.nonJtaDataSource â string
                        corresponding to the non-jta-data-source element
                        in
                        the persistence.xml.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.7</id>
                    <description>
                        javax.persistence.sharedCache.mode â string
                        corresponding to the shared-cache-mode element
                        in
                        the persistence.xml.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.8</id>
                    <description>
                        javax.persistence.validation.mode â string corresponding
                        to the validation mode element in
                        the
                        persistence.xml. The value is "auto", "callback", or
                        "none".
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.9</id>
                    <description>
                        javax.persistence.validation.group.pre-persist â string
                        corresponding to the
                        javax.persistence.validation.group.pre-persist property
                        in the persistence.xml.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.10</id>
                    <description>
                        javax.persistence.validation.group.pre-update â string
                        corresponding to the
                        javax.persistence.validation.group.pre-update property
                        in the persistence.xml.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.11</id>
                    <description>
                        javax.persistence.validation.group.pre-remove â string
                        corresponding to the
                        javax.persistence.validation.group.pre-remove property
                        in the persistence.xml.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.12</id>
                    <description>
                        javax.persistence.schema-generation.create-script-source
                        - string
                        corresponding to the
                        javax.persistence.ddl-create-script-source property in
                        the persistence.xml.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.13</id>
                    <description>
                        javax.persistence.schema-generation.drop-script-source
                        âstring corresponding to the
                        javax.persistence.ddl-drop-script-source property in the
                        persistence.xml.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.14</id>
                    <description>javax.persistence.sql-load-script-source
                        âstring corresponding to the
                        javax.persistence.sql-load-script-source property in the
                        persistence.xml.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.21</id>
                    <description>
                        javax.persistence.schema-generation.database.action â
                        string corresponding to the
                        javax.persistence.schema-generation.database.action
                        property in the persistence.xml.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.22</id>
                    <description>
                        javax.persistence.schema-generation.scripts.action â
                        string corresponding to the
                        javax.persistence.schema-generation.scripts.action
                        property in the persistence.xml.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.23</id>
                    <description>
                        javax.persistence.schema-generation.create-source â
                        string corresponding to the
                        javax.persistence.schema-generation.create-source
                        property in the persistence.xml.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.24</id>
                    <description>javax.persistence.schema-generation.drop-source
                        â string corresponding to the
                        javax.persistence.schema-generation.drop-source property
                        in the persistence.xml.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.25</id>
                    <description>
                        javax.persistence.schema-generation.scripts.create-target
                        âstring corresponding to the
                        javax.persistence.schema-generation.scripts.create-target
                        property in the persistence.xml.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.21</id>
                    <description>
                        javax.persistence.schema-generation.scripts.drop-target
                        â string corresponding to the
                        javax.persistence.schema-generation.scripts.drop-target
                        property in the persistence.xml.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>

                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.15</id>
                    <description>
                        javax.persistence.jdbc.driver â value is the fully
                        qualified name of the driver class.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.16</id>
                    <description>
                        javax.persistence.jdbc.url â string corresponding to the
                        driver-specific URL.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.17</id>
                    <description>
                        javax.persistence.jdbc.user â value is the username used
                        by database connection.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.18</id>
                    <description>
                        javax.persistence.jdbc.password â value is the password
                        for database connection validation.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.19</id>
                    <description>
                        javax.persistence.dataSource â value is instance of
                        javax.sql.DataSource to be used for the
                        specified persistence unit.
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1919.20</id>
                    <description>
                        javax.persistence.validation.factory â value is instance
                        of
                        jakarta.validation.ValidatorFactory
                    </description>
                    <location chapter="9" section="7"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1920</id>
            <description>
                Any number of vendor-specific properties may also be included in
                the map.
            </description>
            <location chapter="9" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1921</id>
            <description>
                If a persistence provider does not recognize a property (other
                than a property defined by this
                specification), the provider must ignore it.
            </description>
            <location chapter="9" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1922</id>
            <description>
                Vendors should use vendor namespaces for properties (e.g.,
                com.acme.persistence.logging).
                Entries that make use of the namespace javax.persistence and its
                subnamespaces must not be
                used for vendor-specific information. The namespace
                javax.persistence is reserved for use by
                this specification.
            </description>
            <location chapter="9" section="7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1923</id>
            <description>
                The implementation of the PersistenceUtil.isLoaded(Object)
                method must determine the
                list of persistence providers available in the runtime
                environment and call the ProviderUtil.
                isLoaded(Object) method on each of them until either:
            </description>
            <location chapter="9" section="8.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1923.1</id>
                    <description>
                        one provider returns LoadState.LOADED. In this case
                        PersistenceUtil.isLoaded returns true.
                    </description>
                    <location chapter="9" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1923.2</id>
                    <description>
                        one provider returns LoadState.NOT_LOADED. In this case
                        PersistenceUtil.isLoaded returns
                        false.
                    </description>
                    <location chapter="9" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1923.3</id>
                    <description>
                        all providers return LoadState.UNKNOWN. In this case
                        PersistenceUtil.isLoaded returns true.
                    </description>
                    <location chapter="9" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1923.4</id>
                    <description>
                        If the PersistenceUtil implementation determines that
                        only a single provider is available in
                        the
                        environment, it is permitted to use provider-specific
                        methods to determine the result of
                        isLoaded(Object) as long as the semantics defined in
                        section 3.2.9 are observed.
                    </description>
                    <location chapter="9" section="8.1"/>
                </assertion>
            </sub-assertions>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1924</id>
            <description>
                The implementation of the
                PersistenceUtil.isLoaded(Object,String) method must
                determine the list of persistence providers available in the
                environment and call the ProviderUtil.
                isLoadedWithoutReference method on each of them until either:
            </description>
            <location chapter="9" section="8.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1924.1</id>
                    <description>
                        one provider returns LoadState.LOADED. In this case
                        PersistenceUtil.isLoaded returns true.
                    </description>
                    <location chapter="9" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1924.2</id>
                    <description>
                        one provider returns LoadState.NOT_LOADED. In this case
                        PersistenceUtil.isLoaded returns
                        false.
                    </description>
                    <location chapter="9" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1924.3</id>
                    <description>
                        all providers return LoadState.UNKNOWN. In this case,
                        the PersistenceUtil.isLoaded method
                        then
                        calls ProviderUtil.isLoadedWithReference on each of the
                        providers until:
                        â¢ one provider returns LoadState.LOADED. In this case
                        PersistenceUtil.isLoaded return true.
                        â¢ one provider returns LoadState.NOT_LOADED. In this
                        case, PersistenceUtil.isLoaded returns
                        false.
                        â¢ all providers return LoadState.UNKNOWN. In this case,
                        PersistenceUtil.isLoaded returns
                        true.
                    </description>
                    <location chapter="9" section="8.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1924.4</id>
                    <description>
                        If the PersistenceUtil implementation determines that
                        only a single provider is available in
                        the
                        environment, it is permitted to use provider-specific
                        methods to determine the result of
                        isLoaded(Object, String) as long as the semantics
                        defined in section 3.2.9 are observed.
                    </description>
                    <location chapter="9" section="8.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:993</id>
            <description>Entity Annotation</description>
            <location chapter="10" section="1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:994</id>
                    <description>The name annotation element specifies the
                        entity name. If the name element is not
                        specified, the entity name defaults to the unqualified
                        name of the entity class.
                    </description>
                    <location chapter="10" section="1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:995</id>
                    <description>This name is used to refer to the entity in
                        queries.
                    </description>
                    <location chapter="10" section="1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:997</id>
            <description>Callback Annotations</description>
            <location chapter="10" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:998</id>
            <description>The EntityListeners annotation specifies the callback
                listener classes to be used for
                an entity or mapped superclass.
            </description>
            <location chapter="10" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1925</id>
            <description>
                The ExcludeSuperclassListeners annotation specifies that the
                invocation of superclass listeners
                is to be excluded for the entity class (or mapped superclass)
                and its subclasses.
            </description>
            <location chapter="10" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1926</id>
            <description>
                The ExcludeDefaultListeners annotation specifies that the
                invocation of default listeners is to
                be excluded for the entity class (or mapped superclass) and its
                subclasses.
            </description>
            <location chapter="10" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:999</id>
            <description>The following annotations are used to specify callback
                methods for the corresponding
                lifecycle events. These annotations may be applied to methods of
                an entity class, of a mapped
                superclass, or of an entity listener class.
            </description>
            <location chapter="10" section="2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:999.1</id>
                    <description>PrePersist
                    </description>
                    <location chapter="10" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:999.2</id>
                    <description>PostPersist
                    </description>
                    <location chapter="10" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:999.3</id>
                    <description>PreRemove
                    </description>
                    <location chapter="10" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:999.4</id>
                    <description>PostRemove,
                    </description>
                    <location chapter="10" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:999.5</id>
                    <description>PreUpdate
                    </description>
                    <location chapter="10" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:999.6</id>
                    <description>PostUpdate
                    </description>
                    <location chapter="10" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:999.7</id>
                    <description>PostLoad
                    </description>
                    <location chapter="10" section="2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2454</id>
            <description>The NamedEntityGraph annotation is used to define a
                named entity graph.
            </description>
            <location chapter="10" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2455</id>
            <description>The entity graph may be retrieved by name using the
                EntityManagerFactory interface.
            </description>
            <location chapter="10" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2456</id>
            <description>The entity graph may be used to specify the path and
                boundaries for find operations or queries.
            </description>
            <location chapter="10" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2457</id>
            <description>The NamedEntityGraph annotation must be applied to the
                entity class that forms the root of the corresponding graph of
                entities.
            </description>
            <location chapter="10" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2458</id>
            <description>The name element is used to refer to the entity graph.
                It defaults to the entity name of the root entity to which the
                annotation is applied. Entity graph names must be unique within
                the persistence unit.
            </description>
            <location chapter="10" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2459</id>
            <description>The attributeNodes element lists attributes of the
                annotated entity class that are to be included in the entity
                graph.
            </description>
            <location chapter="10" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2460</id>
            <description>The includeAllAttributes element specifies that all
                attributes of the annotated entity class are
                to be included in the entity graph. An attributeNode element may
                still be used in conjunction with
                this element to specify a subgraph for the attribute.
            </description>
            <location chapter="10" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2461</id>
            <description>The subgraphs element specifies a list of subgraphs,
                further specifying attributes that are managed
                types. These subgraphs are referenced by name from
                NamedAttributeNode definitions.
            </description>
            <location chapter="10" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2462</id>
            <description>The subclassSubgraphs element specifies a list of
                subgraphs that add additional attributes for subclasses of the
                root entity to which the annotation is applied.
            </description>
            <location chapter="10" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2463</id>
            <description>The NamedEntityGraphs annotation is used to specify
                multiple named entity graphs for the entity to which it is
                applied.
            </description>
            <location chapter="10" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2464</id>
            <description>The NamedAttributeNode annotation is used to specify an
                attribute node of within an entity graph
                or subgraph.
            </description>
            <location chapter="10" section="3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2465</id>
            <description>The value element specifies the name of the
                corresponding attribute.
            </description>
            <location chapter="10" section="3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2466</id>
            <description>The subgraph element is used to refer to a
                NamedSubgraph specification that further characterizes
                an attribute node corresponding to a managed type (entity or
                embeddable). The value of the subgraph
                element must correspond to the name used for the subgraph in the
                NamedSubgraph element.
                If the referenced attribute is an entity which has entity
                subclasses, there may be more than one Named-
                Subgraph element with this name, and the subgraph element is
                considered to refer to all of these.
            </description>
            <location chapter="10" section="3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2467</id>
            <description>The keySubgraph element is used to refer to a
                NamedSubgraph specification that further characterizes
                an attribute node corresponding to the key of a Map-valued
                attribute. The value of the the key-
                Subgraph element must correspond to the name used for the
                subgraph in the NamedSubgraph
                element. If the referenced attribute is an entity which has
                entity subclasses, there may be more than one
                NamedSubgraph element with this name, and the keySubgraph
                element is considered to refer to
                all of these.
            </description>
            <location chapter="10" section="3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2468</id>
            <description>The NamedSubgraph annotation is used to further define
                an attribute node. It is referenced by its
                name from the subgraph or keySubgraph element of a
                NamedAttributeNode element.
            </description>
            <location chapter="10" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2469</id>
            <description>The name element is the name used to reference the
                subgraph from a NamedAttributeNode definition.
                In the case of entity inheritance, multiple subgraph elements
                have the same name.
            </description>
            <location chapter="10" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2470</id>
            <description>The type element must be specified when the subgraph
                corresponds to a subclass of the entity type
                corresponding to the referencing attribute node.
            </description>
            <location chapter="10" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2471</id>
            <description>The attributeNodes element lists attributes of the
                class that must be included. If the subgraph corresponds
                to a subclass of the class referenced by the corresponding
                attribute node, only subclass-specific
                attributes are listed.
            </description>
            <location chapter="10" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1004</id>
            <description>The NamedQuery annotation is used to specify a named
                query in the Java Persistent query
                language. The name element is used to refer to the query when
                using the EntityManager methods that
                create query objects.
            </description>
            <location chapter="10" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1238</id>
            <description>The query element must specify a query string in the
                Java Persistence query language.
            </description>
            <location chapter="10" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1927</id>
            <description>
                The lockMode element specifies a lock mode for the results
                returned by the query. If a lock mode
                other than NONE is specified, the query must be executed within
                a transaction and the persistence
                context
                joined to the transaction.
            </description>
            <location chapter="10" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1928</id>
            <description>
                The hints elements may be used to specify query properties and
                hints. Properties defined by this
                specification
                must be observed by the provider; hints defined by this
                specification should be observed by the
                provider when possible. Vendor-specific hints that are not
                recognized by a provider must be ignored.
            </description>
            <location chapter="10" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1929</id>
            <description>
                The NamedQuery and NamedQueries annotations can be applied to an
                entity or mapped superclass.
            </description>
            <location chapter="10" section="4.1"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1005</id>
            <description>The NamedNativeQuery annotation is used to specify a
                native SQL named query. The name element
                is used to refer to the query when using the EntityManager
                methods that create query objects.
            </description>
            <location chapter="10" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1930</id>
            <description>The query element specifies the native query.
            </description>
            <location chapter="10" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1006</id>
            <description>The resultClass element refers to the class of the
                result.
            </description>
            <location chapter="10" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1007</id>
            <description>the value of the resultSetMapping element is the name
                of a SQLResultSetMapping as defined in
                the metadata.
            </description>
            <location chapter="10" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1931</id>
            <description>
                The hints elements may be used to specify query properties and
                hints. Hints defined by this
                specification
                should be observed by the provider when possible.
                Vendor-specific hints that are not recognized by
                a provider must be ignored.
            </description>
            <location chapter="10" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1932</id>
            <description>The NamedNativeQuery and NamedNativeQueries annotations
                can be applied to an entity or
                mapped superclass.
            </description>
            <location chapter="10" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1933</id>
            <description>
                The NamedStoredProcedureQuery annotation is used to specify a
                stored procedure, its parameters, and its
                result type.
            </description>
            <location chapter="10" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1934</id>
            <description>
                The name element is the name that is passed as an argument to
                the createNamedStoredProcedureQuery method
                to create an executable StoredProcedureQuery object.
            </description>
            <location chapter="10" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1935</id>
            <description>
                The procedureName element is the name of the stored procedure in
                the database.
            </description>
            <location chapter="10" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1936</id>
            <description>
                The parameters of the stored procedure are specified by the
                parameters element. All parameters must be
                specified in the order in which they occur in the parameter list
                of the stored procedure.
            </description>
            <location chapter="10" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1937</id>
            <description>
                The resultClasses element refers to the class (or classes) that
                are used to map the results.
            </description>
            <location chapter="10" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1938</id>
            <description>
                The resultSetMappings element names one or more result set
                mappings, as defined by the
                SqlResultSetMapping annotation.
            </description>
            <location chapter="10" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1939</id>
            <description>
                If there are multiple result sets, it is assumed that they will
                be mapped using the same mechanism
            </description>
            <location chapter="10" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1940</id>
            <description>
                The order of the specification of these mappings must be the
                same as the order in which the result sets
                will be returned by the stored procedure invocation.
            </description>
            <location chapter="10" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1941</id>
            <description>
                If the stored procedure returns one or more result sets and no
                resultClasses or resultSetMappings
                element is specified, any result set will be returned as a list
                of type Object[].
            </description>
            <location chapter="10" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1942</id>
            <description>
                The combining of different strategies for the mapping of stored
                procedure result sets is undefined.
            </description>
            <location chapter="10" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1943</id>
            <description>
                The hints element may be used to specify query properties and
                hints. Properties defined by this
                specification
                must be observed by the provider. Vendor-specific hints that are
                not recognized by a provider
                must be ignored.
            </description>
            <location chapter="10" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1944</id>
            <description>
                The NamedStoredProcedureQuery and NamedStoredProcedureQueries
                annotations can be applied to an entity or
                mapped superclass.
            </description>
            <location chapter="10" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1945</id>
            <description>
                All parameters of a named stored procedure query must be
                specified using the StoredProcedureParameter
                annotation.
            </description>
            <location chapter="10" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1946</id>
            <description>
                The name element refers to the name of the parameter as defined
                by the stored procedure in the database.
            </description>
            <location chapter="10" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1947</id>
            <description>
                If a parameter name is not specified, it is assumed that the
                stored procedure uses positional
                parameters.
            </description>
            <location chapter="10" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1948</id>
            <description>
                The mode element specifies whether the parameter is an IN,
                INOUT, OUT, or REF_CURSOR parameter.
            </description>
            <location chapter="10" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1949</id>
            <description>REF_CURSOR parameters are used by some databases to
                return result sets from stored procedures.
            </description>
            <location chapter="10" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1950</id>
            <description>The type element refers to the JDBC type for the
                parameter.
            </description>
            <location chapter="10" section="4.3"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1008</id>
            <description>Annotations for SQL Query Result Set Mappings
            </description>
            <location chapter="10" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1009</id>
            <description>The SqlResultSetMapping annotation is used to specify
                the mapping of the result of a
                native SQL query or stored procedure.
            </description>
            <location chapter="10" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1010</id>
            <description>The name element is the name given to the result set
                mapping and is used to refer to it in
                the methods of the Query and StoredProcedureQuery APIs.
            </description>
            <location chapter="10" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1011</id>
            <description>The entities, classes, and columns elements are used to
                specify the mapping to
                entities, constructors, and to scalar values respectively.
            </description>
            <location chapter="10" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1012</id>
            <description>The entityClass element specified the class of the
                result.
            </description>
            <location chapter="10" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1014</id>
            <description>The fields element is used to map the columns specified
                in the SELECT list of the query
                to the properies or fields of the entity class.
            </description>
            <location chapter="10" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1013</id>
            <description>The discriminatorColumn element is used to specify the
                column name (or alias) of the
                column in the SELECT list that is used to determine the type of
                the entity instance.
            </description>
            <location chapter="10" section="4.4"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1015</id>
            <description>The name element is the name of the persistent field or
                property of the class.
            </description>
            <location chapter="10" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1016</id>
            <description>The column element specifies the name of the
                corresponding column in the SELECT list
            </description>
            <location chapter="10" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1951</id>
            <description>The targetClass element specifies the class whose
                constructor is to be invoked.
            </description>
            <location chapter="10" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1952</id>
            <description>The columns element specifies the mapping of columns in
                the SELECT list to the arguments of the
                intended constructor.
            </description>
            <location chapter="10" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1953</id>
            <description>The name element specifies the name of the column in
                the SELECT list.
            </description>
            <location chapter="10" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1954</id>
            <description>The type element specifies the Java type to which the
                column type is to be mapped.
            </description>
            <location chapter="10" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1955</id>
            <description>If the type element is not specified, the default JDBC
                type mapping for the column will be
                used.
            </description>
            <location chapter="10" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1018</id>
            <description>References to EntityManager and EntityManagerFactory
            </description>
            <location chapter="10" section="5"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1019</id>
                    <description>The PersistenceContext annotation is used to
                        express a dependency on a
                        container-managed
                        entity manager and its associated persistence context.
                    </description>
                    <location chapter="10" section="5.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1020</id>
                    <description>The name element refers to the name by which
                        the entity manager is to be accessed
                        in
                        the environment referencing context, and is not needed
                        when dependency injection is used.
                    </description>
                    <location chapter="10" section="5.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1021</id>
                    <description>The optional unitName element refers to the
                        name of the persistence unit. If the
                        unitName element is specified, the persistence unit for
                        the entity manager that is
                        accessible in
                        JNDI must have the same name.
                    </description>
                    <location chapter="10" section="5.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1022</id>
                    <description>The type element specifies whether a
                        transaction-scoped or extended persistence
                        context
                        is to be used. If the type element is not specified, a
                        transaction-scoped persistence
                        context is
                        used.
                    </description>
                    <location chapter="10" section="5.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1018.1</id>
                    <description>The synchronizationType element specifies
                        whether the persistence context is always
                        automatically synchronized with the current transaction
                        or whether the persistence context
                        must
                        be explicitly joined to the current transaction by means
                        of the EntityManager
                        joinTransaction
                        method.
                    </description>
                    <location chapter="10" section="5.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1018.2</id>
                    <description>The optional properties element may be used to
                        specify properties for the container
                        or
                        persistence provider. Properties defined by this
                        specification must be observed by the
                        provider.
                    </description>
                    <location chapter="10" section="5.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1018.3</id>
                    <description>The optional properties element may be used to
                        specify properties for the container
                        or
                        persistence provider. Properties defined by this
                        specification must be observed by the
                        provider.
                        Vendor specific
                        properties may be included in the set of properties, and
                        are passed to the persistence
                        provider
                        by the
                        container when the entity manager is created.
                    </description>
                    <location chapter="10" section="5.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1018.4</id>
                    <description>Properties that are not recognized by a vendor
                        must be ignored.
                    </description>
                    <location chapter="10" section="5.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1018.5</id>
                    <description>The PersistenceContexts annotation declares one
                        or more PersistenceContext annotations.
                        It is used to express a dependency on multiple
                        persistence contexts.
                    </description>
                    <location chapter="10" section="5.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active"
                   testable="true">
            <id>PERSISTENCE:SPEC:1023</id>
            <description>The PersistenceUnit annotation is used to express a
                dependency on an entity manager
                factory and its associated persistence unit.
            </description>
            <location chapter="10" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active"
                   testable="true">
            <id>PERSISTENCE:SPEC:1024</id>
            <description>The name element refers to the name by which the entity
                manager factory is to be
                accessed in the environment referencing context, and is not
                needed when dependency injection
                is
                used.
            </description>
            <location chapter="10" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active"
                   testable="true">
            <id>PERSISTENCE:SPEC:1025</id>
            <description>The optional unitName element refers to the name of the
                persistence unit as defined
                in
                the persistence.xml file. If the unitName element is specified,
                the persistence unit for the
                entity manager factory that is accessible in JNDI must have the
                same name.
            </description>
            <location chapter="10" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active"
                   testable="true">
            <id>PERSISTENCE:SPEC:2420</id>
            <description>The PersistenceUnits annotation declares one or more
                PersistenceUnit annotations. It is
                used to express a dependency on multiple persistence units
            </description>
            <location chapter="10" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1956</id>
            <description>A converter class must be</description>
            <location chapter="10" section="6"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1956.1</id>
                    <description>annotated with the Converter annotation
                    </description>
                    <location chapter="10" section="6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1956.2</id>
                    <description>defined in the XML descriptor as a converter
                    </description>
                    <location chapter="10" section="6"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1957</id>
            <description>
                If the autoApply element is specified as true, the persistence
                provider must automatically apply the
                converter to all mapped attributes of the specified target type
                for all entities in the persistence unit
                except for attributes for which conversion is overridden by
                means of the Convert annotation (or XML
                equivalent).
            </description>
            <location chapter="10" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1958</id>
            <description>In determining whether a converter is applicable to an
                attribute, the provider must treat
                primitive types and wrapper types as equivalent.
            </description>
            <location chapter="10" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1959</id>
            <description>Note that Id attributes, version attributes,
                relationship attributes, and attributes explicitly
                annotated as Enumerated or Temporal (or designated as such via
                XML) will not be converted.
            </description>
            <location chapter="10" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1960</id>
            <description>
                If autoApply is false, only those attributes of the target type
                for which the Convert annotation (or
                corresponding XML element) has been specified will be converted.
            </description>
            <location chapter="10" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1961</id>
            <description>
                Note that if autoApply is true, the Convert annotation may be
                used to override or disable auto-apply
                conversion on a per-attribute basis.
            </description>
            <location chapter="10" section="6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1962</id>
            <description>
                If there is more than one converter defined for the same target
                ype, the Convert annotation should be
                used to explicitly specify which converter to use.
            </description>
            <location chapter="10" section="6"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1026</id>
            <description>The implementation of this
                specification must assume this application dependency upon the
                object/relational mapping metadata
            </description>
            <location chapter="11" section="0"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1027</id>
            <description>It is permitted, but not required, that DDL generation
                be supported by an implementation of
                this specification. Portable applications should not rely upon
                the use of DDL generation.
            </description>
            <location chapter="11" section="0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1963</id>
            <description>XML metadata may be used as an alternative to these
                annotations, or to override or augment
                annotations
            </description>
            <location chapter="11" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1239</id>
            <description>The Access annotation is used to specify an access type
                to be applied to an entity class,
                mapped superclass, or embeddable class, or to a specific
                attribute of such a class.
            </description>
            <location chapter="11" section="1.1"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1964</id>
            <description>
                The AssociationOverride annotation may be applied to an entity
                that extends a mapped superclass to
                override a relationship mapping defined by the mapped
                superclass.
            </description>
            <location chapter="11" section="1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1062.1</id>
            <description>If the AssociationOverride annotation is not specified,
                the association is mapped the same as
                in the original mapping. The joinColumns element refers to the
                table for the class that contains the
                annotation.
            </description>
            <location chapter="11" section="1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1965</id>
            <description>
                When used to override a mapping defined by a mapped superclass,
                the AssociationOverride annotation is
                applied to the entity class.
            </description>
            <location chapter="11" section="1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1241</id>
            <description>The AssociationOverride annotation may be used to
                override a relationship mapping from an
                embeddable within an entity to another entity when the
                embeddable is on the owning side of the
                relationship.
            </description>
            <location chapter="11" section="1.2"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1966</id>
            <description>
                When used to override a relationship mapping defined by an
                embeddable class (including an embeddable
                class embedded within another embeddable class), the
                AssociationOverride annotation is applied to the
                field or property containing the embeddable.
            </description>
            <location chapter="11" section="1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1967</id>
            <description>
                When the AssociationOverride annotation is used to override a
                relationship mapping from an embeddable
                class, the name element specifies the referencing relationship
                field or property within the embeddable
                class.
            </description>
            <location chapter="11" section="1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1968</id>
            <description>
                To override mappings at multiple levels of embedding, a dot
                (".") notation syntax must be used in the
                name element to indicate an attribute within an embedded
                attribute. The value of each identifier used
                with the dot notation is the name of the respective embedded
                field or property.
            </description>
            <location chapter="11" section="1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1242</id>
            <description>
                When the AssociationOverride annotation is applied to override
                the mappings of an embeddable class used
                as a map value, "value." must be used to prefix the name of the
                attribute within the embeddable class
                that is being overridden in order to specify it as part of the
                map value. The use of map keys that
                contain embeddables that reference entities is not permitted.
            </description>
            <location chapter="11" section="1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1969</id>
            <description>
                If the relationship mapping is a foreign key mapping, the
                joinColumns element of the AssociationOverride annotation is
                used.
            </description>
            <location chapter="11" section="1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1243</id>
            <description>
                If the relationship mapping uses a join table, the joinTable
                element of the AssociationOverride element
                must be specified to override the mapping of the join table
                and/or its join columns. Note that either
                the joinColumns element or the joinTable element of the
                AssociationOverride annotation is specified
                for overriding a given relationship (but never both).
            </description>
            <location chapter="11" section="1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2488</id>
            <description>The foreignKey element is used to specify or control
                the generation of a foreign key constraint for the columns
                corresponding to the joinColumns element when table generation
                is in effect.
            </description>
            <location chapter="11" section="1.2"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2489</id>
            <description>If both
                this element and the foreignKey element of any of the
                joinColumns elements are specified, the
                behavior is undefined.
            </description>
            <location chapter="11" section="1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1240</id>
            <description>The AssociationOverride annotation may be applied to an
                entity that extends a mapped superclass
                to override a many-to-one or one-to-one mapping defined by the
                mapped superclass.
            </description>
            <location chapter="11" section="1.2"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1970</id>
            <description>
                The mappings of multiple relationship properties or fields may
                be overridden. The AssociationOverrides
                annotation is used for this purpose.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1059</id>
            <description>The AttributeOverride annotation is used to override
                the mapping of a Basic (whether explicit
                or default) property or field or Id property or field.
            </description>
            <location chapter="11" section="1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1244</id>
            <description>The AttributeOverride annotation may be applied to an
                entity that extends a mapped superclass
                or to an embedded field or property to override a Basic mapping
                or Id mapping defined by the mapped
                superclass or embeddable class (or embeddable class of one of
                its attributes).
            </description>
            <location chapter="11" section="1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1971</id>
            <description>The AttributeOverride annotation may be applied to an
                element collection containing instances
                of an embeddable class
            </description>
            <location chapter="11" section="1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1972</id>
            <description>The AttributeOverride annotation may be applied to a
                map collection whose key and/or value is
                an embeddable class.
            </description>
            <location chapter="11" section="1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1245</id>
            <description>When the AttributeOverride annotation is applied to a
                map, "key." or "value." must be used to
                prefix the name of the attribute that is being overridden in
                order to specify it as part of the map key
                or map value.
            </description>
            <location chapter="11" section="1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1973</id>
            <description>To override mappings at multiple levels of embedding, a
                dot (".") notation form must be used in
                the name element to indicate an attribute within an embedded
                attribute. The value of each identifier
                used
                with the dot notation is the name of the respective embedded
                field or property.
            </description>
            <location chapter="11" section="1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1974</id>
            <description>If the AttributeOverride annotation is not specified,
                the column is mapped the same as in the
                original mapping.
            </description>
            <location chapter="11" section="1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1975</id>
            <description>The column element refers to the table for the class
                that contains the annotation.
            </description>
            <location chapter="11" section="1.4"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1062</id>
            <description>The mappings of multiple properties or fields may be
                overridden. The AttributesOverrides
                annotation is used for this purpose.
            </description>
            <location chapter="11" section="1.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1062.0</id>
            <description>The AssociationOverride annotation is used to override
                a many-to-one or one-to-one mapping of
                property or field for an entity relationship.
            </description>
            <location chapter="9" section="1.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1069</id>
            <description>The Basic annotation is the simplest type of mapping to
                a database column. The Basic annotation
                can be applied to a persistent property or instance variable of
                any of the following types
            </description>
            <location chapter="11" section="1.6"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1070</id>
                    <description>Java primitive types
                    </description>
                    <location chapter="11" section="1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1072</id>
                    <description>wrappers of the primitive types
                    </description>
                    <location chapter="11" section="1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1071</id>
                    <description>java.lang.String
                    </description>
                    <location chapter="11" section="1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1077</id>
                    <description>java.math.BigInteger
                    </description>
                    <location chapter="11" section="1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1078</id>
                    <description>java.math.BigDecimal
                    </description>
                    <location chapter="11" section="1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1079</id>
                    <description>java.util.Date
                    </description>
                    <location chapter="11" section="1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1080</id>
                    <description>java.util.Calendar
                    </description>
                    <location chapter="11" section="1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1081</id>
                    <description>java.sql.Date
                    </description>
                    <location chapter="11" section="1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1082</id>
                    <description>java.sql.Time
                    </description>
                    <location chapter="11" section="1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1083</id>
                    <description>java.sql.TimeStamp
                    </description>
                    <location chapter="11" section="1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1073</id>
                    <description>byte[]
                    </description>
                    <location chapter="11" section="1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1074</id>
                    <description>Byte[]
                    </description>
                    <location chapter="11" section="1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1075</id>
                    <description>char[]
                    </description>
                    <location chapter="11" section="1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1076</id>
                    <description>Character[]
                    </description>
                    <location chapter="11" section="1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1069.1</id>
                    <description>enums
                    </description>
                    <location chapter="11" section="1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1069.2</id>
                    <description>any other type that implements Serializable
                    </description>
                    <location chapter="11" section="1.6"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1976</id>
            <description>the use of
                the Basic annotation is optional for persistent fields and
                properties of these types. If the Basic
                annotation
                is not specified for such a field or property, the default
                values of the Basic annotation will apply.
            </description>
            <location chapter="11" section="1.6"/>
        </assertion>

        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1977</id>
            <description>The EAGER strategy is a requirement on the persistence
                provider runtime that data must be
                eagerly fetched.
            </description>
            <location chapter="11" section="1.6"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1084</id>
            <description>The LAZY strategy is a hint to the persistence provider
                runtime that data should be
                fetched lazily when it is first accessed.
            </description>
            <location chapter="11" section="1.6"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1085</id>
            <description>The implementation is permitted to eagerly fetch data
                for which the LAZY strategy hint hasd
                been specified.
            </description>
            <location chapter="11" section="1.6"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1086</id>
            <description>In particular, lazy fetching might only be available
                for Basic mappings for which
                property-based access is used.
            </description>
            <location chapter="11" section="1.6"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1087</id>
            <description>The optional element is a hint as to whether the value
                of the field or property may
                be null.
            </description>
            <location chapter="11" section="1.6"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1088</id>
            <description>It is disregarded for primitive types.</description>
            <location chapter="11" section="1.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1978</id>
            <description>The Cacheable annotation specifies whether an entity
                should be cached if caching is enabled
                when the value of the persistence.xml shared-cache-mode element
                is ENABLE_SELECTIVE or
                DISABLE_SELECTIVE.
            </description>
            <location chapter="11" section="1.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1979</id>
            <description>The value of the Cacheable annotation is inherited by
                subclasses; it can be overridden by
                specifying Cacheable on a subclass.
            </description>
            <location chapter="11" section="1.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1980</id>
            <description>Cacheable(false) means that the entity and its state
                must not be cached by the provider.
            </description>
            <location chapter="11" section="1.7"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1981</id>
            <description>If the shared-cache-mode element is not specified in
                the persistence.xml file and the
                javax.persistence.sharedCache.mode property is not specified
                when the entity manager
                factory for the persistence unit is created, the semantics of
                the Cacheable annotation are undefined.
            </description>
            <location chapter="11" section="1.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1982</id>
            <description>The CollectionTable annotation is used in the mapping
                of collections of
            </description>
            <location chapter="11" section="1.8"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1982.1</id>
                    <description>basic types</description>
                    <location chapter="11" section="1.8"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1982.2</id>
                    <description>embeddable types</description>
                    <location chapter="11" section="1.8"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1246</id>
            <description>The CollectionTable annotation specifies the table that
                is used for the mapping of the
                collection and is specified on the collection valued field or
                property.
            </description>
            <location chapter="11" section="1.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1983</id>
            <description>
                By default, the columns of the collection table that correspond
                to the embeddable class are derived from
                the attributes of the embeddable class according to the default
                values of the Column annotation,
            </description>
            <location chapter="11" section="1.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1984</id>
            <description>
                By default, the columns of the collection table that correspond
                to the basic type are derived from the
                attributes from the basic type according to the default values
                of the Column annotation,
            </description>
            <location chapter="11" section="1.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1985</id>
            <description>
                In the case of a basic type, the column name is derived from the
                name of the collection-valued field or
                property.
            </description>
            <location chapter="11" section="1.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1986</id>
            <description>
                In the case of an embeddable class, the column names are derived
                from the field or property names of the
                embeddable class.
            </description>
            <location chapter="11" section="1.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1247</id>
            <description>To override the default properties of the column used
                for a basic type, the Column annotation
                is used on the collection-valued attribute in addition to the
                ElementCollection annotation. The value of
                the table element of the Column annotation defaults to the name
                of the collection table. To override
                these defaults for an embeddable class, the AttributeOverride
                and/or AttributeOverrides annotations must
                be used in addition to the ElementCollection annotation.
            </description>
            <location chapter="11" section="1.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1987</id>
            <description>
                The value of the table element of the Column annotation used in
                the AttributeOverride annotation
                defaults to the name of the collection table.
            </description>
            <location chapter="11" section="1.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1988</id>
            <description>
                If the embeddable class contains references to other entities,
                the default values for the columns
                corresponding to those references may be overridden by means of
                the AssociationOverride and/or
                AssociationOverrides annotations
            </description>
            <location chapter="11" section="1.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2504</id>
            <description>
                The foreignKey element is used to specify or control the generation of a foreign key constraint for
                the columns corresponding to the joinColumns element when table generation is in effect.
            </description>
            <location chapter="11" section="1.8"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>PERSISTENCE:SPEC:2504.1</id>
                    <description>
                        If both this element and the foreignKey element of any of the joinColumns elements are specified, the behavior is undefined.
                    </description>
                    <location chapter="11" section="1.8"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>PERSISTENCE:SPEC:2504.2</id>
                    <description>
                        If no foreignKey annotation element is specified in either location, the persistence provider's default foreign key strategy will apply.
                    </description>
                    <location chapter="11" section="1.8"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1989</id>
            <description>
                If the CollectionTable annotation is missing, the default values
                of the CollectionTable annotation
                elements apply.
            </description>
            <location chapter="11" section="1.8"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1037</id>
            <description>The Column annotation is used to specify a mapped
                column for a persistent property or field.
            </description>
            <location chapter="11" section="1.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1990</id>
            <description>If no Column annotation is specified, the default
                values apply
            </description>
            <location chapter="11" section="1.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1991</id>
            <description>The Convert annotation is applied directly to an
                attribute of an entity, mapped superclass, or
                embeddable class to specify conversion of a Basic attribute or
                to override the use of a converter that
                has
                been specified as autoApply=true.
            </description>
            <location chapter="11" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2421</id>
            <description>When persistent properties are used, the Convert
                annotation is applied to the getter method.
            </description>
            <location chapter="11" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1992</id>
            <description>The Convert annotation may be applied to an entity that
                extends a mapped superclass to specify
                or
                override the conversion mapping for an inherited basic
                attribute.
            </description>
            <location chapter="11" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2422</id>
            <description>The converter element is used to specify the converter
                that is to be applied. If an autoApply
                converter
                is applicable to the given field or property, the converter
                specified by the converter element
                will be applied instead.
            </description>
            <location chapter="11" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2423</id>
            <description>The disableConversion element specifies that any
                applicable autoApply converter must not be
                applied.
            </description>
            <location chapter="11" section="1.10"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2424</id>
            <description>The behavior is undefined if neither the converter
                element nor the disableConversion element
                has been specified.
            </description>
            <location chapter="11" section="1.10"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1993</id>
            <description>The Convert annotation should not be used to specify
                conversion of the following:
            </description>
            <location chapter="11" section="1.10"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1993.1</id>
                    <description>Id attributes(including the attributes of
                        embedded ids and derived identities)
                    </description>
                    <location chapter="11" section="1.10"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1993.2</id>
                    <description>version attributes</description>
                    <location chapter="11" section="1.10"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1993.3</id>
                    <description>relationship attributes</description>
                    <location chapter="11" section="1.10"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1993.4</id>
                    <description>attributes explicitly annotated (or designated
                        via XML) as Enumerated
                    </description>
                    <location chapter="11" section="1.10"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1993.5</id>
                    <description>attributes explicitly annotated (or designated
                        via XML) as Temporal.
                    </description>
                    <location chapter="11" section="1.10"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1994</id>
            <description>The Convert annotation may be applied to a basic
                attribute or to an element collection of basic
                type (in which case the converter is applied to the elements of
                the collection).
            </description>
            <location chapter="11" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1995</id>
            <description>In these cases, the attributeName element must not be
                specified.
            </description>
            <location chapter="11" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1996</id>
            <description>The Convert annotation may be applied to an embedded
                attribute or to a map collection attribute
                whose key or value is of embeddable type (in which case the
                converter is applied to the specified
                attribute of the embeddable instances contained in the
                collection).
            </description>
            <location chapter="11" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1997</id>
            <description>In these cases, the attributeName element must be
                specified.
            </description>
            <location chapter="11" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1998</id>
            <description>To override conversion mappings at multiple levels of
                embedding, a dot (".") notation form must
                be used in the attributeName element to indicate an attribute
                within an embedded attribute. The value of
                each identifier used with the dot notation is the name of the
                respective embedded field or property.
            </description>
            <location chapter="11" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1999</id>
            <description>When the Convert annotation is applied to a map
                containing instances of embeddable classes, the
                attributeName element must be specified, and "key." or "value."
                must be used to prefix the name of the
                attribute that is to be converted in order to specify it as part
                of the map key or map value.
            </description>
            <location chapter="11" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2000</id>
            <description>When the Convert annotation is applied to a map to
                specify conversion of a map key of basic
                type, "key" must be used as the value of the attributeName
                element to specify that it is the map key
                that is to be converted.
            </description>
            <location chapter="11" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2001</id>
            <description>The Convert annotation may be applied to an entity
                class that extends a mapped superclass to
                specify or override a conversion mapping for an inherited basic
                or embedded attribute.
            </description>
            <location chapter="11" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2002</id>
            <description>The Converts annotation is used to group Convert
                annotations. Multiple converters must not be
                applied
                to the same basic attribute.
            </description>
            <location chapter="11" section="1.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1116</id>
            <description>For the SINGLE_TABLE mapping strategy, and typically
                also for the JOINED strategy, the
                persistence provider will use a type discriminator column. The
                supported discriminator types are defined
                by the DiscriminatorType enum: STRING, CHAR, INTEGER.
            </description>
            <location chapter="11" section="1.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1126</id>
            <description>The DiscriminatorColumn annotation is used to define
                the discriminator column for the
                SINGLE_TABLE and JOINED inheritance mapping strategies.
            </description>
            <location chapter="11" section="1.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2003</id>
            <description>
                The strategy and the discriminator column are only specified in
                the root of an entity class hierarchy or
                subhierarchy in which a different inheritance strategy is
                applied.
            </description>
            <location chapter="11" section="1.12"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2004</id>
            <description>
                The combination of inheritance strategies within a single entity
                inheritance hierarchy is not defined by
                this specification.
            </description>
            <location chapter="11" section="1.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1126.1</id>
            <description>The DiscriminatorColumn annotation can be specified on
                an entity class (including on an
                abstract entity class).
            </description>
            <location chapter="11" section="1.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1126.2</id>
            <description>If the DiscriminatorColumn annotation is missing, and a
                discriminator column is required, the
                name of the discriminator column defaults to "DTYPE" and the
                discriminator type to STRING.
            </description>
            <location chapter="11" section="1.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1126.2</id>
            <description>The type of the discriminator column, if specified in
                the optional columnDefinition element,
                must be consistent with the discriminator type.
            </description>
            <location chapter="11" section="1.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1126.3</id>
            <description>The DiscriminatorValue annotation is used to specify
                the value of the discriminator column for
                entities of the given type. The DiscriminatorValue annotation
                can only be specified on a concrete entity
                class.
            </description>
            <location chapter="11" section="1.13"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1126.4</id>
            <description>If the DiscriminatorValue annotation is not specified
                and a discriminator column is used, a
                provider-specific function will be used to generate a value
                representing the entity type.
            </description>
            <location chapter="11" section="1.13"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1118</id>
            <description>
                The inheritance strategy and the discriminator column are only
                specified in the root of an entity class
                hierarchy or subhierarchy in which a different inheritance
                strategy is applied.
            </description>
            <location chapter="11" section="1.13"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2005</id>
            <description>
                The discriminator value, if not defaulted, should be specified
                for each entity class in the hierarchy.
            </description>
            <location chapter="11" section="1.13"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2006</id>
            <description>
                The discriminator value must be consistent in type with the
                discriminator type of the specified or
                defaulted discriminator column. If the discriminator type is an
                integer, the value specified must be
                able to be converted to an integer value
            </description>
            <location chapter="11" section="1.13"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2513</id>
            <description>If the DiscriminatorType is STRING, the discriminator value default is the entity name.
            </description>
            <location chapter="11" section="1.13"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2007</id>
            <description>
                The ElementCollection annotation defines a collection of
                instances of a basic type or embeddable class.
            </description>
            <location chapter="11" section="1.14"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2008</id>
            <description>
                The ElementCollection annotation (or equivalent XML element)
                must be specified if the collection is to
                be mapped by means of a collection table
            </description>
            <location chapter="11" section="1.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1248</id>
            <description>The basic or embeddable class that is the element type
                of the collection. Optional only if the
                collection field or property is defined using Java generics.
                Must be specified otherwise.
            </description>
            <location chapter="11" section="1.14"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1249</id>
            <description>The EAGER strategy is a requirement on the persistence
                provider runtime that the collection
                elements must be eagerly fetched.
            </description>
            <location chapter="11" section="1.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1127</id>
            <description>The Embeddable annotation is used to specify a class
                whose instances are stored as an intrinsic
                part of an owning entity and share the identity of the entity.
            </description>
            <location chapter="11" section="1.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2009</id>
            <description>The Embedded annotation is used to specify
            </description>
            <location chapter="11" section="1.16"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2009.1</id>
                    <description>a persistent field</description>
                    <location chapter="11" section="1.16"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2009.2</id>
                    <description>property of an entity</description>
                    <location chapter="11" section="1.16"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2009.3</id>
                    <description>embeddable class whose value is an instance of
                        an embeddable class. If the
                        embeddable
                        class is used as a primary key, the EmbeddedId rather
                        than the Embedded annotation is used.
                    </description>
                    <location chapter="11" section="1.16"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1129</id>
            <description>The Embedded annotation may be used in an entity class
                when it is using a shared embeddable
                class. The entity may override the column mappings declared
                within the embeddable class to apply to its
                own entity table.
            </description>
            <location chapter="11" section="1.16"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1128</id>
            <description>Each of the persistent properties or fields of the
                embedded object is mapped to the database
                table. Only Basic, Column, Serialized, and Lob mapping
                annotations may be used to map embedded object.
            </description>
            <location chapter="11" section="1.16"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2010</id>
            <description>Each of the persistent properties or fields of the
                embedded object is mapped to the database
                table for the entity or embeddable class.
            </description>
            <location chapter="11" section="1.16"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2011</id>
            <description>The embeddable class must be annotated as Embeddable.
                Use of the Embedded annotation is not
                required
            </description>
            <location chapter="11" section="1.16"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2012</id>
            <description>
                Implementations are not required to support embedded objects
                that are mapped across more than one table
                (e.g., split across primary and secondary tables or multiple
                secondary tables).
            </description>
            <location chapter="11" section="1.16"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1063</id>
            <description>The EmbeddedId annotation is applied to a persistent
                field or property of an entity class or
                mapped superclass to denote a composite primary key that is an
                embeddable class.
            </description>
            <location chapter="11" section="1.17"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2013</id>
            <description>
                The embeddable class must be annotated as Embeddable. Note that
                theId annotation is not used in the
                embeddable class
            </description>
            <location chapter="11" section="1.17"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2014</id>
            <description>
                Relationship mappings defined within an embedded id class are
                not supported.
            </description>
            <location chapter="11" section="1.17"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1064</id>
            <description>There must be only one EmbeddedId annotation and no Id
                annotation when the EmbeddedId
                annotation is used.
            </description>
            <location chapter="11" section="1.17"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1251</id>
            <description>The AttributeOverride annotation may be used to
                override the column mappings declared within
                the embeddable class.
            </description>
            <location chapter="11" section="1.17"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2015</id>
            <description>The MapsId annotation may be used in conjunction with
                the EmbeddedId annotation to specify a
                derived primary key.
            </description>
            <location chapter="11" section="1.17"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2016</id>
            <description>
                If the entity has a derived primary key, the AttributeOverride
                annotation may only be used to override
                those attributes of the embedded id that do not correspond to
                the relationship to the parent entity.
            </description>
            <location chapter="11" section="1.17"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1090.1</id>
            <description>The Enumerated annotation specifies that a persistent
                property or field should be persisted as
                enumerated type.
            </description>
            <location chapter="11" section="1.18"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2017</id>
            <description>The Enumerated annotation may be used in conjunction
                with the Basic annotation.
            </description>
            <location chapter="11" section="1.18"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2018</id>
            <description>The Enumerated annotation may be used in conjunction
                with the ElementCollection annotation when
                the element collection value is of basic type. If the element
                collection is a Map, this applies to the
                map value.
            </description>
            <location chapter="11" section="1.18"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1090.2</id>
            <description>An enum can be mapped as either string or integer. The
                EnumType enum defines the mapping for
                enumerated types.
            </description>
            <location chapter="11" section="1.18"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2019</id>
            <description>Mapping of enum values that contain state is not
                supported.
            </description>
            <location chapter="11" section="1.18"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1090.3</id>
            <description>If the enumerated type is not specified or the
                Enumerated annotation is not used, the
                enumerated type is assumed to be ORDINAL unless a converter is
                being applied..
            </description>
            <location chapter="11" section="1.18"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2020</id>
            <description>
                The ForeignKey annotation is used to specify the handling of
                foreign key constraints when schema generation is in effect.
            </description>
            <location chapter="11" section="1.19"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2490</id>
            <description>If this annotation is not specified, the persistence
                providerâs default foreign key strategy
                will be used.
            </description>
            <location chapter="11" section="1.19"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2491</id>
            <description>The enum values have the following semantics:
            </description>
            <location chapter="11" section="1.19"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology"
                           status="active" testable="true">
                    <id>PERSISTENCE:SPEC:2491.1</id>
                    <description>A value of CONSTRAINT will cause the
                        persistence provider to generate a foreign key
                        constraint.
                    </description>
                    <location chapter="11" section="1.19"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology"
                           status="active" testable="true">
                    <id>PERSISTENCE:SPEC:2491.2</id>
                    <description>A value of NO_CONSTRAINT will result in no
                        constraint being generated.
                    </description>
                    <location chapter="11" section="1.19"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology"
                           status="active" testable="true">
                    <id>PERSISTENCE:SPEC:2491.3</id>
                    <description>A value of PROVIDER_DEFAULT will result in the
                        provider's default behavior (which may or may not result
                        in the generation of a constraint for any given join
                        column or set of join columns).
                    </description>
                    <location chapter="11" section="1.19"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2021</id>
            <description>The syntax used in the foreignKeyDefinition element
                should follow the SQL syntax used by the
                target database for foreign key constraints
            </description>
            <location chapter="11" section="1.19"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2492</id>
            <description>If the ForeignKey annotation is specified with a
                ConstraintMode value of CONSTRAINT, but the foreignKeyDefinition
                element is not specified, the provider will generate a foreign
                key constraint whose update and delete actions it determines
                most appropriate for the join column(s) to which the foreign key
                constraint is applied
            </description>
            <location chapter="11" section="1.19"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1057</id>
            <description>The GeneratedValue annotation provides for the
                specification of generation strategies
                for the value of primary keys. The GeneratedValue annotation may
                be applied
                to a primary key property or mapped superclass in conjunction
                with the Id annotation.
            </description>
            <location chapter="11" section="1.20"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2023</id>
            <description>The use of the GeneratedValue annotation is only
                required to be supported for simple primary
                keys.
            </description>
            <location chapter="11" section="1.20"/>
        </assertion>

        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2024</id>
            <description>Use of the GeneratedValue annotation is not supported
                for derived primary keys.
            </description>
            <location chapter="11" section="1.20"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1051</id>
            <description>The types of the primary key generation are defined by
                the GenerationType enum.
            </description>
            <location chapter="11" section="1.20"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1052</id>
                    <description>The TABLE generator type value indicates that
                        the persistence provider must assign
                        primary keys for the entity using an underlying database
                        table to ensure uniqueness.
                    </description>
                    <location chapter="11" section="1.20"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1053</id>
                    <description>The SEQUENCE and IDENTITY values specify the
                        use of a database sequence or identity
                        column, respectively. Note that SEQUENCE and IDENTITY
                        are not portable across all databases.
                    </description>
                    <location chapter="11" section="1.20"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:1055</id>
                    <description>The AUTO value indicates that the persistence
                        provider should pick an appropriate
                        strategy for the particular database.
                    </description>
                    <location chapter="11" section="1.20"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1253</id>
            <description>The primary key generation strategy is that the
                persistence provider must generate the
                annotated entity primary key.
                The name of the primary key generator to be used as specified in
                the
                SequenceGenerator or TableGenerator annotation.
            </description>
            <location chapter="11" section="1.20"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1066</id>
            <description>The Id annotation may be applied in an entity or mapped
                superclass.
            </description>
            <location chapter="11" section="1.21"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1049</id>
            <description>The Id annotation specifies the primary key property or
                field of an entity.
            </description>
            <location chapter="11" section="1.21"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2025</id>
            <description>The field or property to which the Id annotation is
                applied should be one of the following
                types
            </description>
            <location chapter="11" section="1.21"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2025.1</id>
                    <description>any Java primitive type</description>
                    <location chapter="11" section="1.21"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2025.2</id>
                    <description>any primitive wrapper type</description>
                    <location chapter="11" section="1.21"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2025.3</id>
                    <description>java.lang.String</description>
                    <location chapter="11" section="1.21"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2025.4</id>
                    <description>java.util.Date</description>
                    <location chapter="11" section="1.21"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2025.5</id>
                    <description>java.sql.Date</description>
                    <location chapter="11" section="1.21"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2025.6</id>
                    <description>java.math.BigDecimal</description>
                    <location chapter="11" section="1.21"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2025.7</id>
                    <description>java.math.BigInteger</description>
                    <location chapter="11" section="1.21"/>
                </assertion>

            </sub-assertions>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1050</id>
            <description>The mapped column for the primary key of the entity is
                assumed to be the primary
                key of the primary table. If no Column annotation is specified,
                the primary key column name is assumed
                to be the name of the identifier property or field.
            </description>
            <location chapter="11" section="1.21"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1065</id>
            <description>The IdClass annotation is applied to an entity class or
                a mapped superclass to specify a
                composite primary key class that is mapped to multiple fields or
                properties of the entity. The names of
                the fields or properties in the primary key class and the
                primary key fields or properties of the entity
                must correspond and their types must match.
            </description>
            <location chapter="11" section="1.22"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2026</id>
            <description>The Index annotation is used in schema generation. Note
                that it is not necessary to specify an
                index
                for a primary key, as the primary key index will be created
                automatically, however, the Index annotation
                may be used to specify the ordering of the columns in the index
                for the primary key.
            </description>
            <location chapter="11" section="1.23"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2027</id>
            <description>The persistence provider must observe the specified
                ordering of the columns.
            </description>
            <location chapter="11" section="1.23"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2028</id>
            <description>If ASC or DESC is not specified, ASC (ascending order)
                is assumed.
            </description>
            <location chapter="11" section="1.23"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2029</id>
            <description>
                The Inheritance annotation defines the inheritance strategy to
                be used for an entity class hierarchy. It
                is specified on the entity class that is the root of the entity
                class hierarchy.
            </description>
            <location chapter="11" section="1.24"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1119</id>
            <description>if no inheritance type is specified for an entity class
                hierarchy, the SINGLE_TABLE mapping
                strategy is used.
            </description>
            <location chapter="11" section="1.24"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2030</id>
            <description>Support for the combination of inheritance strategies
                is not required by this specification.
            </description>
            <location chapter="11" section="1.24"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1112</id>
            <description>The three inheritance mapping strategies are:
            </description>
            <location chapter="11" section="1.24"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1113</id>
                    <description>single table per class hierarchy</description>
                    <location chapter="11" section="1.24"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1115</id>
                    <description>joined subclass</description>
                    <location chapter="11" section="1.24"/>
                </assertion>
                <assertion required="false" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1114</id>
                    <description>table per concrete class strategies. Support
                        for the TABLE_PER_CLASS mapping
                        strategy
                        is optional in this release.
                    </description>
                    <location chapter="11" section="1.24"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1038</id>
            <description>The JoinColumn annotation is used to specify a column
                for joining an entity association
                or element collection.
            </description>
            <location chapter="11" section="1.25"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1042</id>
            <description>If the JoinColumn annotation itself is defaulted, a
                single join column is assumed and the
                default values apply.
            </description>
            <location chapter="11" section="1.25"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1039</id>
            <description>The name annotation element defines the name of the
                foreign key column.
            </description>
            <location chapter="11" section="1.25"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2031</id>
            <description>The remaining annotation elements (other than
                referencedColumnName) refer to this column and
                have the same semantics as for the Column annotation.
            </description>
            <location chapter="11" section="1.25"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1040</id>
            <description>If the referencedColumnName element is missing, the
                foreign key is assumed to refer to the
                primary key of the referenced table.
            </description>
            <location chapter="11" section="1.25"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1047</id>
            <description>Support for referenced columns that are not the primary
                key of the referenced table is
                optional. Applications that use such mappings will not be
                portable.
            </description>
            <location chapter="11" section="1.25"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2493</id>
            <description>The foreignKey annotation element is used to specify or
                control the generation of a foreign key constraint when schema
                generation is in effect. If both this element and the foreignKey element of any
                of the JoinColumn elements referenced by the value element are specified, the behavior is undefined. If no foreignKey annotation element is specified in either location, the persistence
                providerâ's default foreign key strategy will apply.
            </description>
            <location chapter="11" section="1.25"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2494</id>
            <description>If there is more than one join column, a JoinColumn
                annotation must be specified for each join column using the
                JoinColumns annotation. Both the name and the
                referencedColumnName elements must be specified in each such
                JoinColumn annotation.
            </description>
            <location chapter="11" section="1.25"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1041</id>
            <description>If the name annotation element is missing, or if no
                JoinColumn annotation is specified, the
                join columns are assumed to have the same names as the primary
                key columns of the referenced table.
            </description>
            <location chapter="11" section="1.25"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1043</id>
            <description>if a single join column is used</description>
            <location chapter="11" section="1.25"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1044</id>
                    <description>
                        name default - The concatenation of the following: the
                        name of the referencing relationship
                        property or field of the referencing entity; "_"; the
                        name of the referenced primary key
                        column.
                    </description>
                    <location chapter="11" section="1.25"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1043.1</id>
                    <description>
                        name default - The concatenation of the following: If
                        there is no such referencing
                        relationship
                        property or field in the entity, or if the join is for
                        an element collection, the join
                        column
                        name is formed as the concatenation of the following:
                        the name of the entity; "_"; the name
                        of
                        the referenced primary key column.
                    </description>
                    <location chapter="11" section="1.25"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1045</id>
                    <description>
                        referencedColumnName default - If the
                        referencedColumnName element is missing, The same name
                        as
                        the primary key column of the referenced table.
                    </description>
                    <location chapter="11" section="1.25"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1046</id>
            <description>If there is more than one join column, a JoinColumn
                annotation must be specified for each join
                column using the JoinColumns annotation. Both the name and
                referencedColumnName elements must be
                specified in each such JoinColumn annotation.
                annotation.
            </description>
            <location chapter="11" section="1.25"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1048</id>
            <description>Composite foreign keys are supported by means of the
                JoinColumns annotation. The JoinColumns
                annotation groups JoinColumn annotations for the same
                relationship.
            </description>
            <location chapter="11" section="1.26"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2032</id>
            <description>When the JoinColumns annotation is used, both the name
                and the referencedColumnName
                elements must be specified in each of the grouped JoinColumn
                annotations.
            </description>
            <location chapter="11" section="1.26"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2495</id>
            <description>The foreignKey annotation element is used to specify or
                control the generation of a foreign key constraint when schema
                generation is in effect. If this element is not specified, the
                persistence providerâs default foreign key strategy will apply.
            </description>
            <location chapter="11" section="1.26"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1097</id>
            <description>A JoinTable annotation is used in the mapping of
                associations. A JoinTable annotation is
                specified on the owning side of the association. If the
                JoinTable annotation is not explicitly specified
                for the mapping of a many-to-many or unidirectional one-to-many
                relationship, the default values of the
                annotation elements apply. The name of the JoinTable is assumed
                to be the tables names of the associated
                primary tables concatenated together (owning side first) using
                an underscore.
            </description>
            <location chapter="11" section="1.27"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2505</id>
            <description>The foreignKey element is used to specify or control the generation of a foreign key constraint for the columns corresponding to the joinColumns element when table generation is in effect.
            </description>
            <location chapter="11" section="1.27"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>PERSISTENCE:SPEC:2505.1</id>
                    <description>
                        If both this element and the foreignKey element of any of the joinColumns elements are specified, the behavior is undefined.
                    </description>
                    <location chapter="11" section="1.28"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>PERSISTENCE:SPEC:2505.2</id>
                    <description>
                        If no foreignKey annotation element is specified in either location, the persistence provider's default foreign key strategy will apply. The inverseForeignKey element applies to the generation of a foreign key constraint for the columns corresponding to the inverseJoinColumns element, and similar rules apply.
                    </description>
                    <location chapter="11" section="1.28"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1089</id>
            <description>A Lob annotation specifies that a persistent property
                or field should be persisted as a large
                object to a database-supported large object type.
            </description>
            <location chapter="11" section="1.28"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2033</id>
            <description>The Lob annotation may be used in conjunction with the
                Basic annotation or with the
                ElementCollection annotation when the element collection value
                is of basic type. If the element
                collection is a Map, this applies to the map value.
            </description>
            <location chapter="11" section="1.28"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2034</id>
            <description>A Lob may be either a binary or character type.
            </description>
            <location chapter="11" section="1.28"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2035</id>
            <description>The Lob type is inferred from the type of the
                persistent field or property and, except for
                string and character types, defaults to Blob.
            </description>
            <location chapter="11" section="1.28"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1092</id>
            <description>Multiple operations may be included in the [cascade]
                set.
            </description>
            <location chapter="9" section="1.25"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1098</id>
            <description>A ManyToMany annotation defines a many-valued
                association with many-to-many multiplicity. If
                the collection is defined using generics to specify the element
                type, the associated target entity
                class does not need to be specified; otherwise it must be
                specified.
            </description>
            <location chapter="11" section="1.29"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1254</id>
            <description>Every many-to-many association has two sides, the
                owning side and the non-owning, or inverse,
                side. If the association is bidirectional, either side may be
                designated as the owning side.
                The join table for the relationship, if not defaulted, is
                specified on the owning side.
            </description>
            <location chapter="11" section="1.29"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1099</id>
            <description>Every many-to-many association has two sides, the
                owning side and the non-owning or inverse
                side. The join table for the relationship, if not defaulted, is
                specified on the owning side.
            </description>
            <location chapter="11" section="1.29"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1256</id>
            <description>If the relationship is bidirectional, the non-owning
                side must use the mappedBy element of the
                ManyToMany annotation to specify the relationship field or
                property of the owning side.
            </description>
            <location chapter="11" section="1.29"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1255</id>
            <description>The ManyToMany annotation may be used within an
                embeddable class contained within an entity
                class to specify a relationship to a collection of entities.
            </description>
            <location chapter="11" section="1.29"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2036</id>
            <description>
                The ManyToMany annotation must not be used within an embeddable
                class used in an element collection
            </description>
            <location chapter="11" section="1.29"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2037</id>
            <description>
                If the relationship is bidirectional and the entity
                containing the embeddable class is the owner of the
                relationship, the non-owning side must use the
                mappedBy element of the ManyToMany annotation to specify the
                relationship field or property of the
                embeddable class.
            </description>
            <location chapter="11" section="1.29"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2037.1</id>
                    <description>
                        The dot (".") notation syntax must be used in the
                        mappedBy element to indicate the
                        relationship
                        attribute within the embedded attribute. The value of
                        each identifier used with the dot
                        notation
                        is the name of the respective embedded
                        field or property.
                    </description>
                    <location chapter="11" section="1.29"/>
                </assertion>
            </sub-assertions>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1093</id>
            <description>The value cascade=ALL is equivalent to
                cascade={PERSIST, MERGE, REMOVE, REFRESH, DETACH}.
            </description>
            <location chapter="11" section="1.29"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2038</id>
            <description>When the collection is a java.util.Map, the cascade
                element applies to the map value.
            </description>
            <location chapter="11" section="1.29"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2039</id>
            <description>The EAGER strategy is a requirement on the persistence
                provider runtime that the associated
                entity must be eagerly fetched.
            </description>
            <location chapter="11" section="1.29"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2040</id>
            <description>The LAZY strategy is a hint to the persistence provider
                runtime that the associated entity
                should be fetched lazily when it is first accessed. The
                implementation is permitted to eagerly fetch
                associations for which the LAZY strategy hint has been
                specified.
            </description>
            <location chapter="11" section="1.29"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1090</id>
            <description>The ManyToOne annotation defines a single-valued
                association to another entity class that has a
                many-to-one multiplicity. It is not normally necessary to
                specify the name of the associated target
                entity explicitly since it can usually be inferred from the type
                of the object being referenced.
            </description>
            <location chapter="11" section="1.30"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1257</id>
            <description>The ManyToOne annotation may be used within an
                embeddable class to specify a relationship from
                the embeddable class to an entity class.
            </description>
            <location chapter="11" section="1.30"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1258</id>
            <description>
                If the relationship is bidirectional, the non-owning OneToMany
                entity side must use the mappedBy element
                of the OneToMany annotation to specify the relationship field or
                property of the embeddable field or
                property on the owning side of the relationship.
            </description>
            <location chapter="11" section="1.30"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1259</id>
            <description>
                The dot (".") notation syntax must be used in the mappedBy
                element to indicate the relationship
                attribute within the embedded attribute. The value of each
                identifier used with the dot notation is the
                name of the respective embedded field or
                property.
            </description>
            <location chapter="11" section="1.30"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1091</id>
            <description>The operations that can be cascaded are defined by the
                CascadeType enum
            </description>
            <location chapter="11" section="1.30"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2041</id>
            <description>The EAGER strategy is a requirement on the persistence
                provider runtime that the associated
                entity must be eagerly fetched.
            </description>
            <location chapter="11" section="1.30"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2042</id>
            <description>The LAZY strategy is a hint to the persistence provider
                runtime that the associated entity
                should be fetched lazily when it is first accessed. The
                implementation is permitted to eagerly fetch
                associations for which the LAZY strategy hint has been
                specified.
            </description>
            <location chapter="11" section="1.30"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1100</id>
            <description>The MapKey annotation is used to specify the map key
                for associations of type java.util.Map.
                When the mapkey is itself the primary key or a persistent field
                or property of the entity that is the
                value of the map.
            </description>
            <location chapter="11" section="1.31"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1101</id>
            <description>The name element designates the name of the persistent
                field or
                property of the associated entity that is used as the map key.
                If name element is not specified,the primary key of the
                associated entity is used as the map key.
            </description>
            <location chapter="11" section="1.31"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1102</id>
            <description>If the primary key is a composite primary key and is
                mapped as IdClass, an instance of the
                primary key class is used as the key.
            </description>
            <location chapter="11" section="1.31"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2043</id>
            <description>If a persistent field or property other than the
                primary key is used as a map key, it is
                expected to be unique within the context of the relationship.
            </description>
            <location chapter="11" section="1.31"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2044</id>
            <description>The MapKeyClass annotation is not used when MapKey is
                specified and vice versa.
            </description>
            <location chapter="11" section="1.31"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2045</id>
            <description>The map key can be</description>
            <location chapter="11" section="1.32"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2045.1</id>
                    <description>a basic type</description>
                    <location chapter="11" section="1.32"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2045.2</id>
                    <description>an embeddable class</description>
                    <location chapter="11" section="1.32"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2045.3</id>
                    <description>an entity</description>
                    <location chapter="11" section="1.32"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2046</id>
            <description>If the map is specified using Java generics, the
                MapKeyClass annotation and associated type
                need not be specified; otherwise they must be specified.
            </description>
            <location chapter="11" section="1.32"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2047</id>
            <description>The MapKeyClass annotation is used in conjunction
                with
            </description>
            <location chapter="11" section="1.32"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2047.1</id>
                    <description>ElementCollection</description>
                    <location chapter="11" section="1.32"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2047.2</id>
                    <description>one of the collection-
                        valued relationship annotations (OneToMany).
                    </description>
                    <location chapter="11" section="1.32"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2047.3</id>
                    <description>one of the collection-
                        valued relationship annotations (ManyToMany).
                    </description>
                    <location chapter="11" section="1.32"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2048</id>
            <description>The MapKey annotation is not used when MapKeyClass is
                specified and vice versa.
            </description>
            <location chapter="11" section="1.32"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1261</id>
            <description>The MapKeyColumn annotation is used to specify the
                mapping for the key column of a map whose
                map key is a basic type.
            </description>
            <location chapter="11" section="1.33"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2049</id>
            <description>If the name element is not specified, it defaults to
                the concatenation of the following:
                the name of the referencing relationship field or property; "_";
                "KEY".
            </description>
            <location chapter="11" section="1.33"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2050</id>
            <description>If no MapKeyColumn annotation is specified, the default
                values in Table apply.
            </description>
            <location chapter="11" section="1.33"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2051</id>
            <description>The MapKeyEnumerated annotation is used to specify the
                enum type for a map key whose basic type
                is an enumerated type.
            </description>
            <location chapter="11" section="1.34"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2052</id>
            <description>The MapKeyEnumerated annotation can be applied to an
                element collection or relationship of type
                java.util.Map, in conjunction with the
            </description>
            <location chapter="11" section="1.34"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2052.1</id>
                    <description>ElementCollection annotation.</description>
                    <location chapter="11" section="1.34"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2052.2</id>
                    <description>OneToMany annotation.</description>
                    <location chapter="11" section="1.34"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2052.3</id>
                    <description>ManyToMany annotation.</description>
                    <location chapter="11" section="1.34"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2053</id>
            <description>If the map is specified using Java generics, the
                MapKeyClass annotation and associated
                type need not be specified; otherwise they must be specified.
            </description>
            <location chapter="11" section="1.34"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2054</id>
            <description>If the enumerated type is not specified or the
                MapKeyEnumerated annotation is not used, the
                enumerated type is assumed to be ORDINAL.
            </description>
            <location chapter="11" section="1.34"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2055</id>
            <description>The MapKeyJoinColumn annotation is used to specify a
                mapping to an entity that is a map key.
            </description>
            <location chapter="11" section="1.35"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2056</id>
            <description>The map key join column is in the</description>
            <location chapter="11" section="1.35"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2056.1</id>
                    <description>collection table of the target entity that is
                        used to represent
                        the map
                    </description>
                    <location chapter="11" section="1.35"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2056.2</id>
                    <description>join table of the target entity that is used to
                        represent the map
                    </description>
                    <location chapter="11" section="1.35"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2056.3</id>
                    <description>table of the target entity that is used to
                        represent the map
                    </description>
                    <location chapter="11" section="1.35"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2057</id>
            <description>If no MapKeyJoinColumn annotation is specified, a
                single join column is assumed and the default
                values described below (and in Table 29) apply.
            </description>
            <location chapter="11" section="1.35"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2058</id>
            <description>The name annotation element defines the name of the
                foreign key column.
            </description>
            <location chapter="11" section="1.35"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2059</id>
            <description>The remaining annotation elements (other than
                referencedColumnName) refer to this column.
            </description>
            <location chapter="11" section="1.35"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2060</id>
            <description>If there is a single map key join column, and if the
                name annotation member is missing, the map
                key join column name is formed as the concatenation of the
                following:
            </description>
            <location chapter="11" section="1.35"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2060.1</id>
                    <description>the name of the referencing relationship
                        property or field of the referencing entity; "_"; "KEY".
                    </description>
                    <location chapter="11" section="1.35"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2060.2</id>
                    <description>the name of the referencing relationship
                        property or field of the referencing embeddable; "_";
                        "KEY".
                    </description>
                    <location chapter="11" section="1.35"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2061</id>
            <description>If the referencedColumnName element is missing, the
                foreign key is assumed to refer to the
                primary key of the referenced table.
            </description>
            <location chapter="11" section="1.35"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2062</id>
            <description>Support for referenced columns that are not primary key
                columns of the referenced table is
                optional. Applications that use such mappings will not be
                portable.
            </description>
            <location chapter="11" section="1.35"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2506</id>
            <description>The foreignKey element is used to specify or control the generation of a foreign key constraint for the map key join column when table generation is in effect. If the foreignKey element is not specified, the persistence providerâs default foreign key strategy will be used.
            </description>
            <location chapter="11" section="1.35"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1262</id>
            <description>If there is more than one map key join column, a
                MapKeyJoinColumn annotation must be specified
                for each join column using the MapKeyJoinColumns annotation.
            </description>
            <location chapter="11" section="1.35"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1263</id>
            <description>Both the name and the referencedColumnName elements
                must be specified in each such
                MapKeyJoinColumn annotation.
            </description>
            <location chapter="11" section="1.35"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2063</id>
            <description>Composite map keys referencing entities are supported
                by means of the MapKeyJoinColumns
                annotation.
            </description>
            <location chapter="11" section="1.36"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1264</id>
            <description>When the MapKeyJoinColumns annotation is used, both the
                name and the referencedColumnName
                elements must be specified in each of the grouped
                MapKeyJoinColumn annotations.
            </description>
            <location chapter="11" section="1.36"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2508</id>
            <description>The foreignKey element is used to specify or control the generation of a foreign key constraint for the columns corresponding to the MapKeyJoinColumn elements referenced by the value element when table generation is in effect.
            </description>
            <location chapter="11" section="1.36"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>PERSISTENCE:SPEC:2508.1</id>
                    <description>If both this element and the foreignKey element of any of the MapKeyJoinColumn elements are specified, the behavior is undefined.
                    </description>
                    <location chapter="11" section="1.36"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>PERSISTENCE:SPEC:2508.2</id>
                    <description>If no foreignKey annotation element is specified in either location, the persistence provider's default foreign key strategy will apply.
                    </description>
                    <location chapter="11" section="1.36"/>
                </assertion>
            </sub-assertions>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2064</id>
            <description>The MapKeyTemporal annotation is used to specify the
                temporal type for a map key whose basic
                type is a temporal type.
            </description>
            <location chapter="11" section="1.37"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2065</id>
            <description>The MapKeyTemporal annotation can be applied to an
                element collection or relationship of type
                java.util.Map, in conjunction with the
            </description>
            <location chapter="11" section="1.37"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2065.1</id>
                    <description>ElementCollection annotation.</description>
                    <location chapter="11" section="1.37"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2065.2</id>
                    <description>OneToMany annotation.</description>
                    <location chapter="11" section="1.37"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2065.3</id>
                    <description>ManyToMany annotation.</description>
                    <location chapter="11" section="1.37"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2066</id>
            <description>If the map is specified using Java generics, the
                MapKeyClass annotation and associated type
                need not be specified; otherwise they must be specified.
            </description>
            <location chapter="11" section="1.37"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1130</id>
            <description>The MappedSuperclass annotation designates a class
                whose mapping information is applied to the
                entities that inherit from it. A mapped superclass has no
                separate table defined for it.
            </description>
            <location chapter="11" section="1.38"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1131</id>
            <description>A class designated with the MappedSuperclass annotation
                can be mapped in the same way as an
                entity except that the mappings will apply only to its
                subclasses since no table exists for the mapped
                superclass itself.
            </description>
            <location chapter="11" section="1.38"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1132</id>
            <description>When applied to the subclasses the inherited mappings
                will apply in the context of the subclass
                tables.
            </description>
            <location chapter="11" section="1.38"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1133</id>
            <description>Mapping information may be overridden in such
                subclasses by using the Mapping information may
                be overridden in such subclasses by using the AttributeOverride,
                AttributeOverrides,
                AssociationOverride,and AssociationOverrides annotations.
            </description>
            <location chapter="11" section="1.38"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2067</id>
            <description>
                The MapsId annotation is used to designate a ManyToOne or
                OneToOne relationship attribute that provides
                the mapping for
            </description>
            <location chapter="11" section="1.39"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2067.1</id>
                    <description>an EmbeddedId primary key</description>
                    <location chapter="11" section="1.39"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2067.2</id>
                    <description>an attribute within an EmbeddedId primary key
                    </description>
                    <location chapter="11" section="1.39"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2067.3</id>
                    <description>a simple primary key of the parent entity
                    </description>
                    <location chapter="11" section="1.39"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2068</id>
            <description>The value element specifies the attribute within a
                composite key to which the relationship
                attribute corresponds.
            </description>
            <location chapter="11" section="1.39"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2069</id>
            <description>If the entityâs primary key is of the same Java type as
                the primary key of the entity
                referenced by the relationship, the value attribute is not
                specified.
            </description>
            <location chapter="11" section="1.39"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1250</id>
            <description>The Embedded annotation may be used to specify a
                persistent field or property of an entity or
                embeddable class whose value is an instance of an embedable
                class.
            </description>
            <location chapter="11" section="1.39"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1095</id>
            <description>The OneToMany annotation defines a many-valued
                association with one-to-many multiplicity. If
                the Collection is defined using generics to specify the element
                type then the associated target entity
                class need not be specified; Otherwise it must be specified.
            </description>
            <location chapter="11" section="1.40"/>
        </assertion>

        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1096</id>
            <description>Unidirectional one-to-many relationships may be
                implemented using one-to-many foreign key
                mappings.
            </description>
            <location chapter="11" section="1.40"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1265</id>
            <description>The OneToMany annotation may be used within an
                embeddable class contained within an entity
                class to specify a relationship to a collection of entities. If
                the relationship is bidirectional, the
                mappedBy element must be used to specify the relationship field
                or property of the entity that is the
                owner of the relationship.
            </description>
            <location chapter="11" section="1.40"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2070</id>
            <description>The OneToMany annotation must not be used within an
                embeddable class used in an element
                collection.
            </description>
            <location chapter="11" section="1.40"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2071</id>
            <description>When the collection is a java.util.Map, the cascade
                element and the orphanRemoval element
                apply to the map value.
            </description>
            <location chapter="11" section="1.40"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2072</id>
            <description>
                If orphanRemoval is true and an entity that is the target of the
                relationship is removed from the
                relationship (either by removal from the collection or by
                setting the relationship to null), the remove
                operation will be applied to the entity being orphaned.
            </description>
            <location chapter="11" section="1.40"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2073</id>
            <description>If the entity being orphaned is a detached, new, or
                removed entity, the semantics of
                orphanRemoval do not apply.
            </description>
            <location chapter="11" section="1.40"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2074</id>
            <description>
                If orphanRemoval is true and the remove operation is applied to
                the source entity, the remove
                operation will be cascaded to the relationship target in
                accordance with the rules of section 3.2.3,
                (and
                hence it is not necessary to specify cascade=REMOVE for the
                relationship)[
            </description>
            <location chapter="11" section="1.40"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2075</id>
            <description>
                If the parent is detached or new or was previously removed
                before the orphan was associated with it, the
                remove operation is not applied to the entity being orphaned.
            </description>
            <location chapter="11" section="1.40"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2076</id>
            <description>The remove operation is applied at the time of the
                flush operation.
            </description>
            <location chapter="11" section="1.40"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:1266</id>
            <description>
                Portable applications must otherwise not depend upon a specific
                order of removal, and must not reassign
                an entity that has been orphaned to another relationship or
                otherwise attempt to persist it.
            </description>
            <location chapter="11" section="1.40"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2077</id>
            <description>The default mapping for unidirectional one-to-many
                relationships uses a join table,
            </description>
            <location chapter="11" section="1.40"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2078</id>
            <description>Unidirectional one-to-many relationships may be
                implemented using one-to-many foreign
                key mappings, using the JoinColumn and JoinColumns annotations.
            </description>
            <location chapter="11" section="1.40"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1094</id>
            <description>The OneToOne annotation defines a single-valued
                association to another entity class that has a
                one-to-one multiplicity. It is not normally necessary to specify
                the name of the associated target
                entity explicitly since it can usually be inferred from the type
                of the object being referenced.
            </description>
            <location chapter="11" section="1.41"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2079</id>
            <description>
                If the relationship is bidirectional, the mappedBy element must
                be used to specify the relationship
                field or property of the entity that is the owner of the
                relationship.
            </description>
            <location chapter="11" section="1.41"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1267</id>
            <description>The OneToOne annotation may be used within an
                embeddable class to specify a relationship from
                the embeddable class to an entity class. If the relationship is
                bidirectional and the entity containing
                the embeddable class is on the owning side of the relationship,
                the non-owning side must use the
                mappedBy element of the OneToOne annotation to specify the
                relationship field or property of the
                embeddable class.
            </description>
            <location chapter="11" section="1.41"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2080</id>
            <description>
                The dot (".") notation syntax must be used in the mappedBy
                element to indicate the relationship
                attribute within the embedded attribute. The value of each
                identifier used with the dot notation is the
                name of the respective embedded field or property.
            </description>
            <location chapter="11" section="1.41"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2081</id>
            <description>
                If orphanRemoval is true and an entity that is the target of the
                relationship is removed from the
                relationship (by setting the relationship to null), the remove
                operation will be applied to the entity
                being orphaned.
            </description>
            <location chapter="11" section="1.41"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2082</id>
            <description>If the entity being orphaned is a detached, new, or
                removed entity, the semantics of
                orphanRemoval do not apply.
            </description>
            <location chapter="11" section="1.41"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2083</id>
            <description>If orphanRemoval is true and the remove operation is
                applied to the source entity, the remove
                operation will be cascaded to the relationship target in
                accordance with the rules of section 3.2.3,
                (and
                hence it is not necessary to specify cascade=REMOVE for the
                relationship)
            </description>
            <location chapter="11" section="1.41"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2084</id>
            <description>If the parent is detached or new or was previously
                removed before the orphan was associated
                with it, the remove operation is not applied to the entity being
                orphaned.
            </description>
            <location chapter="11" section="1.41"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2085</id>
            <description>The remove operation is applied at the time of the
                flush operation.
            </description>
            <location chapter="11" section="1.41"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2086</id>
            <description>Portable applications must otherwise not depend upon a
                specific order of removal, and must not
                reassign an entity that has been orphaned to another
                relationship or otherwise attempt to persist it.
            </description>
            <location chapter="11" section="1.41"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1103</id>
            <description>The OrderBy annotation specifies the ordering the
                elements of a collection-valued association
                or element collection are to have when the association or
                collection is retrieved.
            </description>
            <location chapter="11" section="1.42"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1104</id>
            <description>The syntax of the value ordering element is an
                orderby_list, as follows:
            </description>
            <location chapter="11" section="1.42"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="removed"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1105</id>
                    <description>orderby_list</description>
                    <location chapter="11" section="1.42"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1106</id>
                    <description>orderby_list::=orderby_item[,orderby_item]*
                    </description>
                    <location chapter="11" section="1.42"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1107</id>
                    <description>
                        orderby_item::=property_or_field_name[ASC|DESC]
                    </description>
                    <location chapter="11" section="1.42"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1108</id>
            <description>If orderby_list is not specified or if ASC or DESC is
                not specified, ASC (ascending order) is
                assumed.
            </description>
            <location chapter="11" section="1.42"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2087</id>
            <description>If the ordering element is not specified for an entity
                association, ordering by the primary key
                of the associated entity is assumed.
            </description>
            <location chapter="11" section="1.42"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2088</id>
            <description>
                If the primary key is a composite primary key, the precedence of
                ordering among the attributes within
                the primary key is not futher defined. To assign such a
                precedence within these attributes, each of the
                individual attributes must be specified as an orderby_item.
            </description>
            <location chapter="11" section="1.42"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1109</id>
            <description>A property or field name specified as an orderby_item
                must correspond to a basic persistent
                property or field of the associated class or embedded class
                within it.
            </description>
            <location chapter="11" section="1.42"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1110</id>
            <description>The properties or fields used in the ordering must
                correspond to columns for which comparison
                operators are supported.
            </description>
            <location chapter="11" section="1.42"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2089</id>
            <description>The dot (".") notation is used to refer to an attribute
                within an embedded attribute. The value
                of each identifier used with the dot notation is the name of the
                respective embedded field or property.
            </description>
            <location chapter="11" section="1.42"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1111</id>
            <description>The OrderyBy annnotation specifies the ordering of the
                elements of a collection-valued
                association or element collection at the point when the
                association is retrieved.
            </description>
            <location chapter="11" section="1.42"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1268</id>
            <description>The OrderBy annotation may be applied to an element
                collection.
            </description>
            <location chapter="11" section="1.42"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2090</id>
            <description>When OrderBy is applied to an element collection of
                basic type, the ordering will be by value
                of the basic objects and the property_or_field_name is not used
            </description>
            <location chapter="11" section="1.42"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2091</id>
            <description>In all other cases when OrderBy is applied to an
                element collection, the property_or_field_name
                must be specified.
            </description>
            <location chapter="11" section="1.42"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2092</id>
            <description>
                When specifying an ordering over an element collection of
                embeddable type, the dot notation must be used
                to specify the attribute or attributes that determine the
                ordering.
            </description>
            <location chapter="11" section="1.42"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2093</id>
            <description>The OrderBy annotation is not used when an order column
                is specified.
            </description>
            <location chapter="11" section="1.42"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2094</id>
            <description>The persistence provider is responsible for maintaining
                the order upon retrieval and in the
                database.
            </description>
            <location chapter="11" section="1.43"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2095</id>
            <description>The persistence provider is responsible for updating
                the ordering upon flushing to the database
                to reflect any
            </description>
            <location chapter="11" section="1.43"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2095.1</id>
                    <description>insertion affecting the list</description>
                    <location chapter="11" section="1.43"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2095.2</id>
                    <description>deletion affecting the list</description>
                    <location chapter="11" section="1.43"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2095.3</id>
                    <description>reordering affecting the list</description>
                    <location chapter="11" section="1.43"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2096</id>
            <description>The OrderColumn annotation may be specified on a
            </description>
            <location chapter="11" section="1.43"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2096.1</id>
                    <description>one-to-many relationship</description>
                    <location chapter="11" section="1.43"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2096.2</id>
                    <description>many-to-many relationship</description>
                    <location chapter="11" section="1.43"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2096.3</id>
                    <description>on an element collection</description>
                    <location chapter="11" section="1.43"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2097</id>
            <description>The OrderColumn annotation is specified on the side of
                the relationship that references the
                collection that is to be ordered.
            </description>
            <location chapter="11" section="1.43"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2098</id>
            <description>The
                order column is not visible as part of the state of the entity
                or embeddable class.
            </description>
            <location chapter="11" section="1.43"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2099</id>
            <description>The OrderBy annotation should be used for ordering that
                is visible as persistent state and
                maintained by the application
            </description>
            <location chapter="11" section="1.43"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2100</id>
            <description>The OrderBy annotation is not used when OrderColumn is
                specified.
            </description>
            <location chapter="11" section="1.43"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2101</id>
            <description>If name is not specified, the column name is the
                concatenation of the following: the name of
                the referencing relationship property or field of the
                referencing entity or embeddable class; "_";
                "ORDER".
            </description>
            <location chapter="11" section="1.43"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2102</id>
            <description>The order column must be of integral type.
            </description>
            <location chapter="11" section="1.43"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2103</id>
            <description>The persistence provider must maintain a contiguous
                (non-sparse) ordering of the values of the
                order column when updating the association or element
                collection.
            </description>
            <location chapter="11" section="1.43"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2104</id>
            <description>The order column value for the first element of the
                list must be 0.
            </description>
            <location chapter="11" section="1.43"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1120</id>
            <description>The PrimaryKeyJoinColumn annotation specifies the
                primary key columns that are used as a
                foreign key to join to another table.
            </description>
            <location chapter="11" section="1.44"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1121</id>
            <description>The PrimaryKeyJoinColumn annotated is used:
            </description>
            <location chapter="11" section="1.44"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1122</id>
                    <description>to join the primary table of an entity subclass
                        in the JOINED mapping strategy to
                        the
                        primary table of its superclass
                    </description>
                    <location chapter="11" section="1.44"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1121.1</id>
                    <description>it is used within a SecondaryTable annotation
                        to join a secondary table to a
                        primary
                        table;
                    </description>
                    <location chapter="11" section="1.44"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:1123</id>
                    <description>in a OneToOne mapping in which the primary key
                        of the referencing entity is used as
                        a
                        foreign key to the referenced entity.
                    </description>
                    <location chapter="11" section="1.44"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2509</id>
            <description>The foreignKey element is used to specify or control the generation of a foreign key constraint for the primary key join column when table generation is in effect. If the foreignKey element is not specified, the persistence providerâs default foreign key strategy will be used.
            </description>
            <location chapter="11" section="1.44"/>
        </assertion>

        The foreignKey element is used to specify or control the generation of a foreign key constraint for
        the primary key join column when table generation is in effect. If the foreignKey element is not
        specified, the persistence providerâs default foreign key strategy will be used.

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1124</id>
            <description>If no PrimaryKeyJoinColumn annotation is specified for
                a subclass in the JOINED mapping
                strategy,
                the foreign key columns are assumed to have the same names as
                the primary key columns of the
                primary table of the superclass.
            </description>
            <location chapter="11" section="1.44"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1125</id>
            <description>Composite foreign keys are supported by means of the
                PrimaryKeyJoinColumns annotation
            </description>
            <location chapter="11" section="1.45"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2510</id>
            <description>The foreignKey element is used to specify or control the generation of a foreign key constraint for the columns corresponding to the PrimaryKeyJoinColumn elements referenced by the value element when table generation is in effect.
            </description>
            <location chapter="11" section="1.45"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>PERSISTENCE:SPEC:2510.1</id>
                    <description>If both this element and the foreignKey element of any of the PrimaryKeyJoinColumn elements are specified, the behavior is undefined.
                    </description>
                    <location chapter="11" section="1.45"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>PERSISTENCE:SPEC:2510.2</id>
                    <description>If no foreignKey annotation element is specified in either location, the persistence provider's default foreign key strategy will apply.
                    </description>
                    <location chapter="11" section="1.45"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1272</id>
            <description>The SecondaryTable annotation is used to specify a
                secondary table for the annotated entity
                class.
            </description>
            <location chapter="11" section="1.46"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1273</id>
            <description>If no SecondaryTable annotation is specified, it is
                assumed that all persistent fields or
                properties of the entity are mapped to the primary table.
                Specifying one or more secondary tables
                indicates that the data for the entity class is stored across
                multiple tables.
            </description>
            <location chapter="11" section="1.46"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1031</id>
            <description>If no primary key join columns are specified, the join
                columns are assumed to reference the
                primary key columns of the primary table, and have the same
                names and types as the referenced primary
                key columns of the primary table.
            </description>
            <location chapter="11" section="1.46"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1274</id>
            <description>If no primary key join columns are specified, the join
                columns are assumed to reference the
                primary key columns of the primary table, and have the same
                names and types as the referenced primary
                key columns of the primary table.
            </description>
            <location chapter="11" section="1.46"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:2511</id>
            <description>The foreignKey element is used to specify or control the generation of a foreign key constraint for the columns corresponding to the pkJoinColumns element when table generation is in effect.
            </description>
            <location chapter="11" section="1.46"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="removed" testable="true">
                    <id>PERSISTENCE:SPEC:2511.1</id>
                    <description>If both this element and the foreignKey element of any of the pkJoinColumns elements are specified,
                        the behavior is undefined.
                    </description>
                    <location chapter="11" section="1.46"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="removed" testable="true">
                    <id>PERSISTENCE:SPEC:2511.2</id>
                    <description>If no foreignKey annotation element is specified in either location, the persistence provider's default foreign key strategy will apply.
                    </description>
                    <location chapter="11" section="1.46"/>
                </assertion>
            </sub-assertions>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:2105</id>
            <description>The SecondaryTables annotation is used to specify
                multiple secondary tables for an entity.
            </description>
            <location chapter="11" section="1.47"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1137</id>
            <description>A generator may be defined at either the package,
                class, method, or field level. The level
                at which it is defined will depend upon the desired visibility
                and sharing of the generator. No scoping
                or visibility rules are actually enforce
                d. However, it is good practice to define the generator at the
                level for which it will be used.
            </description>
            <location chapter="11" section="1.47"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2106</id>
            <description>The SequenceGenerator annotation defines a primary key
                generator that may be referenced by
                name when a generator element is specified for the
                GeneratedValue annotation.
            </description>
            <location chapter="11" section="1.48"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2107</id>
            <description>A sequence generator may be specified on the
            </description>
            <location chapter="11" section="1.48"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2107.1</id>
                    <description>entity class</description>
                    <location chapter="11" section="1.48"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2107.2</id>
                    <description>on the primary key field</description>
                    <location chapter="11" section="1.48"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2107.3</id>
                    <description>on the primary key property</description>
                    <location chapter="11" section="1.48"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2108</id>
            <description>The scope of the generator name is global to the
                persistence unit (across all generator types).
            </description>
            <location chapter="11" section="1.48"/>
        </assertion>

        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="removed" testable="false">
            <id>PERSISTENCE:SPEC:1134</id>
            <description>The SequenceGenerator annotation defines a primary key
                or id generator which may be referenced
                by name when annotation the id attribute.
            </description>
            <location chapter="9" section="1.44"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="removed" testable="false">
            <id>PERSISTENCE:SPEC:1135</id>
            <description>A generator may be defined at either the package,
                class, method, or field level. The level at
                which it is defined will depend upon the desired visibility and
                sharing of the generator. No scoping or
                visibility rules are actually enforced. However, it is good
                practice to define the generator at the
                level for which it will be used.
            </description>
            <location chapter="11" section="1.48"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1028</id>
            <description>The Table annotation specifies the primary table for
                the annotated entity.
            </description>
            <location chapter="11" section="1.49"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2109</id>
            <description>Additional tables may be specified by using the
                SecondaryTable or SecondaryTables annotation
            </description>
            <location chapter="11" section="1.49"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2110</id>
            <description>When a joined inheritance strategy is used, the Table
                annotation is used to specify a primary
                table for the subclass-specific state if the default is not
                used.
            </description>
            <location chapter="11" section="1.49"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1028.1</id>
            <description>If no Table annotation is specified for an entity
                class, the default values defined in Table 42
                apply.
            </description>
            <location chapter="11" section="1.49"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1136</id>
            <description>The TableGenerator annotation defines a primary key or
                id generator which may be referenced by
                name when when a generator element is specified for the
                GeneratedValue annotation.
            </description>
            <location chapter="11" section="1.50"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2111</id>
            <description>
                A table generator may be specified on the
            </description>
            <location chapter="11" section="1.50"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2111.1</id>
                    <description>entity class
                    </description>
                    <location chapter="11" section="1.50"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2111.2</id>
                    <description>primary key field
                    </description>
                    <location chapter="11" section="1.50"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2111.3</id>
                    <description>property
                    </description>
                    <location chapter="11" section="1.50"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2112</id>
            <description>The scope of the generator name is global to the
                persistence unit (across all generator types).
            </description>
            <location chapter="11" section="1.50"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2113</id>
            <description>The table element specifies the name of the table that
                is used by the persistence provider to
                store generated primary key values for entities.
            </description>
            <location chapter="11" section="1.50"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1090.0</id>
            <description>The Temporal annotation must be specified for
                persistent fields or properties of type
                java.util.Date and java.util.Calendar unless a converter is
                being applied. It may only be specified for
                fields or properties of those types.
            </description>
            <location chapter="11" section="1.51"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2114</id>
            <description>The Temporal annotation may be used in conjunction with
                the
            </description>
            <location chapter="11" section="1.51"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2114.1</id>
                    <description>Basic annotation</description>
                    <location chapter="11" section="1.51"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2114.2</id>
                    <description>Id annotation</description>
                    <location chapter="11" section="1.51"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2114.3</id>
                    <description>ElementCollection annotation (when the element
                        collection value is of such a
                        temporal
                        type).
                    </description>
                    <location chapter="11" section="1.51"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2114.4</id>
                    <description>If the element collection is a Map, this
                        applies to the map value.
                    </description>
                    <location chapter="11" section="1.51"/>
                </assertion>
            </sub-assertions>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1067</id>
            <description>The Transient annotation is used to annotate a property
                or field of an entity class, mapped
                superclass, or embeddable class. It specifies that the property
                or field is not persistent.
            </description>
            <location chapter="11" section="1.52"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1036</id>
            <description>The UniqueConstraint annotation is used to specify that
                a unique constraint should be included
                in the generated DDL for a primary or secondary table.
            </description>
            <location chapter="11" section="1.53"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:1068</id>
            <description>The Version annotation specifies the version field or
                property of an entity class that serves a
                its optimistic lock value. The version is used to ensure
                integrity when performing the merge operation
                and for optimistic concurrency control.
            </description>
            <location chapter="11" section="1.54"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2115</id>
            <description>Only a single Version property or field should be used
                per class; applications that use more
                than one Version property or field will not be portable.
            </description>
            <location chapter="11" section="1.54"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2116</id>
            <description>The Version property should be mapped to the primary
                table for the entity class; applications
                that map the Version property to a table other than the primary
                table will not be portable.
            </description>
            <location chapter="11" section="1.54"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2117</id>
            <description>The following types are supported for version
                properties:
            </description>
            <location chapter="11" section="1.54"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2117.1</id>
                    <description>int</description>
                    <location chapter="11" section="1.54"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2117.2</id>
                    <description>Integer</description>
                    <location chapter="11" section="1.54"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2117.3</id>
                    <description>short</description>
                    <location chapter="11" section="1.54"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2117.4</id>
                    <description>Short</description>
                    <location chapter="11" section="1.54"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2117.5</id>
                    <description>long</description>
                    <location chapter="11" section="1.54"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2117.6</id>
                    <description>Long</description>
                    <location chapter="11" section="1.54"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2117.7</id>
                    <description>Timestamp</description>
                    <location chapter="11" section="1.54"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2118</id>
            <description>If
                schema generation is in effect, the persistence provider must
                observe the mapping information specified
                by these annotations and their corresponding XML elements.
            </description>
            <location chapter="11" section="2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.1</id>
                    <description>DiscriminatorColumn
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.2</id>
                    <description>EmbeddedId
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.3</id>
                    <description>Enumerated
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.4</id>
                    <description>MapKeyEnumerated
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.24</id>
                    <description>ForeignKey
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.5</id>
                    <description>GeneratedValue
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.6</id>
                    <description>Id
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.7</id>
                    <description>Index
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.8</id>
                    <description>Inheritance
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.9</id>
                    <description>JoinColumn
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.10</id>
                    <description>JoinTable
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.11</id>
                    <description>Lob
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.12</id>
                    <description>MapKeyColumn
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.13</id>
                    <description>MapKeyJoinColumn
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.14</id>
                    <description>OrderColumn
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.15</id>
                    <description>PrimaryKeyJoinColumn
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.16</id>
                    <description>SecondaryTable
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.17</id>
                    <description>SequenceGenerator
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.18</id>
                    <description>Table
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.19</id>
                    <description>TableGenerator
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.20</id>
                    <description>Temporal
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.21</id>
                    <description>MapKeyTemporal
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.22</id>
                    <description>UniqueConstraint
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2118.23</id>
                    <description>Version
                    </description>
                    <location chapter="11" section="2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2119</id>
            <description>By default, a table is created for every top-level
                entity and, by default, includes columns
                corresponding to the basic and embedded attributes of the entity
                and the foreign keys to the tables of
                related entities.
            </description>
            <location chapter="11" section="2.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2120</id>
            <description>These columns include columns that result from the use
                of mapped superclasses, if any.
            </description>
            <location chapter="11" section="2.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2121</id>
            <description>The SecondaryTable
                annotation, in conjunction with the use of the table element of
                the Column and Join-
                Column annotations, is used to override this mapping to
                partition the state of an entity across multiple
                tables
            </description>
            <location chapter="11" section="2.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2122</id>
            <description>The mapping of the columns of a table is controlled by
                the Column and JoinColumn annotations.
            </description>
            <location chapter="11" section="2.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2123</id>
            <description>When entity state in inherited from a mapped
                superclass, the AttributeOverride and
                AssociationOverride
                annotations may be used to further control the column-level
                mapping of inherited
                state.
            </description>
            <location chapter="11" section="2.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2124</id>
            <description>The Inheritance annotation defines the inheritance
                strategy for an entity hierarchy.
            </description>
            <location chapter="11" section="2.1.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2124.1</id>
                    <description>The inheritance
                        strategy determines whether the table for a top-level
                        entity includes columns for entities
                        that
                        inherit
                        from the entity
                    </description>
                    <location chapter="11" section="2.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2124.2</id>
                    <description>and whether it includes a discriminator
                        column
                    </description>
                    <location chapter="11" section="2.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2124.3</id>
                    <description>or whether separate tables are created for each
                        entity type that inherits from the
                        top-level entity
                    </description>
                    <location chapter="11" section="2.1.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2125</id>
            <description>A secondary table is created to partition the mapping
                of entity state across multiple tables.
            </description>
            <location chapter="11" section="2.1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2126</id>
            <description>A collection table is created for the mapping of an
                element collection.
            </description>
            <location chapter="11" section="2.1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2127</id>
            <description>The Column, AttributeOverride, and AssociationOverride
                annotations may be used to override
                CollectionTable mappings
            </description>
            <location chapter="11" section="2.1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2128</id>
            <description>By default, join tables are created for the mapping of
                many-to-many relationships and
                unidirectional
                one-to-many relationships.
            </description>
            <location chapter="11" section="2.1.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2129</id>
            <description>Join tables may also be used to map bidirectional
                many-to-one/one-to-many associations,
                unidirectional
                many-to-one relationships, and one-to-one relationships (both
                bidirectional and unidirectional).
            </description>
            <location chapter="11" section="2.1.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2130</id>
            <description>The AssociationOverride annotation may be used to
                override join table mappings.
            </description>
            <location chapter="11" section="2.1.5"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2131</id>
            <description>In general, however, an implementation of this
                specification should conform to the âStandard Mapping from Java
                Types to JDBC Typesâ as defined by
                the JDBC specification
            </description>
            <location chapter="11" section="2.2"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2132</id>
            <description>Unless otherwise explicitly specified, however, VARCHAR
                and VARBINARY
                mappings should be used in preference to CHAR and BINARY
                mappings.
            </description>
            <location chapter="11" section="2.2"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2133</id>
            <description>Applications that are
                sensitive to the exact database mappings that are generated
                should use the columnDefinition element
                of the Column annotation or include DDL files that specify how
                the database schema is to be generated.
            </description>
            <location chapter="11" section="2.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2134</id>
            <description>The following elements of the Column annotation are
                used in schema generation:
            </description>
            <location chapter="11" section="2.2.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2134.1</id>
                    <description>name</description>
                    <location chapter="11" section="2.2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2134.2</id>
                    <description>unique</description>
                    <location chapter="11" section="2.2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2134.3</id>
                    <description>nullable</description>
                    <location chapter="11" section="2.2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2134.4</id>
                    <description>columnDefinition</description>
                    <location chapter="11" section="2.2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2134.5</id>
                    <description>table</description>
                    <location chapter="11" section="2.2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2134.6</id>
                    <description>length</description>
                    <location chapter="11" section="2.2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2134.7</id>
                    <description>precision</description>
                    <location chapter="11" section="2.2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2134.8</id>
                    <description>scale</description>
                    <location chapter="11" section="2.2.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2135</id>
            <description>The AttributeOverride annotation may be used to
                override column mappings.
            </description>
            <location chapter="11" section="2.2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2136</id>
            <description>The MapKeyColumn annotation specifies the mapping for a
                key column of a map when the key is of
                basic type.
            </description>
            <location chapter="11" section="2.2.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2136.1</id>
                    <description>name</description>
                    <location chapter="11" section="2.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2136.2</id>
                    <description>unique</description>
                    <location chapter="11" section="2.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2136.3</id>
                    <description>nullable</description>
                    <location chapter="11" section="2.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2136.4</id>
                    <description>columnDefinition</description>
                    <location chapter="11" section="2.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2136.5</id>
                    <description>table</description>
                    <location chapter="11" section="2.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2136.6</id>
                    <description>length</description>
                    <location chapter="11" section="2.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2136.7</id>
                    <description>precision</description>
                    <location chapter="11" section="2.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2136.8</id>
                    <description>scale</description>
                    <location chapter="11" section="2.2.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2137</id>
            <description>The AttributeOverride annotation may be used to
                override column mappings.
            </description>
            <location chapter="11" section="2.2.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2138</id>
            <description>The Enumerated annotations control whether string- or
                integer-valued
                columns are generated for basic attributes of enumerated types
                and therefore impact the default column
                mappings for these types.
            </description>
            <location chapter="11" section="2.2.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2138.1</id>
                    <description>The Column annotations
                        may be used to further control the column mappings for
                        attributes of enumerated types.
                    </description>
                    <location chapter="11" section="2.2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2138.2</id>
                    <description>The MapKeyColumn annotations
                        may be used to further control the column mappings for
                        attributes of enumerated types.
                    </description>
                    <location chapter="11" section="2.2.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2139</id>
            <description>The MapKeyEnumerated annotations control whether
                string- or integer-valued
                columns are generated for basic attributes of enumerated types
                and therefore impact the default column
                mappings for these types.
            </description>
            <location chapter="11" section="2.2.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2139.1</id>
                    <description>The Column annotations
                        may be used to further control the column mappings for
                        attributes of enumerated types.
                    </description>
                    <location chapter="11" section="2.2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2139.2</id>
                    <description>The MapKeyColumn annotations
                        may be used to further control the column mappings for
                        attributes of enumerated types.
                    </description>
                    <location chapter="11" section="2.2.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2140</id>
            <description>The Temporal annotations control whether date-, time-,
                or timestamp-value
                columns are generated for basic attributes of temporal types,
                and therefore impact the default column
                mappings for these types.
            </description>
            <location chapter="11" section="2.2.4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2140.1</id>
                    <description>The Column annotations
                        may be used to further control the column mappings for
                        attributes of temporal types.
                    </description>
                    <location chapter="11" section="2.2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2140.2</id>
                    <description>The MapKeyColumn annotations
                        may be used to further control the column mappings for
                        attributes of temporal types.
                    </description>
                    <location chapter="11" section="2.2.3"/>
                </assertion>
            </sub-assertions>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2141</id>
            <description>The MapKeyTemporal annotations control whether date-,
                time-, or timestamp-value
                columns are generated for basic attributes of temporal types,
                and therefore impact the default column
                mappings for these types.
            </description>
            <location chapter="11" section="2.2.4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2141.1</id>
                    <description>The Column annotations
                        may be used to further control the column mappings for
                        attributes of temporal types.
                    </description>
                    <location chapter="11" section="2.2.4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2141.2</id>
                    <description>The MapKeyColumn annotations
                        may be used to further control the column mappings for
                        attributes of temporal types.
                    </description>
                    <location chapter="11" section="2.2.4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2142</id>
            <description>The OrderColumn annotation specifies the generation of
                a column that is used to maintain the
                persistent
                ordering of a list that is represented in an
            </description>
            <location chapter="11" section="2.2.6"/>
            <sub-assertions>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2142.1</id>
                    <description>element collection</description>
                    <location chapter="11" section="2.2.6"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2142.2</id>
                    <description>one-to-many relationship</description>
                    <location chapter="11" section="2.2.6"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2142.3</id>
                    <description>many-to-many relationship</description>
                    <location chapter="11" section="2.2.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2142.4</id>
                    <description>name</description>
                    <location chapter="11" section="2.2.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2142.5</id>
                    <description>nullable</description>
                    <location chapter="11" section="2.2.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2142.6</id>
                    <description>columnDefinition</description>
                    <location chapter="11" section="2.2.6"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2143</id>
            <description>The DiscriminatorColumn annotation may be used to
                control the mapping of the discriminator
                column
            </description>
            <location chapter="11" section="2.2.7"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2144</id>
                    <description>A discriminator column is generated for the
                        SINGLE_TABLE mapping strategy
                    </description>
                    <location chapter="11" section="2.2.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2145</id>
                    <description>and may optionally be generated by the provider
                        for use with the JOINED inheritance
                        strategy
                    </description>
                    <location chapter="11" section="2.2.7"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2146</id>
            <description>The Version annotation specifies the generation of a
                column to serve as an entity's optimistic
                lock.
            </description>
            <location chapter="11" section="2.2.8"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2147</id>
                    <description>The Column annotation may be used to further
                        control the column mapping for a version
                        attribute.
                    </description>
                    <location chapter="11" section="2.2.8"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2148</id>
            <description>Use of the Id annotation results in the creation of a
                primary key consisting of the
                corresponding column or columns.
            </description>
            <location chapter="11" section="2.3.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2149</id>
                    <description>The Column annotation may be used to further
                        control the column mapping for an Id
                        attribute that is applied to a basic type.
                    </description>
                    <location chapter="11" section="2.3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2150</id>
                    <description>If the Id column was defined in a mapped
                        superclass, the AttributeOverride
                        annotation may be used to control the column mapping.
                    </description>
                    <location chapter="11" section="2.3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2151</id>
                    <description>The JoinColumn annotation may be used to
                        further control the column mappings for an Id
                        attribute that is applied to a relationship that
                        corresponds to a foreign key.
                    </description>
                    <location chapter="11" section="2.3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2152</id>
                    <description>If the Id attribute was defined in a
                        mapped superclass, the AssociationOverride annotation
                        may be used to control the column
                        mapping.
                    </description>
                    <location chapter="11" section="2.3.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2153</id>
            <description>Use of the EmbeddedId annotation results in the
                creation of a primary
                key consisting of the corresponding columns
            </description>
            <location chapter="11" section="2.3.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2154</id>
                    <description>Use of the EmbeddedId annotation results in the
                        creation of a primary
                        key consisting of the corresponding columns
                    </description>
                    <location chapter="11" section="2.3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2155</id>
                    <description>The Column annotation may be used to control
                        the column mapping for an embeddable
                        class.
                    </description>
                    <location chapter="11" section="2.3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2156</id>
                    <description>If the
                        EmbeddedId attribute is defined in a mapped superclass,
                        the AttributeOverride annotation
                        may be used to control the column mappings.
                    </description>
                    <location chapter="11" section="2.3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2157</id>
                    <description>If an EmbeddedId attribute corresponds to a
                        relationship attribute, the MapsId
                        annotation must be
                        used, and the column mapping is determined by the join
                        column for the relationship.
                    </description>
                    <location chapter="11" section="2.3.2"/>
                </assertion>

            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2158</id>
            <description>The GeneratedValue annotation indicates a primary key
                whose value is to be generated by the
                provider.
            </description>
            <location chapter="11" section="2.3.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2159</id>
                    <description>If a strategy is indicated, the provider must
                        use it if it is supported by the target
                        database.
                    </description>
                    <location chapter="11" section="2.3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2160</id>
                    <description>specification of the AUTO strategy may result
                        in the provider creating a database
                        object for Id generation
                    </description>
                    <location chapter="11" section="2.3.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2161</id>
                    <description>The GeneratedValue annotation may only be
                        portably used for simple (i.e.,
                        non-composite)
                        primary keys.
                    </description>
                    <location chapter="11" section="2.3.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2162</id>
            <description>The JoinColumn annotation is typically used in
                specifying a foreign key mapping. In general,
                the foreign
                key definitions created will be provider-dependent and
                database-dependent. Applications that are
                sensitive to the exact mapping that is used should use the
                foreignKey element of the JoinColumn
                annotation or include DDL files that specify how the database
                schemas are to be generated.
            </description>
            <location chapter="11" section="2.4.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2163</id>
                    <description>name</description>
                    <location chapter="11" section="2.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2164</id>
                    <description>referencedColumnName</description>
                    <location chapter="11" section="2.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2165</id>
                    <description>unique</description>
                    <location chapter="11" section="2.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2166</id>
                    <description>nullable</description>
                    <location chapter="11" section="2.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2167</id>
                    <description>columnDefinition</description>
                    <location chapter="11" section="2.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2168</id>
                    <description>table</description>
                    <location chapter="11" section="2.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2169</id>
                    <description>foreignKey</description>
                    <location chapter="11" section="2.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2170</id>
                    <description>The AssociationOverride annotation may be used
                        to override relationship mappings.
                    </description>
                    <location chapter="11" section="2.4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2171</id>
                    <description>The PrimaryKeyJoinColumn annotation is used to
                        join secondary tables and may be used
                        in the mapping of one-to-one relationships
                    </description>
                    <location chapter="11" section="2.4.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2172</id>
            <description>The MapKeyJoinColumn annotation is to specify foreign
                key mappings to entities that are map
                keys
                in map-valued element collections or relationships. In general,
                the foreign key definitions created
                should be expected to be provider-dependent and
                database-dependent. Applications that are sensitive to
                the exact mapping that is used should use the foreignKey element
                of the MapKeyJoinColumn
                annotation or include DDL files that specify how the database
                schemas are to be generated.
            </description>
            <location chapter="11" section="2.4.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2173</id>
                    <description>name</description>
                    <location chapter="11" section="2.4.2"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2174</id>
                    <description>referencedColumnName</description>
                    <location chapter="11" section="2.4.2"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2175</id>
                    <description>unique</description>
                    <location chapter="11" section="2.4.2"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2176</id>
                    <description>nullable</description>
                    <location chapter="11" section="2.4.2"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2177</id>
                    <description>columnDefinition</description>
                    <location chapter="11" section="2.4.2"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2178</id>
                    <description>table</description>
                    <location chapter="11" section="2.4.2"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2179</id>
                    <description>foreignKey</description>
                    <location chapter="11" section="2.4.2"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="false">
                    <id>PERSISTENCE:SPEC:2180</id>
                    <description>The AssociationOverride annotation may be used
                        to override such mappings.
                    </description>
                    <location chapter="11" section="2.4.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2181</id>
            <description>The PrimaryKeyJoinColumn annotation specifies that a
                primary key column is to be used as a
                foreign
                key. This annotation is used in the specification of the JOINED
                mapping strategy and for joining a
                secondary table to a primary table in a OneToOne relationship
                mapping. In general, the foreign key
                definitions
                created should be expected to be provider-dependent and
                database-dependent. Applications
                that are sensitive to the exact mapping that is used should use
                the foreignKey element of the
                PrimaryKeyJoinColumn
                annotation or include DDL files that specify how the database
                schemas are to
                be generated.
            </description>
            <location chapter="11" section="2.4.3"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2182</id>
            <description>The ForeignKey annotation may be used within the
            </description>
            <location chapter="11" section="2.4.4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2182.1</id>
                    <description>JoinColumn</description>
                    <location chapter="11" section="2.4.4"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2182.2</id>
                    <description>JoinColumns</description>
                    <location chapter="11" section="2.4.4"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2182.3</id>
                    <description>MapKeyJoinColumn</description>
                    <location chapter="11" section="2.4.4"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2182.4</id>
                    <description>MapKeyJoinColumns</description>
                    <location chapter="11" section="2.4.4"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2182.5</id>
                    <description>PrimaryKeyJoinColumn</description>
                    <location chapter="11" section="2.4.4"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2182.6</id>
                    <description>PrimaryKeyJoinColumns</description>
                    <location chapter="11" section="2.4.4"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2182.7</id>
                    <description>CollectionTable</description>
                    <location chapter="11" section="2.4.4"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2182.8</id>
                    <description>JoinTable</description>
                    <location chapter="11" section="2.4.4"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2182.9</id>
                    <description>SecondaryTable,
                        AssociationOverride
                    </description>
                    <location chapter="11" section="2.4.4"/>
                </assertion>
                <assertion required="true" impl-spec="true"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2182.10</id>
                    <description>AssociationOverride</description>
                    <location chapter="11" section="2.4.4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2189</id>
            <description>The SequenceGenerator annotation creates a database
                sequence to be used for Id generation. The
                use of generators is limited to those databases that support
                them.
            </description>
            <location chapter="11" section="2.5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2190</id>
            <description>The Index annotation generates an index consisting of
                the specified columns.
            </description>
            <location chapter="11" section="2.5.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2191</id>
                    <description>The ordering of thenames in the columnList
                        element specified in the Index annotation
                        must be observed by the provider when creating the
                        index.
                    </description>
                    <location chapter="11" section="2.5.2"/>
                </assertion>
            </sub-assertions>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2192</id>
            <description>The ordering of the column-
                Names specified in the UniqueConstraint annotation must be
                observed by the provider when creating
                the constraint.
            </description>
            <location chapter="11" section="2.5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2193</id>
            <description>The unique element is equivalent to the use of the
                UniqueConstraint annotation when only one
                column is to be included in the constraint
            </description>
            <location chapter="11" section="2.5.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2194</id>
                    <description>Column</description>
                    <location chapter="11" section="2.5.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2195</id>
                    <description>JoinColumn</description>
                    <location chapter="11" section="2.5.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2196</id>
                    <description>MapKeyColumn</description>
                    <location chapter="11" section="2.5.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2197</id>
                    <description>MapKeyJoinColumn</description>
                    <location chapter="11" section="2.5.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2198</id>
            <description>
                If the xml-mapping-metadata-complete subelement is specified,
                the complete set of mapping
                metadata for the persistence unit is contained in the XML
                mapping files for the persistence unit, and
                any
                persistence annotations on the classes are ignored.
            </description>
            <location chapter="12" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2199</id>
            <description>
                If xml-mapping-metadata-complete is specified and XML elements
                are omitted, the default
                values apply. These default values are the same as the
                corresponding defaults when annotations are
                used, except in the cases specified in Section 12.2 below.
            </description>
            <location chapter="12" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2200</id>
            <description>
                When the xml-mapping-metadata-complete element is specified, any
                metadata-complete attributes specified
                within the entity, mapped-superclass, and embeddable elements
                are ignored.
            </description>
            <location chapter="12" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2201</id>
            <description>
                If the xml-mapping-metadata-complete subelement is not
                specified, the XML descriptor overrides the
                values set or defaulted by the use of annotations, as described
                below.
            </description>
            <location chapter="12" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:2202</id>
            <description>
                The Java Persistence 2.0 persistence provider must support use
                of the object/relational mapping schema
                defined in Enterprise JavaBeans, v. 3.0. Java Persistence API.
            </description>
            <location chapter="12" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2203</id>
            <description>
                The Java Persistence persistence provider must support use of
            </description>
            <location chapter="12" section="1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2203.1</id>
                    <description>
                        older versions of the object/relational mapping schema
                    </description>
                    <location chapter="12" section="1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2203.2</id>
                    <description>
                        as well as the object/relational mapping schema defined
                        in Section 12.3
                    </description>
                    <location chapter="12" section="1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2203.3</id>
                    <description>whether singly</description>
                    <location chapter="12" section="1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2203.4</id>
                    <description>
                        in combination when multiple mapping files are used.
                    </description>
                    <location chapter="12" section="1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1138</id>
            <description>XML Overriding Rules</description>
            <location chapter="12" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1139</id>
            <description>persistent-unit-defaults Subelements</description>
            <location chapter="12" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2204</id>
            <description>The schema subelement applies to all ... in the
                persistence unit.
            </description>
            <location chapter="12" section="2.1.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2204.1</id>
                    <description>entities</description>
                    <location chapter="12" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2204.2</id>
                    <description>tables</description>
                    <location chapter="12" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2204.3</id>
                    <description>secondary tables</description>
                    <location chapter="12" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2204.4</id>
                    <description>join tables</description>
                    <location chapter="12" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2204.5</id>
                    <description>collection tables</description>
                    <location chapter="12" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2204.6</id>
                    <description>table generators</description>
                    <location chapter="12" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2204.7</id>
                    <description>sequence generators</description>
                    <location chapter="12" section="2.1.1"/>
                </assertion>

            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2205</id>
            <description>The schema subelement is overridden by</description>
            <location chapter="12" section="2.1.1"/>
            <sub-assertions>

                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2205.1</id>
                    <description>any schema subelement of the entity-mappings
                        element
                    </description>
                    <location chapter="12" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2205.2</id>
                    <description>any schema element explicitly specified in the
                        Table or SecondaryTable annotation
                        on an
                        entity
                    </description>
                    <location chapter="12" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2205.3</id>
                    <description>any schema attribute on any table or
                        secondary-table subelement defined within an
                        entity element
                    </description>
                    <location chapter="12" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2205.4</id>
                    <description>any schema element explicitly specified in a
                        TableGenerator annotation or
                        table-generator subelement
                    </description>
                    <location chapter="12" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2205.5</id>
                    <description>any schema element explicitly specified in a
                        SequenceGenerator annotation or
                        sequence-generator subelement
                    </description>
                    <location chapter="12" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2205.6</id>
                    <description>any schema element explicitly specified in a
                        JoinTable annotation or join-table
                        subelement
                    </description>
                    <location chapter="12" section="2.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2205.7</id>
                    <description>and any schema element explicitly specified in
                        a CollectionTable annotation or
                        collection-table subelement.
                    </description>
                    <location chapter="12" section="2.1.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2206</id>
            <description>The catalog subelement applies to all ... in the
                persistence unit.
            </description>
            <location chapter="12" section="2.1.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2206.1</id>
                    <description>entities</description>
                    <location chapter="12" section="2.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2206.2</id>
                    <description>tables</description>
                    <location chapter="12" section="2.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2206.3</id>
                    <description>secondary tables</description>
                    <location chapter="12" section="2.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2206.4</id>
                    <description>join tables</description>
                    <location chapter="12" section="2.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2206.5</id>
                    <description>collection tables</description>
                    <location chapter="12" section="2.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2206.6</id>
                    <description>table generators</description>
                    <location chapter="12" section="2.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2206.7</id>
                    <description>sequence generators</description>
                    <location chapter="12" section="2.1.2"/>
                </assertion>
            </sub-assertions>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2207</id>
            <description>The catalog subelement is overridden by</description>
            <location chapter="12" section="2.1.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2207.1</id>
                    <description>any catalog subelement of the entity-mappings
                        element
                    </description>
                    <location chapter="12" section="2.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2207.2</id>
                    <description>any catalog element explicitly specified in the
                        Table or SecondaryTable annotation
                        on
                        an entity
                    </description>
                    <location chapter="12" section="2.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2207.3</id>
                    <description>any catalog attribute on any table or
                        secondary-table subelement defined within an
                        entity XML element
                    </description>
                    <location chapter="12" section="2.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2207.4</id>
                    <description>any catalog element explicitly specified in a
                        TableGenerator annotation or
                        table-generator subelement
                    </description>
                    <location chapter="12" section="2.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2207.5</id>
                    <description>any catalog element explicitly specified in a
                        SequenceGenerator annotation or
                        sequence-generator subelement
                    </description>
                    <location chapter="12" section="2.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2207.6</id>
                    <description>any catalog element explicitly specified in a
                        JoinTable annotation or join-table
                        subelement
                    </description>
                    <location chapter="12" section="2.1.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2207.7</id>
                    <description>and any catalog element explicitly specified in
                        a CollectionTable annotation or
                        collection-table subelement
                    </description>
                    <location chapter="12" section="2.1.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2208</id>
            <description>It specifies that all database table-, schema-, and
                column-level identifiers in use for the
                persistence unit be treated as delimited identifiers.
            </description>
            <location chapter="12" section="2.1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2209</id>
            <description>The access subelement applies to all managed classes in
                the persistence unit.
            </description>
            <location chapter="12" section="2.1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2210</id>
            <description>The access subelement is overridden</description>
            <location chapter="12" section="2.1.4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2210.1</id>
                    <description>by the use of any annotations specifying
                        mapping information on the fields or
                        properties of the entity class
                    </description>
                    <location chapter="12" section="2.1.4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2210.2</id>
                    <description>by any Access annotation on the entity class,
                        mapped superclass, or embeddable
                        class
                    </description>
                    <location chapter="12" section="2.1.4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2210.3</id>
                    <description>by any access subelement of the entity-mappings
                        element
                    </description>
                    <location chapter="12" section="2.1.4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2210.4</id>
                    <description>by any Access annotation on a field or property
                        of an entity class, mapped
                        superclass,
                        or embeddable class
                    </description>
                    <location chapter="12" section="2.1.4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2210.5</id>
                    <description>by any access attribute defined within an
                        entity, mapped-superclass, or embeddable
                        XML
                        element
                    </description>
                    <location chapter="12" section="2.1.4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2210.6</id>
                    <description>by any access attribute defined within an id,
                        embedded-id, version, basic,
                        embedded,
                        many-to-one, one-to-one, one-to-many, many-to-many or
                        element-collection element.
                    </description>
                    <location chapter="12" section="2.1.4"/>
                </assertion>
            </sub-assertions>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2211</id>
            <description>The cascade-persist subelement applies to all
                relationships in the persistence unit.
            </description>
            <location chapter="12" section="2.1.5"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2212</id>
            <description>
                Specifying this subelement adds the cascade persist option to
                all relationships in addition to any
                settings specified in annotations or XML.
            </description>
            <location chapter="12" section="2.1.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2213</id>
            <description>
                The entity-listeners subelement defines default entity listeners
                for the persistence unit.
            </description>
            <location chapter="12" section="2.1.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2214</id>
            <description>
                These entity listeners are called before any other entity
                listeners for an entity unless the entity
                listener order is overridden within a
            </description>
            <location chapter="12" section="2.1.6"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2214.1</id>
                    <description>mapped-superclass</description>
                    <location chapter="12" section="2.1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2214.2</id>
                    <description>entity element</description>
                    <location chapter="12" section="2.1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2214.3</id>
                    <description>
                        the ExcludeDefaultListeners annotation is present on the
                        entity or mapped superclass
                    </description>
                    <location chapter="12" section="2.1.6"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2214.4</id>
                    <description>
                        the exclude-default-listeners subelement is specified
                        within the corresponding entity or
                        mapped-superclass XML element.
                    </description>
                    <location chapter="12" section="2.1.6"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2215</id>
            <description>The package subelement specifies the package of the
                classes listed within the subelements and
                attributes of the same mapping file only.
            </description>
            <location chapter="12" section="2.2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2216</id>
            <description>The package subelement is overridden if the fully
                qualified class name is specified for a class
                and the two disagree.
            </description>
            <location chapter="12" section="2.2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2217</id>
            <description>The schema subelement applies to all ... listed within
                the same mapping file.
            </description>
            <location chapter="12" section="2.2.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2217.1</id>
                    <description>entities</description>
                    <location chapter="12" section="2.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2217.2</id>
                    <description>tables</description>
                    <location chapter="12" section="2.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2217.3</id>
                    <description>secondary tables</description>
                    <location chapter="12" section="2.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2217.4</id>
                    <description>join tables</description>
                    <location chapter="12" section="2.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2217.5</id>
                    <description>collection tables</description>
                    <location chapter="12" section="2.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2217.6</id>
                    <description>table generators</description>
                    <location chapter="12" section="2.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2217.7</id>
                    <description>sequence generators</description>
                    <location chapter="12" section="2.2.2"/>
                </assertion>

            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2218</id>
            <description>The schema subelement is overridden by</description>
            <location chapter="12" section="2.2.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2218.1</id>
                    <description>
                        any schema element explicitly specified in the Table,
                        SecondaryTable, JoinTable, or
                        CollectionTable annotation on an entity listed within
                        the mapping file
                    </description>
                    <location chapter="12" section="2.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2218.2</id>
                    <description>
                        any schema attribute on any table or secondary-table
                        subelement defined within the entity
                        element for such an entity
                    </description>
                    <location chapter="12" section="2.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2218.3</id>
                    <description>
                        any schema attribute on any join-table or
                        collection-table subelement of an attribute
                        defined
                        within the attributes subelement of the entity element
                        for such an entity
                    </description>
                    <location chapter="12" section="2.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2218.4</id>
                    <description>
                        by the schema attribute of any table-generator or
                        sequence-generator element within the
                        mapping
                        file.
                    </description>
                    <location chapter="12" section="2.2.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2219</id>
            <description>The catalog subelement applies to all ... listed within
                the same mapping file.
            </description>
            <location chapter="12" section="2.2.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2219.1</id>
                    <description>entities</description>
                    <location chapter="12" section="2.2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2219.2</id>
                    <description>tables</description>
                    <location chapter="12" section="2.2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2219.3</id>
                    <description>secondary tables</description>
                    <location chapter="12" section="2.2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2219.4</id>
                    <description>join tables</description>
                    <location chapter="12" section="2.2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2219.5</id>
                    <description>collection tables</description>
                    <location chapter="12" section="2.2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2219.6</id>
                    <description>table generators</description>
                    <location chapter="12" section="2.2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2219.7</id>
                    <description>sequence generators</description>
                    <location chapter="12" section="2.2.3"/>
                </assertion>

            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2220</id>
            <description>The catalog subelement is overridden by</description>
            <location chapter="12" section="2.2.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2220.1</id>
                    <description>any catalog element explicitly specified in the
                        Table, SecondaryTable, JoinTable,
                        or
                        CollectionTable annotation on an entity listed within
                        the mapping file
                    </description>
                    <location chapter="12" section="2.2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2220.2</id>
                    <description>
                        any catalog attribute on any table or secondary-table
                        subelement defined within the entity
                        element for such an entity
                    </description>
                    <location chapter="12" section="2.2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2220.3</id>
                    <description>
                        by any catalog attribute on any join-table or
                        collection-table subelement of an attribute
                        defined within the attributes subelement of the entity
                        element for such an entity
                    </description>
                    <location chapter="12" section="2.2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2220.4</id>
                    <description>
                        by the catalog attribute of any table-generator or
                        sequence-generator element within the
                        mapping
                        file.
                    </description>
                    <location chapter="12" section="2.2.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2221</id>
            <description>
                The access subelement applies to the managed classes listed
                within the same mapping file.
            </description>
            <location chapter="12" section="2.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2222</id>
            <description>The access subelement is overridden</description>
            <location chapter="12" section="2.2.4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2222.1</id>
                    <description>by the use of any annotations specifying
                        mapping information
                        on the fields or properties of the entity class
                    </description>
                    <location chapter="12" section="2.2.4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2222.2</id>
                    <description>by any Access annotation on the entity class,
                        mapped
                        superclass, or embeddable class
                    </description>
                    <location chapter="12" section="2.2.4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2222.3</id>
                    <description>by any Access annotation on a field or property
                        of an entity class,
                        mapped superclass, or embeddable class
                    </description>
                    <location chapter="12" section="2.2.4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2222.4</id>
                    <description>by any access attribute defined within an
                        entity,
                        mapped-superclass, or embeddable XML element
                    </description>
                    <location chapter="12" section="2.2.4"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2222.5</id>
                    <description>by any access attribute defined within an id,
                        embedded-id, version, basic,
                        embedded,
                        many-to-one, one-to-one, one-to-many, many-to-many, or
                        element-collection element.
                    </description>
                    <location chapter="12" section="2.2.4"/>
                </assertion>
            </sub-assertions>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2223</id>
            <description>
                The generator defined by the sequence-generator subelement
                applies to the persistence unit.
            </description>
            <location chapter="12" section="2.2.5"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2224</id>
            <description>
                It is undefined if multiple mapping files for the persistence
                unit contain generators of the same name.
            </description>
            <location chapter="12" section="2.2.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2225</id>
            <description>The generator defined is added to any generators
                defined in annotations.
            </description>
            <location chapter="12" section="2.2.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2226</id>
            <description>If a generator of the same name is defined in
                annotations, the generator defined by this
                subelement overrides that definition.
            </description>
            <location chapter="12" section="2.2.5"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2227</id>
            <description>
                The generator defined by the table-generator subelement applies
                to the persistence unit.
            </description>
            <location chapter="12" section="2.2.6"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2228</id>
            <description>
                It is undefined if multiple mapping files for the persistence
                unit contain generators of the same name.
            </description>
            <location chapter="12" section="2.2.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2229</id>
            <description>The generator defined is added to any generators
                defined in annotations.
            </description>
            <location chapter="12" section="2.2.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2230</id>
            <description>If a generator of the same name is defined in
                annotations, the generator defined by this
                subelement overrides that definition.
            </description>
            <location chapter="12" section="2.2.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2231</id>
            <description>
                The named query defined by the named-query subelement applies to
                the persistence unit.
            </description>
            <location chapter="12" section="2.2.7"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2232</id>
            <description>
                It is undefined if multiple mapping files for the persistence
                unit contain named queries of the same
                name.
            </description>
            <location chapter="12" section="2.2.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2233</id>
            <description>
                The named query defined is added to the named queries defined in
                annotations.
            </description>
            <location chapter="12" section="2.2.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2234</id>
            <description>
                If a named query of the same name is defined in annotations, the
                named query defined by this subelement
                overrides that definition.
            </description>
            <location chapter="12" section="2.2.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2235</id>
            <description>
                The named native query defined by the named-native-query
                subelement applies to the persistence unit.
            </description>
            <location chapter="12" section="2.2.8"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2236</id>
            <description>
                It is undefined if multiple mapping files for the persistence
                unit contain named queries of the same
                name.
            </description>
            <location chapter="12" section="2.2.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2237</id>
            <description>
                The named native query defined is added to the named native
                queries defined in annotations.
            </description>
            <location chapter="12" section="2.2.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2238</id>
            <description>
                If a named query of the same name is defined in annotations, the
                named query defined by this subelement
                overrides that definition.
            </description>
            <location chapter="12" section="2.2.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2239</id>
            <description>
                The named stored procedure query defined by the
                named-stored-procedure-query subelement applies to the
                persistence unit.
            </description>
            <location chapter="12" section="2.2.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2240</id>
            <description>
                It is undefined if multiple mapping files for the persistence
                unit contain named stored procedure
                queries of the same name.
            </description>
            <location chapter="12" section="2.2.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2241</id>
            <description>
                The named stored procedure query defined is added to the named
                stored procedure queries defined in
                annotations.
            </description>
            <location chapter="12" section="2.2.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2242</id>
            <description>
                If a named stored procedure query of the same name is defined in
                annotations, the named stored procedure
                query defined by this subelement overrides that definition.
            </description>
            <location chapter="12" section="2.2.9"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2243</id>
            <description>
                The SQL result set mapping defined by the sql-result-set-mapping
                subelement applies to the persistence
                unit.
            </description>
            <location chapter="12" section="2.2.10"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2244</id>
            <description>
                It is undefined if multiple mapping files for the persistence
                unit contain SQL result set mappings of
                the same name.
            </description>
            <location chapter="12" section="2.2.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2245</id>
            <description>
                The SQL result set mapping defined is added to the SQL result
                set mappings defined in annotations.
            </description>
            <location chapter="12" section="2.2.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2246</id>
            <description>
                If a SQL result set mapping of the same name is defined in
                annotations, the SQL result set mapping
                defined by this subelement overrides that definition.
            </description>
            <location chapter="12" section="2.2.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2247</id>
            <description>
                The entity subelement defines an entity of the persistence unit.
            </description>
            <location chapter="12" section="2.2.11"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2248</id>
            <description>
                It is undefined if multiple mapping files for the persistence
                unit contain entries for the same entity.
            </description>
            <location chapter="12" section="2.2.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2249</id>
            <description>
                The entity class may or may not have been annotated as Entity.
            </description>
            <location chapter="12" section="2.2.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2250</id>
            <description>
                The subelements and attributes of the entity element override as
                specified in section 12.2.3.
            </description>
            <location chapter="12" section="2.2.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2251</id>
            <description>
                The mapped-superclass subelement defines a mapped superclass of
                the persistence unit.
            </description>
            <location chapter="12" section="2.2.12"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2252</id>
            <description>
                It is undefined if multiple mapping files for the persistence
                unit contain entries for the same mapped
                superclass.
            </description>
            <location chapter="12" section="2.2.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2253</id>
            <description>
                The mapped superclass may or may not have been annotated as
                MappedSuperclass.
            </description>
            <location chapter="12" section="2.2.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2254</id>
            <description>
                The subelements and attributes of the mapped-superclass element
                override as specified in section 12.2.4.
            </description>
            <location chapter="12" section="2.2.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2255</id>
            <description>
                The embeddable subelement defines an embeddable class of the
                persistence unit.
            </description>
            <location chapter="12" section="2.2.13"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2256</id>
            <description>
                It is undefined if multiple mapping files for the persistence
                unit contain entries for the same
                embeddable class.
            </description>
            <location chapter="12" section="2.2.13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2257</id>
            <description>
                The embeddable class may or may not have been annotated as
                Embeddable.
            </description>
            <location chapter="12" section="2.2.13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2258</id>
            <description>
                The subelements and attributes of the embeddable element
                override as specified in section 12.2.5.
            </description>
            <location chapter="12" section="2.2.13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2259</id>
            <description>
                The converter defined by the converter subelement applies to the
                persistence unit.
            </description>
            <location chapter="12" section="2.2.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2260</id>
            <description>
                It is undefined if multiple mapping files for the persistence
                unit contain converters for the same
                target type.
            </description>
            <location chapter="12" section="2.2.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2261</id>
            <description>
                The converter defined is added to the converters defined in
                annotations.
            </description>
            <location chapter="12" section="2.2.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2262</id>
            <description>
                If a converter for the same target type is defined in
                annotations, the converter defined by this
                subelement overrides that definition.
            </description>
            <location chapter="12" section="2.2.14"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2263</id>
            <description>
                If the metadata-complete attribute of the entity element is
                specified as true, any annotations on the
                entity class (and its fields and properties) are ignored.
            </description>
            <location chapter="12" section="2.3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2264</id>
            <description>
                When metadata-complete is specified as true and XML attributes
                or sub-elements of the entity element are
                omitted, the default values for those attributes and elements
                are applied.
            </description>
            <location chapter="12" section="2.3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2265</id>
            <description>
                The access attribute overrides any access type specified by the
                persistence-unit-defaults element or
                entity-mappings element for the given entity.
            </description>
            <location chapter="12" section="2.3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2266</id>
            <description>
                The access type for a field or property of the entity may be
                overridden by specifying by overriding the
                mapping for that field or property using the appropriate XML
                subelement, as described in Section
                12.2.3.23 below.
            </description>
            <location chapter="12" section="2.3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2267</id>
            <description>
                If the Cacheable annotation was specified for the entity, its
                value is overridden by this attribute.
            </description>
            <location chapter="12" section="2.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2268</id>
            <description>
                The value of the cacheable attribute is inherited by subclasses
                (unless otherwise overridden for a
                subclass by the Cacheable annotation or cacheable XML
                attribute).
            </description>
            <location chapter="12" section="2.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2269</id>
            <description>
                The name attribute overrides the value of the entity name
                defined by the name element of the Entity
                annotation (whether explicitly specified or defaulted).
            </description>
            <location chapter="12" section="2.3.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2270</id>
            <description>
                The table subelement overrides any Table annotation (including
                defaulted Table values) on the entity.
            </description>
            <location chapter="12" section="2.3.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2271</id>
            <description>
                If a table subelement is present, and attributes or subelements
                of that table subelement are not
                explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.3.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2272</id>
            <description>
                The secondary-table subelement overrides all SecondaryTable and
                SecondaryTables annotations (including
                defaulted SecondaryTable values) on the entity.
            </description>
            <location chapter="12" section="2.3.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2273</id>
            <description>
                If a secondary-table subelement is present, and attributes or
                subelements of that secondary-table
                subelement are not explicitly specified, their default values
                are applied
            </description>
            <location chapter="12" section="2.3.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2274</id>
            <description>
                The primary-key-join-column subelement overrides all
                PrimaryKeyJoinColumn and PrimaryKeyJoinColumns
                annotations (including defaulted PrimaryKeyJoinColumn values) on
                the entity.
            </description>
            <location chapter="12" section="2.3.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2275</id>
            <description>
                If a primary-key-join-column subelement is present, and
                attributes or subelements of that
                primary-key-join-column subelement are not explicitly specified,
                their default values are applied.
            </description>
            <location chapter="12" section="2.3.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2276</id>
            <description>The id-class subelement overrides any IdClass
                annotation specified on the entity.
            </description>
            <location chapter="12" section="2.3.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2277</id>
            <description>
                The inheritance subelement overrides any Inheritance annotation
                (including defaulted Inheritance values)
                on the entity.
            </description>
            <location chapter="12" section="2.3.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2278</id>
            <description>
                If an inheritance subelement is present, and the strategy
                attribute is not explicitly specified, its
                default value is applied.
            </description>
            <location chapter="12" section="2.3.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2279</id>
            <description>
                This element applies to the entity and its subclasses (unless
                otherwise overridden for a subclass by an
                annotation or XML element).
            </description>
            <location chapter="12" section="2.3.9"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2280</id>
            <description>
                Support for the combination of inheritance strategies is not
                required by this specification. Portable
                applications should use only a single inheritance strategy
                within an entity hierarchy.
            </description>
            <location chapter="12" section="2.3.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2281</id>
            <description>
                The discriminator-value subelement overrides any
                DiscriminatorValue annotations (including defaulted
                DiscriminatorValue values) on the entity.
            </description>
            <location chapter="12" section="2.3.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2282</id>
            <description>
                The discriminator-column subelement overrides any
                DiscriminatorColumn annotation (including defaulted
                DiscriminatorColumn values) on the entity.
            </description>
            <location chapter="12" section="2.3.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2283</id>
            <description>
                If a discriminator-column subelement is present, and attributes
                of that discriminator-column subelement
                are not explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.3.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2284</id>
            <description>
                This element applies to the entity and its subclasses (unless
                otherwise overridden for a subclass by an
                annotation or XML element).
            </description>
            <location chapter="12" section="2.3.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2285</id>
            <description>
                The generator defined by the sequence-generator subelement is
                added to any generators defined in
                annotations and any other generators defined in XML.
            </description>
            <location chapter="12" section="2.3.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2286</id>
            <description>
                If a generator of the same name is defined in annotations, the
                generator defined by this subelement
                overrides that definition.
            </description>
            <location chapter="12" section="2.3.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2287</id>
            <description>
                If a sequence-generator subelement is present, and attributes or
                subelements of that sequence-generator
                subelement are not explicitly specified, their default values
                are applied.
            </description>
            <location chapter="12" section="2.3.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2288</id>
            <description>
                The generator defined by the sequence-generator subelement
                applies to the persistence unit.
            </description>
            <location chapter="12" section="2.3.12"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2289</id>
            <description>
                It is undefined if multiple mapping files for the persistence
                unit contain generators of the same name.
            </description>
            <location chapter="12" section="2.3.12"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2290</id>
            <description>
                The generator defined by the table-generator subelement is added
                to any generators defined in
                annotations and any other generators defined in XML.
            </description>
            <location chapter="12" section="2.3.13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2291</id>
            <description>
                If a generator of the same name is defined in annotations, the
                generator defined by this subelement
                overrides that definition.
            </description>
            <location chapter="12" section="2.3.13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2292</id>
            <description>
                If a table-generator subelement is present, and attributes or
                subelements of that table-generator
                subelement are not explicitly specified, their default values
                are applied.
            </description>
            <location chapter="12" section="2.3.13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2293</id>
            <description>The generator defined by the table-generator subelement
                applies to the persistence unit.
            </description>
            <location chapter="12" section="2.3.13"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2294</id>
            <description>
                It is undefined if multiple mapping files for the persistence
                unit contain generators of the same name.
            </description>
            <location chapter="12" section="2.3.13"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2295</id>
            <description>
                The attribute-override subelement is additive to any
                AttributeOverride or AttributeOverrides annotations
                on the entity.
            </description>
            <location chapter="12" section="2.3.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2296</id>
            <description>
                It overrides any AttributeOverride elements for the same
                attribute name.
            </description>
            <location chapter="12" section="2.3.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2297</id>
            <description>
                If an attribute-override subelement is present, and attributes
                or subelements of that attribute-override
                subelement are not explicitly specified, their default values
                are applied.
            </description>
            <location chapter="12" section="2.3.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2298</id>
            <description>
                The association-override subelement is additive to any
                AssociationOverride or AssociationOverrides
                annotations on the entity.
            </description>
            <location chapter="12" section="2.3.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2299</id>
            <description>
                It overrides any AssociationOverride elements for the same
                attribute name.
            </description>
            <location chapter="12" section="2.3.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2300</id>
            <description>
                If an association-override subelement is present, and attributes
                or subelements of that
                association-override subelement are not explicitly specified,
                their default values are applied.
            </description>
            <location chapter="12" section="2.3.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2301</id>
            <description>
                The convert subelement is additive to any Convert or Converts
                annotations on the entity.
            </description>
            <location chapter="12" section="2.3.16"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2302</id>
            <description>
                It overrides any Convert elements for the same attribute name.
            </description>
            <location chapter="12" section="2.3.16"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2303</id>
            <description>
                If a convert subelement is present, and attributes or
                subelements of that convert subelement are not
                explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.3.16"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2472</id>
            <description>
                The named-entity-graph subelement is additive to any
                NamedEntityGraph annotations on the entity.
            </description>
            <location chapter="12" section="2.3.17"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2473</id>
            <description>
                It overrides any NamedEntityGraph annotation with the same name.
            </description>
            <location chapter="12" section="2.3.17"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2304</id>
            <description>
                The named query defined by the named-query subelement is added
                to any named queries defined in
                annotations, and any other named queries defined in XML.
            </description>
            <location chapter="12" section="2.3.18"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2305</id>
            <description>
                If a named query of the same name is defined in annotations, the
                named query defined by this subelement
                overrides that definition
            </description>
            <location chapter="12" section="2.3.18"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2306</id>
            <description>
                If a named-query subelement is present, and attributes or
                subelements of that named-query subelement are
                not explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.3.18"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2307</id>
            <description>
                The named query defined by the named-query subelement applies to
                the persistence unit.
            </description>
            <location chapter="12" section="2.3.18"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2308</id>
            <description>
                It is undefined if multiple mapping files for the persistence
                unit contain named queries of the same
                name.
            </description>
            <location chapter="12" section="2.3.18"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2309</id>
            <description>
                The named query defined by the named-native-query subelement is
                added to any named queries defined in
                annotations, and any other named queries defined in XML.
            </description>
            <location chapter="12" section="2.3.19"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2310</id>
            <description>
                If a named query of the same name is defined in annotations, the
                named query defined by this subelement
                overrides that definition
            </description>
            <location chapter="12" section="2.3.19"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2311</id>
            <description>
                If a named-native-query subelement is present, and attributes or
                subelements of that named-native-query
                subelement are not explicitly specified, their default values
                are applied.
            </description>
            <location chapter="12" section="2.3.19"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2312</id>
            <description>
                The named native query defined by the named-native-query
                subelement applies to the persistence unit.
            </description>
            <location chapter="12" section="2.3.19"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2313</id>
            <description>
                It is undefined if multiple mapping files for the persistence
                unit contain named queries of the same
                name.
            </description>
            <location chapter="12" section="2.3.19"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2314</id>
            <description>
                The named stored procedure query defined by the
                named-stored-procedure-query subelement is added to any
                named stored procedure queries defined in annotations, and any
                other named stored procedure queries
                defined in XML.
            </description>
            <location chapter="12" section="2.3.20"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2315</id>
            <description>
                If a named stored procedure query of the same name is defined in
                annotations, the named stored procedure
                query defined by this subelement overrides that definition.
            </description>
            <location chapter="12" section="2.3.20"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2316</id>
            <description>
                If a named-stored-procedure-query subelement is present, and
                attributes or subelements of that
                named-stored-procedure-query subelement are not explicitly
                specified, their default values are applied.
            </description>
            <location chapter="12" section="2.3.20"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2317</id>
            <description>
                The named stored procedure query defined by the
                named-stored-procedure-query subelement applies to the
                persistence unit.
            </description>
            <location chapter="12" section="2.3.20"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2318</id>
            <description>
                It is undefined if multiple mapping files for the persistence
                unit contain named stored procedure
                queries of the same name.
            </description>
            <location chapter="12" section="2.3.20"/>
        </assertion>


        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2319</id>
            <description>
                The SQL result set mapping defined by the sql-result-set-mapping
                is added to the SQL result set mappings
                defined in annotations, and any other SQL result set mappings
                defined in XML.
            </description>
            <location chapter="12" section="2.3.21"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2320</id>
            <description>
                If a SQL result set mapping of the same name is defined in
                annotations, the SQL result set mapping
                defined by this subelement overrides that definition.
            </description>
            <location chapter="12" section="2.3.21"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2321</id>
            <description>
                If a sql-result-set-mapping subelement is present, and
                attributes or subelements of that
                sql-result-set-mapping subelement are not explicitly specified,
                their default values are applied.
            </description>
            <location chapter="12" section="2.3.21"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2322</id>
            <description>
                The SQL result set mapping defined by the sql-result-set-mapping
                subelement applies to the persistence
                unit.
            </description>
            <location chapter="12" section="2.3.21"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>PERSISTENCE:SPEC:2323</id>
            <description>
                It is undefined if multiple mapping files for the persistence
                unit contain SQL result set mappings of
                the same name.
            </description>
            <location chapter="12" section="2.3.21"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2324</id>
            <description>The exclude-default-listeners subelement applies
                whether or not the ExcludeDefault-
                Listeners annotation was specified on the entity.
            </description>
            <location chapter="12" section="2.3.22"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2325</id>
            <description>This element causes the default entity listeners to be
                excluded for the entity and its
                subclasses.
            </description>
            <location chapter="12" section="2.3.22"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2326</id>
            <description>
                The exclude-superclass-listeners subelement applies whether or
                not the ExcludeSuperclassListeners
                annotation was specified on the entity.
            </description>
            <location chapter="12" section="2.3.23"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2327</id>
            <description>This element causes any superclass listeners to be
                excluded for the entity and its subclasses.
            </description>
            <location chapter="12" section="2.3.23"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2328</id>
            <description>The entity-listeners subelement overrides any
                EntityListeners annotation on the entity.
            </description>
            <location chapter="12" section="2.3.24"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2329</id>
            <description>These listeners apply to the entity and its subclasses
                unless otherwise excluded.
            </description>
            <location chapter="12" section="2.3.24"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2330</id>
            <description>
                These subelements override any lifecycle callback methods
                defined by the corresponding annotations on
                the entity.
            </description>
            <location chapter="12" section="2.3.25"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2330.1</id>
                    <description>pre-persist</description>
                    <location chapter="12" section="2.3.25"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2330.2</id>
                    <description>post-persist</description>
                    <location chapter="12" section="2.3.25"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2330.3</id>
                    <description>pre-remove</description>
                    <location chapter="12" section="2.3.25"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2330.4</id>
                    <description>post-remove</description>
                    <location chapter="12" section="2.3.25"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2330.5</id>
                    <description>pre-update</description>
                    <location chapter="12" section="2.3.25"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2330.6</id>
                    <description>post-update</description>
                    <location chapter="12" section="2.3.25"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2330.7</id>
                    <description>post-load</description>
                    <location chapter="12" section="2.3.25"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2331</id>
            <description>The attributes element groups the mapping subelements
                for the fields and properties of the
                entity.
            </description>
            <location chapter="12" section="2.3.26"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2332</id>
            <description>It may be sparsely populated to include only a subset
                of the fields and properties.
            </description>
            <location chapter="12" section="2.3.26"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2333</id>
            <description>If the value of metadata-complete is true, the
                remainder of the attributes will be defaulted
                according to the default rules.
            </description>
            <location chapter="12" section="2.3.26"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2334</id>
            <description>
                If metadata-complete is not specified, or is false, the mappings
                for only those properties and fields
                that are explicitly specified will be overridden.
            </description>
            <location chapter="12" section="2.3.26"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2335</id>
            <description>
                The id subelement overrides the mapping for the specified field
                or property.
            </description>
            <location chapter="12" section="2.3.26.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2336</id>
            <description>
                If an id subelement is present, and attributes or subelements of
                that id subelement are not explicitly
                specified, their default values are applied.
            </description>
            <location chapter="12" section="2.3.26.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2337</id>
            <description>
                The embedded-id subelement overrides the mapping for the
                specified field or property.
            </description>
            <location chapter="12" section="2.3.26.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2338</id>
            <description>
                If an embedded-id subelement is present, and attributes or
                subelements of that embedded-id subelement
                are not explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.3.26.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2339</id>
            <description>
                The basic subelement overrides the mapping for the specified
                field or property.
            </description>
            <location chapter="12" section="2.3.26.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2340</id>
            <description>
                If a basic subelement is present, and attributes or subelements
                of that basic subelement are not
                explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.3.26.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2341</id>
            <description>
                The version subelement overrides the mapping for the specified
                field or property.
            </description>
            <location chapter="12" section="2.3.26.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2342</id>
            <description>
                If a version subelement is present, and attributes or
                subelements of that version subelement are not
                explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.3.26.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2343</id>
            <description>
                The many-to-one subelement overrides the mapping for the
                specified field or property.
            </description>
            <location chapter="12" section="2.3.26.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2344</id>
            <description>
                If a many-to-one subelement is present, and attributes or
                subelements of that many-to-one subelement are
                not explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.3.26.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2345</id>
            <description>
                The one-to-many subelement overrides the mapping for the
                specified field or property.
            </description>
            <location chapter="12" section="2.3.26.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2346</id>
            <description>
                If a one-to-many subelement is present, and attributes or
                subelements of that one-to-many subelement are
                not explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.3.26.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2347</id>
            <description>
                The one-to-one subelement overrides the mapping for the
                specified field or property.
            </description>
            <location chapter="12" section="2.3.26.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2348</id>
            <description>
                If a one-to-one subelement is present, and attributes or
                subelements of that one-to-one subelement are
                not explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.3.26.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2349</id>
            <description>
                The many-to-many subelement overrides the mapping for the
                specified field or property.
            </description>
            <location chapter="12" section="2.3.26.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2350</id>
            <description>
                If a many-to-many subelement is present, and attributes or
                subelements of that many-to-many subelement
                are not explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.3.26.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2351</id>
            <description>
                The element-collection subelement overrides the mapping for the
                specified field or property.
            </description>
            <location chapter="12" section="2.3.26.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2352</id>
            <description>
                If an element-collection subelement is present, and attributes
                or subelements of that element-collection
                subelement are not explicitly specified, their default values
                are applied.
            </description>
            <location chapter="12" section="2.3.26.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2353</id>
            <description>
                The embedded subelement overrides the mapping for the specified
                field or property.
            </description>
            <location chapter="12" section="2.3.26.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2354</id>
            <description>
                If an embedded subelement is present, and attributes or
                subelements of that embedded subelement are not
                explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.3.26.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2355</id>
            <description>
                The transient subelement overrides the mapping for the specified
                field or property.
            </description>
            <location chapter="12" section="2.3.26.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2356</id>
            <description>
                These apply only to the mapped-superclass for which they are
                subelements or attributes, unless otherwise
                specified below.
            </description>
            <location chapter="12" section="2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2357</id>
            <description>
                If the metadata-complete attribute of the mapped-superclass
                element is specified as true, any
                annotations on the mapped superclass (and its fields and
                properties) are ignored.
            </description>
            <location chapter="12" section="2.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2358</id>
            <description>
                When metadata-complete is specified as true and attributes or
                sub-elements of the mapped-superclass
                element are omitted, the default values for those attributes and
                elements are applied.
            </description>
            <location chapter="12" section="2.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2359</id>
            <description>
                The access attribute defines the access type for the mapped
                superclass.
            </description>
            <location chapter="12" section="2.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2360</id>
            <description>
                The access attribute overrides any access type specified by the
                persistence-unit-defaults element or
                entity-mappings element for the given mapped superclass.
            </description>
            <location chapter="12" section="2.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2361</id>
            <description>
                The access type for a field or property of the mapped superclass
                may be overridden by specifying by
                overriding the mapping for that field or property using the
                appropriate XML subelement
            </description>
            <location chapter="12" section="2.4.2"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2362</id>
            <description>
                The id-class subelement overrides any IdClass annotation
                specified on the mapped superclass.
            </description>
            <location chapter="12" section="2.4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2363</id>
            <description>
                The exclude-default-listeners subelement applies whether or not
                the ExcludeDefault-Listeners annotation
                was specified on the mapped superclass.
            </description>
            <location chapter="12" section="2.4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2364</id>
            <description>
                This element causes the default entity listeners to be excluded
                for the mapped superclass and its
                subclasses.
            </description>
            <location chapter="12" section="2.4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2365</id>
            <description>
                The exclude-superclass-listeners subelement applies whether or
                not the ExcludeSuperclassListeners
                annotation was specified on the mapped superclass.
            </description>
            <location chapter="12" section="2.4.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2366</id>
            <description>
                This element causes any superclass listeners to be excluded for
                the mapped superclass and its
                subclasses.
            </description>
            <location chapter="12" section="2.4.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2367</id>
            <description>
                The entity-listeners subelement overrides any EntityListeners
                annotation on the mapped superclass.
            </description>
            <location chapter="12" section="2.4.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2368</id>
            <description>
                These listeners apply to the mapped superclass and its
                subclasses unless otherwise excluded.
            </description>
            <location chapter="12" section="2.4.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2369</id>
            <description>
                These subelements override any lifecycle callback methods
                defined by the corresponding annotations on
                the mapped superclass.
            </description>
            <location chapter="12" section="2.4.7"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2369.1</id>
                    <description>pre-persist</description>
                    <location chapter="12" section="2.4.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2369.2</id>
                    <description>post-persist</description>
                    <location chapter="12" section="2.4.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2369.3</id>
                    <description>pre-remove</description>
                    <location chapter="12" section="2.4.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2369.4</id>
                    <description>post-remove</description>
                    <location chapter="12" section="2.4.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2369.5</id>
                    <description>pre-update</description>
                    <location chapter="12" section="2.4.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2369.6</id>
                    <description>post-update</description>
                    <location chapter="12" section="2.4.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>PERSISTENCE:SPEC:2369.7</id>
                    <description>post-load</description>
                    <location chapter="12" section="2.4.7"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2370</id>
            <description>
                The attributes element groups the mapping subelements for the
                fields and properties defined by the
                mapped superclass.
            </description>
            <location chapter="12" section="2.4.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2371</id>
            <description>
                It may be sparsely populated to include only a subset of the
                fields and properties.
            </description>
            <location chapter="12" section="2.4.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2372</id>
            <description>
                If the value of metadata-complete is true, the remainder of the
                attributes will be defaulted according
                to the default rules
            </description>
            <location chapter="12" section="2.4.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2373</id>
            <description>
                If metadata-complete is not specified, or is false, the mappings
                for only those properties and fields
                that are explicitly specified will be overridden.
            </description>
            <location chapter="12" section="2.4.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2374</id>
            <description>
                The id subelement overrides the mapping for the specified field
                or property.
            </description>
            <location chapter="12" section="2.4.8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2375</id>
            <description>
                If an id subelement is present, and attributes or subelements of
                that id subelement are not explicitly
                specified, their default values are applied.
            </description>
            <location chapter="12" section="2.4.8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2376</id>
            <description>
                The embedded-id subelement overrides the mapping for the
                specified field or property.
            </description>
            <location chapter="12" section="2.4.8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2377</id>
            <description>
                If an embedded-id subelement is present, and attributes or
                subelements of that embedded-id subelement
                are not explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.4.8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2378</id>
            <description>
                The basic subelement overrides the mapping for the specified
                field or property.
            </description>
            <location chapter="12" section="2.4.8.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2379</id>
            <description>
                If a basic subelement is present, and attributes or subelements
                of that basic subelement are not
                explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.4.8.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2380</id>
            <description>
                The version subelement overrides the mapping for the specified
                field or property.
            </description>
            <location chapter="12" section="2.4.8.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2381</id>
            <description>
                If a version subelement is present, and attributes or
                subelements of that version subelement are not
                explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.4.8.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2382</id>
            <description>
                The many-to-one subelement overrides the mapping for the
                specified field or property.
            </description>
            <location chapter="12" section="2.4.8.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2383</id>
            <description>
                If a many-to-one subelement is present, and attributes or
                subelements of that many-to-one subelement are
                not explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.4.8.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2384</id>
            <description>
                The one-to-many subelement overrides the mapping for the
                specified field or property.
            </description>
            <location chapter="12" section="2.4.8.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2385</id>
            <description>
                If a one-to-many subelement is present, and attributes or
                subelements of that one-to-many subelement are
                not explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.4.8.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2386</id>
            <description>
                The one-to-one subelement overrides the mapping for the
                specified field or property.
            </description>
            <location chapter="12" section="2.4.8.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2387</id>
            <description>
                If a one-to-one subelement is present, and attributes or
                subelements of that one-to-one subelement are
                not explicitly specified, their default values are applied
            </description>
            <location chapter="12" section="2.4.8.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2388</id>
            <description>
                The many-to-many subelement overrides the mapping for the
                specified field or property.
            </description>
            <location chapter="12" section="2.4.8.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2389</id>
            <description>
                If a many-to-many subelement is present, and attributes or
                subelements of that many-to-many subelement
                are not explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.4.8.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2390</id>
            <description>
                The element-collection subelement overrides the mapping for the
                specified field or property.
            </description>
            <location chapter="12" section="2.4.8.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2391</id>
            <description>
                If an element-collection subelement is present, and attributes
                or subelements of that element-collection
                subelement are not explicitly specified, their default values
                are applied.
            </description>
            <location chapter="12" section="2.4.8.9"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2392</id>
            <description>
                The embedded subelement overrides the mapping for the specified
                field or property.
            </description>
            <location chapter="12" section="2.4.8.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2393</id>
            <description>
                If an embedded subelement is present, and attributes or
                subelements of that embedded subelement are not
                explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.4.8.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2394</id>
            <description>
                The transient subelement overrides the mapping for the specified
                field or property.
            </description>
            <location chapter="12" section="2.4.8.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2395</id>
            <description>
                These apply only to the embeddable for which they are
                subelements or attributes
            </description>
            <location chapter="12" section="2.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2396</id>
            <description>
                If the metadata-complete attribute of the embeddable element is
                specified as true, any annotations on
                the embeddable class (and its fields and properties) are
                ignored.
            </description>
            <location chapter="12" section="2.5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2397</id>
            <description>
                When metadata-complete is specified as true and attributes and
                sub-elements of the embeddable element
                are omitted, the default values for those attributes and
                elements are applied.
            </description>
            <location chapter="12" section="2.5.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2398</id>
            <description>
                The access attribute defines the access type for the embeddable
                class.
            </description>
            <location chapter="12" section="2.5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2399</id>
            <description>
                The access attribute overrides any access type specified by the
                persistence-unit-defaults element or
                entity-mappings element for the given embeddable class.
            </description>
            <location chapter="12" section="2.5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2400</id>
            <description>
                The access type for a field or property of the embeddable class
                may be overridden by specifying by
                overriding the mapping for that field or property using the
                appropriate XML subelement
            </description>
            <location chapter="12" section="2.5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2401</id>
            <description>
                The attributes element groups the mapping subelements for the
                fields and properties defined by the
                embeddable class.
            </description>
            <location chapter="12" section="2.5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2402</id>
            <description>
                It may be sparsely populated to include only a subset of the
                fields and properties
            </description>
            <location chapter="12" section="2.5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2403</id>
            <description>
                If the value of metadata-complete is true, the remainder of the
                attributes will be defaulted according
                to the default rules
            </description>
            <location chapter="12" section="2.5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2404</id>
            <description>
                If metadata-complete is not specified, or is false, the mappings
                for only those properties and fields
                that are explicitly specified will be overridden.
            </description>
            <location chapter="12" section="2.5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2405</id>
            <description>
                The basic subelement overrides the mapping for the specified
                field or property.
            </description>
            <location chapter="12" section="2.5.3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2406</id>
            <description>
                If a basic subelement is present, and attributes or subelements
                of that basic subelement are not
                explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.5.3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2407</id>
            <description>
                The many-to-one subelement overrides the mapping for the
                specified field or property.
            </description>
            <location chapter="12" section="2.5.3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2408</id>
            <description>
                If a many-to-one subelement is present, and attributes or
                subelements of that many-to-one subelement are
                not explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.5.3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2409</id>
            <description>
                The one-to-many subelement overrides the mapping for the
                specified field or property.
            </description>
            <location chapter="12" section="2.5.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2410</id>
            <description>
                If a one-to-many subelement is present, and attributes or
                subelements of that one-to-many subelement are
                not explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.5.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2411</id>
            <description>
                The one-to-one subelement overrides the mapping for the
                specified field or property
            </description>
            <location chapter="12" section="2.5.3.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2412</id>
            <description>
                If a one-to-one subelement is present, and attributes or
                subelements of that one-to-one subelement are
                not explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.5.3.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2413</id>
            <description>
                The many-to-many subelement overrides the mapping for the
                specified field or property.
            </description>
            <location chapter="12" section="2.5.3.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2414</id>
            <description>
                If a many-to-many subelement is present, and attributes or
                subelements of that many-to-many subelement
                are not explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.5.3.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2415</id>
            <description>
                The element-collection subelement overrides the mapping for the
                specified field or property.
            </description>
            <location chapter="12" section="2.5.3.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2416</id>
            <description>
                If an element-collection subelement is present, and attributes
                or subelements of that element-collection
                subelement are not explicitly specified, their default values
                are applied.
            </description>
            <location chapter="12" section="2.5.3.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2417</id>
            <description>
                The embedded subelement overrides the mapping for the specified
                field or property.
            </description>
            <location chapter="12" section="2.5.3.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2418</id>
            <description>
                If an embedded subelement is present, and attributes or
                subelements of that embedded subelement are not
                explicitly specified, their default values are applied.
            </description>
            <location chapter="12" section="2.5.3.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>PERSISTENCE:SPEC:2419</id>
            <description>
                The transient subelement overrides the mapping for the specified
                field or property.
            </description>
            <location chapter="12" section="2.5.3.8"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1140</id>
            <description>Other Subelements of the entity-mappings element
            </description>
            <location chapter="12" section="2.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1141</id>
            <description>entity Subelements and Attributes</description>
            <location chapter="12" section="2.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1142</id>
            <description>mapped-superclass Subelements and Attributes
            </description>
            <location chapter="12" section="2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1143</id>
            <description>embeddable Subelements and Attributes</description>
            <location chapter="12" section="2.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>PERSISTENCE:SPEC:1144</id>
            <description>XML Schema</description>
            <location chapter="12" section="3"/>
        </assertion>

    </assertions>
</spec>

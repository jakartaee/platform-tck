<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<spec>
    <next-available-id>119</next-available-id>
    <previous-id>118</previous-id>
    <technology>CONCURRENCY</technology>
    <id>CONCURRENCY</id>
    <name>Concurrency Utilities for Java EE</name>
    <version>1.0</version>
    <location-names>
        <chapters>
            <chapter id="1" name="Introduction">
                <sections>
                    <section id="1" name="Overview"/>
                    <section id="2" name="Goals of this specification"/>
                    <section id="3" name="Other Java Platform Specifications"/>
                    <section id="4" name="Concurrency Utilities for Java EE Expert Group"/>
                    <section id="5" name="Document Conventions"/>
                </sections>
            </chapter>
            <chapter id="2" name="Overview">
                <sections>
                    <section id="1" name="Container-Managed vs. Unmanaged Threads"/>
                    <section id="2" name="Application Integrity"/>
                    <section id="3" name="Container Thread Context"/>
                    <section id="3.1" name="Contextual Invocation Points"/>
                    <section id="3.2" name="Contextual Objects and Tasks"/>
                    <section id="4" name="Usage with Java EE Connector Architecture"/>
                    <section id="5" name="Security"/>
                </sections>
            </chapter>
            <chapter id="3" name="Managed Objects">
                <sections>
                    <section id="1" name="ManagedExecutorService"/>
                    <section id="1.1" name="Application Component Provider’s Responsibilities"/>
                    <section id="1.2" name="Application Assembler’s Responsibilities"/>
                    <section id="1.3" name="Deployer’s Responsibilities"/>
                    <section id="1.4" name="Java EE Product Provider’s Responsibilities"/>
                    <section id="1.5" name="System Administrator’s Responsibilities"/>
                    <section id="1.6" name="Lifecycle"/>
                    <section id="1.7" name="Quality of Service"/>
                    <section id="1.8" name="Transaction Management"/>
                    <section id="2" name="ManagedScheduledExecutorService"/>
                    <section id="2.1" name="Application Component Provider’s Responsibilities"/>
                    <section id="2.2" name="Application Assembler’s Responsibilities"/>
                    <section id="2.3" name="Deployer’s Responsibilities"/>
                    <section id="2.4" name="Java EE Product Provider’s Responsibilities"/>
                    <section id="2.5" name="System Administrator’s Responsibilities"/>
                    <section id="2.6" name="Lifecycle"/>
                    <section id="2.7" name="Quality of Service"/>
                    <section id="2.8" name="Transaction Management"/>
                    <section id="3" name="ContextService"/>
                    <section id="3.1" name="Application Component Provider’s Responsibilities"/>
                    <section id="3.2" name="Application Assembler’s Responsibilities "/>
                    <section id="3.3" name="Deployer’s Responsibilities "/>
                    <section id="3.4" name="Java EE Product Provider’s Responsibilities"/>
                    <section id="3.5" name="Transaction Management."/>
                    <section id="4" name="ManagedThreadFactory "/>
                    <section id="4.1" name="Application Component Provider’s Responsibilities"/>
                    <section id="4.2" name="Application Assembler’s Responsibilities"/>
                    <section id="4.3" name="Deployer’s Responsibilities"/>
                    <section id="4.4" name="Java EE Product Provider’s Responsibilities"/>
                    <section id="4.5" name="System Administrator’s Responsibilities"/>
                    <section id="4.6" name="Transaction Management"/>
                </sections>
            </chapter>
        </chapters>
    </location-names>
    <assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:1</id>
            <description>By extending the java.util.concurrent API,
                application servers and Java EE containers can become aware of the resources
                that are used and provide the proper execution context for the asynchronous operations.
                This is largely achieved by providing managed versions of the predominant
                java.util.concurrent.ExecutorService interfaces.
            </description>
            <location chapter="2" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:2</id>
            <description>When using concurrency utilities such as those in java.util.concurrent,
                these context services need to be available.
            </description>
            <location chapter="2" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:3</id>
            <description>When using Java EE services from a non- container thread, the following behaviors are required:</description>
            <location chapter="2" section="3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:3.1</id>
                    <description>Saving the application component thread’s container context.</description>
                    <location chapter="2" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:3.2</id>
                    <description>Identifying which container contexts to save and propagate.</description>
                    <location chapter="2" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:3.3</id>
                    <description>Applying a container context to the current thread.</description>
                    <location chapter="2" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:3.4</id>
                    <description>Restoring original thread's context.</description>
                    <location chapter="2" section="3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:4</id>
            <description>The types of contexts to be propagated include</description>
            <location chapter="2" section="3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:4.1</id>
                    <description>JNDI naming context,</description>
                    <location chapter="2" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:4.2</id>
                    <description>classloader,</description>
                    <location chapter="2" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:4.3</id>
                    <description>and security information.</description>
                    <location chapter="2" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:4.4</id>
                    <description>Container must support propagation of these context types.</description>
                    <location chapter="2" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:4.5</id>
                    <description>In addition, containers can choose to support propagation of other types of context.</description>
                    <location chapter="2" section="3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:5</id>
            <description>Four new concurrency services (represented by four dark-gray rectangles) allow application components
                and Java EE Standard Services to run asynchronous tasks without violating container contracts.
            </description>
            <location chapter="2" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:6</id>
            <description>Container context and management constructs are propagated to component business logic at runtime
                using various invocation points on well-known interfaces.
                These invocation points or callback methods, here-by known as "tasks" will be referred to throughout the specification:
            </description>
            <location chapter="2" section="3.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:6.1</id>
                    <description>java.util.concurrent.Callable - call()</description>
                    <location chapter="2" section="3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:6.2</id>
                    <description>java.lang.Runnable - run()</description>
                    <location chapter="2" section="3.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:7</id>
            <description>The following callback methods run with unspecified context by default, but may be configured as contextual invocation points if desired:</description>
            <location chapter="2" section="3.1.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:7.1</id>
                    <description>jakarta.enterprise.concurrent.ManagedTaskListener - taskAborted()</description>
                    <location chapter="2" section="3.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:7.2</id>
                    <description>jakarta.enterprise.concurrent.ManagedTaskListener - taskSubmitted()</description>
                    <location chapter="2" section="3.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:7.3</id>
                    <description>jakarta.enterprise.concurrent.ManagedTaskListener - taskStarting()</description>
                    <location chapter="2" section="3.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:7.4</id>
                    <description>jakarta.enterprise.concurrent.Trigger - getNextRunTime()</description>
                    <location chapter="2" section="3.1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:7.5</id>
                    <description>jakarta.enterprise.concurrent.Trigger - skipRun()</description>
                    <location chapter="2" section="3.1.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:8</id>
            <description>This specification addresses the need for Java EE applications to run application business logic asynchronously using</description>
            <location chapter="2" section="4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:8.1</id>
                    <description>a jakarta.enterprise.concurrent.ManagedExecutorService</description>
                    <location chapter="2" section="4"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:8.2</id>
                    <description>or java.util.concurrent.ExecutorService with a jakarta.enterprise.concurrent.ManagedThreadFactory.</description>
                    <location chapter="2" section="4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:9</id>
            <description>Application Component Providers (application developers) use a ManagedExecutorService instance
                and associated interfaces to develop application components that utilize the concurrency functions that these
                interfaces provide. Instances for these objects are retrieved using the Java Naming and Directory Interface (JNDI)
                Naming Context or through injection of resource environment references.
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:10</id>
            <description>The Application Component Provider may use resource environment references to obtain references to a
                ManagedExecutorService instance as follows:
            </description>
            <location chapter="3" section="1.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:10.1</id>
                    <description>Assign an entry in the application component’s environment to the reference using the reference type of:
                        jakarta.enterprise.concurrent.ManagedExecutorService.
                    </description>
                    <location chapter="3" section="1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:10.2</id>
                    <description>Look up the administered object in the application component’s environment using JNDI,
                        or through resource injection by the use of the Resource annotation.
                    </description>
                    <location chapter="3" section="1.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:11</id>
            <description>all ManagedExecutorService references should be bound in the java:comp/env/concurrent
                subcontext
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:12</id>
            <description>Components create task classes by implementing the java.lang.Runnable
                or java.util.concurrent.Callable interfaces.
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:13</id>
            <description>Task classes can optionally implement the jakarta.enterprise.concurrent.ManagedTask interface</description>
            <location chapter="3" section="1.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:13.1</id>
                    <description>to provide identity information</description>
                    <location chapter="3" section="1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:13.2</id>
                    <description>execution properties such as whether the task can be run in a remote process</description>
                    <location chapter="3" section="1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:13.3</id>
                    <description>and to register a java.enterprise.concurrent.ManagedTaskListener instance
                        to receive lifecycle events notifications.
                    </description>
                    <location chapter="3" section="1.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:14</id>
            <description>Task instances are submitted to a ManagedExecutorService instance using any of the defined methods.</description>
            <location chapter="3" section="1.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:14.1</id>
                    <description>submit()</description>
                    <location chapter="3" section="1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:14.2</id>
                    <description>execute()</description>
                    <location chapter="3" section="1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:14.3</id>
                    <description>invokeAll()</description>
                    <location chapter="3" section="1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:14.4</id>
                    <description>invokeAny()</description>
                    <location chapter="3" section="1.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:15</id>
            <description>Task instances will run as an extension of the Java EE container instance
                that submitted the task as and may interact with Java EE resources
                as defined in other sections of this specification.
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:16</id>
            <description>Java EE Product Providers may include other contexts (e.g. Locale) that may be propagated to a task or a thread that invokes the callback methods in the jakarta.enterprise.concurrent.ManagedTaskListener interface.</description>
            <location chapter="3" section="1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:17</id>
            <description>Each ManagedExecutorService may support one or more runtime behaviors as specified by configuration attributes.</description>
            <location chapter="3" section="1.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:18</id>
            <description>A ManagedExecutorService instance is intended to be used by multiple components and applications.</description>
            <location chapter="3" section="1.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:19</id>
            <description>When the executor runs a task, the context of the thread is changed to match the component instance that submitted the task.</description>
            <location chapter="3" section="1.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:20</id>
            <description>The context is then restored when the task is complete.</description>
            <location chapter="3" section="1.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:21</id>
            <description>ManagedExecutorService instances may be terminated or suspended by the application server when applications
                or components are stopped or the application server itself is shutting down.
            </description>
            <location chapter="3" section="1.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:22</id>
            <description>All tasks, when executed from the ManagedExecutorService, will run with the Java EE component
                identity of the component that submitted the task.
            </description>
            <location chapter="3" section="1.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:23</id>
            <description>All lifecycle operations
                on the ManagedExecutorService interface will throw a java.lang.IllegalStateException exception.
            </description>
            <location chapter="3" section="1.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:24</id>
            <description>This includes the following methods that are defined in the java.util.concurrent.ExecutorService interface:</description>
            <location chapter="3" section="1.6.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:24.1</id>
                    <description>awaitTermination()</description>
                    <location chapter="3" section="1.6.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:24.2</id>
                    <description>isShutdown()</description>
                    <location chapter="3" section="1.6.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:24.3</id>
                    <description>isTerminated()</description>
                    <location chapter="3" section="1.6.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:24.4</id>
                    <description>shutdown()</description>
                    <location chapter="3" section="1.6.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:24.5</id>
                    <description>shutdownNow()</description>
                    <location chapter="3" section="1.6.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:25</id>
            <description>No task submitted to an executor should run if task’s component is not started.</description>
            <location chapter="3" section="1.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:26</id>
            <description>When a ManagedExecutorService instance is being shutdown by the Java EE Product Provider:</description>
            <location chapter="3" section="1.6.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:26.1</id>
                    <description>All attempts to submit new tasks are rejected.</description>
                    <location chapter="3" section="1.6.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:26.2</id>
                    <description>All submitted tasks are cancelled if not running.</description>
                    <location chapter="3" section="1.6.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:26.3</id>
                    <description>All running task threads are interrupted.</description>
                    <location chapter="3" section="1.6.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:26.4</id>
                    <description>All registered ManagedTaskListeners are invoked.</description>
                    <location chapter="3" section="1.6.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:27</id>
            <description>ManagedExecutorService implementations must support the at-most-once quality of service.</description>
            <location chapter="3" section="1.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:28</id>
            <description>Tasks submitted to an executor with this quality of service are transient in nature,</description>
            <location chapter="3" section="1.7"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:28.1</id>
                    <description>are not persisted</description>
                    <location chapter="3" section="1.7"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:28.2</id>
                    <description>do not survive process restarts.</description>
                    <location chapter="3" section="1.7"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>CONCURRENCY:SPEC:29</id>
            <description>Other qualities of service are allowed, but are not addressed in this specification.</description>
            <location chapter="3" section="1.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:30</id>
            <description>ManagedExecutorService implementations must support user-managed global transaction demarcation using the jakarta.transaction.UserTransaction interface</description>
            <location chapter="3" section="1.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:31</id>
            <description>Task implementations may optionally</description>
            <location chapter="3" section="1.8"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:31.1</id>
                    <description>begin a transaction</description>
                    <location chapter="3" section="1.8"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:31.2</id>
                    <description>commit a transaction</description>
                    <location chapter="3" section="1.8"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:31.3</id>
                    <description>roll-back a transaction</description>
                    <location chapter="3" section="1.8"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:32</id>
            <description>The jakarta.transaction.UserTransaction interface must be made available in the local JNDI namespace
                as environment entry: java:comp/UserTransaction
            </description>
            <location chapter="3" section="1.8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:33</id>
            <description>All resource managers must enlist with a UserTransaction instance when a transaction is active using the
                begin() method.
            </description>
            <location chapter="3" section="1.8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:34</id>
            <description>The executor is responsible for coordinating commits and rollbacks when the transaction ends using
                commit() and rollback() methods.
            </description>
            <location chapter="3" section="1.8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:35</id>
            <description>A task instance that starts a transaction using the jakarta.transaction.UserTransaction instance but fails to complete the transaction is an error. The Java EE Product Provider is required to detect this error and abort the transaction..</description>
            <location chapter="3" section="1.8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:36</id>
            <description>A task must have the same ability to use transactions as the component submitting the tasks..</description>
            <location chapter="3" section="1.8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:37</id>
            <description>A task instance that starts a transaction must complete the transaction before starting a new transaction.</description>
            <location chapter="3" section="1.8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:38</id>
            <description>The task provider uses the jakarta.transaction.UserTransaction interface to demarcate transactions.</description>
            <location chapter="3" section="1.8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:39</id>
            <description>Transactions are demarcated using the</description>
            <location chapter="3" section="1.8.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:39.1</id>
                    <description>begin() methods of the UserTransaction interface.</description>
                    <location chapter="3" section="1.8.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:39.2</id>
                    <description>commit() methods of the UserTransaction interface.</description>
                    <location chapter="3" section="1.8.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:39.3</id>
                    <description>rollback() methods of the UserTransaction interface.</description>
                    <location chapter="3" section="1.8.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:40</id>
            <description>While an instance is in an active transaction, resource-specific transaction demarcation APIs must not be
                used
            </description>
            <location chapter="3" section="1.8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:41</id>
            <description>The task instance must complete the transaction before the task method ends.</description>
            <location chapter="3" section="1.8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:42</id>
            <description>The Application Component Provider may use resource environment references to obtain references to a
                ManagedScheduledExecutorService instance as follows:
            </description>
            <location chapter="3" section="2.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:42.1</id>
                    <description>Assign an entry in the application component’s environment to the reference using the reference type of:
                        jakarta.enterprise.concurrent.ManagedScheduledExecutorService.
                    </description>
                    <location chapter="3" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:42.2</id>
                    <description>Look up the administered object in the application component’s environment using JNDI</description>
                    <location chapter="3" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:42.3</id>
                    <description>or through resource injection by the use of the Resource annotation</description>
                    <location chapter="3" section="2.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:43</id>
            <description>Components create task classes by implementing the</description>
            <location chapter="3" section="2.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:43.1</id>
                    <description>java.lang.Runnable interfaces</description>
                    <location chapter="3" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:43.2</id>
                    <description>java.util.concurrent.Callable interfaces</description>
                    <location chapter="3" section="2.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:44</id>
            <description>Task instances are submitted to a ManagedScheduledExecutorService instance using any of the defined</description>
            <location chapter="3" section="2.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:44.1</id>
                    <description>submit() methods</description>
                    <location chapter="3" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:44.2</id>
                    <description>execute() methods</description>
                    <location chapter="3" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:44.3</id>
                    <description>invokeAll() methods</description>
                    <location chapter="3" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:44.4</id>
                    <description>invokeAny() methods</description>
                    <location chapter="3" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:44.5</id>
                    <description>schedule() methods</description>
                    <location chapter="3" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:44.6</id>
                    <description>scheduleAtFixedRate() methods</description>
                    <location chapter="3" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:44.7</id>
                    <description>scheduleWithFixedDelay() methods</description>
                    <location chapter="3" section="2.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:45</id>
            <description>Task classes can optionally implement the jakarta.enterprise.concurrent.ManagedTask interface to provide</description>
            <location chapter="3" section="2.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:45.1</id>
                    <description>identity information</description>
                    <location chapter="3" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:45.2</id>
                    <description>execution properties such as whether the task can be run in a remote process</description>
                    <location chapter="3" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:45.3</id>
                    <description>register a java.enterprise.concurrent.ManagedTaskListener instance to receive lifecycle events notifications</description>
                    <location chapter="3" section="2.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:46</id>
            <description>Java EE Product Providers may include other contexts that may be propagated to</description>
            <location chapter="3" section="2.4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:46.1</id>
                    <description>a task</description>
                    <location chapter="3" section="2.4"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:46.2</id>
                    <description>jakarta.enterprise.concurrent.ManagedTaskListener thread</description>
                    <location chapter="3" section="2.4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:47</id>
            <description>ManagedScheduledExecutorService implementations may add any additional contexts and provide the means for configuration of those contexts in any way so long as these contexts do not violate the required aspects of this specification</description>
            <location chapter="3" section="2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:48</id>
            <description>Each ManagedScheduledExecutorService may support one or more runtime behaviors as specified by configuration attributes.</description>
            <location chapter="3" section="2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:49</id>
            <description>The Java EE Product Provider must provide a preconfigured, default ManagedScheduledExecutorService for use by application components under the JNDI name java:comp/DefaultManagedScheduledExecutorService.</description>
            <location chapter="3" section="2.4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:50</id>
            <description>The
                types of contexts to be propagated by this default ManagedScheduledExecutorService must include naming
                context, class loader, and security information.
            </description>
            <location chapter="3" section="2.4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:51</id>
            <description>A ManagedScheduledExecutorService instance can be used by multiple components and applications.</description>
            <location chapter="3" section="2.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:52</id>
            <description>When the
                executor runs a task, the context of the thread is changed to match the component instance that submitted the
                task. The context is then restored when the task is complete.
            </description>
            <location chapter="3" section="2.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:53</id>
            <description>ManagedScheduledExecutorService instances may be terminated or suspended by the application server when
                applications or components are stopped or the application server itself is shutting down.
            </description>
            <location chapter="3" section="2.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:54</id>
            <description>All tasks, when executed from the ManagedScheduledExecutorService, will run with the context of the
                application component that submitted the task.
            </description>
            <location chapter="3" section="2.6.1"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>CONCURRENCY:SPEC:55</id>
            <description>The lifecycle of a ManagedScheduledExecutorService is managed by an application server.</description>
            <location chapter="3" section="2.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:56</id>
            <description>All lifecycle operations on the ManagedScheduledExecutorService interface will throw a
                java.lang.IllegalStateException exception.
            </description>
            <location chapter="3" section="2.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:57</id>
            <description>This includes the following methods that are defined in the java.util.concurrent.ExecutorService interface:</description>
            <location chapter="3" section="2.6.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:57.1</id>
                    <description>awaitTermination()</description>
                    <location chapter="3" section="2.6.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:57.2</id>
                    <description>isShutdown()</description>
                    <location chapter="3" section="2.6.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:57.3</id>
                    <description>isTerminated()</description>
                    <location chapter="3" section="2.6.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:57.4</id>
                    <description>shutdown()</description>
                    <location chapter="3" section="2.6.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:57.5</id>
                    <description>shutdownNow()</description>
                    <location chapter="3" section="2.6.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:58</id>
            <description>All tasks submitted to an executor should not run if task’s component is not started.</description>
            <location chapter="3" section="2.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:59</id>
            <description>When a ManagedScheduledExecutorService instance is being shutdown by the Java EE Product Provider:</description>
            <location chapter="3" section="2.6.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:59.1</id>
                    <description>All attempts to submit new tasks are rejected.</description>
                    <location chapter="3" section="2.6.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:59.2</id>
                    <description>All submitted tasks are cancelled if not running.</description>
                    <location chapter="3" section="2.6.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:59.3</id>
                    <description>All running task threads are interrupted.</description>
                    <location chapter="3" section="2.6.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:59.4</id>
                    <description>All registered ManagedTaskListeners are invoked.</description>
                    <location chapter="3" section="2.6.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:60</id>
            <description>ManagedExecutorService implementations must support the at-most-once quality of service.</description>
            <location chapter="3" section="2.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:61</id>
            <description>Tasks submitted to an executor with this quality of service are transient in nature,</description>
            <location chapter="3" section="2.7"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:61.1</id>
                    <description>are not persisted</description>
                    <location chapter="3" section="2.7"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:61.2</id>
                    <description>do not survive process restarts.</description>
                    <location chapter="3" section="2.7"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>CONCURRENCY:SPEC:62</id>
            <description>Other qualities of service are allowed, but are not addressed in this specification.</description>
            <location chapter="3" section="2.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:63</id>
            <description>ManagedScheduledExecutorService implementations must support user-managed global transaction demarcation using the jakarta.transaction.UserTransaction interface</description>
            <location chapter="3" section="2.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:64</id>
            <description>Task implementations may optionally</description>
            <location chapter="3" section="2.8"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:64.1</id>
                    <description>begin a transaction</description>
                    <location chapter="3" section="2.8"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:64.2</id>
                    <description>commit a transaction</description>
                    <location chapter="3" section="2.8"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:64.3</id>
                    <description>roll-back a transaction</description>
                    <location chapter="3" section="2.8"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:65</id>
            <description>The jakarta.transaction.UserTransaction interface must be made available in the local JNDI namespace
                as environment entry: java:comp/UserTransaction
            </description>
            <location chapter="3" section="2.8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:66</id>
            <description>All resource managers must enlist with a UserTransaction instance when a transaction is active using the
                begin() method.
            </description>
            <location chapter="3" section="2.8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:67</id>
            <description>The executor is responsible for coordinating commits and rollbacks when the transaction ends using
                commit() and rollback() methods.
            </description>
            <location chapter="3" section="2.8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:68</id>
            <description>A task instance that starts a transaction using the jakarta.transaction.UserTransaction instance but fails to complete the transaction is an error. The Java EE Product Provider is required to detect this error and abort the transaction.</description>
            <location chapter="3" section="2.8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:69</id>
            <description>A task must have the same ability to use transactions as the component submitting the tasks</description>
            <location chapter="3" section="2.8.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:70</id>
            <description>A task instance that starts a transaction must complete the transaction before starting a new transaction.</description>
            <location chapter="3" section="2.8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:71</id>
            <description>The task provider uses the jakarta.transaction.UserTransaction interface to demarcate transactions.</description>
            <location chapter="3" section="2.8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:72</id>
            <description>Transactions are demarcated using the begin(), commit() and rollback() methods of the
                UserTransaction interface.
            </description>
            <location chapter="3" section="2.8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:73</id>
            <description>While an instance is in an active transaction, resource-specific transaction demarcation APIs must not be
                used
            </description>
            <location chapter="3" section="2.8.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:74</id>
            <description>When used in conjunction with a ManagedThreadFactory, customized Java SE platform ExecutorService implementations can be used.</description>
            <location chapter="3" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:75</id>
            <description>The ContextService also allows non-Java EE service callbacks (such as JMS MessageListeners and JMX NotificationListeners) to run in the context of the listener registrant instead of the implementation provider's undefined thread context.</description>
            <location chapter="3" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:76</id>
            <description>The Application Component Provider may use resource environment references to obtain references to a
                ContextService instance as follows:
            </description>
            <location chapter="3" section="3.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:76.1</id>
                    <description>Assign an entry in the application component’s environment to the reference using the reference type of:
                        jakarta.enterprise.concurrent.ContextService.
                    </description>
                    <location chapter="3" section="3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:76.2</id>
                    <description>Look up the administered object in the application component’s environment using JNDI</description>
                    <location chapter="3" section="3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:76.3</id>
                    <description>or through resource injection by the use of the Resource annotation</description>
                    <location chapter="3" section="3.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:77</id>
            <description>Contextual object proxies will run as an extension of the application
                component instance that created the proxy as and may interact with Java EE container resources
            </description>
            <location chapter="3" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:78</id>
            <description>All invocation handlers for the contextual proxy implementation must implement java.io.Serializable.</description>
            <location chapter="3" section="3.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:79</id>
            <description>All invocations to any of the proxied interface methods will fail with a
                java.lang.IllegalStateException exception if the application component is not started or deployed.
            </description>
            <location chapter="3" section="3.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:80</id>
            <description>Java EE Product Providers may add any additional container contexts to the managed ContextService and provide the means for configuration of those contexts in any way so long as these contexts do not violate the required aspects of this specification.</description>
            <location chapter="3" section="3.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:81</id>
            <description>Each ContextService may support one or more runtime behaviors as specified by configuration attributes.</description>
            <location chapter="3" section="3.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:82</id>
            <description>The ContextService can be used directly by application components by using resource environment references</description>
            <location chapter="3" section="3.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:83</id>
            <description>providers may choose to use the context information supplied as default context propagation policies for a</description>
            <location chapter="3" section="3.4.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:83.1</id>
                    <description>ManagedExecutorService</description>
                    <location chapter="3" section="3.4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:83.2</id>
                    <description>ManagedScheduledExecutorService</description>
                    <location chapter="3" section="3.4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:83.3</id>
                    <description>ManagedThreadFactory</description>
                    <location chapter="3" section="3.4.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:84</id>
            <description>The Java EE Produce Provider must provide a preconfigured, default ContextService for use by application
                components under the JNDI name java:comp/DefaultContextService.
            </description>
            <location chapter="3" section="3.4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:85</id>
            <description>The types of contexts to be propagated by this default ContextService must include naming
                context, class loader, and security information.
            </description>
            <location chapter="3" section="3.4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:86</id>
            <description>Contextual dynamic proxies support user-managed global transaction demarcation using the jakarta.transaction.UserTransaction interface</description>
            <location chapter="3" section="3.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:87</id>
            <description>Proxy methods suspend any transactional context on the thread and allow components to manually control global transaction demarcation boundaries</description>
            <location chapter="3" section="3.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:88</id>
            <description>Context objects may optionally begin, commit and rollback a transaction.</description>
            <location chapter="3" section="3.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:89</id>
            <description>Transaction management can be disabled on the proxy instance using a context property</description>
            <location chapter="3" section="3.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:90</id>
            <description>When disabled, the
                transaction (if any) currently in progress on the thread (for example, the transaction that the container is
                managing) will not be suspended and any resources used by the task will be enlisted.
            </description>
            <location chapter="3" section="3.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:91</id>
            <description>the transaction management requirements of a ContextService implementation when
                transaction management is enabled (this is the default behavior).
            </description>
            <location chapter="3" section="3.5.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:91.1</id>
                    <description>The jakarta.transaction.UserTransaction interface must be made available in the local JNDI namespace
                        as environment entry: java:comp/UserTransaction
                    </description>
                    <location chapter="3" section="3.5.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:91.2</id>
                    <description>All resource managers must enlist with a UserTransaction instance when a transaction is active using the
                        begin() method.
                    </description>
                    <location chapter="3" section="3.5.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:91.3</id>
                    <description>The executor is responsible for coordinating commits and rollbacks when the transaction ends using
                        commit() and rollback() methods.
                    </description>
                    <location chapter="3" section="3.5.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:91.4</id>
                    <description>A task instance that starts a transaction using the jakarta.transaction.UserTransaction instance but fails to complete the transaction is an error. The Java EE Product Provider is required to detect this error and abort the transaction.</description>
                    <location chapter="3" section="3.5.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:91.5</id>
                    <description>A task must have the same ability to use transactions as the component submitting the tasks.</description>
                    <location chapter="3" section="3.5.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:92</id>
            <description>the transaction management requirements of each task provider’s implementation
                when transaction management is enabled (this is the default behavior).
            </description>
            <location chapter="3" section="3.5.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:92.1</id>
                    <description>A task instance that starts a transaction must complete the transaction before starting a new transaction.</description>
                    <location chapter="3" section="3.5.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:92.2</id>
                    <description>The task provider uses the jakarta.transaction.UserTransaction interface to demarcate transactions.</description>
                    <location chapter="3" section="3.5.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:92.3</id>
                    <description>Transactions are demarcated using the begin(), commit() and rollback() methods of the
                        UserTransaction interface.
                    </description>
                    <location chapter="3" section="3.5.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:92.4</id>
                    <description>While an instance is in an active transaction, resource-specific transaction demarcation APIs must not be
                        used.
                    </description>
                    <location chapter="3" section="3.5.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:92.5</id>
                    <description>The task instance must complete the transaction before the task method ends.</description>
                    <location chapter="3" section="3.5.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:93</id>
            <description>The jakarta.enterprise.concurrent.ManagedThreadFactory allows applications to create thread instances from a
                Java EE Product Provider without creating new java.lang.Thread instances directly.
            </description>
            <location chapter="3" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:94</id>
            <description>This object allows Application Component Providers to use custom executors such as the java.util.concurrent.ThreadPoolExecutor when advanced, specialized execution patterns are required.</description>
            <location chapter="3" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:95</id>
            <description>Java EE Product Providers can provide custom Thread implementations to add management capabilities and
                container contextual information to the thread.
            </description>
            <location chapter="3" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:96</id>
            <description>The Application Component Provider may use resource environment references to obtain references to a
                ManagedThreadFactory instance as follows:
            </description>
            <location chapter="3" section="4.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:96.1</id>
                    <description>Assign an entry in the application component’s environment to the reference using the reference type of:
                        jakarta.enterprise.concurrent.ManagedThreadFactory.
                    </description>
                    <location chapter="3" section="4.1"/>
                </assertion>
                <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:96.2</id>
                    <description>This specification recommends, but does not require, that all resource environment references be
                        organized in the appropriate subcontext of the component’s environment for the resource type.
                    </description>
                    <location chapter="3" section="4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:96.3</id>
                    <description>Look up the administered object in the application component’s environment using JNDI</description>
                    <location chapter="3" section="4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:96.4</id>
                    <description>through resource injection by the use of the Resource annotation</description>
                    <location chapter="3" section="4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:96.5</id>
                    <description>New threads are created using the newThread(Runnable r) method on the
                        java.util.concurrent.ThreadFactory interface.
                    </description>
                    <location chapter="3" section="4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:96.6</id>
                    <description>The application component thread has permission to interrupt the thread. All other modifications to the
                        thread are subject to the security manager, if present.
                    </description>
                    <location chapter="3" section="4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:96.7</id>
                    <description>All Threads are contextual. When the thread is started using the Thread.start() method, the Runnable
                        that is executed will run with the context of the application component instance that created the
                        ManagedThreadFactory instance.
                    </description>
                    <location chapter="3" section="4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:96.8</id>
                    <description>The ManagedThreadFactory instance may be invoked from several threads in the application
                        component, each with a different container context
                    </description>
                    <location chapter="3" section="4.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:96.9</id>
                    <description>If a ManagedThreadFactory instance is stopped, all subsequent calls to newThread() must throw a
                        java.lang.IllegalStateException
                    </description>
                    <location chapter="3" section="4.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:97</id>
            <description>Threads returned by the newThread() method should implement the ManageableThread interface.</description>
            <location chapter="3" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:98</id>
            <description>When a ManagedThreadFactory instance is stopped, such as when the component that created it is
                stopped or when the application server is shutting down, all threads that it has created using the
                newThread() method are interrupted.
            </description>
            <location chapter="3" section="4.4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:98.1</id>
                    <description>Calls to the isShutdown() method in the ManageableThread interface
                        on these threads should return true.
                    </description>
                    <location chapter="3" section="4.4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:99</id>
            <description>Threads that are created by a ManagedThreadFactory instance but are started after the
                ManagedThreadFactory has shut down should start with an interrupted status.
            </description>
            <location chapter="3" section="4.4"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>CONCURRENCY:SPEC:99.1</id>
                    <description>Calls to the isShutdown() method in the ManageableThread interface
                        on these threads should return true.
                    </description>
                    <location chapter="3" section="4.4"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:100</id>
            <description>All threads created by a ManagedThreadFactory instance are required to propagate container context information to the thread’s Runnable.</description>
            <location chapter="3" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:101</id>
            <description>Java EE Product Providers may add any additional container contexts to the managed ManagedThreadFactory and provide the means for configuration of those contexts in any way so long as these contexts do not violate the required aspects of this specification.</description>
            <location chapter="3" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:102</id>
            <description>Each managed ManagedThreadFactory may support one or more runtime behaviors as specified by configuration attributes.</description>
            <location chapter="3" section="4.4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:103</id>
            <description>A ManagedThreadFactory can be used directly by application components by using resource environment
                references
            </description>
            <location chapter="3" section="4.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:104</id>
            <description>providers may choose to use the context information supplied as default context propagation
                policies for ManagedExecutorService, or ManagedScheduledExecutorService instances.
            </description>
            <location chapter="3" section="4.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:105</id>
            <description>The Java EE Produce Provider must provide a preconfigured, default ManagedThreadFactory for use by
                application components under the JNDI name java:comp/DefaultManagedThreadFactory.
            </description>
            <location chapter="3" section="4.4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:106</id>
            <description>The types of contexts to be propagated by this default ManagedThreadFactory must include
                naming context, class loader, and security information.
            </description>
            <location chapter="3" section="4.4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:107</id>
            <description>ManagedThreadFactory implementations must support user-managed global transaction demarcation using the jakarta.transaction.UserTransaction interface,</description>
            <location chapter="3" section="4.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:108</id>
            <description>Task implementations may optionally begin, commit and roll-back a transaction.</description>
            <location chapter="3" section="4.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:109</id>
            <description>The jakarta.transaction.UserTransaction interface must be made available in the local JNDI namespace
                as environment entry: java:comp/UserTransaction
            </description>
            <location chapter="3" section="4.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:110</id>
            <description>All resource managers must enlist with a UserTransaction instance when a transaction is active using the
                begin() method.
            </description>
            <location chapter="3" section="4.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:111</id>
            <description>The executor is responsible for coordinating commits and rollbacks when the transaction ends using
                commit() and rollback() methods.
            </description>
            <location chapter="3" section="4.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:112</id>
            <description>A task instance that starts a transaction using the jakarta.transaction.UserTransaction instance but fails to complete the transaction is an error. The Java EE Product Provider is required to detect this error and abort the transaction.</description>
            <location chapter="3" section="4.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:113</id>
            <description>A task must have the same ability to use transactions as the component submitting the tasks.</description>
            <location chapter="3" section="4.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:114</id>
            <description>A task instance that starts a transaction must complete the transaction before starting a new transaction.</description>
            <location chapter="3" section="4.6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:115</id>
            <description>The task provider uses the jakarta.transaction.UserTransaction interface to demarcate transactions.</description>
            <location chapter="3" section="4.6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:116</id>
            <description>Transactions are demarcated using the begin(), commit() and rollback() methods of the
                UserTransaction interface.
            </description>
            <location chapter="3" section="4.6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:117</id>
            <description>While an instance is in an active transaction, resource-specific transaction demarcation APIs must not be
                used.
            </description>
            <location chapter="3" section="4.6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>CONCURRENCY:SPEC:118</id>
            <description>The task instance must complete the transaction before the task method ends.</description>
            <location chapter="3" section="4.6.2"/>
        </assertion>
    </assertions>
</spec>

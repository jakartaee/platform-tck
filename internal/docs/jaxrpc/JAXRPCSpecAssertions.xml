<?xml version = "1.0" encoding = "UTF-8"?>
<!DOCTYPE spec SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/spec_assertions.dtd">
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<?xml-stylesheet type="text/xsl" href="https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/xsl/spec_assertions.xsl"?>
<spec>
	<next-available-id>602</next-available-id>
	<previous-id>599</previous-id>
	<technology>JAXRPC</technology>
	<id>JAXRPC</id>
	<name>Java API for XML-based RPC</name>
	<version>1.1</version>
	<location-names>
		<chapters>
			<chapter id = "3" name = "Requirements">
				<sections>
					<section id = "R01" name = "Protocol Bindings"/>
					<section id = "R02" name = "Transport"/>
					<section id = "R03" name = "Supported Type Systems"/>
					<section id = "R04" name = "XML Encoding for Soap Messages"/>
					<section id = "R05" name = "JAX-RPC Runtime System"/>
					<section id = "R06" name = "Default Type Mapping"/>
					<section id = "R07" name = "Extensible Type Mapping"/>
					<section id = "R08" name = "Service Endpoint Model"/>
					<section id = "R09" name = "Service Description"/>
					<section id = "R10" name = "Service Registration and Discovery"/>
					<section id = "R11" name = "Java API for XML Binding (JAXB)"/>
					<section id = "R012" name = "Application level Modes of Interaction"/>
					<section id = "R013" name = "Relationship to JAXM"/>
					<section id = "R015" name = "Service Context"/>
					<section id = "R016" name = "SOAP Messages with Attachments"/>
					<section id = "R017" name = "SOAP Message Handler"/>
					<section id = "R018" name = "Literal Mode"/>
					<section id = "R019" name = "Application Portability"/>
				</sections>
			</chapter>
			<chapter id = "4" name = "WSDL/XML to Java Mapping">
				<sections>
					<section id = "1" name = "XML Names"/>
					<section id = "2.1" name = "Simple Types"/>
					<section id = "2.2" name = "Array"/>
					<section id = "2.3" name = "XML Struct and Complex Type"/>
					<section id = "2.4" name = "Enumeration"/>
					<section id = "2.5" name = "Simple Types Derived By Restriction"/>
					<section id = "2.6" name = "Simple Types Derived Using xsd:list"/>
					<section id = "3.1" name = "WSDL Document"/>
					<section id = "3.3" name = "WSDL Port Type"/>
					<section id = "3.4" name = "WSDL Operation"/>
					<section id = "3.5" name = "WSDL Operation"/>
					<section id = "3.6" name = "WSDL Fault"/>
					<section id = "3.7" name = "WSDL Binding"/>
					<section id = "3.8" name = "WSDL Port"/>
					<section id = "3.9" name = "WSDL Service"/>
					<section id = "3.10" name = "Service Interface"/>
					<section id = "3.11" name = "Generated Service"/>
					<section id = "3.12" name = "Name Collisions"/>
				</sections>
			</chapter>
			<chapter id = "5" name = "Java to XML/WSDL Mapping">
				<sections>
					<section id = "0" name = "Introduction"/>
					<section id = "1" name = "JAX-RPC Supported Java Types"/>
					<section id = "1.1" name = "Primitive Types"/>
					<section id = "1.2" name = "Java Array"/>
					<section id = "1.2" name = "Java Array"/>
					<section id = "1.3" name = "Standard Java Classes"/>
					<section id = "2" name = "Service Definition Interface"/>
					<section id = "2.1" name = "Service Specific Exception"/>
					<section id = "2.2" name = "Remote Reference Passing"/>
					<section id = "2.3" name = "Pass by Copy"/>
					<section id = "3" name = "Java to XML Type Mapping"/>
					<section id = "3.1" name = "Java Primitive Types"/>
					<section id = "3.2" name = "Standard Java Classes"/>
					<section id = "3.3" name = "Array of Bytes"/>
					<section id = "3.4" name = "Java Array"/>
					<section id = "4" name = "JAX-RPC Value Type"/>
					<section id = "4.1" name = "XML Mapping"/>
					<section id = "4.2" name = "Serialization Semantics"/>
					<section id = "4.3" name = "Deployment Descriptor"/>
					<section id = "5.1" name = "Java Identifier"/>
					<section id = "5.2" name = "Java Package"/>
					<section id = "5.3" name = "Service Definition Interface"/>
					<section id = "5.4" name = "Inherited Service Definiton Interfaces"/>
					<section id = "5.5" name = "Methods"/>
				</sections>
			</chapter>
			<chapter id = "6" name = "SOAP Binding">
				<sections>
					<section id = "1" name = "SOAP Binding in WSDL"/>
					<section id = "2" name = "Operation Style attribute"/>
					<section id = "3" name = "Encoded Representation"/>
					<section id = "4" name = "Literal Representation"/>
					<section id = "4.1" name = "Java Mapping of Literal Representaion"/>
					<section id = "5" name = "SOAP Fault"/>
					<section id = "6" name = "SOAP Headerfault"/>
				</sections>
			</chapter>
			<chapter id = "7" name = "SOAP Message With Attachments">
				<sections>
					<section id = "1" name = "SOAP Message with Attachments"/>
					<section id = "2" name = "Java Types"/>
					<section id = "3" name = "MIME Types"/>
					<section id = "4" name = "WSDL Requirements"/>
					<section id = "5" name = "Mapping between MIME types and Java Types"/>
				</sections>
			</chapter>
			<chapter id = "8" name = "JAX-RPC Core APIs">
				<sections>
					<section id = "2" name = "Client side APIs"/>
					<section id = "2.1" name = "Client side APIs"/>
					<section id = "2.2" name = "Stub Configuration"/>
					<section id = "2.3" name = "Dynamic Proxy"/>
					<section id = "2.4" name = "DII Call Interface"/>
					<section id = "2.4.1" name = "Invocation Modes"/>
					<section id = "2.5" name = "Abstract ServiceFactory"/>
					<section id = "2.6" name = "JAXRPCException"/>
				</sections>
			</chapter>
			<chapter id = "9" name = "Service Client Programming Model">
				<sections>
					<section id = "3" name = "J2SE based Service Client Programming Model"/>
				</sections>
			</chapter>
			<chapter id = "10" name = "Service Endpoint Model">
				<sections>
					<section id = "1.1" name = "Service Developer"/>
					<section id = "1.3" name = "JAX-RPC Endpoint Packaging"/>
					<section id = "1.4" name = "Deployment Descriptor"/>
					<section id = "1.5" name = "JAX-RPC Deployer"/>
					<section id = "1.6" name = "JAX-RPC Web Application Archive"/>
					<section id = "2" name = "J2SE based Service Endpoint Model"/>
				</sections>
			</chapter>
			<chapter id = "11" name = "Service Context">
				<sections>
					<section id = "1" name = "Context Definition"/>
					<section id = "2" name = "Programming Model"/>
					<section id = "2.1" name = "Implicit Service Context"/>
					<section id = "2.2" name = "Explicit Service Context"/>
				</sections>
			</chapter>
			<chapter id = "12" name = "SOAP Message Handlers">
				<sections>
					<section id = "1.1" name = "Handler"/>
					<section id = "1.2" name = "SOAP Message Handler"/>
					<section id = "1.3" name = "HandlerChain"/>
					<section id = "1.4" name = "MessageContext"/>
					<section id = "1.5" name = "SOAPMessageContext"/>
					<section id = "2" name = "Configuration"/>
					<section id = "2.1" name = "Service Client"/>
					<section id = "3" name = "Handler Model"/>
					<section id = "4" name = "Handler Lifecycle"/>
				</sections>
			</chapter>
			<chapter id = "13" name = "JAX-RPC Runtime Services">
				<sections>
					<section id = "1" name = "Security"/>
					<section id = "1.1" name = "HTTP Basic Authentication"/>
					<section id = "1.2" name = "SSL Mutual Authentication"/>
					<section id = "1.3" name = "SOAP Security Extensions"/>
					<section id = "2" name = "Session Management"/>
				</sections>
			</chapter>
			<chapter id = "14" name = "Interoperability">
				<sections>
					<section id = "1" name = "Interoperability Scenario"/>
					<section id = "1" name = "Interoperability Scenario"/>
					<section id = "3.1" name = "SOAP based Interoperability"/>
					<section id = "3.2" name = "SOAP Encoding and XML Schema Support"/>
					<section id = "3.3" name = "Transport"/>
					<section id = "3.4" name = "WSDL Requirements"/>
					<section id = "3.5" name = "Processing of SOAP Headers"/>
					<section id = "3.6" name = "Mapping of Remote Exceptions"/>
					<section id = "3.7" name = "Security"/>
					<section id = "3.8" name = "Transaction"/>
				</sections>
			</chapter>
			<chapter id = "15" name = "Extensible Type Mapping">
				<sections>
					<section id = "2" name = "Type Mapping Framework"/>
					<section id = "3.1" name = "TypeMappingRegistry"/>
				</sections>
			</chapter>
			<chapter id = "18" name = "XML Schema Support"/>
			<chapter id = "20" name = "Mapping of XML Names">
				<sections>
					<section id = "1" name = "Mapping"/>
				</sections>
			</chapter>
		</chapters>
	</location-names>
	<assertions>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:1</id>
			<description>Allow support for Binary protocol bindings that are based on the XML infoset but do not carry XML 1.0 documents.</description>
			<location chapter = "3" section = "R01"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:2</id>
			<description>An interoperable JAX-RPC implementation is required to support the SOAP 1.1 with attachments protocol.</description>
			<location chapter = "3" section = "R01"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:3</id>
			<description>Support of SOAP 1.1 with attachments protocol must not preclude or limit use of other protocol bindings and transport in a JAX-RPC implementation.</description>
			<location chapter = "3" section = "R01"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:4</id>
			<description>A JAX-RPC implementation is required to support HTTP 1.1 as the transport for SOAP messages.</description>
			<location chapter = "3" section = "R02"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:5</id>
			<description>The required support of HTTP 1.1 must not mean that the HTTP transport is the only transport that can be supported by a JAX-RPC implementation.</description>
			<location chapter = "3" section = "R02"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:6</id>
			<description>JAX-RPC specification does not preclude the use of SOAP binding with a transport that supports security mechanisms.</description>
			<location chapter = "3" section = "R02"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:7</id>
			<description>A JAX-RPC implementation is not required to support HTTP/S as the underlying secure transport.</description>
			<location chapter = "3" section = "R02"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:11</id>
			<description>The JAX-RPC specification requires support for encoded representations of a SOAP message representing an RPC call or RPC response.</description>
			<location chapter = "3" section = "R04"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:13</id>
			<description>The JAX-RPC specification requires support for literal representations of a SOAP message representing an RPC call or RPC response.</description>
			<location chapter = "3" section = "R04"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:15</id>
			<description>The use of SOAP 1.1 encoding must not preclude use of any other encoding in a JAX-RPC implementation.</description>
			<location chapter = "3" section = "R04"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:16</id>
			<description>The JAX-RPC specification requires a server side JAX-RPC compatible implementation to be a Servlet 2.3 (or higher version) container based JAX-RPC implementation.</description>
			<location chapter = "3" section = "R05"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "platform" status = "active" testable = "true">
			<id>JAXRPC:SPEC:17</id>
			<description>The JAX-RPC specification requires a server side JAX-RPC compatible implementation to be a J2EE 1.3 (or higher version) container based JAX-RPC implementation.</description>
			<location chapter = "3" section = "R05"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:19</id>
			<description>The JAX-RPC specification requires a client side JAX-RPC compatible implementation to be based on J2SE (1.3 version or higher) platform.</description>
			<location chapter = "3" section = "R05"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "platform" status = "active" testable = "true">
			<id>JAXRPC:SPEC:20</id>
			<description>The JAX-RPC specification requires a client side JAX-RPC compatible implementation to be based on J2EE (1.3 version or higher) containers.</description>
			<location chapter = "3" section = "R05"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:21</id>
			<description>The JAX-RPC specification supports J2ME (Java 2 platform, Micro Edition) MIDP client as a form of JAX-RPC service client.</description>
			<location chapter = "3" section = "R05"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:24</id>
			<description>A JAX-RPC implementation is allowed to provide extensions to the standard type mapping.</description>
			<location chapter = "3" section = "R06"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:25</id>
			<description>A JAX-RPC implementation uses the extensible type mapping framework to support serialization and deserialization of an extended set of XML and Java data types.</description>
			<location chapter = "3" section = "R07"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:26</id>
			<description>The JAX-RPC specification specifies the Servlet based JAX-RPC service endpoint model for developing JAX-RPC based services.</description>
			<location chapter = "3" section = "R08"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:28</id>
			<description>The use of WSDL based service description supports export of JAX-RPC services across heterogeneous environments and is required for interoperability.</description>
			<location chapter = "3" section = "R09"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:29</id>
			<description>The use of WSDL based service description supports import of JAX-RPC services across heterogeneous environments and is required for interoperability.</description>
			<location chapter = "3" section = "R09"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:30</id>
			<description>A JAX-RPC implementation is not required to support a round-trip mapping between the Java and WSDL based representations of a JAX-RPC service.</description>
			<location chapter = "3" section = "R09"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:600</id>
			<description>The JAX-RPC specification considers service registration and discovery as out of scope.</description>
			<location chapter = "3" section = "R10"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:601</id>
			<description>The JAX-RPC specification does not require the use of JAXB.</description>
			<location chapter = "3" section = "R11"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:31</id>
			<description>A service client invokes a remote method on a target service endpoint and receives a return value or an exception. The return may be a void type.</description>
			<location chapter = "3" section = "R012"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:8</id>
			<description>The JAX-RPC APIs and service client programming model support synchronous request-response mode through the stub based model.</description>
			<location chapter = "3" section = "R012"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:9</id>
			<description>The JAX-RPC APIs and service client programming model support synchronous request-response mode through the dynamic proxy based model.</description>
			<location chapter = "3" section = "R012"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:10</id>
			<description>The JAX-RPC APIs and service client programming model support synchronous request-response mode through the DII Call interface.</description>
			<location chapter = "3" section = "R012"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:33</id>
			<description>The JAX-RPC specification supports the one-way interaction mode through the DII Call interface.</description>
			<location chapter = "3" section = "R012"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:36</id>
			<description>A JAX-RPC implementation is not required to support the non-blocking RPC interaction mode.</description>
			<location chapter = "3" section = "R012"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:37</id>
			<description>The JAX-RPC specification defines the SOAP protocol binding specific APIs in the javax.xml.rpc.soap package. This package uses the Java APIs defined in the javax.xml.soap package.</description>
			<location chapter = "3" section = "R013"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:40</id>
			<description>A remote method call or response may carry context information (termed as service context). The JAX-RPC specification does not specify the semantic content of the service contexts.</description>
			<location chapter = "3" section = "R015"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:41</id>
			<description>The JAX-RPC specification provides support for SOAP message with attachments as the underlying protocol.</description>
			<location chapter = "3" section = "R016"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:42</id>
			<description>A remote method call may include MIME encoded content as a parameter or return type.</description>
			<location chapter = "3" section = "R016"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:44</id>
			<description>A SOAP message handler gets access to the SOAP message that represents either an RPC request or response.</description>
			<location chapter = "3" section = "R017"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:45</id>
			<description>Other types of handlers (for example; stream based handlers, post-binding typed handlers) may also be developed for an implementation of a JAX-RPC runtime system.</description>
			<location chapter = "3" section = "R017"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:49</id>
			<description>To achieve portability, the JAX-RPC specification does not require portable stubs and skeletons. The stub/skeleton classes and other generated artifacts are generated by a deployment tool (provided by a J2EE container or a JAX-RPC implementation) during the deployment of a JAX-RPC service endpoint or a service client.</description>
			<location chapter = "3" section = "R019"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:50</id>
			<description>Support the mapping of XML datatypes to Java types</description>
			<location chapter = "4" section = ""/>
			<depends>
				<depend>52</depend>
				<depend>54</depend>
				<depend>55</depend>
				<depend>56</depend>
				<depend>57</depend>
				<depend>58</depend>
				<depend>59</depend>
				<depend>60</depend>
				<depend>61</depend>
				<depend>62</depend>
				<depend>63</depend>
				<depend>68</depend>
				<depend>69</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:51</id>
			<description>Any XML names that may be mapped to a reserved Java keyword must avoid any name collision.</description>
			<location chapter = "4" section = "1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:52</id>
			<description>The following specifies the Java mapping for the built-in simple XML data types.</description>
			<location chapter = "4" section = "2.1"/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.1</id>
					<description>Simple type xsd:string maps to the java type java.lang.String</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.2</id>
					<description>Simple type xsd:integer maps to the java type java.math.BigInteger</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.3</id>
					<description>Simple type xsd:int maps to the java type int</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.4</id>
					<description>Simple type xsd:long maps to the java type long</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.5</id>
					<description>Simple type xsd:short maps to the java type short</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.6</id>
					<description>Simple type xsd:decimal maps to the java type java.math.BigDecimal</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.7</id>
					<description>Simple type xsd:float maps to the java type float</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.8</id>
					<description>Simple type xsd:double maps to the java type double</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.9</id>
					<description>Simple type xsd:boolean maps to the java type boolean</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.10</id>
					<description>Simple type xsd:byte maps to the java type byte</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.11</id>
					<description>Simple type xsd:QName maps to the java type javax.xml.rpc.namespace.QName</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.12</id>
					<description>Simple type xsd:dateTime maps to the java type java.util.Calendar</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.13</id>
					<description>Simple type xsd:base64Binary maps to the java type byte[]</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.14</id>
					<description>Simple type xsd:hexBinary maps to the java type byte[]</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.15</id>
					<description>Simple type xsd:unsignedInt maps to the java type long</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.16</id>
					<description>Simple type xsd:unsignedShort maps to the java type int</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.17</id>
					<description>Simple type xsd:unsignedByte maps to the java type short</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.18</id>
					<description>Simple type xsd:date maps to the java type Calendar</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.19</id>
					<description>Simple type xsd:time maps to the java type Calendar</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.20</id>
					<description>Simple type xsd:anyURI maps to the java type java.net.URI</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:52.21</id>
					<description>Simple type xsd:anySimpleType maps to the java type String</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:53</id>
			<description>A JAX-RPC implementation is not required to support the xsd:anyType.</description>
			<location chapter = "4" section = "2.1"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:64</id>
			<description>Implementations are also required to support the additional data types defined in the XML Schema specification using one of the derivation mechanisms.</description>
			<location chapter = "4" section = "2.1"/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.1</id>
					<description>xsd:duration maps to java.lang.String</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.2</id>
					<description>xsd:gYearMonth maps to java.lang.String</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.3</id>
					<description>xsd:gYear maps to java.lang.String</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.4</id>
					<description>xsd:gMonthDay maps to java.lang.String</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.5</id>
					<description>xsd:gDay maps to java.lang.String</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.6</id>
					<description>xsd:gMonth maps to java.lang.String</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.7</id>
					<description>xsd:normalizedString maps to java.lang.String</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.8</id>
					<description>xsd:token maps to java.lang.String</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.9</id>
					<description>xsd:language maps to java.lang.String</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.10</id>
					<description>xsd:Name maps to java.lang.String</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.11</id>
					<description>xsd:NCName maps to java.lang.String</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.12</id>
					<description>xsd:ID maps to java.lang.String</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.13</id>
					<description>xsd:NMTOKEN maps to java.lang.String</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.14</id>
					<description>xsd:NMTOKENS maps to java.util.List</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.15</id>
					<description>xsd:nonPositiveInteger maps to java.math.BigInteger</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.16</id>
					<description>xsd:negativeInteger maps to java.math.BigInteger</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.17</id>
					<description>xsd:nonNegativeInteger maps to java.math.BigInteger</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.18</id>
					<description>xsd:unsignedLong maps to java.math.BigInteger</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:64.19</id>
					<description>xsd:positiveInteger maps to java.math.BigInteger</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:54</id>
			<description>An element declaration with nillable attribute set to true for a built-in simple XML data type is mapped to the corresponding Java class for the Java primitive type.</description>
			<location chapter = "4" section = "2.1"/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:54.1</id>
					<description>Simple type xsd:int maps to the java type java.lang.Integer</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:54.2</id>
					<description>Simple type xsd:long maps to the java type java.lang.Long</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:54.3</id>
					<description>Simple type xsd:short maps to the java type java.lang.Short</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:54.4</id>
					<description>Simple type xsd:float maps to the java type java.lang.Float</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:54.5</id>
					<description>Simple type xsd:double maps to the java type java.lang.Double</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:54.6</id>
					<description>Simple type xsd:boolean maps to the java type java.lang.Boolean</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:54.7</id>
					<description>Simple type xsd:byte maps to the java type java.lang.Byte</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:55</id>
			<description>A SOAP encoded simple XML type is mapped to the corresponding Java class for the Java primitive type..</description>
			<location chapter = "4" section = "2.1"/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:55.1</id>
					<description>Simple type soapenc:string maps to the java type java.lang.String</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:55.2</id>
					<description>Simple type soapenc:boolean maps to the java type java.lang.Boolean</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:55.3</id>
					<description>Simple type soapenc:float maps to the java type java.lang.Float</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:55.4</id>
					<description>Simple type soapenc:double maps to the java type java.lang.Double</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:55.5</id>
					<description>Simple type soapenc:decimal maps to the java type java.math.BigDecimal</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:55.6</id>
					<description>Simple type soapenc:int maps to the java type java.lang.Integer</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:55.7</id>
					<description>Simple type soapenc:short maps to the java type java.lang.Short</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:55.8</id>
					<description>Simple type soapenc:base64 maps to the java type java.lang.Byte[]</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:55.9</id>
					<description>Simple type soapenc:byte maps to the java type java.lang.Byte</description>
					<location chapter = "4" section = "2.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:56</id>
			<description>The JAX-RPC specification requires support for an array derived from the soapenc:Array by restriction using the wsdl:arrayType attribute.</description>
			<location chapter = "4" section = "2.2"/>
			<depends>
				<depend>52</depend>
				<depend>54</depend>
				<depend>55</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:57</id>
			<description>The JAX-RPC specification requires support for an array derived from soapenc:Array by restriction.</description>
			<location chapter = "4" section = "2.2"/>
			<depends>
				<depend>52</depend>
				<depend>54</depend>
				<depend>55</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:58</id>
			<description>The standard type mapping supports XML arrays with multiple dimensions.</description>
			<location chapter = "4" section = "2.2"/>
			<depends>
				<depend>56</depend>
				<depend>57</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:59</id>
			<description>The mapping of an XML struct using xsd:complexType with both sequence of elements for simple types.</description>
			<location chapter = "4" section = "2.3"/>
			<depends>
				<depend>52</depend>
				<depend>54</depend>
				<depend>55</depend>
				<depend>56</depend>
				<depend>57</depend>
				<depend>58</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:60</id>
			<description>The mapping of an XML struct using xsd:complexType with both sequence of elements for complex types.</description>
			<location chapter = "4" section = "2.3"/>
			<depends>
				<depend>52</depend>
				<depend>54</depend>
				<depend>55</depend>
				<depend>56</depend>
				<depend>57</depend>
				<depend>58</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:61</id>
			<description>The mapping of an XML struct using xsd:complexType with xsd:all based unordered grouping of elements for simple types.</description>
			<location chapter = "4" section = "2.3"/>
			<depends>
				<depend>52</depend>
				<depend>54</depend>
				<depend>55</depend>
				<depend>56</depend>
				<depend>57</depend>
				<depend>58</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:62</id>
			<description>The mapping of an XML struct using xsd:complexType with xsd:all based unordered grouping of elements for complex types.</description>
			<location chapter = "4" section = "2.3"/>
			<depends>
				<depend>52</depend>
				<depend>54</depend>
				<depend>55</depend>
				<depend>56</depend>
				<depend>57</depend>
				<depend>58</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:65</id>
			<description>The mapping of an XML struct using xsd:complexType with xsd:simpleContent used to declare a complex type by extension of an existing simple type.</description>
			<location chapter = "4" section = "2.3"/>
			<depends>
				<depend>52</depend>
				<depend>54</depend>
				<depend>55</depend>
				<depend>56</depend>
				<depend>57</depend>
				<depend>58</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:63</id>
			<description>In all cases; attribute uses specified using either the xsd:attribute or xsd:attributeGroup elements are suppor ted. An XML struct maps to a JavaBeans class with the same name as the type of the XML struct.  The mapped JavaBeans class provides both a getter/setter method for each property mapped from the member elements of the XML struct.  The identifier and Java type of a property in the JavaBeans class is mapped from the name and type of the corresponding member element in the XML struct.
The instances of the mapped JavaBeans class must be capable of marshaling to and from the corresponding XML struct representation.  An element in a complex type with the maxOccurs attribute set to a non-negative integer or unbounded is mapped to a Java array with a pair of setter and getter methods in the JavaBeans class. The Java type of the array is mapped from the type attribute of the XML element.</description>
			<location chapter = "4" section = "2.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:66</id>
			<description>The xml:any element can occur within complex type declarations to represent element wildcards. In this context, it will result in an additional property on the JavaBean corresponding to the containing complex type. This property will be called "any" and will have java.lang.Object as its type, unless the xml:any element has a maxOccurs attributye with a value greater than 1, in which case its type will be java.lang.Object[].</description>
			<location chapter = "4" section = "2.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:68</id>
			<description>Enumerations for all simple built-in types except for boolean, xsd:dateTime, xsd:QName, xsd:base64Binary, xsd:hexBinary.</description>
			<location chapter = "4" section = "2.4"/>
			<depends>
				<depend>52.1</depend>
				<depend>52.2</depend>
				<depend>52.3</depend>
				<depend>52.4</depend>
				<depend>52.5</depend>
				<depend>52.6</depend>
				<depend>52.7</depend>
				<depend>52.8</depend>
				<depend>52.10</depend>
				<depend>54</depend>
				<depend>55</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:69</id>
			<description>An XML enumeration is mapped to a Java class with the same name as the enumeration type. The mapped Java class declares a getValue method, two static data members per label, an integer conversion method and a constructor. All _label and label used in the mapped Java class (for XML enumeration) are required to be valid Java identifiers. If one or more enumerated values in an XML enumeration cannot map to valid Java identifiers, the mapped Java class is required to use Java identifiers value 1..N and _value 1..N for label and _label (as in the above mapping code snippet) respectively.</description>
			<location chapter = "4" section = "2.4"/>
			<depends>
				<depend>68</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:70</id>
			<description>Simple Types Derived By Restriction.</description>
			<location chapter = "4" section = "2.5"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:71</id>
			<description>Simple Types Derived Using xsd:list.</description>
			<location chapter = "4" section = "2.6"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:73</id>
			<description>A WSDL to Java mapping tool is required to support the configuration of the application specific package name during the mapping. The JAX-RPC requires that a namespace definition in a WSDL document must be mapped to a unique Java package name. The name of the mapped Java package must follow the package naming conventions defined in the Java Language Specification. QName based references in WSDL are mapped based on the Java package and name scoping conventions.</description>
			<location chapter = "4" section = "3.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:77</id>
			<description>A WSDL port type is mapped to a Java interface.  The name of the Java interface is mapped from the name attribute of the wsdl:portType element.  If the mapping to a service definition interface uses elements of the wsdl:binding, then the name of the service definition interface is mapped from the name of the wsdl:binding element.  Each method of the mapped Java interface is required to declare java.rmi.RemoteException in its throws clause.  A method may also throw service specific exceptions based on the mapping of a WSDL faults. A wsdl:operation defined in a wsdl:portType maps to a Java method on the mapped Java service definition interface.  A wsdl:operation is named by the name attribute. The WSDL 1.1 specification does not require that operation names be unique. To support overloading of operations, the wsdl:binding element indentifies correct operation by providing the name attributes of the corresponding wsdl:input and wsdl:output elements.  The JAX-RPC specification supports the mapping of operations with request-response transmission primitives.  The JAX-RPC specification supports the mapping of operations with one-way transmission primitives.  The standard Java mapping of operations defined with other transmission primitives (notification) is considered out of scope in the JAX-RPC specification.  The standard Java mapping of operations defined with other transmission primitives (solicit-response) is considered out of scope in the JAX-RPC specification.  The message parts in the wsdl:input and wsdl:output elements defined in an abstract WSDL operation are mapped to parameters on the corresponding Java method signature.  </description>
			<location chapter = "4" section = "3.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:78</id>
			<description>The parameterOrder attribute reflects the order of the parameters in the RPC signature.  The return value part is not present in the parameterOrder list.  If the parameterOrder attribute is specified, then all part names from the input message must be listed.  The part names from the output message may or may not be listed.  Listed part names appear first in the method signature in the order that they are listed in the parameterOrder attribute.  Unlisted part names appear following the listed part names in the order in which these parts appear in the message.  If an unlisted parameter is an inout parameter, then it appears in the order in which its corresponding part appears in the input message.  If there is a single unlisted output part, then it is the return type.  If there is a single unlisted output part, then it is the return type. Otherwise, the return type is void.  The return value is created as a copy and returned to the caller from a remote method invocation.  The return value is created as a copy and returned to the caller from a remote method invocation.  The out and inout parameters are passed by copy.  Parameter passing mode for out and inout parameters uses Holder classes.  The JAX-RPC specification includes Holder classes for the Java mapping of the simple XML data types (including xsd:base64Binary, xsd.hexBinary, soapenc:base64) The name of the Holder class is the name of the Java primitive type appended with the suffix Holder. The initial letter of the Java type name is capitalized. The name of the Holder class for a Java wrapper class (that wraps a primitve Java type) is derived by appending the suffix WrapperHolder to the name of the wrapper class. These holders are packaged in the javax.xml.rpc.Holders package</description>
			<location chapter = "4" section = "3.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:108</id>
			<description>A WSDL to Java mapping tool generates Holder classes for XML data types other than the simple XML data types.</description>
			<location chapter = "4" section = "3.5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:109</id>
			<description>For the complex XML data types, the name of the Holder class is constructed by appending Holder to the name of the corresponding Java class. These generated Holder classes are packaged as part of the generated sub package named holders in the WSDL to Java mapping.</description>
			<location chapter = "4" section = "3.5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:110</id>
			<description>A JAX-RPC implementation is required to support serialization and deserialization of the value contained in an Holder class.</description>
			<location chapter = "4" section = "3.5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:111</id>
			<description>The JAX-RPC specification maps a wsdl:fault to a java.rmi.RemoteException (or its subclass), service specific Java exception or a javax.xml.rpc.soap.SOAPFaultException.</description>
			<location chapter = "4" section = "3.6"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:113</id>
			<description>A wsdl:port element specifies an address for a service port (or endpoint) based on the specified protocol binding. A wsdl:port should have a unique name among all ports defined within an enclosing WSDL document.</description>
			<location chapter = "4" section = "3.8"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:115</id>
			<description>The JAX-RPC specification defines the mapping of a wsdl:service element to a service class. A service class acts as a factory for a Dynamic proxy for a service endpoint, Instance of type javax.xml.rpc.Call for dynamic invocation of a remote service endpoint, or instance of a generated stub class. A JAX-RPC implementation is required to provide the implementation class for the base javax.xml.rpc.Service interface.</description>
			<location chapter = "4" section = "3.9"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:124</id>
			<description>A WSDL to Java mapping tool is required to generate a service interface based on the mapping of a wsdl:service element in the WSDL document.  The name ServiceName of the generated service interface is mapped from the name attribute of the corresponding wsdl:service definition.  Required get Name_of_wsdl:port method that takes no parameters and returns an instance of the stub class that implements the ServiceDefInterface interface.  Optional get Name_of_wsdl:port methods that include parameters specific to the endpoint (or port) configuration.  All get Name_of_wsdl:port methods are required to throw the JAXRPCException.</description>
			<location chapter = "4" section = "3.11"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:130</id>
			<description>A WSDL to Java mapping tool is required to resolve any potential name collisions.</description>
			<location chapter = "4" section = "3.12"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:201</id>
			<description>Note that the JAX-RPC specification does not require support for a round trip mapping between WSDL and Java defintions.</description>
			<location chapter = "5" section = "0"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:202</id>
			<description>A JAX-RPC implementation must support transmission of the values of a JAX-RPC supported Java type between a service client and service endpoint at runtime.</description>
			<location chapter = "5" section = "1"/>
			<depends>
				<depend>203</depend>
				<depend>204</depend>
				<depend>205</depend>
				<depend>206</depend>
				<depend>215</depend>
				<depend>228</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:203</id>
			<description>The JAX-RPC specification supports the following Java primitive types and corresponding wrapper Java classes: boolean, byte, short, int, long, float, double</description>
			<location chapter = "5" section = "1.1"/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:203.1</id>
					<description>Supports boolean primitive type.</description>
					<location chapter = "5" section = "1.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:203.2</id>
					<description>Supports byte primitive type.</description>
					<location chapter = "5" section = "1.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:203.3</id>
					<description>Supports short primitive type.</description>
					<location chapter = "5" section = "1.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:203.4</id>
					<description>Supports int primitive type.</description>
					<location chapter = "5" section = "1.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:203.5</id>
					<description>Supports long primitive type.</description>
					<location chapter = "5" section = "1.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:203.6</id>
					<description>Supports float primitive type.</description>
					<location chapter = "5" section = "1.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:203.7</id>
					<description>Supports double primitive type.</description>
					<location chapter = "5" section = "1.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:203.8</id>
					<description>Supports Boolean primitive type.</description>
					<location chapter = "5" section = "1.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:203.9</id>
					<description>Supports Byte primitive type.</description>
					<location chapter = "5" section = "1.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:203.10</id>
					<description>Supports Short primitive type.</description>
					<location chapter = "5" section = "1.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:203.11</id>
					<description>Supports Integer primitive type.</description>
					<location chapter = "5" section = "1.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:203.12</id>
					<description>Supports Long primitive type.</description>
					<location chapter = "5" section = "1.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:203.13</id>
					<description>Supports Float primitive type.</description>
					<location chapter = "5" section = "1.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:203.14</id>
					<description>Supports Double primitive type.</description>
					<location chapter = "5" section = "1.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:204</id>
			<description>Supports a Java array with members of a supported JAX-RPC Java type. The JAX-RPC specification requires support for Java array of type java.lang.Object.</description>
			<location chapter = "5" section = "1.2"/>
			<depends>
				<depend>203</depend>
				<depend>206</depend>
				<depend>228</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:205</id>
			<description>Supports Multidimensional Java arrays with members of a supported JAX-RPC Java type. The JAX-RPC specification requires support for multi-dimensional Java array of type java.lang.Object.</description>
			<location chapter = "5" section = "1.2"/>
			<depends>
				<depend>204</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:206</id>
			<description>The following standard Java classes are supported by JAX-RPC: java.lang.String, java.util.Date, java.util.Calendar, java.math.BigInteger, java.math.BigDecimal</description>
			<location chapter = "5" section = "1.3"/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:206.1</id>
					<description>Supports java.lang.String</description>
					<location chapter = "5" section = "1.3"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:206.2</id>
					<description>Supports java.util.Date</description>
					<location chapter = "5" section = "1.3"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:206.3</id>
					<description>Supports java.util.Calendar</description>
					<location chapter = "5" section = "1.3"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:206.4</id>
					<description>Supports java.math.BigInteger</description>
					<location chapter = "5" section = "1.3"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:206.5</id>
					<description>Supports java.math.BigDecimal</description>
					<location chapter = "5" section = "1.3"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:206.6</id>
					<description>Supports java.xml.namespace.QName</description>
					<location chapter = "5" section = "1.3"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:206.7</id>
					<description>Supports java.net.URI</description>
					<location chapter = "5" section = "1.3"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:207</id>
			<description>Other standard Java classes are mapped using pluggable serializers and deserializers.</description>
			<location chapter = "5" section = "1.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:208</id>
			<description>Service definition interface extends java.rmi.remote directly or indirectly. All methods in the interface throw java.rmi.RemoteException.</description>
			<location chapter = "5" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:212</id>
			<description>Method parameters and return types must be the JAX-RPC supported Java types.</description>
			<location chapter = "5" section = "2"/>
			<depends>
				<depend>203</depend>
				<depend>204</depend>
				<depend>205</depend>
				<depend>206</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:213</id>
			<description>Holder classes may be used as method parameters.</description>
			<location chapter = "5" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:214</id>
			<description>Service definition interface must not include constant (as public final static) declarations.</description>
			<location chapter = "5" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:215</id>
			<description>A JAX-RPC service specific exception extends java.lang.Exception directly or indirectly. A JAX-RPC service specific exception must not be a RuntimeException.</description>
			<location chapter = "5" section = "2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:218</id>
			<description>A service defintion interface must not include a remote reference as either a parameter or a return type.</description>
			<location chapter = "5" section = "2.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:219</id>
			<description>A Java array or JAX-RPC value type must not include a remote reference as a contained element.</description>
			<location chapter = "5" section = "2.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:220</id>
			<description>JAX-RPC requires support for the pass by copy parameter passing mode for all parameters and return values.</description>
			<location chapter = "5" section = "2.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:221</id>
			<description>Support the standard mapping of the Java types to the XML data types.</description>
			<location chapter = "5" section = "3"/>
			<depends>
				<depend>222</depend>
				<depend>223</depend>
				<depend>224</depend>
				<depend>225</depend>
				<depend>226</depend>
				<depend>227</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:222</id>
			<description>Mapping of the Java Primitive Types</description>
			<location chapter = "5" section = "3.1"/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:222.1</id>
					<description>Mapping of boolean to XML xsd:boolean</description>
					<location chapter = "5" section = "3.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:222.2</id>
					<description>Mapping of byte to XML xsd:byte</description>
					<location chapter = "5" section = "3.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:222.3</id>
					<description>Mapping of short to XML xsd:short</description>
					<location chapter = "5" section = "3.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:222.4</id>
					<description>Mapping of int to XML xsd:int</description>
					<location chapter = "5" section = "3.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:222.5</id>
					<description>Mapping of long to XML xsd:long</description>
					<location chapter = "5" section = "3.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:222.6</id>
					<description>Mapping of float to XML xsd:float</description>
					<location chapter = "5" section = "3.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:222.7</id>
					<description>Mapping of double to XML xsd:double</description>
					<location chapter = "5" section = "3.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:222.8</id>
					<description>Mapping of java.lang.Boolean to XML xsd:boolean</description>
					<location chapter = "5" section = "3.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:222.9</id>
					<description>Mapping of java.lang.Byte to XML xsd:byte</description>
					<location chapter = "5" section = "3.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:222.10</id>
					<description>Mapping of java.lang.Short to XML xsd:short</description>
					<location chapter = "5" section = "3.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:222.11</id>
					<description>Mapping of java.lang.Integer to XML xsd:int</description>
					<location chapter = "5" section = "3.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:222.12</id>
					<description>Mapping of java.lang.Long to XML xsd:long</description>
					<location chapter = "5" section = "3.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:222.13</id>
					<description>Mapping of java.lang.Float to XML xsd:float</description>
					<location chapter = "5" section = "3.1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:222.14</id>
					<description>Mapping of java.lang.Double to XML xsd:double</description>
					<location chapter = "5" section = "3.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:223</id>
			<description>Mapping of Standard Java Classes</description>
			<location chapter = "5" section = "3.2"/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:223.1</id>
					<description>Mapping of java.lang.String to XML xsd:string</description>
					<location chapter = "5" section = "3.2"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:223.2</id>
					<description>Mapping of java.math.BigInteger to XML xsd:integer</description>
					<location chapter = "5" section = "3.2"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:223.3</id>
					<description>Mapping of java.math.BigDecimal to XML xsd:decimal</description>
					<location chapter = "5" section = "3.2"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:223.4</id>
					<description>Mapping of java.util.Calendar to XML xsd:dateTime</description>
					<location chapter = "5" section = "3.2"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:223.5</id>
					<description>Mapping of java.util.Date to XML xsd:dateTime</description>
					<location chapter = "5" section = "3.2"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:223.6</id>
					<description>Mapping of java.xml.namespace.QName to XML xsd:QName</description>
					<location chapter = "5" section = "3.2"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:223.7</id>
					<description>Mapping of java.net.URI to XML xsd:anyURI</description>
					<location chapter = "5" section = "3.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:224</id>
			<description>A byte[] is mapped to the xsd:base64Binary</description>
			<location chapter = "5" section = "3.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:225</id>
			<description>Maps a Java array to and XML array of one of the following types:</description>
			<location chapter = "5" section = "3.4"/>
			<sub-assertions>
				<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:225.1</id>
					<description>Array derived from the soapenc:Array using the wsd:arrayType attribute for restriction.</description>
					<location chapter = "5" section = "3.4"/>
				</assertion>
				<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:225.2</id>
					<description>Array with the soapenc:arrayType in the schema instance as specified in the SOAP 1.1 encoding.</description>
					<location chapter = "5" section = "3.4"/>
				</assertion>
				<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:225.3</id>
					<description>Array derived from soapenc:Array restriction as specific in the SOAP 1.1 specification.</description>
					<location chapter = "5" section = "3.4"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:226</id>
			<description>Requires support for the mapping of the multi-dimensional Java arrays.</description>
			<location chapter = "5" section = "3.4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:227</id>
			<description>The member type of a Java array must be a JAX-RPC supported Java type as defined in the section 5.1.</description>
			<location chapter = "5" section = "3.4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:228</id>
			<description>A JAX-RPC Value type is a Java class whose value can be moved between a serivce client and service endpoint.  Java class must have a public default constructor.  Java class must not implement directly the java.rmi.Remote interface.  Java class must not implement indirectly the java.rmi.Remote interface.  Java class may implement any Java interface (except the java.rmi.Remote interface).  Java class may extend another Java class.  Java class may contain public, private, protected, package-level fields.  Java type of a public field must be a supported JAX-RPC type as specified in section 5.1.  Java class may contain methods.  Java class may contain static or transient fields.  Java class for a JAX-RPC value type may be designed as a JavaBeans class.  The Java type of a bean property must be a supported JAX-RPC type as specified in section 5.1.</description>
			<location chapter = "5" section = "4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:240</id>
			<description>A JAX-RPC value type is mapped to an xsd:complexType with the xsd:all based unordered grouping of elements.  The name attribute of the xsd:complexType is mapped from the name of the Java class for the JAX-RPC value type.  Each public no-transient field in the Java class is mapped to an element in the xsd:complexType.  The name and type attributes of the mapped element are mapped from the name and Java type of the public field.  The type attribute is derived from the Java type of the public field using the type mapping rules in the section 5.3.  Inheritance of the Java cleasses is mapped using the derivation of xsd:complexType types using the extension mechanism.  The only fields that are mapped are the non-transient public fields.  No methods are mapped.  There is no mapping defined for indexed properties as reported by the JavaBeans introspection.  There is no mapping defined for the case when a JavaBean property has the same name as a public field.</description>
			<location chapter = "5" section = "4.1"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:250</id>
			<description>Pluggable serializers and deserializers may be used to support an advanced custom form of mapping for the JAX-RPC value types.</description>
			<location chapter = "5" section = "4.1"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:251</id>
			<description>A JAX-RPC value type may be designed to be a valid RMI-IIOP value type.  Public fields in the Java class must be non-transient.  Each non-public, non-transient field must exactly represent a JavaBeans property, and vice-versa.  Each non-public field that does not exactly represent a JavaBeans property must be marked transient.  </description>
			<location chapter = "5" section = "4.2"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:253</id>
			<description>A JAX-RPC implementation may provide pluggable serializers the serializes a JAX-RPC value type based on the standard Java serialization semantics and representation.</description>
			<location chapter = "5" section = "4.2"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:254</id>
			<description>The standard deployment descriptor for a JAX-RPC service definition and service reference includes the specification of pluggable serializers and deserializers. Refer to the type-mapping element.</description>
			<location chapter = "5" section = "4.3"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:255</id>
			<description>For serialization semantics different from the default XML/SOAP serialization semantics, the developer is required to specify the use of the pluggable serializer for the JAX-RPC value type in the deployment descriptor for the service definiton.</description>
			<location chapter = "5" section = "4.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:256</id>
			<description>If the developer does not specify the use of pluggable serializer for a JAX-RPC value type in the deployment descriptor, then a JAX-RPC implementation is required to assume that the developer wants the use of the default XML/SOAP serialization semantics.</description>
			<location chapter = "5" section = "4.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:258</id>
			<description>A Java identifier is mapped to an equivalent XML name.</description>
			<location chapter = "5" section = "5.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:259</id>
			<description>A Java package is mapped to a WSDL document.</description>
			<location chapter = "5" section = "5.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:260</id>
			<description>The JAX-RPC specification requires the namespace definitions in the WSDL document to be mapped in an application specific manner. A Java to WSDL mapping tool is required to support the configuration of the namespace definitions in the mapped WSDL document.</description>
			<location chapter = "5" section = "5.2"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:261</id>
			<description>The Java to WSDL mappng specification does not require any specific authoring style for the mapped WSDL document.</description>
			<location chapter = "5" section = "5.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:262</id>
			<description>A service definition interface (that extends java.rmi.Remote) is mapped to the wsdl:portType element.</description>
			<location chapter = "5" section = "5.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:263</id>
			<description>The name attribute of the wsdl:portType has the same name as the service definiton interface.</description>
			<location chapter = "5" section = "5.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:264</id>
			<description>Each Java interface in the service definition heirarchy is mapped to an equivalent wsdl:portType definition.</description>
			<location chapter = "5" section = "5.4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:265</id>
			<description>Each mapped wsdl:portType definiton includes mapping of the complete set of inherited Java methods.</description>
			<location chapter = "5" section = "5.4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:266</id>
			<description>Each method on a Java service definition interface is mapped to an equivalent wsdl:operation definition.</description>
			<location chapter = "5" section = "5.5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:267</id>
			<description>The mapped wsdl:operation definition preserves the method signature in terms of the parameter ordering.</description>
			<location chapter = "5" section = "5.5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:268</id>
			<description>Standard mapping of Java method to a wsdl:operation</description>
			<location chapter = "5" section = "5.5"/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:268.1</id>
					<description>The name attribute of the mapped wsdl:operation is the same as the name of the Java method.</description>
					<location chapter = "5" section = "5.5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:268.2</id>
					<description>Overloaded Java methods are mapped to multiple wsdl:operation elements. These mapped wsdl:operation elements are named same (as the name of the overloaded Java methods) or with unique names depending on the mechanism that is used by server-side JAXRPC runtime system to dispatch methods to the target service endpoint.</description>
					<location chapter = "5" section = "5.5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:268.3</id>
					<description>A mapped wsdl:operation contains wsdl:input, wsdl:output and an optional wsdl:fault based on the mapping of the Java method signature.</description>
					<location chapter = "5" section = "5.5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:268.4</id>
					<description>Each Java parameter is mapped to a message part in the corresponding wsdl:message element. Each message part has a name attribute that is mapped based on the name of the Java parameter and a type attribute mapped from the Java type of the parameter. Message parts appear in the same order as in the Java method signature.</description>
					<location chapter = "5" section = "5.5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:268.5</id>
					<description>A Java return type is mapped to a message part in the wsdl:message. This wsdl:message corresponds to the wsdl:output element for the mapped wsdl:operation.</description>
					<location chapter = "5" section = "5.5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:268.6</id>
					<description>For Holder classes used as method parameters, a Java to WSDL mapping tools is required to provide a facility for specifying the related mapping metadata.</description>
					<location chapter = "5" section = "5.5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:268.7</id>
					<description>Ordering of the Java parameters is represented in the parameterOrder attribute in the wsdl:operation element.</description>
					<location chapter = "5" section = "5.5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:268.8</id>
					<description>The message part for a return value is not listed in the parameterOrder attribute.</description>
					<location chapter = "5" section = "5.5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:268.9</id>
					<description>Each service specific Java exception in a remote method signature is mapped to a wsdl:fault element.</description>
					<location chapter = "5" section = "5.5"/>
				</assertion>
				<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:268.10</id>
					<description>The name attribute of the wsdl:fault element is based on the name of the Java exception.</description>
					<location chapter = "5" section = "5.5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:268.11</id>
					<description>The message attribute is the qualified name of the wsdl:message definition.</description>
					<location chapter = "5" section = "5.5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:268.12</id>
					<description>A remote exception is mapped to a standard wsdl:fault.</description>
					<location chapter = "5" section = "5.5"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:279</id>
			<description>JAX-RPC requires support for operation with the rpc style and encoded use.</description>
			<location chapter = "6" section = "1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:280</id>
			<description>JAX-RPC requires support for operation with the document style and literal use.</description>
			<location chapter = "6" section = "1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:281</id>
			<description>JAX-RPC requires support for operation with the document style and encoded use.</description>
			<location chapter = "6" section = "1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:269</id>
			<description>JAX-RPC requires support for operation with the rpc style and literal use.</description>
			<location chapter = "6" section = "1"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:282</id>
			<description>A JAX-RPC implementation may choose to support the additional operation mode of the document/encoded.</description>
			<location chapter = "6" section = "1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:283</id>
			<description>In JAX-RPC programming model, rpc style operations are mapped to the corresponding remote methods on a service definition interface.</description>
			<location chapter = "6" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:284</id>
			<description>In JAX-RPC programming model, document style operations are mapped to the corresponding remote methods on a service definition interface.</description>
			<location chapter = "6" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:285</id>
			<description>The JAX-RPC specification requires support for both rpc and document style operations. The WSDL 1.1 specification does not require a wrapper element for the document style operations and assumes the use of SOAPAction. The JAX-RPC specification requires that the above requirements based on operation style should be hidden from the JAX-RPC programming model. A JAX-RPC implementation should take the responsiblity for the appropriate representation of a SOAP message based on the operation style.</description>
			<location chapter = "6" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:294</id>
			<description>The JAX-RPC specification requires support for rpc style operations with the encoded use.</description>
			<location chapter = "6" section = "4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:295</id>
			<description>The JAX-RPC specification requires support for rpc and document style operations with the literal use.</description>
			<location chapter = "6" section = "4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:296</id>
			<description>When mapping document style operations JAX-RPC implementations are required to support the regular mapping.</description>
			<location chapter = "6" section = "4.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:300</id>
			<description>When mapping document style operations JAX-RPC implementations are required to support the so-called wrapper style.</description>
			<location chapter = "6" section = "4.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:297</id>
			<description>If there is no standard Java mapping for an XML schema type, a message part with literal representation is considered and mapped as a document fragment. The XML to Java mapping uses the interface javax.xml.soap.SOAPElement to represent a literal message part in the Java mapping of a wsdl:operation.</description>
			<location chapter = "6" section = "4.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:298</id>
			<description>Java Mapping of the SOAP faults.</description>
			<location chapter = "6" section = "5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:303</id>
			<description>A JAX-RPC implementation is required to support SOAP Headerfaults with literal use.</description>
			<location chapter = "6" section = "6"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:304</id>
			<description>A JAX-RPC implementation must use the SOAP message with attachments protocol to support MIME encoded parameters or return value in a remote method call.</description>
			<location chapter = "7" section = "1"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:305</id>
			<description>A remote method in a Java service definition interface may use Java classes based on the standard Java mapping of MIME types to represent MIME encoded content.</description>
			<location chapter = "7" section = "2"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:306</id>
			<description>A remote method in a Java service definition interface may use Java class javax.activation.DataHandler for content with any MIME type.</description>
			<location chapter = "7" section = "2"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:307</id>
			<description>A JAX-RPC implementation should determine the MIME type of a MIME part by using the MIME type defined in the mime:content element for this MIME part in the WSDL MIME binding.</description>
			<location chapter = "7" section = "3"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:308</id>
			<description>A JAX-RPC implementation should determine the MIME type of a MIME part by using the Content-Type of the MIME part in the SOAP message package.</description>
			<location chapter = "7" section = "3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:309</id>
			<description>A JAX-RPC implementation must support MIME binding based mapping between Java and WSDL for RPC calls with MIME encoded content.</description>
			<location chapter = "7" section = "4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:310</id>
			<description>A JAX-RPC implementation must provide support for the following MIME types and mapping as follows: (image/gif, java.awt.Image), (image/jpeg, java.awt.Image), (text/plain, java.lang.String), (mutipart/*, jakarta.mail.internet.MimeMultiPart), (text/xml or application/xml, javax.xml.transform.Source). A XML to Java mapping tools is required to provide an option to map the above set of MIME types to the javax.activation.DataHandler class.</description>
			<location chapter = "7" section = "5"/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:310.1</id>
					<description>Mapping of MIME type image/gif to Java Type java.awt.Image.</description>
					<location chapter = "7" section = "5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:310.2</id>
					<description>Mapping of MIME type image/jpeg to Java Type java.awt.Image.</description>
					<location chapter = "7" section = "5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:310.3</id>
					<description>Mapping of MIME type text/plain to Java Type java.lang.String.</description>
					<location chapter = "7" section = "5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:310.4</id>
					<description>Mapping of MIME type multipart/* to Java Type jakarta.mail.internet.MimeMultipart.</description>
					<location chapter = "7" section = "5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:310.5</id>
					<description>Mapping of MIME type text/xml to Java Type javax.xml.Transform.Source.</description>
					<location chapter = "7" section = "5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:310.6</id>
					<description>Mapping of MIME type application/xml to Java Type javax.xml.Transform.Source.</description>
					<location chapter = "7" section = "5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:310.7</id>
					<description>Mapping of MIME type image/gif to Java Type javax.activation.DataHandler.</description>
					<location chapter = "7" section = "5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:310.8</id>
					<description>Mapping of MIME type image/jpeg to Java Type javax.activation.DataHandler.</description>
					<location chapter = "7" section = "5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:310.9</id>
					<description>Mapping of MIME type text/plain to Java Type javax.activation.DataHandler.</description>
					<location chapter = "7" section = "5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:310.10</id>
					<description>Mapping of MIME type multipart/* to Java Type javax.activation.DataHandler.</description>
					<location chapter = "7" section = "5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:310.11</id>
					<description>Mapping of MIME type text/xml to Java Type javax.activation.DataHandler.</description>
					<location chapter = "7" section = "5"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:310.12</id>
					<description>Mapping of MIME type application/xml to Java Type javax.activation.DataHandler</description>
					<location chapter = "7" section = "5"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:311</id>
			<description>The Java mapping of the additional MIME types is out of scope for the JAX-RPC version.</description>
			<location chapter = "7" section = "5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:312</id>
			<description>A JAX-RPC implementation is required to implement the Stub interface.</description>
			<location chapter = "8" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:313</id>
			<description>A JAX-RPC implementation is required to implement the Call interface for Dynamic Invocation.</description>
			<location chapter = "8" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:314</id>
			<description>A JAX-RPC implementation is required to implement the Service interface.</description>
			<location chapter = "8" section = "2"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:315</id>
			<description>A JAX-RPC implementation is required to implement the ServiceFactory interface.</description>
			<location chapter = "8" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:316</id>
			<description>A JAX-RPC implementation is required to implement the JAXRPCException class.</description>
			<location chapter = "8" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:317</id>
			<description>A WSDL to Java mapping tool generates a stub class during the import of a service described in a WSDL document.</description>
			<location chapter = "8" section = "2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:472</id>
			<description>The JAX-RPC specification does not require that a stub class be generated only through the mapping of a WSDL document.</description>
			<location chapter = "8" section = "2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:314</id>
			<description>All generated stub classes are required to implement the javax.xml.rpc.Stub interface..</description>
			<location chapter = "8" section = "2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:315</id>
			<description>A generated stub class is required to implement a service definition interface.</description>
			<location chapter = "8" section = "2.1"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:316</id>
			<description>The name of a generated stub class is either BindingName_Stub or is implementation specific.</description>
			<location chapter = "8" section = "2.1"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:317</id>
			<description>A stub class should be bound to a specific protocol and transport</description>
			<location chapter = "8" section = "2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:318</id>
			<description>A stub instance must be configured such that a service client can use this stub instance to invoke a remote method on the target service endpoint..</description>
			<location chapter = "8" section = "2.2"/>
			<sub-assertions>
				<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:318.1</id>
					<description>A stub instance may be configured in a static configuration based on the WSDL description of a target service endpoint.</description>
					<location chapter = "8" section = "2.2"/>
				</assertion>
				<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:318.2</id>
					<description>A stub instance may be configured in a Dynamic runtime configuration using the javax.xml.rpc.Stub API.</description>
					<location chapter = "8" section = "2.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:322</id>
			<description>The JAX-RPC specification requires support for the dynamic proxy for invoking a service endpoint.</description>
			<location chapter = "8" section = "2.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:326</id>
			<description>A client side JAX-RPC implementation is required to implement the Call interface.</description>
			<location chapter = "8" section = "2.4"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:333</id>
			<description>A client-side JAX-RPC runtime system is required to provide implementation of the abstract ServiceFactory class.</description>
			<location chapter = "8" section = "2.5"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:334</id>
			<description>A J2SE based service client may use the JNDI naming context to lookup a service instance.</description>
			<location chapter = "8" section = "2.5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:335</id>
			<description>The javax.xml.rpc.JAXRPCException is thrown from the core APIs to indicate exceptions related to the JAX-RPC runtime mechanisms.</description>
			<location chapter = "8" section = "2.6"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:336</id>
			<description>A JAXRPCException is mapped to a java.rmi.RemoteException if the former is thrown during the processing of a remote method invocation.</description>
			<location chapter = "8" section = "2.6"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:337</id>
			<description>A J2SE based service client uses one of the following approaches for the invocation of a JAX-RPC service endpoint.</description>
			<location chapter = "9" section = "3"/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:337.1</id>
					<description>The service client uses the generated stub classes.</description>
					<location chapter = "9" section = "3"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:337.1</id>
					<description>The service client uses the javax.xml.rpc.Service interface to create a dynamic proxy for the target service endpoint.</description>
					<location chapter = "9" section = "3"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:337.3</id>
					<description>The service client uses the javax.xml.rpc.Service interface to create a Call object.</description>
					<location chapter = "9" section = "3"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:340</id>
			<description>The service developer develops a service endpoint class using the following programming model.</description>
			<location chapter = "10" section = "1.1"/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:340.1</id>
					<description>The service endpoint class is required to implement a service definition interface.</description>
					<location chapter = "10" section = "1.1"/>
				</assertion>
				<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:340.2</id>
					<description>The service endpoint class may implement the ServiceLifecycle interface.</description>
					<location chapter = "10" section = "1.1"/>
				</assertion>
				<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:340.3</id>
					<description>The service endpoint class may use the javax.servlet.ServletContext interface.</description>
					<location chapter = "10" section = "1.1"/>
				</assertion>
				<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:340.4</id>
					<description>The service endpoint class may obtain references to resources and enterprise beans by using JNDI to lookup these resources.</description>
					<location chapter = "10" section = "1.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:374</id>
			<description>The JAX-RPC specification does not specify the semantic content of the service context.</description>
			<location chapter = "11" section = "1"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:375</id>
			<description>The JAX-RPC specification classifies service context programming model implicitly and explicitly.</description>
			<location chapter = "11" section = "2"/>
			<sub-assertions>
				<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:375.1</id>
					<description>Implicit Service Context is managed and propagated implicitly via generated stubs or client and server side JAX-RPC runtime system.</description>
					<location chapter = "11" section = "2.1"/>
				</assertion>
				<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:375.2</id>
					<description>Explicit Service Context is represented in the form of additional parmameters appended following the service endpoint defined parameters in the remote method signature.</description>
					<location chapter = "11" section = "2.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:400</id>
			<description>A JAX-RPC handler is required to implement the javax.xml.rpc.handler.Handler interface.</description>
			<location chapter = "12" section = "1.1"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:401</id>
			<description>The JAX-RPC handlers may be provided either bundled with a JAX-RPC implementation or may be developed by service developers.</description>
			<location chapter = "12" section = "1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:402</id>
			<description>An implementation class for the Handler interface is required to provide a default constructor.</description>
			<location chapter = "12" section = "1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:403</id>
			<description>A SOAP message handler class is required to implement the javax.xml.rpc.handler.Handle interface.</description>
			<location chapter = "12" section = "1.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:404</id>
			<description>A JAX-RPC implementation is required to provide implementation class (or classes) for the HandlerChain interface.</description>
			<location chapter = "12" section = "1.3"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:405</id>
			<description>A MessageContext implementation class should support the property name javax.xml.rpc.context.environment where value "client" indicates that MessageContext is for a client-side handler chain.</description>
			<location chapter = "12" section = "1.4"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:406</id>
			<description>A MessageContext implementation class should support the property name javax.xml.rpc.context.environment where value "servier" indicates that MessageContext is for a server-side handler chain.</description>
			<location chapter = "12" section = "1.4"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:407</id>
			<description>A MessageContext implementation class should support the property name javax.xml.rpc.context.direction where value "request" indicates that MessageContext carries the request message.</description>
			<location chapter = "12" section = "1.4"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:408</id>
			<description>A MessageContext implementation class should support the property name javax.xml.rpc.context.direction where value "response" indicates that MessageContext carries the response message.</description>
			<location chapter = "12" section = "1.4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:409</id>
			<description>The interface SOAPMessageContext provides access to the SOAP message for RPC request.</description>
			<location chapter = "12" section = "1.5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:410</id>
			<description>The interface SOAPMessageContext provides access to the SOAP message for RPC response.</description>
			<location chapter = "12" section = "1.5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:411</id>
			<description>The JAX-RPC specification requires that SOAP message handlers must be configured per service endpoint.</description>
			<location chapter = "12" section = "2"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:412</id>
			<description>A handler may be configured and chained on the service client side, before an RPC request is communicated to the target service endpoint.</description>
			<location chapter = "12" section = "2"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:413</id>
			<description>A handler may be configured and chained on the server side, before an RPC request is dispatched to the target service endpoint.</description>
			<location chapter = "12" section = "2"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:414</id>
			<description>A handler may be configured and chained on the server side, before an RPC response is communicated to the service client from the target service endpoint.</description>
			<location chapter = "12" section = "2"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:415</id>
			<description>A handler may be configured and chained on the service client side, before an RPC response is returned to the service client form the target service endpoint.</description>
			<location chapter = "12" section = "2"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:416</id>
			<description>On the service client side, a developer performs the programmatic configuration of handlers using the javax.xml.rpc.handler.HandlerRegistry interface.</description>
			<location chapter = "12" section = "2.1"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:417</id>
			<description>A JAX-RPC implementation is required to provide implementation class for the HandlerRegistry interface.</description>
			<location chapter = "12" section = "2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:418</id>
			<description>Client side JAX-RPC runtime system is required to invoke the request handler chain before an RPC request is communicated to the target service endpoint.</description>
			<location chapter = "12" section = "2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:419</id>
			<description>Client side JAX-RPC runtime system is required to invoke the response handler chain before an RPC response is returned to the service client method invocation code from the target service endpoint.</description>
			<location chapter = "12" section = "2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:420</id>
			<description>A SOAP message handler is required to process a SOAP message and generate SOAP faults based on the processing model specified in te SOAP specification.</description>
			<location chapter = "12" section = "3"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:421</id>
			<description>The handle method may generate a single SOAP MustUnderstand fault.</description>
			<location chapter = "12" section = "3"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:422</id>
			<description>The handle method may generate a SOAP fault.</description>
			<location chapter = "12" section = "3"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:423</id>
			<description>The handle method may throw JAXRPCException for any handler specific error condition.</description>
			<location chapter = "12" section = "3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:424</id>
			<description>A SOAP message handler is required to be implemented as a stateless instance.</description>
			<location chapter = "12" section = "4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:425</id>
			<description>A SOAP message handler is required to implement the lifecycle method (init) of the javax.xml.rpc.handler.Handler interface.</description>
			<location chapter = "12" section = "4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:426</id>
			<description>A SOAP message handler is required to implement the lifecycle method (destroy) of the javax.xml.rpc.handler.Handler interface.</description>
			<location chapter = "12" section = "4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:427</id>
			<description>The JAX-RPC specification requires that a service client be able to authenticate to the service endpoint.</description>
			<location chapter = "13" section = "1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:428</id>
			<description>The JAX-RPC specification requires support for HTTP Basic Authentication for protocol bindings over the HTTP transport. The HTTP Basic Authentication uses username and password for authenticating a service client.</description>
			<location chapter = "13" section = "1.1"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:429</id>
			<description>The JAX-RPC specification does not require support for the certificate based mutual authentication using HTTP/S mechanism.</description>
			<location chapter = "13" section = "1.2"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:430</id>
			<description>The JAX-RPC specification does not require support for the SOAP Security Extensions for digital signature.</description>
			<location chapter = "13" section = "1.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:431</id>
			<description>The JAX-RPC specification requires that a service client be able to participate in a session with a service endpoint. A service client uses the javax.xml.rpc.htt.session.maintain property to indicate whether of not it wants to participate in a session with a service endpoint.</description>
			<location chapter = "13" section = "2"/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:431.1</id>
					<description>Participate in session with property set to true for javax.xml.rpc.http.session.maintain.</description>
					<location chapter = "13" section = "2"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:431.2</id>
					<description>Do not participate in session with property set to false for javax.xml.rpc.http.session.maintain.</description>
					<location chapter = "13" section = "2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:432</id>
			<description>A JAX-RPC runtime system may use Cookie based mechansim for session management.</description>
			<location chapter = "13" section = "2"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:433</id>
			<description>A JAX-RPC runtime system may use URL rewriting mechansim for session management.</description>
			<location chapter = "13" section = "2"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:434</id>
			<description>A JAX-RPC runtime system may use SSL session mechansim for session management.</description>
			<location chapter = "13" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:435</id>
			<description>A JAX-RPC implementation (Service Client Environment) based on J2EE compatible container interoperates with a JAX-RPC implementation (Service Provider Environment) based on J2EE compatible container </description>
			<location chapter = "14" section = "1"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:436</id>
			<description>A JAX-RPC implementation (Service Client Environment) based on J2SE interoperates with a JAX-RPC implementation (Service Provider Environment) based on J2EE compatible container </description>
			<location chapter = "14" section = "1"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:437</id>
			<description>A JAX-RPC implementation (Service Client Environment) based on J2EE compatible container interoperates with a JAX-RPC implementation (Service Provider Environment) based on J2SE </description>
			<location chapter = "14" section = "1"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:438</id>
			<description>A JAX-RPC implementation (Service Client Environment) based on J2SE interoperates with a JAX-RPC implementation (Service Provider Environment) based on J2SE </description>
			<location chapter = "14" section = "1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:439</id>
			<description>An interoperable JAX-RPC implementation must be able to support SOAP 1.1 with attachments [6] as the underlying protocol.</description>
			<location chapter = "14" section = "3.1"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:440</id>
			<description>The JAX-RPC specification does not specify interoperability requirements for any protocol other than the SOAP 1.1 with attachments. However, the JAX-RPC specification allows a JAX-RPC implementation to  support protocol bindings other than SOAP.</description>
			<location chapter = "14" section = "3.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:441</id>
			<description> A JAX-RPC implementation is required to support the SOAP 1.1 encoding representation in a remote request/response SOAP message.</description>
			<location chapter = "14" section = "3.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:443</id>
			<description>The XML Schema data types and Java types that an interoperable JAX-RPC implementation is required to support.</description>
			<location chapter = "14" section = "3.2"/>
			<depends>
				<depend>8</depend>
				<depend>9</depend>
				<depend>10</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:444</id>
			<description>An interoperable JAX-RPC implementation is required to support the standard type mapping between XML data and Java types.</description>
			<location chapter = "14" section = "3.2"/>
			<depends>
				<depend>52</depend>
				<depend>54</depend>
				<depend>55</depend>
				<depend>56</depend>
				<depend>57</depend>
				<depend>58</depend>
				<depend>59</depend>
				<depend>60</depend>
				<depend>61</depend>
				<depend>62</depend>
				<depend>63</depend>
				<depend>68</depend>
				<depend>69</depend>
				<depend>221</depend>
				<depend>222</depend>
				<depend>223</depend>
				<depend>224</depend>
				<depend>225</depend>
				<depend>226</depend>
				<depend>227</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:445</id>
			<description>An interoperable JAX-RPC implementation must be able to support HTTP 1.1 as the underlying transport.</description>
			<location chapter = "14" section = "3.3"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:446</id>
			<description>The interoperability requirements for any other transport are outside the scope of the JAX-RPC specification.</description>
			<location chapter = "14" section = "3.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:447</id>
			<description>For each deployed JAX-RPC service endpoint, an interoperable JAX-RPC implementation must be able to export an equivalent WSDL 1.1 based service description.</description>
			<location chapter = "14" section = "3.4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:448</id>
			<description>An exported WSDL based service description must not include any vendor specific extensibility elements.</description>
			<location chapter = "14" section = "3.4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:449</id>
			<description>An interoperable JAX-RPC implementation must be capable of importing a WSDL 1.1 based service description.</description>
			<location chapter = "14" section = "3.4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:450</id>
			<description>The mapping of an imported WSDL service description to the equivalent Java representation is required to follow the standard WSDL to Java mapping specified in this specification</description>
			<location chapter = "14" section = "3.4"/>
			<depends>
				<depend>73</depend>
				<depend>77</depend>
				<depend>108</depend>
				<depend>110</depend>
				<depend>111</depend>
				<depend>115</depend>
				<depend>116</depend>
				<depend>117</depend>
				<depend>119</depend>
				<depend>120</depend>
				<depend>121</depend>
				<depend>122</depend>
				<depend>123</depend>
				<depend>124</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:451</id>
			<description>An interoperable JAX-RPC implementation must be able to support the standard processing model for SOAP headers as specified in the SOAP specification [5].</description>
			<location chapter = "14" section = "3.5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:452</id>
			<description>A remote method in a service definition interface is required to throw the standard java.rmi.RemoteException.</description>
			<location chapter = "14" section = "3.6"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:453</id>
			<description>A RemoteException maps to a fault in the corresponding SOAP message.</description>
			<location chapter = "14" section = "3.6"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:454</id>
			<description>A subclass of RemoteException maps to a fault in the corresponding SOAP message.</description>
			<location chapter = "14" section = "3.6"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:455</id>
			<description>A SOAP fault includes the faultcode sub-element.</description>
			<location chapter = "14" section = "3.6"/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:455.1</id>
					<description>The faultcode must be present in a SOAP fault</description>
					<location chapter = "14" section = "3.6"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:455.2</id>
					<description>The faultcode value must be a qualified name.</description>
					<location chapter = "14" section = "3.6"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:456</id>
			<description>An interoperable JAX-RPC implementation must map a java.rmi.RemoteException or its subclass to a standard faultcode.</description>
			<location chapter = "14" section = "3.6"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:457</id>
			<description>An interoperable JAX-RPC implementation must map a subclass of  java.rmi.RemoteException to a standard faultcode.</description>
			<location chapter = "14" section = "3.6"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:458</id>
			<description>Table that contains the SOAP faultcode Values</description>
			<location chapter = "14" section = "3.6"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:459</id>
			<description>JAX-RPC specification does not specify requirements for the security interoperability for the JAX-RPC implementations.</description>
			<location chapter = "14" section = "3.7"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:460</id>
			<description>Transaction interoperability is an optional feature in the JAX-RPC specification. An interoperable JAX-RPC implementation is not required to implement support for the transaction context propagation.</description>
			<location chapter = "14" section = "3.8"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:462</id>
			<description>The javax.xml.rpc.encoding package defines a set of Java interfaces/classes for the type mapping framework.</description>
			<location chapter = "15" section = "2"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:465</id>
			<description>A JAX-RPC implementation must extend the Serializer and Deserializer interfaces to support development of serializers and deserializers based on a specific XML processing mechanism.</description>
			<location chapter = "15" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:466</id>
			<description>A JAX-RPC runtime system is also required to implement both SerializationContext and DeserializationContext interfaces.</description>
			<location chapter = "15" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:467</id>
			<description>A JAX-RPC implementation must support at least one of the XML processing mechanism types for serializers and deserializers.</description>
			<location chapter = "15" section = "2"/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:468</id>
			<description>The interface javax.xml.rpc.encoding.TypeMappingRegistry defines a registry for the type mappings for various encoding styles and XML schema namespaces.</description>
			<location chapter = "15" section = "3.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:500</id>
			<description>A JAX-RPC implementation is required to support the Java mapping of an XML data type by using one or more of the following</description>
			<location chapter = "18" section = ""/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:500.1</id>
					<description>The standard Java mapping of the XML data types.</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:500.2</id>
					<description>Java binding for the XML data types using the JAXB APIs (Java APIs for XMLdata binding)</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:500.3</id>
					<description>An implementation specific Java binding for the XML data types.</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:500.4</id>
					<description>Pluggable serializer and deserializer framework</description>
					<location chapter = "18" section = ""/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:501</id>
			<description>A JAX-RPC implementation is not required to support the Java mapping of a specific XML data type.</description>
			<location chapter = "18" section = ""/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:502</id>
			<description>Built-in data types</description>
			<location chapter = "18" section = ""/>
			<depends>
				<depend>52</depend>
			</depends>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:502.1</id>
					<description>Remaining simple types</description>
					<location chapter = "18" section = ""/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:503</id>
			<description>Enumeration</description>
			<location chapter = "18" section = ""/>
			<depends>
				<depend>68</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:504</id>
			<description>Array of Bytes (soapenc:base64)</description>
			<location chapter = "18" section = ""/>
			<depends>
				<depend>56</depend>
				<depend>57</depend>
				<depend>58</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:505</id>
			<description>SOAP Encoding Struct</description>
			<location chapter = "18" section = ""/>
			<depends>
				<depend>59</depend>
				<depend>60</depend>
				<depend>61</depend>
				<depend>62</depend>
				<depend>63</depend>
			</depends>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:506</id>
			<description>xsd:complexType with elements of the following</description>
			<location chapter = "18" section = ""/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:506.1</id>
					<description>simple types (multi-reference)</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:506.2</id>
					<description>complex types (multi-reference)</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:506.3</id>
					<description>simple types (single-reference)</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:506.4</id>
					<description>complex types (single-reference)</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:506.5</id>
					<description>simple types (external-reference)</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:506.6</id>
					<description>complex types (external-reference)</description>
					<location chapter = "18" section = ""/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:507</id>
			<description>xsd:attribute in xsd:complexType</description>
			<location chapter = "18" section = ""/>
		</assertion>
		<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:508</id>
			<description>Occurrence constraints for xsd:element</description>
			<location chapter = "18" section = ""/>
			<sub-assertions>
				<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:508.1</id>
					<description>minOccurs</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:508.2</id>
					<description>maxOccurs</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:508.3</id>
					<description>default</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "false" impl-spec = "true" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:508.4</id>
					<description>fixed</description>
					<location chapter = "18" section = ""/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:509</id>
			<description>xsd:ref attribute for reference to global elements</description>
			<location chapter = "18" section = ""/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:510</id>
			<description>Derivation of new simple types by restriction of an existing simple type</description>
			<location chapter = "18" section = ""/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:499</id>
			<description>Facets used with restriction elements</description>
			<location chapter = "18" section = ""/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:511</id>
			<description>xsd:enumeration facet</description>
			<location chapter = "18" section = ""/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:512</id>
			<description>List type xsd:list</description>
			<location chapter = "18" section = ""/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:513</id>
			<description>Union Type xsd:union</description>
			<location chapter = "18" section = ""/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:514</id>
			<description>SOAP Encoding</description>
			<location chapter = "18" section = ""/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:514.1</id>
					<description>Array defined using the type soapenc:arrayType (array with complex types)</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:514.2</id>
					<description>Array defined using the type soapenc:arrayType (multi dimension arrays)</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:514.3</id>
					<description>Array defined using the type soapenc:arrayType (single reference values)</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:514.4</id>
					<description>Array defined using the type soapenc:arrayType (multi reference values)</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:514.5</id>
					<description>Array defined using the type soapenc:arrayType (sparse arrays)</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:514.6</id>
					<description>Array defined using the type soapenc:arrayType (partially transmitted arrays)</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:514.7</id>
					<description>Array derived from soapenc:Array by restriction using the wsdl:arrayType attribute</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:514.8</id>
					<description>Array derived from soapenc:Array by restriction</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:514.9</id>
					<description>Array defined using the type soapenc:arrayType (nested arrays)</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:514.10</id>
					<description>Array defined using the type soapenc:arrayType (array with instances of any subtype of the specified arrayType)</description>
					<location chapter = "18" section = ""/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:515</id>
			<description>Derivation of a complex type from a simple Type</description>
			<location chapter = "18" section = ""/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:516</id>
			<description>xsd:anyType (Issue: Support for xsd:anyType)</description>
			<location chapter = "18" section = ""/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:517</id>
			<description>xsd:sequence</description>
			<location chapter = "18" section = ""/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:518</id>
			<description>xsd:choice</description>
			<location chapter = "18" section = ""/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:519</id>
			<description>xsd:group</description>
			<location chapter = "18" section = ""/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:520</id>
			<description>xsd:all</description>
			<location chapter = "18" section = ""/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:521</id>
			<description>xsi:nil attribute</description>
			<location chapter = "18" section = ""/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:522</id>
			<description>xsd:nillable attribute</description>
			<location chapter = "18" section = ""/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:523</id>
			<description>Derivation of complex Types by extension</description>
			<location chapter = "18" section = ""/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:523.1</id>
					<description>by extension</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:523.2</id>
					<description>by restriction</description>
					<location chapter = "18" section = ""/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:524</id>
			<description>Abstract Types</description>
			<location chapter = "18" section = ""/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXRPC:SPEC:525</id>
			<description>Creation and use of derived types</description>
			<location chapter = "18" section = ""/>
			<sub-assertions>
				<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:525.1</id>
					<description>final attribute</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:525.2</id>
					<description>fixed attribute</description>
					<location chapter = "18" section = ""/>
				</assertion>
				<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
					<id>JAXRPC:SPEC:525.3</id>
					<description>block attribute</description>
					<location chapter = "18" section = ""/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:526</id>
			<description>Java indentifies are based on th following</description>
			<location chapter = "20" section = "1"/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:526.1</id>
					<description>Class and interface names always begin with an upper-case letter.</description>
					<location chapter = "20" section = "1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:526.2</id>
					<description>Method names always begin with a lower-case letter, and otherwise are exactly like class and interface names.</description>
					<location chapter = "20" section = "1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:526.3</id>
					<description>Constant names are entirely in upper case, with each pair of words separated by the underscore character</description>
					<location chapter = "20" section = "1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:527</id>
			<description> An XML name is split into a word list by removing any leading and trailing punctuation characters and then searching for word breaks.  After splitting, if a word begins with a lower-case character then its first character is converted to an upper case.</description>
			<location chapter = "20" section = "1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:528</id>
			<description>Java identifiers are mapped as follows</description>
			<location chapter = "20" section = "1"/>
			<sub-assertions>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:528.1</id>
					<description>A class or interface identifier is constructed by concatenating the words in the list</description>
					<location chapter = "20" section = "1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:528.2</id>
					<description>A method identifier is constructed by concatenating the words in the list.</description>
					<location chapter = "20" section = "1"/>
				</assertion>
				<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
					<id>JAXRPC:SPEC:528.3</id>
					<description>A prefix verb (example: get, set) is prepended to the result or if no prefix is required, the first character is converted to lower case.</description>
					<location chapter = "20" section = "1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:529</id>
			<description>mapping does not change an XML name that is already a legal and conventional Java class, method, or constant identifier, except perhaps to add an initial verb in the case of a property access method.</description>
			<location chapter = "20" section = "1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:530</id>
			<description>The runtime system of a JAXRPC 1.1 implementation must satisfy the following (WS-I Basic Profile Version 1.0) requirements when operating as either a consumer or a provider of an INSTANCE whose DESCRIPTION is conformant. From section 4.3 of the WS-I Basic Profile Version 1.0. Use of SOAP in HTTP. HTTP uses the 2xx series of status codes to communicate success. In particular, 200 is the default for successful messages, but 202 can be used to indicate that a messages has been submitted for processing. Additionally, other 2xx status codes may be appropriate, depending on the nature of the HTTP interaction. R1124 - An INSTANCE MUST use a 2xx HTTP status code for responses that indicate a successful outcome of a request. R1111 - An INSTANCE SHOULD use a "200 OK" HTTP status code for responses that contain a SOAP message that is not a SOAP fault. R1112 - An INSTANCE SHOULD use either a "200 OK" or "202 Accepted" HTTP status code for responses that indicate successful HTTP outcome of a request but do not contain a SOAP message.</description>
			<location chapter = "14" section = "4.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:531</id>
			<description>The runtime system of a JAXRPC 1.1 implementation must satisfy 
the following (WS-I Basic Profile Version 1.0) requirements when operating as either a consumer or a
 provider of an INSTANCE whose DESCRIPTION is conformant. From section 4.3 of the WS-I Basic Profile
 Version 1.0. Use of SOAP in HTTP. HTTP uses the 4xx series of status codes to indicate failure due to a client error. Although there are a number of situations that may result in one of these codes, the Profile highlights those when the payload of the HTTP request is not the proper media type, and when the anticipated method is not used. R1125 - An INSTANCE MUST use a 4xx HTTP status code for responses that indicate a problem with the format of the request. R1113 - An INSTANCE SHOULD use a "400 Bad Request "HTTP status code, if the request message is a malformed HTTP request, or not well-formed XML. R1114 - An INSTANCE SHOULD use a "405 Method not Allowed" HTTP status code if the request method was not "POST". R1115 - An INSTANCE SHOULD use a "415 Unsupported Media Type" HTTP status code if the Content-Type HTTP request header did not have a value of "text/xml".</description>
			<location chapter = "14" section = "4.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:532</id>
			<description>The runtime system of a JAXRPC 1.1 implementation must satisfy 
the following (WS-I Basic Profile Version 1.0) requirements when operating as either a consumer or a
 provider of an INSTANCE whose DESCRIPTION is conformant. From section 4.3 of the WS-I Basic Profile
 Version 1.0. Use of SOAP in HTTP. HTTP uses the 5xx series of status codes to indicate failure due a server error. R1116 - An INSTANCE MUST use a 5xx HTTP status code for responses that indicate an unsuccessful outcome of a well formed request. R1126 - An INSTANCE MUST use a "500 Internal Server Error" HTTP status code if the response message contains a SOAP Fault.</description>
			<location chapter = "14" section = "4.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:533</id>
			<description>The runtime system of a JAXRPC 1.1 implementation must satisfy 
the following (WS-I Basic Profile Version 1.0) requirements when operating as either a consumer or a
 provider of an INSTANCE whose DESCRIPTION is conformant. From section 4.1 of the WS-I Basic Profile
 Version 1.0. All XML processors must support the UTF-8 and UTF-16 character encodings, as per XML 1.0. R1012 - A MESSAGE MUST be serialized as either UTF-8 or UTF-16.</description>
			<location chapter = "14" section = "4.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:534</id>
			<description>The runtime system of a JAXRPC 1.1 implementation must satisfy 
the following (WS-I Basic Profile Version 1.0) requirements when operating as either a consumer or a
 provider of an INSTANCE whose DESCRIPTION is conformant. From section 4.1 of the WS-I Basic Profile
 Version 1.0. Presence or absence of an XML declaration does not affect interoperability. Certain implementations might always precede their XML serialization with the XML declaration. R1010 - A RECEIVER MUST accept messages that contain an XML Declaration.</description>
			<location chapter = "14" section = "4.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:535</id>
			<description>The runtime system of a JAXRPC 1.1 implementation must satisfy 
the following (WS-I Basic Profile Version 1.0) requirements when operating as either a consumer or a
 provider of an INSTANCE whose DESCRIPTION is conformant. From section 4.1 of the WS-I Basic Profile
 Version 1.0. XML DTDs and PIs may introduce security vulnerabilities, processing overhead and ambiguity in message semantics when used in SOAP messages. As a result, these XML constructs are disallowed. R1008 - A MESSAGE MUST NOT contain a Document Type Declaration. R1009 - A MESSAGE MUST NOT contain Processing Instructions.</description>
			<location chapter = "14" section = "4.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "true" defined-by = "technology" status = "active" testable = "true">
			<id>JAXRPC:SPEC:536</id>
			<description>Explicit service context is represented in the form of additional parameters appended following the service endpoint defined parameters in the remote method signature. The type of a service context parameter depends on whether the service context is of IN, OUT, or INOUT type. An explicit service context parameter may be either based on the mapping of a soap:header element in the WSDL service descritpion or generated specific to a client-side JAXRPC implementation. The name of the Java method parameter is mapped from the name of the part referenced in the soap:header element. If the soap:header is mapped to a Java method argument, and only in this case, any of its soap:headerfault(s) may be mapped to service specific exceptions. A Java-to-WSDL mapping tool is required to provide a facility for spefifying metadata related to the mapping of the explicit service context. This metadata identifies whether a specific parameter or return type in the Java method signature is mapped to a SOAP header element instead of an element in the SOAP body. Pass a soap:header via the explicit context.</description>
			<location chapter = "11" section = "2.2"/>
		</assertion>
	</assertions>
</spec>

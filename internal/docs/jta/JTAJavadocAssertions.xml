<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE javadoc SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/javadoc_assertions.dtd">
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<javadoc>
<next-available-id>173</next-available-id>
<previous-id>1</previous-id>
<technology>JTA</technology>
<id>JTA</id>
<name>Java Transaction API</name>
<version>1.1</version>
<assertions>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:1</id>
<description>
                            The error code to create the SystemException with
                        </description>
<package>javax.transaction</package>
<class-interface>int</class-interface>
<field name="errorCode" type="public"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:2</id>
<description/>
<package>javax.transaction</package>
<class-interface>SystemException</class-interface>
<method name="SystemException" return-type="SystemException"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:3</id>
<description>
                            Create an SystemException with a given string.
                        </description>
<package>javax.transaction</package>
<class-interface>SystemException</class-interface>
<method name="SystemException" return-type="SystemException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:4</id>
<description>
                            Create an SystemException with a given error code.
                        </description>
<package>javax.transaction</package>
<class-interface>SystemException</class-interface>
<method name="SystemException" return-type="SystemException">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:5</id>
<description/>
<package>javax.transaction</package>
<class-interface>RollbackException</class-interface>
<method name="RollbackException" return-type="RollbackException"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:6</id>
<description/>
<package>javax.transaction</package>
<class-interface>RollbackException</class-interface>
<method name="RollbackException" return-type="RollbackException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:7</id>
<description/>
<package>javax.transaction</package>
<class-interface>NotSupportedException</class-interface>
<method name="NotSupportedException" return-type="NotSupportedException"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:8</id>
<description/>
<package>javax.transaction</package>
<class-interface>NotSupportedException</class-interface>
<method name="NotSupportedException" return-type="NotSupportedException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:9</id>
<description/>
<package>javax.transaction</package>
<class-interface>HeuristicMixedException</class-interface>
<method name="HeuristicMixedException" return-type="HeuristicMixedException"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:10</id>
<description/>
<package>javax.transaction</package>
<class-interface>HeuristicMixedException</class-interface>
<method name="HeuristicMixedException" return-type="HeuristicMixedException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:11</id>
<description/>
<package>javax.transaction</package>
<class-interface>HeuristicCommitException</class-interface>
<method name="HeuristicCommitException" return-type="HeuristicCommitException"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:12</id>
<description/>
<package>javax.transaction</package>
<class-interface>HeuristicCommitException</class-interface>
<method name="HeuristicCommitException" return-type="HeuristicCommitException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:13</id>
<description/>
<package>javax.transaction</package>
<class-interface>HeuristicRollbackException</class-interface>
<method name="HeuristicRollbackException" return-type="HeuristicRollbackException"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:14</id>
<description/>
<package>javax.transaction</package>
<class-interface>HeuristicRollbackException</class-interface>
<method name="HeuristicRollbackException" return-type="HeuristicRollbackException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:15</id>
<description/>
<package>javax.transaction</package>
<class-interface>TransactionRolledbackException</class-interface>
<method name="TransactionRolledbackException" return-type="TransactionRolledbackException"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:16</id>
<description/>
<package>javax.transaction</package>
<class-interface>TransactionRolledbackException</class-interface>
<method name="TransactionRolledbackException" return-type="TransactionRolledbackException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:17</id>
<description/>
<package>javax.transaction</package>
<class-interface>TransactionrequiredException</class-interface>
<method name="TransactionrequiredException" return-type="TransactionRequiredException"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:18</id>
<description/>
<package>javax.transaction</package>
<class-interface>TransactionrequiredException</class-interface>
<method name="TransactionrequiredException" return-type="TransactionRequiredException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:19</id>
<description/>
<package>javax.transaction</package>
<class-interface>InvalidTransactionException</class-interface>
<method name="InvalidTransactionException" return-type="InvalidTransactionException"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:20</id>
<description/>
<package>javax.transaction</package>
<class-interface>InvalidTransactionException</class-interface>
<method name="InvalidTransactionException" return-type="InvalidTransactionException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:21</id>
<description>
                            Create a new transaction and associate it with the current thread.
                        </description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="begin" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:22</id>
<description>Thrown if the thread is already     associated with a transaction and the Transaction Manager      implementation does not support nested transactions.</description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="begin" return-type="void">
<throw>jakarta.transaction.NotSupportedException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>JTA:JAVADOC:23</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="begin" return-type="void">
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:24</id>
<description>
                            Complete the transaction associated with the current thread.
                             When this  method completes, the thread becomes associated with no transaction.
                        </description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="commit" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:25</id>
<description>Thrown to indicate that     the transaction has been rolled back rather than committed.</description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="commit" return-type="void">
<throw>jakarta.transaction.RollbackException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>JTA:JAVADOC:26</id>
<description>Thrown to indicate that a heuristic      decision was made and that some relevant updates have been committed     while others have been rolled back.</description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="commit" return-type="void">
<throw>jakarta.transaction.HeuristicMixedException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>JTA:JAVADOC:27</id>
<description>Thrown to indicate that a      heuristic decision was made and that all relevant updates have been     rolled back.</description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="commit" return-type="void">
<throw>jakarta.transaction.HeuristicRollbackException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>JTA:JAVADOC:28</id>
<description>Thrown to indicate that the thread is     not allowed to commit the transaction.</description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="commit" return-type="void">
<throw>java.lang.SecurityException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:29</id>
<description>Thrown if the current thread is     not associated with a transaction.</description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="commit" return-type="void">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>JTA:JAVADOC:30</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="commit" return-type="void">
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:31</id>
<description>
                            Roll back the transaction associated with the current thread.
                             When this  method completes, the thread becomes associated with no transaction.
                        </description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="rollback" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:32</id>
<description>Thrown if the current thread is     not associated with a transaction.</description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="rollback" return-type="void">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>JTA:JAVADOC:33</id>
<description>Thrown to indicate that the thread is     not allowed to roll back the transaction.</description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="rollback" return-type="void">
<throw>java.lang.SecurityException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>JTA:JAVADOC:34</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="rollback" return-type="void">
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:35</id>
<description>
                            Modify the transaction associated with the current thread such that  the only possible outcome of the transaction is to roll back the  transaction.
                        </description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="setRollbackOnly" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:36</id>
<description>Thrown if the current thread is     not associated with a transaction.</description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="setRollbackOnly" return-type="void">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>JTA:JAVADOC:37</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="setRollbackOnly" return-type="void">
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:38</id>
<description>
                            Obtain the status of the transaction associated with the current thread.
                        </description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="getStatus" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>JTA:JAVADOC:39</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="getStatus" return-type="int">
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:40</id>
<description>
                            Modify the timeout value that is associated with the  transactions started by subsequent invocations of the begin method.
                               &lt;p&gt; If an application has not called this method, the transaction  service uses some default value for the transaction timeout.
                        </description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="setTransactionTimeout" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:41</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>UserTransaction</class-interface>
<method name="setTransactionTimeout" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:42</id>
<description>
                            This method is called by the transaction   manager prior to the start of the transaction completion process.
                        </description>
<package>javax.transaction</package>
<class-interface>Synchronization</class-interface>
<method name="beforeCompletion" return-type="void"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:43</id>
<description>
                            This method is called by the transaction   manager after the transaction is committed or rolled back.
                        </description>
<package>javax.transaction</package>
<class-interface>Synchronization</class-interface>
<method name="afterCompletion" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:44</id>
<description>
                            Create a new transaction and associate it with the current thread.
                        </description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="begin" return-type="void"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:45</id>
<description>Thrown if the thread is already     associated with a transaction and the Transaction Manager      implementation does not support nested transactions.</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="begin" return-type="void">
<throw>jakarta.transaction.NotSupportedException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:46</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="begin" return-type="void">
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:47</id>
<description>
                            Complete the transaction associated with the current thread.
                             When this  method completes, the thread becomes associated with no transaction.
                        </description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="commit" return-type="void"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:48</id>
<description>Thrown to indicate that     the transaction has been rolled back rather than committed.</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="commit" return-type="void">
<throw>jakarta.transaction.RollbackException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:49</id>
<description>Thrown to indicate that a heuristic      decision was made and that some relevant updates have been committed     while others have been rolled back.</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="commit" return-type="void">
<throw>jakarta.transaction.HeuristicMixedException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:50</id>
<description>Thrown to indicate that a      heuristic decision was made and that some relevant updates have been     rolled back.</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="commit" return-type="void">
<throw>jakarta.transaction.HeuristicRollbackException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:51</id>
<description>Thrown to indicate that the thread is     not allowed to commit the transaction.</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="commit" return-type="void">
<throw>java.lang.SecurityException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:52</id>
<description>Thrown if the current thread is     not associated with a transaction.</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="commit" return-type="void">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:53</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="commit" return-type="void">
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:54</id>
<description>
                            Obtain the status of the transaction associated with the current thread.
                        </description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="getStatus" return-type="int"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:55</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="getStatus" return-type="int">
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:56</id>
<description>
                            Get the transaction object that represents the transaction   context of the calling thread
                        </description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="getTransaction" return-type="jakarta.transaction.Transaction"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:57</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="getTransaction" return-type="jakarta.transaction.Transaction">
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:58</id>
<description>
                            Resume the transaction context association of the calling thread  with the transaction represented by the supplied Transaction object.
                               When this method returns, the calling thread is associated with the   transaction context specified.
                        </description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="resume" return-type="void">
<parameters>
<parameter>jakarta.transaction.Transaction</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:59</id>
<description>Thrown if the parameter      transaction object contains an invalid transaction</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="resume" return-type="void">
<parameters>
<parameter>jakarta.transaction.Transaction</parameter>
</parameters>
<throw>jakarta.transaction.InvalidTransactionException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:60</id>
<description>Thrown if the thread is already     associated with another transaction.</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="resume" return-type="void">
<parameters>
<parameter>jakarta.transaction.Transaction</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:61</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="resume" return-type="void">
<parameters>
<parameter>jakarta.transaction.Transaction</parameter>
</parameters>
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:62</id>
<description>
                            Roll back the transaction associated with the current thread.
                             When this  method completes, the thread becomes associated with no transaction.
                        </description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="rollback" return-type="void"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:63</id>
<description>Thrown if the current thread is     not associated with a transaction.</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="rollback" return-type="void">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:64</id>
<description>Thrown to indicate that the thread is     not allowed to roll back the transaction.</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="rollback" return-type="void">
<throw>java.lang.SecurityException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:65</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="rollback" return-type="void">
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:66</id>
<description>
                            Modify the transaction associated with the current thread such that  the only possible outcome of the transaction is to roll back the  transaction.
                        </description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="setRollbackOnly" return-type="void"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:67</id>
<description>Thrown if the current thread is     not associated with a transaction.</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="setRollbackOnly" return-type="void">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:68</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="setRollbackOnly" return-type="void">
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:69</id>
<description>
                            Modify the value of the timeout value that is associated with the  transactions started by the current thread with the begin method.
                               &lt;p&gt; If an application has not called this method, the transaction  service uses some default value for the transaction timeout.
                        </description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="setTransactionTimeout" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:70</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="setTransactionTimeout" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:71</id>
<description>
                            Suspend the transaction currently associated with the calling   thread and return a Transaction object that represents the   transaction context being suspended.
                             If the calling thread is   not associated with a transaction, the method returns a null   object reference. When this method returns, the calling thread   is associated with no transaction.
                        </description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="suspend" return-type="jakarta.transaction.Transaction"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:72</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>TransactionManager</class-interface>
<method name="suspend" return-type="jakarta.transaction.Transaction">
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:73</id>
<description>
                            A transaction is associated with the target object and it is in the  active state.
                             An implementation returns this status after a  transaction has been started and prior to a Coordinator issuing  any prepares unless the transaction has been marked for rollback.
                        </description>
<package>javax.transaction</package>
<class-interface>int</class-interface>
<field name="STATUS_ACTIVE" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:74</id>
<description>
                            A transaction is associated with the target object and it has been  marked for rollback, perhaps as a result of a setRollbackOnly operation.
                        </description>
<package>javax.transaction</package>
<class-interface>int</class-interface>
<field name="STATUS_MARKED_ROLLBACK" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:75</id>
<description>
                            A transaction is associated with the target object and it has been  prepared, i.e.
                             all subordinates have responded Vote.Commit. The  target object may be waiting for a superior's instruction as how  to proceed.
                        </description>
<package>javax.transaction</package>
<class-interface>int</class-interface>
<field name="STATUS_PREPARED" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:76</id>
<description>
                            A transaction is associated with the target object and it has been  committed.
                             It is likely that heuristics exists, otherwise the  transaction would have been destroyed and NoTransaction returned.
                        </description>
<package>javax.transaction</package>
<class-interface>int</class-interface>
<field name="STATUS_COMMITTED" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:77</id>
<description>
                            A transaction is associated with the target object and the outcome  has been determined as rollback.
                             It is likely that heuristics exist,  otherwise the transaction would have been destroyed and NoTransaction  returned.
                        </description>
<package>javax.transaction</package>
<class-interface>int</class-interface>
<field name="STATUS_ROLLEDBACK" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:78</id>
<description>
                            A transaction is associated with the target object but its  current status cannot be determined.
                             This is a transient condition  and a subsequent invocation will ultimately return a different status.
                        </description>
<package>javax.transaction</package>
<class-interface>int</class-interface>
<field name="STATUS_UNKNOWN" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:79</id>
<description>
                            No transaction is currently associated with the target object.
                             This  will occur after a transaction has completed.
                        </description>
<package>javax.transaction</package>
<class-interface>int</class-interface>
<field name="STATUS_NO_TRANSACTION" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:80</id>
<description>
                            A transaction is associated with the target object and it is in the  process of preparing.
                             An implementation returns this status if it  has started preparing, but has not yet completed the process, probably  because it is waiting for responses to prepare from one or more  Resources.
                        </description>
<package>javax.transaction</package>
<class-interface>int</class-interface>
<field name="STATUS_PREPARING" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:81</id>
<description>
                            A transaction is associated with the target object and it is in the  process of committing.
                             An implementation returns this status if it  has decided to commit, but has not yet completed the process, probably  because it is waiting for responses from one or more Resources.
                        </description>
<package>javax.transaction</package>
<class-interface>int</class-interface>
<field name="STATUS_COMMITTING" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:82</id>
<description>
                            A transaction is associated with the target object and it is in the  process of rolling back.
                             An implementation returns this status if  it has decided to rollback, but has not yet completed the process,  probably because it is waiting for responses from one or more  Resources.
                        </description>
<package>javax.transaction</package>
<class-interface>int</class-interface>
<field name="STATUS_ROLLING_BACK" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:83</id>
<description>
                            Complete the transaction represented by this Transaction object
                        </description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="commit" return-type="void"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:84</id>
<description>Thrown to indicate that     the transaction has been rolled back rather than committed.</description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="commit" return-type="void">
<throw>jakarta.transaction.RollbackException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:85</id>
<description>Thrown to indicate that a heuristic      decision was made and that some relevant updates have been committed     while others have been rolled back.</description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="commit" return-type="void">
<throw>jakarta.transaction.HeuristicMixedException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:86</id>
<description>Thrown to indicate that a      heuristic decision was made and that some relevant updates have been     rolled back.</description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="commit" return-type="void">
<throw>jakarta.transaction.HeuristicRollbackException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:87</id>
<description>Thrown to indicate that the thread is     not allowed to commit the transaction.</description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="commit" return-type="void">
<throw>java.lang.SecurityException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:88</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="commit" return-type="void">
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:89</id>
<description>
                            Delist the resource specified from the current transaction   associated with the calling thread.
                        </description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="delistResource" return-type="boolean">
<parameters>
<parameter>javax.transaction.xa.XAResource</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:90</id>
<description>Thrown if the transaction in the      target object is inactive.</description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="delistResource" return-type="boolean">
<parameters>
<parameter>javax.transaction.xa.XAResource</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:91</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="delistResource" return-type="boolean">
<parameters>
<parameter>javax.transaction.xa.XAResource</parameter>
<parameter>int</parameter>
</parameters>
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:92</id>
<description>
                            Enlist the resource specified with the current transaction   context of the calling thread
                        </description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="enlistResource" return-type="boolean">
<parameters>
<parameter>javax.transaction.xa.XAResource</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:93</id>
<description>Thrown to indicate that     the transaction has been marked for rollback only.</description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="enlistResource" return-type="boolean">
<parameters>
<parameter>javax.transaction.xa.XAResource</parameter>
</parameters>
<throw>jakarta.transaction.RollbackException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:94</id>
<description>Thrown if the transaction in the      target object is in prepared state or the transaction is inactive.</description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="enlistResource" return-type="boolean">
<parameters>
<parameter>javax.transaction.xa.XAResource</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:95</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="enlistResource" return-type="boolean">
<parameters>
<parameter>javax.transaction.xa.XAResource</parameter>
</parameters>
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:96</id>
<description>
                            Obtain the status of the transaction associated with the current thread.
                        </description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="getStatus" return-type="int"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:97</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="getStatus" return-type="int">
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:98</id>
<description>
                            Register a synchronization object for the transaction currently  associated with the calling thread.
                             The transction manager invokes  the beforeCompletion method prior to starting the transaction   commit process. After the transaction is completed, the transaction  manager invokes the afterCompletion method.
                        </description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="registerSynchronization" return-type="void">
<parameters>
<parameter>jakarta.transaction.Synchronization</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:99</id>
<description>Thrown to indicate that     the transaction has been marked for rollback only.</description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="registerSynchronization" return-type="void">
<parameters>
<parameter>jakarta.transaction.Synchronization</parameter>
</parameters>
<throw>jakarta.transaction.RollbackException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:100</id>
<description>Thrown if the transaction in the      target object is in prepared state or the transaction is inactive.</description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="registerSynchronization" return-type="void">
<parameters>
<parameter>jakarta.transaction.Synchronization</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:101</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="registerSynchronization" return-type="void">
<parameters>
<parameter>jakarta.transaction.Synchronization</parameter>
</parameters>
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:102</id>
<description>
                            Rollback the transaction represented by this Transaction object.
                        </description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="rollback" return-type="void"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:103</id>
<description>Thrown if the transaction in the      target object is in prepared state or the transaction is inactive.</description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="rollback" return-type="void">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:104</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="rollback" return-type="void">
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:105</id>
<description>
                            Modify the transaction associated with the current thread such that  the only possible outcome of the transaction is to roll back the  transaction.
                        </description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="setRollbackOnly" return-type="void"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:106</id>
<description>Thrown if the current thread is     not associated with any transaction.</description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="setRollbackOnly" return-type="void">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:107</id>
<description>Thrown if the transaction manager      encounters an unexpected error condition</description>
<package>javax.transaction</package>
<class-interface>Transaction</class-interface>
<method name="setRollbackOnly" return-type="void">
<throw>jakarta.transaction.SystemException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:108</id>
<description>
                            The error code to create the SystemException with
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="errorCode" type="public"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:109</id>
<description>
                            The inclusive lower bound oof the rollback codes.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_RBBASE" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:110</id>
<description>
                            Rollback was caused by unspecified reason.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_RBROLLBACK" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:111</id>
<description>
                            Rollback was caused by communication failure.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_RBCOMMFAIL" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:112</id>
<description>
                            A deadlock was detected.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_RBDEADLOCK" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:113</id>
<description>
                            A condition that violates the integrity of the resource was detected.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_RBINTEGRITY" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:114</id>
<description>
                            The resource manager rolled back the transaction branch for a reason  not on this list.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_RBOTHER" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:115</id>
<description>
                            A protocol error occured in the resource manager.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_RBPROTO" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:116</id>
<description>
                            A transaction branch took too long.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_RBTIMEOUT" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:117</id>
<description>
                            May retry the transaction branch.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_RBTRANSIENT" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:118</id>
<description>
                            The inclusive upper bound of the rollback error code.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_RBEND" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:119</id>
<description>
                            Resumption must occur where suspension occured.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_NOMIGRATE" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:120</id>
<description>
                            The transaction branch may have been heuristically completed.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_HEURHAZ" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:121</id>
<description>
                            The transaction branch has been heuristically committed.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_HEURCOM" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:122</id>
<description>
                            The transaction branch has been heuristically rolled back.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_HEURRB" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:123</id>
<description>
                            The transaction branch has been heuristically committed and   rolled back.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_HEURMIX" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:124</id>
<description>
                            Routine returned with no effect and may be reissued.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_RETRY" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:125</id>
<description>
                            The transaction branch has been read-only and has been committed.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_RDONLY" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:126</id>
<description>
                            Asynchronous operation already outstanding.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XAER_ASYNC" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:127</id>
<description>
                            A resource manager error has occured in the transaction branch.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XAER_RMERR" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:128</id>
<description>
                            The XID is not valid.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XAER_NOTA" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:129</id>
<description>
                            Invalid arguments were given.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XAER_INVAL" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:130</id>
<description>
                            Routine was invoked in an inproper context.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XAER_PROTO" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:131</id>
<description>
                            Resource manager is unavailable.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XAER_RMFAIL" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:132</id>
<description>
                            The XID already exists.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XAER_DUPID" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:133</id>
<description>
                            The resource manager is doing work outside global transaction.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XAER_OUTSIDE" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:134</id>
<description>
                            Create an XAException.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>XAException</class-interface>
<method name="XAException" return-type="XAException"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:135</id>
<description>
                            Create an XAException with a given string.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>XAException</class-interface>
<method name="XAException" return-type="XAException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:136</id>
<description>
                            Create an XAException with a given error code.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>XAException</class-interface>
<method name="XAException" return-type="XAException">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:137</id>
<description>
                            Maximum number of bytes returned by getGtrid.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="MAXGTRIDSIZE" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:138</id>
<description>
                            Maximum number of bytes returned by getBqual.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="MAXBQUALSIZE" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:139</id>
<description>
                            Obtain the format identifier part of the XID.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>Xid</class-interface>
<method name="getFormatId" return-type="int"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:140</id>
<description>
                            Obtain the global transaction identifier part of XID as an array   of bytes.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>Xid</class-interface>
<method name="getGlobalTransactionId" return-type="byte[]"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:141</id>
<description>
                            Obtain the transaction branch identifier part of XID as an array   of bytes.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>Xid</class-interface>
<method name="getBranchQualifier" return-type="byte[]"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:142</id>
<description>
                            End a recovery scan.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="TMENDRSCAN" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:143</id>
<description>
                            Disassociates the caller and mark the transaction branch   rollback-only.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="TMFAIL" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:144</id>
<description>
                            Caller is joining existing transaction branch.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="TMJOIN" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:145</id>
<description>
                            Use TMNOFLAGS to indicate no flags value is selected.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="TMNOFLAGS" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:146</id>
<description>
                            Caller is using one-phase optimization.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="TMONEPHASE" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:147</id>
<description>
                            Caller is resuming association with with suspended   transaction branch.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="TMRESUME" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:148</id>
<description>
                            Start a recovery scan.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="TMSTARTRSCAN" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:149</id>
<description>
                            Disassociate caller from transaction branch.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="TMSUCCESS" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:150</id>
<description>
                            Caller is suspending (not ending) association with   transaction branch.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="TMSUSPEND" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:151</id>
<description>
                            The transaction branch has been read-only and has been committed.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_RDONLY" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:152</id>
<description>
                            The transaction work has been prepared normally.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>int</class-interface>
<field name="XA_OK" type="public static final"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:153</id>
<description>
                            Commit the global transaction specified by xid.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="commit" return-type="void">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:154</id>
<description>An error has occurred. Possible XAExceptions    are XA_HEURHAZ, XA_HEURCOM, XA_HEURRB, XA_HEURMIX, XAER_RMERR,   XAER_RMFAIL, XAER_NOTA, XAER_INVAL, or XAER_PROTO.    &lt;P&gt;If the resource manager did not commit the transaction and the    paramether onePhase is set to true, the resource manager may throw     one of the XA_RB* exceptions. Upon return, the resource manager has    rolled back the branch's work and has released all held resources.</description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="commit" return-type="void">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
<parameter>boolean</parameter>
</parameters>
<throw>javax.transaction.xa.XAException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:155</id>
<description>
                            Ends the work performed on behalf of a transaction branch.
                              The resource manager disassociates the XA resource from the   transaction branch specified and let the transaction be   completed.   &lt;p&gt;If TMSUSPEND is specified in flags, the transaction branch   is temporarily suspended in incomplete state. The transaction   context is in suspened state and must be resumed via start   with TMRESUME specified.&lt;/p&gt;   &lt;p&gt;If TMFAIL is specified, the portion of work has failed.   The resource manager may mark the transaction as rollback-only&lt;/p&gt;   &lt;p&gt;If TMSUCCESS is specified, the portion of work has completed   successfully.&lt;/p&gt;
                        </description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="end" return-type="void">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:156</id>
<description>An error has occurred. Possible XAException  values are XAER_RMERR, XAER_RMFAILED, XAER_NOTA, XAER_INVAL,   XAER_PROTO, or XA_RB*.</description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="end" return-type="void">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
<parameter>int</parameter>
</parameters>
<throw>javax.transaction.xa.XAException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:157</id>
<description>
                            Tell the resource manager to forget about a heuristically   completed transaction branch.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="forget" return-type="void">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:158</id>
<description>An error has occurred. Possible exception   values are XAER_RMERR, XAER_RMFAIL, XAER_NOTA, XAER_INVAL, or   XAER_PROTO.</description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="forget" return-type="void">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
</parameters>
<throw>javax.transaction.xa.XAException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:159</id>
<description>
                            Obtain the current transaction timeout value set for this   XAResource instance.
                             If &lt;CODE&gt;XAResource.setTransactionTimeout&lt;/CODE&gt;   was not use prior to invoking this method, the return value  is the default timeout set for the resource manager; otherwise,  the value used in the previous &lt;CODE&gt;setTransactionTimeout&lt;/CODE&gt; call is   returned.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="getTransactionTimeout" return-type="int"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:160</id>
<description>An error has occurred. Possible exception   values are XAER_RMERR, XAER_RMFAIL.</description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="getTransactionTimeout" return-type="int">
<throw>javax.transaction.xa.XAException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:161</id>
<description>
                            This method is called to determine if the resource manager   instance represented by the target object is the same as the   resouce manager instance represented by the parameter &lt;i&gt;xares&lt;/i&gt;.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="isSameRM" return-type="boolean">
<parameters>
<parameter>javax.transaction.xa.XAResource</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:162</id>
<description>An error has occurred. Possible exception   values are XAER_RMERR, XAER_RMFAIL.</description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="isSameRM" return-type="boolean">
<parameters>
<parameter>javax.transaction.xa.XAResource</parameter>
</parameters>
<throw>javax.transaction.xa.XAException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:163</id>
<description>
                            Ask the resource manager to prepare for a transaction commit   of the transaction specified in xid.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="prepare" return-type="int">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:164</id>
<description>An error has occurred. Possible exception  values are: XA_RB*, XAER_RMERR, XAER_RMFAIL, XAER_NOTA, XAER_INVAL,   or XAER_PROTO.</description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="prepare" return-type="int">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
</parameters>
<throw>javax.transaction.xa.XAException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:165</id>
<description>
                            Obtain a list of prepared transaction branches from a resource   manager.
                             The transaction manager calls this method during recovery   to obtain the list of transaction branches that are currently in   prepared or heuristically completed states.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="recover" return-type="javax.transaction.xa.Xid[]">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:166</id>
<description>An error has occurred. Possible values are  XAER_RMERR, XAER_RMFAIL, XAER_INVAL, and XAER_PROTO.</description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="recover" return-type="javax.transaction.xa.Xid[]">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>javax.transaction.xa.XAException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:167</id>
<description>
                            Inform the resource manager to roll back work done on behalf   of a transaction branch
                        </description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="rollback" return-type="void">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:168</id>
<description>An error has occurred</description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="rollback" return-type="void">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
</parameters>
<throw>javax.transaction.xa.XAException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:169</id>
<description>
                            &lt;P&gt;Set the current transaction timeout value for this &lt;CODE&gt;XAResource&lt;/CODE&gt;  instance.
                             Once set, this timeout value is effective until   &lt;code&gt;setTransactionTimeout&lt;/code&gt; is invoked again with a different   value. To reset the timeout value to the default value used by the resource   manager, set the value to zero.   If the timeout operation is performed successfully, the method returns   &lt;i&gt;true&lt;/i&gt;; otherwise &lt;i&gt;false&lt;/i&gt;. If a resource manager does not   support transaction timeout value to be set explicitly, this method   returns &lt;i&gt;false&lt;/i&gt;.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="setTransactionTimeout" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:170</id>
<description>An error has occurred. Possible exception values  are XAER_RMERR, XAER_RMFAIL, or XAER_INVAL.</description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="setTransactionTimeout" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>javax.transaction.xa.XAException</throw>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:171</id>
<description>
                            Start work on behalf of a transaction branch specified in xid    If TMJOIN is specified, the start is for joining a transaction    previously seen by the resource manager.
                             If TMRESUME is specified,  the start is to resume a suspended transaction specified in the   parameter xid.   If neither TMJOIN nor TMRESUME is specified and the transaction   specified by xid has previously been seen by the resource manager,   the resource manager throws the XAException exception with   XAER_DUPID error code.
                        </description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="start" return-type="void">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>JTA:JAVADOC:172</id>
<description>An error has occurred. Possible exceptions  are XA_RB*, XAER_RMERR, XAER_RMFAIL, XAER_DUPID, XAER_OUTSIDE,   XAER_NOTA, XAER_INVAL, or XAER_PROTO.</description>
<package>javax.transaction.xa</package>
<class-interface>XAResource</class-interface>
<method name="start" return-type="void">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
<parameter>int</parameter>
</parameters>
<throw>javax.transaction.xa.XAException</throw>
</method>
</assertion>
</assertions>
</javadoc>

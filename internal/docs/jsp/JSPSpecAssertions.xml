<?xml version = "1.0" encoding = "US-ASCII"?>
<!DOCTYPE spec SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/spec_assertions.dtd">
<!--
  Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

  This program and the accompanying materials are made available under the
  terms of the Eclipse Public License v. 2.0, which is available at
  http://www.eclipse.org/legal/epl-2.0.

  This Source Code may also be made available under the following Secondary
  Licenses when the conditions for such availability set forth in the
  Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
  version 2 with the GNU Classpath Exception, which is available at
  https://www.gnu.org/software/classpath/license.html.

  SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<?xml-stylesheet href = 'file:///files/workspaces/tools/docs/xsl/assertions/spec_assertions_comments.xsl' type = 'text/xsl'?>
<spec>
	<!-- @(#)JSPSpecAssertions.xml 1.3 09/04/02 -->
	<next-available-id>319</next-available-id>
	<previous-id>318</previous-id>
	<technology>JSP</technology>
	<id>JSP:SPEC:JSP</id>
	<name>Java Server(TM) Pages</name>
	<version>2.2</version>
	<location-names>
		<chapters>
			<chapter id="0" name="Preface" />
			<chapter id="1" name="Core Syntax and Semantics">
				<sections>
					<section id="1" name="What is a JSP Page" />
					<section id="1.1" name="Web Containers and Web Components" />
					<section id="1.2" name="Generating HTML" />
					<section id="1.3" name="Generating XML" />
					<section id="1.4" name="Translation and Execution Phases" />
					<section id="1.5" name="Validating JSP Pages" />
					<section id="1.6" name="Events in JSP Pages" />
					<section id="1.7" name="JSP Configuration Information" />
					<section id="1.8" name="Naming Conventions for JSP Files" />
					<section id="1.9" name="Compiling JSP Pages" />
					<section id="1.10" name="Debugging JSP Pages" />
					<section id="2" name="Web Applications" />
					<section id="2.1" name="Relative URL Specifications" />
					<section id="3" name="Syntactic Elements of a JSP Page" />
					<section id="3.1" name="Elements and Template Data" />
					<section id="3.2" name="Element Syntax" />
					<section id="3.3" name="Start and End Tags" />
					<section id="3.4" name="Empty Elements" />
					<section id="3.5" name="Attribute Values" />
					<section id="3.6"
						name="The jsp:attribute, jsp:body, and jsp:element Elements." />
					<section id="3.7" name="Valid Names for Actions and Attributes" />
					<section id="3.8" name="White Space" />
					<section id="3.9" name="JSP Documents" />
					<section id="3.10" name="JSP Syntax Grammar" />
					<section id="4" name="Error Handling" />
					<section id="4.1" name="Translation Time Processing Errors" />
					<section id="4.2" name="Request Time Processing Errors" />
					<section id="4.3" name="Using JSPs as Error Pages" />
					<section id="5" name="Comments" />
					<section id="5.1" name="Comments in JSP Pages in Standard Syntax" />
					<section id="5.2" name="Comments in JSP Documents" />
					<section id="6" name="Quoting and Escape Conventions" />
					<section id="7" name="Overall Semantics of a JSP Page" />
					<section id="8" name="Objects" />
					<section id="8.1" name="Objects and Variables" />
					<section id="8.2" name="Objects and Scopes" />
					<section id="8.3" name="Implicit Objects" />
					<section id="8.4" name="the 'pageContext' Object" />
					<section id="9" name="Template Text Semantics" />
					<section id="10" name="Directives" />
					<section id="10.1" name="The 'page' Directive" />
					<section id="10.2" name="The 'taglib' directive" />
					<section id="10.3" name="The 'include' directive" />
					<section id="10.4" name="Implicit Includes" />
					<section id="10.5" name="Including Data in JSP Pages" />
					<section id="10.6" name="Additional Directives for Tag Files" />
					<section id="11" name="EL Elements" />
					<section id="12" name="Scripting Elements" />
					<section id="12.1" name="Declarations" />
					<section id="12.2" name="Scriptlets" />
					<section id="12.3" name="Expressions" />
					<section id="13" name="Actions" />
					<section id="14" name="Tag Attribute Interpretation Semantics" />
					<section id="14.1" name="Request Time Attribute Values" />
					<section id="14.2" name="Type Conversions" />
				</sections>
			</chapter>
			<chapter id="2" name="Expression Language">
				<sections>
					<section id="1"
						name="Syntax of expressions in JSP pages: $() vs #{}" />
					<section id="2" name="Expressions and Template Test" />
					<section id="3" name="Expressions and Attribute Values" />
					<section id="3.1" name="Static Attribute" />
					<section id="3.2" name="Dynamic Attribute" />
					<section id="3.3" name="Deferred Value" />
					<section id="3.4" name="Deferred Method" />
					<section id="3.5" name="Dynamic Attribute or Deferred Expression" />
					<section id="3.6 " name="Examples of Using ${} and #{}" />
					<section id="4" name="Implicit Objects" />
					<section id="5" name="Deactivating EL Evaluation" />
					<section id="6" name="Disabling Scripting Elements" />
					<section id="7" name="Invalid EL Expressions" />
					<section id="8" name="Errors, Warnings, Default Values" />
					<section id="9" name="Resolution of Variables and their Properties" />
					<section id="10" name="Functions" />
					<section id="10.1" name="Invocation Syntax" />
					<section id="10.2" name="Tag Library Descriptor Information" />
					<section id="10.3" name="Example" />
					<section id="10.4" name="Semantics" />
				</sections>
			</chapter>
			<chapter id="3" name="JSP Configuration">
				<sections>
					<section id="1" name="JSP configuration information in web.xml" />
					<section id="2" name="Taglib map" />
					<section id="3" name="JSP Property Groups" />
					<section id="3.1" name="JSP Property Groups" />
					<section id="3.2" name="Deactivating EL Evaluation" />
					<section id="3.3" name="Disabling Scripting Elements" />
					<section id="3.4" name="Declaring Page Encodings" />
					<section id="3.5" name="Defining Implicit Includes" />
					<section id="3.6" name="Denoting XML Documents" />
					<section id="3.7" name="Deferred Syntax (character sequence #{)" />
					<section id="3.8" name="Removing whitespaces from template text" />
				</sections>
			</chapter>
			<chapter id="4" name="Internationalization Issues">
				<sections>
					<section id="1" name="Page Character Encoding" />
					<section id="1.1" name="Standard Syntax" />
					<section id="1.2 " name="XML Syntax" />
					<section id="2" name="Reponse Character Encoding" />
					<section id="3" name="Request Character Encoding" />
					<section id="4" name="XML View Character Encoding" />
					<section id="5" name="Delivering Localized Content" />
				</sections>
			</chapter>
			<chapter id="5" name="Standard Actions">
				<sections>
					<section id="1" name="&lt;jsp:useBean>" />
					<section id="2" name="&lt;jsp:setProperty>" />
					<section id="3" name="&lt;jsp:getProperty>" />
					<section id="4" name="&lt;jsp:include>" />
					<section id="5" name="&lt;jsp:forward>" />
					<section id="6" name="&lt;jsp:param>" />
					<section id="7" name="&lt;jsp:plugin>" />
					<section id="8" name="&lt;jsp:params>" />
					<section id="9" name="&lt;jsp:fallback>" />
					<section id="10" name="&lt;jsp:attribute>" />
					<section id="11" name="&lt;jsp:body>" />
					<section id="12" name="&lt;jsp:invoke>" />
					<section id="12.1" name="Basic Usage" />
					<section id="12.2" name="Storing Fragment Output" />
					<section id="12.3" name="Providing a Fragment Access to Variables" />
					<section id="13" name="&lt;jsp:doBody>" />
					<section id="14" name="&lt;jsp:element>" />
					<section id="15" name="&lt;jsp:text>" />
					<section id="16" name="&lt;jsp:output>" />
					<section id="17" name="Other Standard Actions" />
				</sections>
			</chapter>
			<chapter id="6" name="JSP Documents">
				<sections>
					<section id="1" name="Overview of JSP Documents and of XML Views" />
					<section id="2" name="JSP Documents" />
					<section id="2.1" name="Identifying JSP Documents" />
					<section id="2.2" name="Overview of Syntax of JSP Documents" />
					<section id="2.3" name="Semantic Model" />
					<section id="2.4" name="JSP Document Validation" />
					<section id="3" name="Syntactic Elements in JSP Documents" />
					<section id="3.1"
						name="Namespaces, Standard Actions, and Tag Libraries" />
					<section id="3.2" name="The 'jsp:root' element" />
					<section id="3.3" name="The 'jsp:output' element" />
					<section id="3.4" name="The 'jsp:directive.page' element" />
					<section id="3.5" name="The 'jsp:directive.include' element" />
					<section id="3.6" name="Additional Directive Elements in Tag Files" />
					<section id="3.7" name="Scripting Elements" />
					<section id="3.8" name="Other Standard Actions" />
					<section id="3.9" name="Template Content" />
					<section id="3.10" name="Dynamic Template Content" />
					<section id="4" name="Examples of JSP Documents" />
					<section id="4.1" name="Example: A simple JSP document" />
					<section id="4.2" name="Example: Generating Namespace-aware documents" />
					<section id="4.3" name="Example: Generating non-XML documents" />
					<section id="4.4" name="Example: Using Custom Actions and Tag Files" />
					<section id="5" name="Possible Future Directions for JSP documents" />
					<section id="5.1" name="Generating XML Content Natively" />
					<section id="5.2" name="Schema and XInclude Support" />
				</sections>
			</chapter>
			<chapter id="7" name="Tag Extensions">
				<sections>
					<section id="1" name="Introduction" />
					<section id="1.1" name="Goals" />
					<section id="1.2" name="Overview" />
					<section id="1.3" name="Classic Tag Handlers" />
					<section id="1.4" name="Simple Examples of Classic Tag Handlers" />
					<section id="1.5" name="Simple Tag Handlers" />
					<section id="1.6" name="JSP Fragments" />
					<section id="1.7" name="Simple Examples of Simple Tag Handlers" />
					<section id="1.8" name="Attributes with Dynamic Names" />
					<section id="1.9" name="Event Listeners" />
					<section id="1.10" name="JspId Attribute" />
					<section id="1.11" name="Resource Injection" />
					<section id="2" name="Tag Libraries" />
					<section id="2.1" name="Packaged Tag Libraries" />
					<section id="2.2" name="Location of Java Classes" />
					<section id="2.3" name="Tag Library Directive" />
					<section id="3" name="The Tag Library Descriptor" />
					<section id="3.1" name="Identifying Tag Library Descriptors" />
					<section id="3.2" name="TLD resource path" />
					<section id="3.3" name="Taglib map in web.xml" />
					<section id="3.4" name="Implicit Map entries from TLDs" />
					<section id="3.5" name="Implicit Map entries from the Container" />
					<section id="3.6" name="Determining the TLD Resource Path" />
					<section id="3.7" name="Translation-Time Class Loader" />
					<section id="3.8" name="Assembling a Web Application" />
					<section id="3.9" name="Well-Known URIs" />
					<section id="3.10" name="Tag and Tag Library Extension Elements" />
					<section id="4" name="Validation" />
					<section id="4.1" name="Translation-Time Mechanism" />
					<section id="4.2" name="Request-Time Errors" />
					<section id="5" name="Conventions and Other Issues" />
					<section id="5.1" name="How to Define New Implicit Objects" />
					<section id="5.2" name="Access to Vendor-Specific Information" />
					<section id="5.3" name="Customizing a Tag Library" />
				</sections>
			</chapter>
			<chapter id="8" name="Tag Files">
				<sections>
					<section id="1" name="Overview" />
					<section id="2" name="Syntax of Tag Files" />
					<section id="3" name="Sematics of Tag Files" />
					<section id="4" name="Packaging Tag Files" />
					<section id="4.1" name="Location of Tag Files" />
					<section id="4.2" name="Packaging in a JAR" />
					<section id="4.3" name="Packaging Directly in a Web Application" />
					<section id="4.4" name="Packaging as Precompiled Tag Handlers" />
					<section id="5" name="Tag File Directives" />
					<section id="5.1" name="The 'tag' directive" />
					<section id="5.2" name="The 'attribute' directive" />
					<section id="5.3" name="The 'variable' directive" />
					<section id="6" name="Tag Files in XML Syntax" />
					<section id="7" name="XML View of a Tag File" />
					<section id="8" name="Implicit Objects" />
					<section id="9" name="Variable Synchronization" />
					<section id="9.1" name="Synchronization Points" />
					<section id="9.2" name="Synchronization Examples" />
				</sections>
			</chapter>
			<chapter id="9" name="Scripting">
				<sections>
					<section id="1" name="Overall Structure" />
					<section id="1.1" name="Valid JSP Page" />
					<section id="1.2" name="Reserved Names" />
					<section id="1.3" name="Implementation Flexibility" />
					<section id="2" name="Declarations Section" />
					<section id="3" name="Initialization Section" />
					<section id="4" name="Main Section" />
					<section id="4.1" name="Template Data" />
					<section id="4.2" name="Scriptlets" />
					<section id="4.3" name="Expressions" />
					<section id="4.4" name="Actions" />
				</sections>
			</chapter>
			<chapter id="10" name="XML View">
				<sections>
					<section id="1"
						name="XML View of a JSP Document, JSP Page, or Tag File" />
					<section id="1.1" name="JSP Documents and Tag Files in XML Syntax" />
					<section id="1.2" name="JSP Pages or Tag Files in JSP Syntax" />
					<section id="1.3" name="JSP Comments" />
					<section id="1.4" name="The page Directive" />
					<section id="1.5" name="The taglib Directive" />
					<section id="1.6" name="The include Directive" />
					<section id="1.7 " name="Declarations" />
					<section id="1.8" name="Scriptlets" />
					<section id="1.9" name="Expressions" />
					<section id="1.10" name="Standard and Custom Actions" />
					<section id="1.11" name="Request-Time Attribute Expressions" />
					<section id="1.12" name="Template Text and XML Elements" />
					<section id="1.13" name="The jsp:id Attribute" />
					<section id="1.14" name="The tag Directive" />
					<section id="1.15" name="The attribute Directive" />
					<section id="1.16" name="The variable Directive" />
					<section id="2" name="Validating an XML View  of a JSP Page" />
					<section id="3" name="Examples" />
					<section id="3.1" name="A JSP Document" />
					<section id="3.2" name="A JSP page and its corresponding XML View" />
					<section id="3.3" name="Clearing Out Default Namespace on Include" />
					<section id="3.4" name="Taglib Directive Adds to Global Namespace" />
					<section id="3.5" name="Collective Application of Inclusion Semantics" />
				</sections>
			</chapter>
			<chapter id="11" name="JSP Container">
				<sections>
					<section id="1" name="JSP Page Model" />
					<section id="1.1" name="Protocol Seen by the Web Server" />
					<section id="2" name="JSP Page Implementation Class" />
					<section id="2.1" name="API Contracts" />
					<section id="2.2" name="Request and Response Parameters" />
					<section id="2.3" name="Omitting the 'extends' Attribute" />
					<section id="2.4" name="Using the 'extends' Attribute" />
					<section id="3" name="Buffering" />
					<section id="4" name="Precompilation" />
					<section id="4.1" name="Request Parameter Names" />
					<section id="4.2" name="Precompilation Protocol" />
					<section id="5" name="Debugging Requirements" />
					<section id="5.1" name="Line Number Mapping Guidelines" />
				</sections>
			</chapter>
			<chapter id="12" name="Core API">
				<sections>
					<section id="1" name="JSP Page Implementation Object Contract" />
					<section id="1.1" name="JspPage" />
					<section id="1.1.1" name="Methods" />
					<section id="1.2" name="HttpJspPage" />
					<section id="1.2.1" name="Methods" />
					<section id="1.3" name="JspFactory" />
					<section id="1.3.1" name="Constructors" />
					<section id="1.3.2" name="Methods" />
					<section id="1.4" name="JspEngineInfo" />
					<section id="1.4.1" name="Constructors" />
					<section id="1.4.2" name="Methods" />
					<section id="2" name="Implicit Objects" />
					<section id="2.1" name="JspContext" />
					<section id="2.1.1" name="Fields" />
					<section id="2.1.2" name="Constructors" />
					<section id="2.1.3" name="Methods" />
					<section id="2.2" name="PageContext" />
					<section id="2.2.1" name="Fields" />
					<section id="2.2.2" name="Constructors" />
					<section id="2.2.3" name="Methods" />
					<section id="2.3" name="JspWriter" />
					<section id="2.3.1" name="Fields" />
					<section id="2.3.2" name="Constructors" />
					<section id="2.3.3" name="Methods" />
					<section id="2.4" name="ErrorData" />
					<section id="2.4.1" name="Constructors" />
					<section id="2.4.2" name="Methods" />
					<section id="3" name="An Implementation Example" />
					<section id="4" name="Exceptions" />
					<section id="4.1" name="JspException" />
					<section id="4.1.1" name="Constructors" />
					<section id="4.1.2" name="Methods" />
					<section id="4.2" name="JspTagException" />
					<section id="4.2.1" name="Constructors" />
					<section id="4.3" name="SkipPageException" />
					<section id="4.3.1" name="Constructors" />
				</sections>
			</chapter>
			<chapter id="13" name="Tag Extension API">
				<sections>
					<section id="1" name="Classic Tag Handlers" />
					<section id="1.1" name="Tag" />
					<section id="1.1.1" name="Fields" />
					<section id="1.1.2" name="Methods" />
					<section id="1.2" name="IterationTag" />
					<section id="1.2.1" name="Fields" />
					<section id="1.2.2" name="Methods" />
					<section id="1.3" name="TryCatchFinally" />
					<section id="1.3.1" name="Methods" />
					<section id="1.4" name="TagSupport" />
					<section id="1.4.1" name="Fields" />
					<section id="1.4.2" name="Constructors" />
					<section id="1.4.3" name="Methods" />
					<section id="2"
						name="Tag Handlers that want Access to their Body Content" />
					<section id="2.1" name="BodyContent" />
					<section id="2.1.1" name="Constructors" />
					<section id="2.1.2" name="Methods" />
					<section id="2.2" name="BodyTag" />
					<section id="2.2.1" name="Fields" />
					<section id="2.2.2" name="Methods" />
					<section id="2.3" name="BodyTagSupport" />
					<section id="2.3.1" name="Fields" />
					<section id="2.3.2" name="Constructors" />
					<section id="2.3.3" name="Methods" />
					<section id="3" name="Dynamic Attributes" />
					<section id="3.1" name="DynamicAttributes" />
					<section id="3.1.1" name="Methods" />
					<section id="4" name="Annotated Tag Handler Management Example" />
					<section id="5" name="Cooperating Actions" />
					<section id="6" name="Simple Tag Handlers" />
					<section id="6.1" name="SimpleTag" />
					<section id="6.1.1" name="Methods" />
					<section id="6.2" name="JspFragment" />
					<section id="6.2.1" name="Methods" />
					<section id="6.3" name="TagAdapter" />
					<section id="6.3.1" name="Constructors" />
					<section id="6.3.2" name="Methods" />
					<section id="7" name="JSP Fragments" />
					<section id="7.1" name="JspFragment" />
					<section id="7.1.1" name="Methods" />
					<section id="8" name="Example Simple Tag Handler Secnario" />
					<section id="9" name="Translation-time Classes" />
					<section id="9.1" name="TagLibraryInfo" />
					<section id="9.1.1" name="Fields" />
					<section id="9.1.2" name="Constructors" />
					<section id="9.1.3" name="Methods" />
					<section id="9.2" name="TagInfo" />
					<section id="9.2.1" name="Fields" />
					<section id="9.2.2" name="Constructors" />
					<section id="9.2.3" name="Methods" />
					<section id="9.3" name="TagAttributeInfo" />
					<section id="9.3.1" name="Fields" />
					<section id="9.3.2" name="Constructors" />
					<section id="9.3.3" name="Methods" />
					<section id="9.4" name="PageData" />
					<section id="9.4.1" name="Constructors" />
					<section id="9.4.2" name="Methods" />
					<section id="9.5" name="TagLibraryValidator" />
					<section id="9.5.1" name="Constructors" />
					<section id="9.5.2" name="Methods" />
					<section id="9.6" name="ValidationMessage" />
					<section id="9.6.1" name="Constructors" />
					<section id="9.6.2" name="Methods" />
					<section id="9.7" name="TagExtraInfo" />
					<section id="9.7.1" name="Constructors" />
					<section id="9.7.2" name="Methods" />
					<section id="9.8" name="TagData" />
					<section id="9.8.1" name="Fields" />
					<section id="9.8.2" name="Constructors" />
					<section id="9.8.3" name="Methods" />
					<section id="9.9" name="VariableInfo" />
					<section id="9.9.1" name="Fields" />
					<section id="9.9.2" name="Constructors" />
					<section id="9.9.3" name="Methods" />
					<section id="9.10" name="TagVariableInfo" />
					<section id="9.10.1" name="Constructors" />
					<section id="9.10.2" name="Methods" />
				</sections>
			</chapter>
			<chapter id="14" name="Expression Language API">
				<sections>
					<section id="1" name="Expression Evaluator" />
					<section id="1.1" name="ExpressionEvaluator" />
					<section id="1.1.1" name="Methods" />
					<section id="1.2" name="Expression" />
					<section id="1.2.1" name="Methods" />
					<section id="1.3" name="VariableResolver" />
					<section id="1.3.1" name="Methods" />
					<section id="1.4" name="FunctionMapper" />
					<section id="1.4.1" name="Methods" />
					<section id="2" name="Exceptions" />
					<section id="2.1" name="ELException" />
					<section id="2.1.1" name="Constructors" />
					<section id="2.1.2" name="Methods" />
				</sections>
			</chapter>
		</chapters>
	</location-names>
	<assertions>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:271</id>
			<description>When used as a tag attribute value, the #{expr} syntax
				is evaluated by the container only if the the jsp-version element
				specified in the TLD has the value 2.1 or higher. If the version
				specified is less than 2.1, then the {expr} syntax is simply
				processed as a String literal. [EvaluationOf#{expr}]</description>
			<location chapter="0" section="N/A" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:272</id>
			<description>When used in template text, the #{ character sequence
				triggers a translation error, unless specifically allowed through a
				configuration setup. [TemplateTextPoundTranslationError]
			</description>
			<location chapter="0" section="N/A" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:273</id>
			<description>The #{ character sequence triggers a translation error
				if used for a tag attribute of a tag library where the jsp-version
				is greater than or equal to 2.1, and for which the attribute is not
				marked as a deferred expression in the TLD.
				[TagLibraryPoundTranslationError]</description>
			<location chapter="0" section="N/A" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:1</id>
			<description>It is illegal JSP syntax, which must result in a
				translation error, to use both an XML element attribute and a
				&lt;jsp:attribute> standard action to pass the value of the same
				attribute.</description>
			<location chapter="1" section="3.6" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:2</id>
			<description>A translation error will result if the custom action
				invocation has &lt;jsp:attribute> elements but does not define the
				body using a &lt;jsp:body> element.</description>
			<location chapter="1" section="3.6" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:3</id>
			<description>White space within the body text of a document is not
				significant, but is preserved.</description>
			<location chapter="1" section="3.8" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:4</id>
			<description>Fatal translation failures shall result in the failure
				of subsequent client requests for the translation target with the
				appropriate error specification: For HTTP protocols the error status
				code 500 (Server Error) is returned.</description>
			<location chapter="1" section="4.1" />
			<comment>While this could be deemed as testable, there are several
				areas in the spec that state a fatal translation error will occur in
				a specific case. That is where this assertion will be exercised.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:261</id>
			<description>A JSP container must detect if a JSP error page is
				self-referencing and throw a translation error.
				[SelfReferencingErrorPage]</description>
			<location chapter="1" section="4.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:5</id>
			<description>HTML comments present within a particular translation
				unit are treated as uninterpreted template text by the JSP
				container.</description>
			<location chapter="1" section="5.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:6</id>
			<description>The body content of a JSP comment is ignored completely.</description>
			<location chapter="1" section="5.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:262</id>
			<description>The body of the content of a comment in an XML document
				is ignored completely. [CommentsDocumentsXml]</description>
			<location chapter="1" section="5.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:263</id>
			<description>Comments in JSP documents do not nest.
				[CommentsDocumentsNotNest]</description>
			<location chapter="1" section="5.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:264</id>
			<description>There is no special quoting mechanism within EL
				expressions; use a literal ?${? if the literal ${ is desired and
				expressions are enabled for the page (similarly, use a literal ?#{?
				if the literal #{ is desired). [QuotingWithinElExpressions]</description>
			<location chapter="1" section="6" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:7</id>
			<description>For JSP's in standard syntax, a literal %> is quoted by
				%\>, a literal &lt;% is quoted by &lt;\%, a single quote (') is
				quotes as \', a double quite (") is quoted as \", a backslash (\) is
				quoted as \\, additionally, the entities \' and \" are available to
				describe single and double quotes.</description>
			<location chapter="1" section="6" />
			<comment>Use the examples in JSP.1.6 to create a test.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:265</id>
			<description>Only when the EL is enabled for a page, a literal $ can
				be quoted by \$, and a literal # can be quoted by \#.
				[QuotingELSymbolsInTemplateText]</description>
			<location chapter="1" section="6" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:266</id>
			<description>Only when the EL is enabled for a page, a literal $ can
				be quoted by \$, and a literal # can be quoted by \#.
				[QuotingELSymbolsInAttributes]</description>
			<location chapter="1" section="6" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:8</id>
			<description>Objects with page scope are accessible only within the
				target page they are created. All references to such an object shall
				be released after the response is sent back to the client from the
				JSP page or the request is forwareded somwhere else. References to
				objects with page scope are stored in the 'pageContext' object.</description>
			<location chapter="1" section="8.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:9</id>
			<description>Objects with request scope are accessible from pages
				processing the same request where they were created. References to
				the object shall be released after the request is processed. In
				particular, if the request is forwarded to a resource in the same
				runtime, the object is still reachable. References to objects with
				request scope are stored in the 'request' object.</description>
			<location chapter="1" section="8.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:10</id>
			<description>Objects with session scope are accessible from pages
				processing requests that in the same session as the one in which
				they were created. It is not legal to define an object with session
				scope from within a page that is not session-aware. All references
				to the object shall be released after the associated session ends.
				References to objects with session scope are stored in the 'session'
				object associated with the page activation.</description>
			<location chapter="1" section="8.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:11</id>
			<description>Objects with application scope are accessible from pages
				processing requests that are in the same application as the one in
				which they were created. Objects with application scope can be
				defined (and reached) from pages that are not session-aware.
				References to objects with application scope are stored in the
				'application' object associated with a page activation. The
				'application' object is the servlet context obtained from the
				servlet configuration object. All references to the object shall be
				released when the runtime environment reclaims the ServletContext.</description>
			<location chapter="1" section="8.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:12</id>
			<description>The 'request' implicit object is an instance of
				javax.servlet.ServletRequest; if the protocol used is HTTP, then the
				request object is an instance of
				javax.servlet.http.HttpServletRequest (request scope).</description>
			<location chapter="1" section="8.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:13</id>
			<description>The 'response' implicit object is an instance of
				javax.servlet.ServletResponse; if the protocol used is HTTP, then
				the response object is an instance of
				javax.servlet.http.HttpServletResponse (page scope)</description>
			<location chapter="1" section="8.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:14</id>
			<description>The 'pageContext' implicit object is an instance of
				javax.servlet.jsp.PageContext (page scope).</description>
			<location chapter="1" section="8.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:15</id>
			<description>The 'session' implicit object is an instance of
				javax.servlet.http.HttpSession and is only valid for HTTP protocols
				(session scope).</description>
			<location chapter="1" section="8.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:16</id>
			<description>The 'application' implicit object is an instance of
				javax.servlet.ServletContext (same object as that returned from
				getServletConfig().getContext(); application scope).</description>
			<location chapter="1" section="8.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:17</id>
			<description>The 'exception' implicit object is an instance of
				java.lang.Throwable (page scope) and is only available in errro
				pages.</description>
			<location chapter="1" section="8.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:18</id>
			<description>White space may or may not be present after '&lt;@%' and
				before '%>' within JSP directives.</description>
			<location chapter="1" section="10" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:19</id>
			<description>Directives do not produce any output into the current
				'out' stream.</description>
			<location chapter="1" section="10" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:20</id>
			<description>The page directive can appear multiple times, and is
				position independent within a given translation unit.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:21</id>
			<description>A translation error will occur if the page directive
				defines duplicate attribute/values within a given translation unit,
				unless the values for the duplicate attributes are identical for all
				occurrences. The import and pageEncoding attributes are exempt from
				this rule and can appear multiple times.</description>
			<location chapter="1" section="10.1" />
			<comment>NOTE: This may change. Reference PageDirectiveUniqueAttr
				validity constraint.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="deprecated" testable="true">
			<id>JSP:SPEC:22</id>
			<description>The 'isScriptingEnabled' attribute of the page
				directive, if true, allows the presence of scripting elements
				(scriptlets, expressions, declarations) within a given translation
				unit.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="deprecated" testable="true">
			<id>JSP:SPEC:23</id>
			<description>The 'isScriptingEnabled' attribute of the page
				directive, if false, disallows the presence of scripting elements
				(scriptlets, expressions, declarations) within a given translation
				unit and will generate a translation error if they are present.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="deprecated" testable="true">
			<id>JSP:SPEC:24</id>
			<description>The default value for 'isScriptingEnabled' of the page
				directive, if not specified, is true.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="deprecated" testable="true">
			<id>JSP:SPEC:25</id>
			<description>The 'isELEnabled' attribute of the page directive, if
				true, directs the container to evaluate EL expressions.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="deprecated" testable="true">
			<id>JSP:SPEC:26</id>
			<description>The 'isELEnabled' attribute of the page directive , if
				false, will result in EL expressions not being evaluated by the
				container.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="deprecated" testable="true">
			<id>JSP:SPEC:27</id>
			<description>If the JSP is part of a Web application that is using a
				Servlet 2.3 deployment descriptor, the default value for the
				'isELEnabled' attribute of the page directive is false.</description>
			<location chapter="1" section="10.1" />
			<comment>Reference section JSP.2.2.4 Deactivating EL Evaluation</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="deprecated" testable="true">
			<id>JSP:SPEC:28</id>
			<description>If the JSP is part of a Web application that is using a
				Servlet 2.4 deployment descriptor, the default value for the
				'isELEnabled' attribute of the page directive is true.</description>
			<location chapter="1" section="10.1" />
			<comment>Reference section JSP.2.2.4 Deactivating EL Evaluation</comment>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:29</id>
			<description>All scripting languages, specifiable by the page
				directive's 'language' attribute, must provide some implicit objects
				that a JSP page author can use in declarations, scriptlets, and
				expressions (see Section JSP.1.3.8 for list of available implicit
				objects)</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:30</id>
			<description>All scripting languages, specifiable by the page
				directive's 'language' attribute, must expose the Java technology
				object model to the script environment, especially implicit
				variables, JavaBeans components properties, and public methods.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:31</id>
			<description>It is a fatal translation error for a page directive
				with a non-"java" language attribute to appear after the first
				scripting has been encountered.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:32</id>
			<description>The only required scripting language value for the
				'language' attribute is "java".</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:33</id>
			<description>The 'extends' attribute of the page directive specifies
				a fully qualified Java programming language class name, that names
				the superclass of the class to which this JSP page is transformed</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:34</id>
			<description>The 'import' attribute of the page directive specifies
				the fully qualified Java programming language type name denoting a
				particular type, or of a package name following by the ".*" string,
				denoting all the public types declared in that package, that shall
				be imported by the translated JSP page implementation and is thus
				available to the scripting language.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:35</id>
			<description>Packages java.lang.*, javax.servlet.*,
				javax.servlet.jsp.*, javax.servlet.http.* are imported implicitly by
				the JSP container. [DefaultImports]</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:267</id>
			<description>No packages other than java.lang.*, javax.servlet.*,
				javax.servlet.jsp.*, javax.servlet.http.* may be implicitly
				imported. [NoOtherPackagesImplicitlyImported]</description>
			<location chapter="" section="" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:36</id>
			<description>The 'session' attribute of the page directive, when
				true, indicates that the JSP page requires participation in an HTTP
				session.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:37</id>
			<description>The 'session' attribute of the page directive, when
				false, indicates that the JSP page does not participate in an HTTP
				session; the 'session' implicit object is not available to the page,
				and any reference to it within the translation unit will result in a
				translation error.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:38</id>
			<description>If the 'session' attribute of the page directive is not
				specified by a page directive, then the page will, by default,
				participate in an HTTP session (default value of true).</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:39</id>
			<description>If the 'buffer' attribute of the page directive is not
				specified, no buffering will be performed and all output will be
				written directly through to the ServletResponse PrintWriter.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:40</id>
			<description>The size value specified by the 'buffer' attribute of
				the page directive must be in kilobytes, and the suffix "kb" is
				mandatory.</description>
			<location chapter="1" section="10.1" />
			<comment>NOTE: Spec is unclear as to what happens if a different
				suffix is used, or is not present. Most likely a translation error.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:41</id>
			<description>The container must allocate a buffer at least as large
				as that specified by the 'buffer' attribute of the page directive.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:42</id>
			<description>The default buffer size of 8kb will be used if the
				'buffer' attribute of the page directive is not specified.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:43</id>
			<description>If the 'autoFlush' attribute of the page directive is
				true, the output will be automatically flushed when the buffer is
				filled.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:44</id>
			<description>If the 'autoFlush' attribute of the page directive is
				false, an exception will be raised to indicate a buffer overflow
				when the buffer is filled.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:45</id>
			<description>It is a translation error to set the 'autoFlush'
				attribute of the page directive to false, if the 'buffer' attribute
				is set to none.</description>
			<location chapter="1" section="10.1" />
			<comment>NOTE: This section needs to be clarified in the spec.
				Illegal most likely, in this case, means a translation error, but
				this should be clearly spelled out.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:46</id>
			<description>If the 'isThreadSafe' attribute of the page directive is
				false, the container must serialize requests to the JSP (it should
				behave like an SingleThreadModel servlet).</description>
			<location chapter="1" section="10.1" />
			<comment>Cannot test isThreadSafe="true" as the keyword 'may' is
				present. An implementation could potentially serialize requests in
				this case as well....thought I don't know why they would.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:47</id>
			<description>The 'info' attribute of the page directive specifies an
				arbitrary string that is incorporated into the translated page, that
				can subsequently be obtained from the page's implementation of
				Servlet.getServletInfo().</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:48</id>
			<description>The 'isErrorPage' attribute of the page directive. when
				true, will cause the implicit script language variable "exception"
				to be defined and its value is a reference to the offending
				Throwable from the source JSP page in error.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:49</id>
			<description>If the 'isErrorPage' attribute of the page directive is
				defined as false, then the implicit script language variable
				"exception" will not be available, and any such reference to this
				variable will result in a translation error.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:50</id>
			<description>The 'errorPage' attribute of the page directive,
				specifies the URL, either page-relative or context-relative, of a
				resource to which any Java programming language Throwable object(s)
				thrown but not caught by the page implementation are forwarded for
				error processing. The following request attributes will be made
				available within the error page:</description>
			<location chapter="1" section="10.1" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:50.1</id>
					<description>javax.servlet.jsp.jspException - throw Throwable
						object of the offending exception (for backwards compatibility
						with JSP 1.2)</description>
					<location chapter="1" section="4.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:50.2</id>
					<description>javax.servlet.error.exception - as per the Servlet
						specification.</description>
					<location chapter="1" section="4.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:50.3</id>
					<description>javax.servlet.error.status_code - as per the Servlet
						specification</description>
					<location chapter="1" section="4.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:50.4</id>
					<description>javax.servlet.error.exception_type - as per the
						Servlet specification.</description>
					<location chapter="1" section="4.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:50.5</id>
					<description>javax.servlet.error.message - as per the Servlet
						specification.</description>
					<location chapter="1" section="4.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:50.6</id>
					<description>javax.servlet.error.request_uri - as per the Servlet
						specification.</description>
					<location chapter="1" section="4.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:50.7</id>
					<description>javax.servlet.error.servlet_name - as per the Servlet
						specification.</description>
					<location chapter="1" section="4.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:50.8</id>
					<description>An instance of javax.servlet.jsp.ErrorData must be
						provided to the error page via PageContext.getErrorData().</description>
					<location chapter="1" section="4.3" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:51</id>
			<description>If the 'errorPage' attribute of the page directive is
				defined, it will take presendence over any error pages defined in
				the web application's deployment descriptor.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:52</id>
			<description>The character encoding (Content-Type response header)
				can be in the form of TYPE, or TYPE; Charset=CHARSET, with an
				optional white space after the ';'. Charset, if present, must be the
				IANA value for a character encoding. Similarly, if TYPE is a MIME
				type, see the IANA registry for values.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:53</id>
			<description>The default Content-Type for JSP Pages in classic syntax
				is "text/html;charset=ISO-8859-1".</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:54</id>
			<description>If a charset portion of the value provided to the
				'contentType' attribute is not specified, but the page encoding for
				the JSP page is specified, then the charset used will be that of the
				specified page encoding.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:55</id>
			<description>If a charset is not provided as part of the
				'contentType' attribute value, and the page encoding does not
				specifiy a type, then the default charset is ISO-8859-1 for JSP
				pages in classic syntax.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:56</id>
			<description>If a charset is not provided as part of the
				'contentType' attribute value, and the page encoding does not
				specifiy a type, then the default charset is UTF-8 for JSP pages in
				XML syntax.</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:57</id>
			<description>The 'pageEncoding' attribute of the page directive
				specifies the character encoding of the page. The value is in the
				form of CHARSET which my be the IANA value for a character encoding.
				If no 'pageEncoding' attribute is specified, the default of
				ISO-8859-1 will be used.</description>
			<location chapter="1" section="10.1" />
			<comment>What about the default encoding for JSP pages in XML syntax?</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:268</id>
			<description>If the isELIgnored attribute is true, EL expressions (of
				the form ${...} and #{...}) are ignored by the container. If false,
				EL expressions (of the form ${...} and #{...}) are recognized when
				they appear in template text or action attributes. [isELIgnored]</description>
			<location chapter="1" section="1.10" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:269</id>
			<description>The deferredSyntaxAllowedAsLiteral page directive
				attribute indicates if the character sequence #{ is allowed or not
				when used as a String literal in this page and translation unit. If
				false (the default value), a translation error occurs when the
				character sequence is used as a String literal.
				[DeferredSyntaxAllowedAsLiteralPageDirective]
			</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:270</id>
			<description>The trimDirectiveWhitespaces page attribute directive
				indicates how whitespaces in template text should be handled. If
				true, template text that contains only whitespaces is removed from
				the output. The default is not to trim whitespaces.
				[TrimDirectiveWhitespacesPageDirective]</description>
			<location chapter="1" section="10.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:58</id>
			<description>It is a translation error for the taglib directive to
				appear after actions that use the prefix specified by the directive.</description>
			<location chapter="1" section="10.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:59</id>
			<description>The 'uri' attribute of the taglib directive specifies
				either an absolute or relative URI that uniquely identifies the tag
				library descriptor associated with this prefix.</description>
			<location chapter="1" section="10.2" />
			<comment>URI and taglibrary determination is defined in Chapter 7</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:60</id>
			<description>The 'tagdir' attribute of the taglib directive indicates
				that the specified prefix is to be used to identify tag extensions
				installed in the /WEB-INF/tags directory or a subdirectory.</description>
			<location chapter="1" section="10.2" />
			<comment>Refer to JSP8.4.3 for more details.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:61</id>
			<description>A translation error must occur if the value provided to
				the 'tagdir' attribute of the taglib directive doesn't start with
				'/WEB-INF/tags' and point to a directory that exists within the web
				application.</description>
			<location chapter="1" section="10.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:62</id>
			<description>A translation error must occur if the 'prefix' attribute
				of the taglib directive is not present.</description>
			<location chapter="1" section="10.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:63</id>
			<description>A translation error must occur if both the 'tagdir' and
				'uri' attributes are present in the same taglib directive.</description>
			<location chapter="1" section="10.2" />
			<comment>Refer to EBNF</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:64</id>
			<description>The 'prefix' attribute of the taglib directive is used
				to distinguish a custom action, e.g &lt;myPrefix:myTag>.</description>
			<location chapter="1" section="10.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:65</id>
			<description>The value provided to the 'prefix' attribute of the
				taglib directive must follow the naming convention specified in the
				XML namespaces specification.</description>
			<location chapter="1" section="10.2" />
			<comment>Marked as not testable as there it could be container
				specific as to what happens in this case (most likely a translation
				error if they did check).</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:66</id>
			<description>It is illegal to provide an empty prefix to the taglib
				directive.</description>
			<location chapter="1" section="10.2" />
			<comment>Marked as not testable. What exactly does illegal mean?
				Again, most likely a translation time issue, but would be good to
				have clarity.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:67</id>
			<description>A translation error will occur if the tag name provided
				in the custom action isn't found in the taglibrary designated by the
				prefix.</description>
			<location chapter="1" section="10.2" />
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:68</id>
			<description>A JSP container can include a mechanism for being
				notified if an included file changes, so the container can recompile
				the JSP page. However, the JSP 2.0 specification does not have a way
				of directing the JSP container that included files have changed.</description>
			<location chapter="1" section="10.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:69</id>
			<description>The 'file' attribute of the include directive specifies
				the resource to be imported either relative to web appliation
				context path, or relative to the page performing the include.</description>
			<location chapter="1" section="10.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:257</id>
			<description>With respect to the standard and XML syntaxes, a file
				included via the include directive can use either the same syntax as
				the including page, or a different syntax. the semantics for mixed
				syntax includes are described in Section JSP.1.10.5.</description>
			<location chapter="1" section="10.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:70</id>
			<description>The include directive includes content at translation
				time meaning the bytes of the included resource are directly
				inserted into the page.
			</description>
			<location chapter="1" section="10.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:258</id>
			<description>With respect to the standard and XML syntaxes, just as
				with the include directive, implicit includes can use either the
				same syntax as the including page, or a different syntax. The
				semantics for mixed syntax includes are described in Section
				JSP.1.10.5.</description>
			<location chapter="1" section="10.4" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:259</id>
			<description>For translation-time includes, included content can use
				either the same syntax as the including page, or a different syntax.
				The following semantics for translation-time includes apply.</description>
			<location chapter="1" section="10.5" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:259.1</id>
					<description>The JSP container must detect the syntax for each JSP
						file individually and parse each JSP file according to the syntax
						in which it is written.</description>
					<location chapter="1" section="10.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:259.2</id>
					<description>A JSP file written using the XML syntax must be
						well-formed according to the "XML" and "Namespaces in XML"
						specifications, otherwise a translation error must occur.</description>
					<location chapter="1" section="10.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:259.3</id>
					<description>When including a JSP document (written in the XML
						syntax), in the resulting XML View of the translation unit the
						root element of the included segment must have the default
						namespace reset to "". This is so that any namespaces associated
						with the empty prefix in the including document are not carried
						over to the included document.</description>
					<location chapter="1" section="10.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:259.4</id>
					<description>When a taglib directive is encountered in a standard
						syntax page, the namespace is applied globally, and is added to
						the &lt;jsp:root> element of the resulting XML View of the
						translation unit.</description>
					<location chapter="1" section="10.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:259.5</id>
					<description>If a taglib directive is encountered in a standard
						syntax page that attempts to redefine a prefix that is already
						defined in the current scope (by a JSP segment in either syntax),
						a translation error must occur unless that prefix is being
						redefined to the same namespace URI.</description>
					<location chapter="1" section="10.5" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:71</id>
			<description>All JSP containers must support scripting elements based
				on the Java programming language.</description>
			<location chapter="1" section="12" />
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:72</id>
			<description>Any other scripting languages that are supported by a
				particular JSP container must support: The manipulation of Java
				objects; Invocation of methods on Java objects; Catching of Java
				language excepitons.</description>
			<location chapter="1" section="12" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:73</id>
			<description>A declaration (&lt;%! DECL_BODY %>) must be a complete
				declarative statment, or sequence thereof, according to the syntax
				of the scripting language specified, otherwise a translation error
				will occur.</description>
			<location chapter="1" section="12.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:74</id>
			<description>Declartaions do not produce any output into the current
				out stream.</description>
			<location chapter="1" section="12.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:75</id>
			<description>Declarations are initialized when the JSP page is
				initialized and are made available to other delcarations,
				scriptlets, and expressions.</description>
			<location chapter="1" section="12.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:76</id>
			<description>Scriptlets (&lt;% SCRIPTLET_BODY %>) can contain any
				code framents that are valid for the scripting language specified by
				the 'language' attribute of the page directive, and are executed at
				request time in the order that they appear on the JSP page.</description>
			<location chapter="1" section="12.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:77</id>
			<description>An expression element in a JSP page is a scripting
				language expression that is evaluated and the result is coerced to a
				String and emitted into the current JspWriter (out) object.</description>
			<location chapter="1" section="12.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:78</id>
			<description>If the result of the expression cannot be coerced to a
				String, the following must happen: If the problem is detected at
				translation time, a translation time error shall occur. If the
				coercion cannot be detected during translation, a ClassCastException
				shall be raised at request time.</description>
			<location chapter="1" section="12.3" />
			<comment>This detection mechanism will be container dependant. Cannot
				test.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:79</id>
			<description>Expressions are evaluated left to right in the JSP page.  </description>
			<location chapter="1" section="12.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:80</id>
			<description>If an expression appears in more than one run-time
				attribute, they are evaluated left-to-right in the element.</description>
			<location chapter="1" section="12.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:81</id>
			<description>A translation error will occur if the expression is not
				a complete expression in the scripting language in which it is
				written.</description>
			<location chapter="1" section="12.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:82</id>
			<description>Request-time attribute values in the form of '&lt;%=
				scriptlet_expr %>' are only usable by actions, and cannot be used in
				directives.</description>
			<location chapter="1" section="14.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:83</id>
			<description>A translation error will occur if a request-time
				attribute expression does not appear by itself (multiple
				expressions, and mixing of expressions and string constands are not
				permitted).</description>
			<location chapter="1" section="14.1" />
			<comment>I assume this will be a translation error. Correct if
				necessary.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:84</id>
			<description>Any attempt to provide an attribute value via a
				request-time expression that doesn't accept request-time
				expressions, will result in a translation error.</description>
			<location chapter="1" section="14.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:85</id>
			<description>A type conversion failure for a static attribute lead to
				a failure at either request or translation time.</description>
			<location chapter="1" section="14.2.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:86</id>
			<description>Conversion of string values to a JavaBean property is
				done via setAsText(string-literal).</description>
			<location chapter="1" section="14.2.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:87</id>
			<description>Conversion of string values to boolean or Boolean is
				performed as indicated in java.lang.Boolean.valueOf(String).</description>
			<location chapter="1" section="14.2.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:88</id>
			<description>Conversion of string values to byte or Byte is performed
				as indiciated in java.lang.Byte.valueOf(String).</description>
			<location chapter="1" section="14.2.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:89</id>
			<description>Conversion of string values to char or Character is
				performed as indicated in String.charAt(0).</description>
			<location chapter="1" section="14.2.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:90</id>
			<description>Conversion of string values to double or Double is
				performed as indiciated in java.lang.Double.valueOf(String).</description>
			<location chapter="1" section="14.2.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:91</id>
			<description>Conversion of string values to int or Integer is
				performed as indiciated in java.lang.Integer.valueOf(String).</description>
			<location chapter="1" section="14.2.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:92</id>
			<description>Conversion of string values to float or Float is
				performed as indicated in java.lang.Float.valueOf(String).</description>
			<location chapter="1" section="14.2.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:93</id>
			<description>Conversion of string values to long or Long is perfomed
				as indicated in java.lang.Long.valueOf(String).</description>
			<location chapter="1" section="14.2.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:94</id>
			<description>Conversion of string values to short or Short is
				performed as indicated in java.lang.Short.valueOf(String).</description>
			<location chapter="1" section="14.2.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:95</id>
			<description>Conversion of string values to Object is performed as if
				new String(string).</description>
			<location chapter="1" section="14.2.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:96</id>
			<description>No type conversion is perfomed against reqeust-time
				expressions, they are provided to the element as is.</description>
			<location chapter="1" section="14.2.2" />
			<comment>This seems to indicate that if the underlying attribute
				being set by this request-time expression doesn't match the type
				provided by the expression, a runtime exception will be thrown. Good
				negative test case.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:97</id>
			<description>An EL expression that is evaluated immediately is
				represented in JSP with the syntax ${}, while an EL expression whose
				evaluation is deferred is represented with the syntax #{}</description>
			<location chapter="2" section="1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="deprecated" testable="true">
			<id>JSP:SPEC:98</id>
			<description>If EL is being evaluated by the container, a translation
				error will occur if an EL expression is provided as a value to an
				attribute that does not accept request-time expressions.</description>
			<location chapter="2" section="3.6" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:274</id>
			<description>The EL can be used directly in template text, be it
				inside the body of a custom or standard actions or in template text
				outside of any action. [ELTemplateText]</description>
			<location chapter="2" section="2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:99</id>
			<description>EL expressions will not be evaluated if the tag body is
				'tagdependent'.</description>
			<location chapter="2" section="2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:275</id>
			<description>Only the ${} syntax is allowed for expressions in
				template text. A translation error will result if #{} is used in
				template text unless #{} is turned off via a backwards compatibility
				mechanism.[ELTemplateTextRestriction]</description>
			<location chapter="2" section="2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:276</id>
			<description>The type of a static attribute is always
				java.lang.String.[ElExpressionStaticAttributeType]</description>
			<location chapter="2" section="3.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:277</id>
			<description>The value of a static attribute must be a String
				literal. It is illegal to specify an expression.
				[ElExpressionStaticAttributeValue]</description>
			<location chapter="2" section="3.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:278</id>
			<description>If the type of a dynamic attribute is not specified in
				the TLD, defaults to
				java.lang.Object.[ElExpressionDynamicAttributeType]</description>
			<location chapter="2" section="3.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:279</id>
			<description>The value of a dynamic attribute can be a String
				literal, a scriptlet expression, or an EL expression using the ${}
				syntax. [ElExpressionDynamicAttributeValue]</description>
			<location chapter="2" section="3.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:280</id>
			<description>After evaluation of a dynamic attribute, the value is
				coerced to the expected type. The resulting value is passed in to
				the setter method for the tag
				attribute.[ElExpressionDynamicAttributeEvaluation]</description>
			<location chapter="2" section="3.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:281</id>
			<description>If type of a deferred-value attribute is not specified
				in the TLD, defaults to java.lang.Object.[ElDeferredValueType]</description>
			<location chapter="2" section="3.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:282</id>
			<description>The value of a deferred-value attribute can be a String
				literal or an EL expression using the #{} syntax.
				[ElDeferredValueValue]</description>
			<location chapter="2" section="3.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:283</id>
			<description>The result of parsing the expression of a deferred-value
				attribute is passed directly to the setter method of the tag
				attribute, whose argument type must be jakarta.el.ValueExpression.
				[ElDeferredValueProcessing]
			</description>
			<location chapter="2" section="3.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:284</id>
			<description>When a deferred-value attribute is evaluated by the tag
				handler, the value is coerced to the expected type.
				[ElDeferredValueCoercion]</description>
			<location chapter="2" section="3.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:285</id>
			<description>If a static value is provided for a deferred-value
				attribute, it is converted to a ValueExpression where
				isLiteralText() returns true.[ElDeferredValueStatic Evaluation]</description>
			<location chapter="2" section="3.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:286</id>
			<description>If the method signature for a deferred-method attribute
				is not defined in the TLD, it defaults to void
				method().[ElDeferredMethodSignature]</description>
			<location chapter="2" section="3.4" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:287</id>
			<description>The value of a deferred-method attribute can be a String
				literal or an EL expression using the #{} syntax.
				[ElDeferredMethodValue]</description>
			<location chapter="2" section="3.4" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:288</id>
			<description>A String literal can be provided to a deferred-method
				attribute, as long as the return type of the deferred method
				signature is not void. A MethodExpression is created, which when
				invoked, returns the String literal coerced to expected return
				type.[ElDeferredMethodStringLiteral]</description>
			<location chapter="2" section="3.4" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:289</id>
			<description>A translation error occurs if the return type of a
				string literal value for a deferred-method attribute is void or if
				the string literal cannot be coerced to the return type of the
				deferred method signature.[ElDeferredMethodStringLiteralError]</description>
			<location chapter="2" section="3.4" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:290</id>
			<description>The value of a deferred-expression-or-dynamic attribute
				can be a String literal, a scriptlet expression, or an EL expression
				using the ${} or #{} syntax. [AllowedDynamicAttributeValueTypes]</description>
			<location chapter="2" section="3.5" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:291</id>
			<description>The setter method argument of a deferred-expression-or
				dynamic attribute must be of type java.lang.Object. [
				DynamicAttributeSetterMethod]</description>
			<location chapter="2" section="3.5" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="deprecated" testable="true">
			<id>JSP:SPEC:100</id>
			<description>A container must support EL expressions provided in
				template text be it inside the body of a custom or standard action,
				or in template text outside of any action.</description>
			<location chapter="2" section="2.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSP:SPEC:101</id>
			<description>The boolean literals in the EL are 'true' and 'false'</description>
			<location chapter="2" section="3.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSP:SPEC:102</id>
			<description>EL integer literals are equivelant to Java integer
				literals.</description>
			<location chapter="2" section="3.2" />
			<comment>See IntergerLiteral production in JSP.2.13</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSP:SPEC:103</id>
			<description>EL floating point literals are equivelant to Java
				floating point literals.</description>
			<location chapter="2" section="3.2" />
			<comment>See FloatingPointLiteral production in JSP.2.13</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSP:SPEC:104</id>
			<description>String literals are encapsulated by either double or
				single quotes (''' or '"' respectively). Quotes need to be escaped
				in the String if the string value enclosed is the same type of
				quote. Escaping definitions are the same as those defined in
				JSP.1.6.</description>
			<location chapter="2" section="3.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSP:SPEC:105</id>
			<description>The EL null literal is defined as 'null'.</description>
			<location chapter="2" section="3.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="false">
			<id>JSP:SPEC:106</id>
			<description>The EL follows ECMAScript in unifying the treatment of
				the "." and "[]" operators. To evaluate expr-a[expr-b]:</description>
			<location chapter="2" section="3.4" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:106.1</id>
					<description>Evaluate expr-a into value-a, if value-a is null,
						return null.</description>
					<location chapter="2" section="3.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:106.2</id>
					<description>Evaluate expr-b into value-b, if value-b is null,
						return null.</description>
					<location chapter="2" section="3.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:106.3</id>
					<description>If value-a is a Map, then if
						!value-a.containsKey(value-b) then return null, otherwise, return
						the value of value-a.get(value-b).</description>
					<location chapter="2" section="3.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:106.4</id>
					<description>If value-a is a List or array:</description>
					<location chapter="2" section="3.4" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:106.4.1</id>
							<description>If value-b cannot be coerced into an int (using
								coercion rules) an error occurs.</description>
							<location chapter="2" section="3.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:106.4.2</id>
							<description>If value-a.get(value-b) or Array.get(value-a,
								value-b) throws an ArrayIndexOutofBoundException or
								IndexOutOfBoundsException, return null.</description>
							<location chapter="2" section="3.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:106.4.3</id>
							<description>If value-a.get(value-b) or Array.get(value-a,
								value-b) throws other exception, error.</description>
							<location chapter="2" section="3.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:106.4.4</id>
							<description>Otherwise, return value-a.get(value-b) or
								Array.get(value-a, value-b) as appropriate.</description>
							<location chapter="2" section="3.4" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:106.5</id>
					<description>Otherwise (a JavaBeans object, coerce value-b to
						String</description>
					<location chapter="2" section="3.4" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:106.5.1</id>
							<description>If value-b is a readable property of value-a, return
								the result of the getter call.</description>
							<location chapter="2" section="3.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:106.5.2</id>
							<description>If value-b is not a readable property of value-a,
								return error.</description>
							<location chapter="2" section="3.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:106.5.3</id>
							<description>If the getter call throws an Exception: error.</description>
							<location chapter="2" section="3.4" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="false">
			<id>JSP:SPEC:107</id>
			<description>Binary operators - A { +,-,* } B</description>
			<location chapter="2" section="3.5.1" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:107.1</id>
					<description>If A or B is null, return 0</description>
					<location chapter="2" section="3.5.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:107.2</id>
					<description>If A or B is Float, Double, or a String containing
						".", "e", or "E", coerce both A and B to Double and apply
						operator.</description>
					<location chapter="2" section="3.5.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:107.3</id>
					<description>Otherwise coerce both A and B to Long and apply
						operator.</description>
					<location chapter="2" section="3.5.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:107.4</id>
					<description>If application of operator against A and B results in
						an exception, error.</description>
					<location chapter="2" section="3.5.1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="false">
			<id>JSP:SPEC:108</id>
			<description>Binary operator - A { / or div } B</description>
			<location chapter="2" section="3.5.2" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:108.1</id>
					<description>If A or B is null, return 0</description>
					<location chapter="2" section="3.5.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:108.2</id>
					<description>Coerce both A and B to Double and apply operator.</description>
					<location chapter="2" section="3.5.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:108.3</id>
					<description>If application of operator against A and B results in
						an exception, error.</description>
					<location chapter="2" section="3.5.2" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="false">
			<id>JSP:SPEC:109</id>
			<description>Binary Operator - A { % or mod } B</description>
			<location chapter="2" section="3.5.3" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:109.1</id>
					<description>If application of operator against A and B results in
						an exception, error.</description>
					<location chapter="2" section="3.5.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:109.2</id>
					<description>Otherwise coerce both A and B to Long and apply
						operator.</description>
					<location chapter="2" section="3.5.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:109.3</id>
					<description>If A or B is Float, Double, or a String containing
						".", "e", or "E", coerce both A and B to Double and apply
						operator.</description>
					<location chapter="2" section="3.5.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:109.4</id>
					<description>If A or B is null, return 0</description>
					<location chapter="2" section="3.5.3" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="false">
			<id>JSP:SPEC:110</id>
			<description>Unary minus operator - -A</description>
			<location chapter="2" section="3.5.4" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:110.1</id>
					<description>If A is null, return 0</description>
					<location chapter="2" section="3.5.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:110.2</id>
					<description>If A is a String:</description>
					<location chapter="2" section="3.5.4" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:110.2.1</id>
							<description>If A contains ".", "e", or "E", coerce to a Double
								and apply operator.</description>
							<location chapter="2" section="3.5.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:110.2.2</id>
							<description>If operation results in exception, error.</description>
							<location chapter="2" section="3.5.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:110.2.3</id>
							<description>If A is Byte, Short, Integer, Long, Float, Double,
								retain type and apply operator</description>
							<location chapter="2" section="3.5.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:110.2.4</id>
							<description>If application of operator results in exception,
								error.</description>
							<location chapter="2" section="3.5.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:110.2.5</id>
							<description>Otherwise error if operator cannot be applied to the
								given expression.</description>
							<location chapter="2" section="3.5.4" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:110.3</id>
					<description>If A is Byte, Short, Integer, Long, Float, Double:</description>
					<location chapter="2" section="3.5.4" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:110.3.1</id>
							<description>retain the type and apply the operator.</description>
							<location chapter="2" section="3.5.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:110.3.2</id>
							<description>If application of operator results in exception,
								error.</description>
							<location chapter="2" section="3.5.4" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSP:SPEC:111</id>
			<description>Relational operators - A { &lt;,>,&lt;=,=>,lt,gt,le,ge }
				B</description>
			<location chapter="2" section="3.5.6" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:111.1</id>
					<description>If A and B are equal, and operator is &lt;=, le, >=,
						or ge, return true, otherwise return false.</description>
					<location chapter="2" section="3.5.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:111.2</id>
					<description>If A or B is null, return false.</description>
					<location chapter="2" section="3.5.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:111.3</id>
					<description>If A or B is Float or Double coerce both A and B to
						Double and apply operator.</description>
					<location chapter="2" section="3.5.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:111.4</id>
					<description>If A or B is Byte, Short, Character, Integer, or Long,
						coerce both A and B to Long and apply operator.</description>
					<location chapter="2" section="3.5.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:111.8</id>
					<description>If A or B is String coerce both A and B to String,
						compare lexically.</description>
					<location chapter="2" section="3.5.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:111.5</id>
					<description>If A is Comparable, and A.compareTo(B) throws an
						exception, error; otherwise return the result of A.compareTo(B)</description>
					<location chapter="2" section="3.5.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:111.6</id>
					<description>If B is Comparable, and B.compareTo(A) throws an
						exception, error; otherwise return the result of B.compareTo(A)</description>
					<location chapter="2" section="3.5.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:111.7</id>
					<description>Otherwise return error.</description>
					<location chapter="2" section="3.5.6" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="false">
			<id>JSP:SPEC:112</id>
			<description>Relation Operatos - A { ==, !=, eq, ne } B</description>
			<location chapter="2" section="3.5.7" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:112.1</id>
					<description>If A == B, apply operator.</description>
					<location chapter="2" section="3.5.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:112.2</id>
					<description>If A or B is null, return false for == (eq), true for
						!= (ne)</description>
					<location chapter="2" section="3.5.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:112.3</id>
					<description>If A or B is Float or Double coerce both A and B to
						Double and apply operator.</description>
					<location chapter="2" section="3.5.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:112.4</id>
					<description>If A or B is Byte, Short, Character, Integer, or Long,
						coerce both A and B to Long and apply operator.</description>
					<location chapter="2" section="3.5.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:112.5</id>
					<description>If A or B is Boolean coerce both A and B to Boolean
						apply operator.</description>
					<location chapter="2" section="3.5.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:112.6</id>
					<description>If A or B is String coerce both A and B to String, if
						error occurs calling A.equals(B), error; otherwise apply operator
						to result of A.equals(B).</description>
					<location chapter="2" section="3.5.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:112.6.1</id>
							<description>If error occurs calling A.equals(B), error otherwise
								apply operator to result of A.equals(B).</description>
							<location chapter="2" section="3.5.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:112.6.2</id>
							<description>Otherwise apply operator to result of A.equals(B).</description>
							<location chapter="2" section="3.5.7" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="false">
			<id>JSP:SPEC:113</id>
			<description>Binary Operator - A { &amp;&amp;, ||, and, or } B</description>
			<location chapter="2" section="3.6.1" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:113.1</id>
					<description>Coerce both A and B to Boolean and apply operator.</description>
					<location chapter="2" section="3.6.1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="false">
			<id>JSP:SPEC:114</id>
			<description>Unary operator - { !, not } A</description>
			<location chapter="2" section="3.6.2" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:114.1</id>
					<description>Coerce A to Boolean and apply operator.</description>
					<location chapter="2" section="3.6.2" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="false">
			<id>JSP:SPEC:115</id>
			<description>Empty operator - empty A</description>
			<location chapter="2" section="3.7" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:115.1</id>
					<description>If A is null, return true</description>
					<location chapter="2" section="3.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:115.2</id>
					<description>If A is an emtpy String, return true.</description>
					<location chapter="2" section="3.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:115.3</id>
					<description>If A is an empty array, then return true.</description>
					<location chapter="2" section="3.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:115.4</id>
					<description>If A is an emtpy Map, then return true.</description>
					<location chapter="2" section="3.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:115.5</id>
					<description>If A is an empty List, then return true.</description>
					<location chapter="2" section="3.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:115.6</id>
					<description>Otherwise return false</description>
					<location chapter="2" section="3.7" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSP:SPEC:116</id>
			<description>Operator precedence (highest to lowest) - [] . then (),
				then -(unary) not ! emtpy, then * / div % mod, then + - (binary),
				then &lt; > &lt;= >= lt gt le ge, then == != eq ne, then &amp;&amp;
				and, then || or.</description>
			<location chapter="2" section="3.9" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="false">
			<id>JSP:SPEC:117</id>
			<description>The following words are reserved by the EL, and, or,
				not, eq, ne, lt, gt, le, ge, true, false, null, instanceof, empty,
				div, mod and should not be used as identifiers without being quoted.</description>
			<location chapter="2" section="4" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSP:SPEC:118</id>
			<description>If no scope qualifier is added to provided EL
				expression, the EL will lookup the attribute based on the behavior
				of PageContext.findAttribute(String), i.e, it will search the
				PageContext for the attribute first in the page, then request, then
				session, followed by application scopes and will return the value,
				otherwise null will be returned.</description>
			<location chapter="2" section="9" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:119</id>
			<description>If the function class, as described in the TLD, is not a
				public non-abstract class, a translation error will occur.</description>
			<location chapter="2" section="6.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:120</id>
			<description>If the method, as described in the TLD, is not a public
				static method, a translation error will occur.</description>
			<location chapter="2" section="6.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:121</id>
			<description>If two functions within the same tag library have the
				same name, a translation error will occur.</description>
			<location chapter="2" section="6.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:122</id>
			<description>EL function invocation semantics:</description>
			<location chapter="2" section="6.4" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:122.1</id>
					<description>If the function has no namespace associated, then, if
						the function is used in an attribute value, assume the namespace
						as that of the custom action; if the function is used elsewhere,
						this shall be a translation error.</description>
					<location chapter="2" section="6.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:122.2</id>
					<description>Locate the TLD associated with the namespace. If none
						can be found, a translation error shall occur.</description>
					<location chapter="2" section="6.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:122.3</id>
					<description>Locate the function element with a name subelement
						with the provided function name. If none can be found, a
						translation error shall occur.</description>
					<location chapter="2" section="6.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:122.4</id>
					<description>Locate the public class with name equal to the value
						of the funcion-class element. Locate the public static method with
						name and signature equal to the value of the function-signature
						element. If any of these don't exist, a translation error shall
						occur.</description>
					<location chapter="2" section="6.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:122.5</id>
					<description>Evaluate each argument to the corresponding type
						indicated in the signature.</description>
					<location chapter="2" section="6.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:122.6</id>
					<description>Evaluate the public static Java method. The resulting
						type is that of the return value in the function-signature
						element.</description>
					<location chapter="2" section="6.4" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:123</id>
			<description>The 'pageContext' implicit object corresponse to the
				PageContext object.</description>
			<location chapter="2" section="2.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:124</id>
			<description>The 'pageScope' implicit object allows access to page
				scoped attribute values.</description>
			<location chapter="2" section="2.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:125</id>
			<description>The 'requestScope' implicit object allows access to
				request scoped attribute values.</description>
			<location chapter="2" section="2.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:126</id>
			<description>The 'sessionScope' implicit object allows access to
				session scoped attribute values.</description>
			<location chapter="2" section="2.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:127</id>
			<description>The 'applicationScope' implicit object allows access to
				application scoped attribute values.</description>
			<location chapter="2" section="2.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:128</id>
			<description>The 'param' implicit object allows access to a single
				parameter value (obtained via ServletRequest.getParameter(String
				name)).</description>
			<location chapter="2" section="2.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:129</id>
			<description>The 'paramValues' implicit allows access to a String[]
				of all values for the specified parameter (obtained via
				ServletRequest.getParameterValues(String name)).</description>
			<location chapter="2" section="2.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:130</id>
			<description>The 'header' implicit object allows access to a single
				request-header value (obtained by calling
				HttpServletRequest.getHeader(String name)).</description>
			<location chapter="2" section="2.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:131</id>
			<description>The 'headerValues' implicit object returns the a
				String[] of all values for the specified header (obtained via
				HttpServletRequest.getHeaders(String name)).</description>
			<location chapter="2" section="2.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:132</id>
			<description>The 'cookie' implicit object provides access the the
				named cookie.</description>
			<location chapter="2" section="2.3" />
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:132.1</id>
					<description>If there are multiple cookies identified by the same
						name, the implementation must return the first cookie in the
						array, but the cookie order provided to the implementation is
						currently not specified.</description>
					<location chapter="2" section="2.3" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:133</id>
			<description>The 'initParam' implicit object provides access to
				context initialization parameters (obtained via
				ServletContext.getInitParameter(String name)).</description>
			<location chapter="2" section="2.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:134</id>
			<description>To coerce a value X to type Y</description>
			<location chapter="2" section="8.1" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:134.1</id>
					<description>If X is of a primitive type, Let X be the equivalent
						'boxed form' of X, otherwise, Let X be the same as X.</description>
					<location chapter="2" section="8.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:134.2</id>
					<description>If Y is of a primitive type, Let Y be the equivalent
						'boxed form' of Y. Otherwise, let Y be the same as Y.</description>
					<location chapter="2" section="8.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:134.3</id>
					<description>Apply conversion rules.</description>
					<location chapter="2" section="8.1" />
					<comment>ADD DEPENDENCIES</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:134.4</id>
					<description>If Y is a primitive type, then the result is found by
						'unboxing' the result of the coercion. If the result of the
						coercion is null, then error.</description>
					<location chapter="2" section="8.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:134.5</id>
					<description>If Y is not a primitive type, the the result is the
						result of the coercion.</description>
					<location chapter="2" section="8.1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:135</id>
			<description>Coerce A to String</description>
			<location chapter="2" section="8.2" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:135.1</id>
					<description>If A is a String: return A</description>
					<location chapter="2" section="8.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:135.2</id>
					<description>If A is null, return and empty String ("").</description>
					<location chapter="2" section="8.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:135.3</id>
					<description>If A.toString() throws exception, error.</description>
					<location chapter="2" section="8.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:135.4</id>
					<description>Otherwise return A.toString()</description>
					<location chapter="2" section="8.2" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:136</id>
			<description>Coerce A to Number type N</description>
			<location chapter="2" section="8.3" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:136.1</id>
					<description>If A is null or "", return 0</description>
					<location chapter="2" section="8.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:136.2</id>
					<description>If A is Character, convert to short, apply numeric
						rules below.</description>
					<location chapter="2" section="8.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:136.3</id>
					<description>If A is a Boolean, then error.</description>
					<location chapter="2" section="8.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:136.4</id>
					<description>If A is Number type N, return A</description>
					<location chapter="2" section="8.3" />
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:136.5</id>
					<description>If A is a Number, coerce quietly to type N</description>
					<location chapter="2" section="8.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:136.6</id>
					<description>If A is String, and N.valueOf(A) throws exception,
						then error.</description>
					<location chapter="2" section="8.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:136.7</id>
					<description>If A is String, and N.valueOf(A) does not throw an
						exception, return the value.</description>
					<location chapter="2" section="8.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:136.8</id>
					<description>All other types will result in an error.</description>
					<location chapter="2" section="8.3" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:137</id>
			<description>Coerce A to Character</description>
			<location chapter="2" section="8.4" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:137.1</id>
					<description>If A is null or "". return (char) 0</description>
					<location chapter="2" section="8.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:137.2</id>
					<description>If A is Character, then return A</description>
					<location chapter="2" section="8.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:137.3</id>
					<description>If A is Boolean, error.</description>
					<location chapter="2" section="8.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:137.4</id>
					<description>If A is Number, coerce quietly to type Short, then
						return a Character whose numeric value is equivalent to that
						Short.</description>
					<location chapter="2" section="8.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:137.5</id>
					<description>If A is String, return A.charAt(0)</description>
					<location chapter="2" section="8.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:137.6</id>
					<description>All other types will result in an error.</description>
					<location chapter="2" section="8.4" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:138</id>
			<description>Coerce A to Boolean</description>
			<location chapter="2" section="8.5" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:138.1</id>
					<description>If A is null or "", return false</description>
					<location chapter="2" section="8.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:138.2</id>
					<description>Otherwise if A is Boolean, return A</description>
					<location chapter="2" section="8.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:138.3</id>
					<description>Otherwise if A is String, and Boolean.valueOf(A)
						throws exception, error.</description>
					<location chapter="2" section="8.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:138.4</id>
					<description>Otherwise if A is String , and Bollean.valueOf(A) does
						not throw exception, return it.</description>
					<location chapter="2" section="8.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:138.5</id>
					<description>Any other type, return error.</description>
					<location chapter="2" section="8.5" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:139</id>
			<description>Coerce A to any other type T</description>
			<location chapter="2" section="8.6" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:139.1</id>
					<description>If A is null, return null.</description>
					<location chapter="2" section="8.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:139.2</id>
					<description>If A is assignable to T, coerce quietly.</description>
					<location chapter="2" section="8.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:139.3</id>
					<description>If A is String, and T has no Property Editor, then if
						A is "" return null, otherwise error.</description>
					<location chapter="2" section="8.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:139.4</id>
					<description>If A is String, and T's PropertyEditor throws
						exception, then if A is "" return null, otherwise error.</description>
					<location chapter="2" section="8.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:139.5</id>
					<description>Otherwise, apply T's PropertyEditor</description>
					<location chapter="2" section="8.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:139.6</id>
					<description>Otherwise, error</description>
					<location chapter="2" section="8.6" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:140</id>
			<description>A jsp-property-group will apply a set of properties to a
				specific group of resources identified via a URL pattern. If a
				resource matches URL patterns in more than one group, the pattern
				that is the most specific applies (follows the rules for URL pattern
				matching as defined in the Servlet Specification).</description>
			<location chapter="3" section="3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:292</id>
			<description>the setter method argument must be of type
				java.lang.Object. [ DynamicAttributeSetterMethod P1]
			</description>
			<location chapter="2" section="9" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:293</id>
			<description>No function mapper needs to be provided at function
				evaluation time.[FunctionMappingInformation]</description>
			<location chapter="2" section="10" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:294</id>
			<description>If an exception is thrown during the method evaluation
				of a function, the exception must be wrapped in an ELException and
				the ELException must be thrown. [FunctionMappingELException]</description>
			<location chapter="" section="" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:141</id>
			<description>EL expression evaluation can be activated for a group of
				JSP resources as specified by the URL pattern using the
				&lt;el-ignored> subelement of the &lt;jsp-property-group> element.
				If the value provided is true, EL expressions will be evaluated.</description>
			<location chapter="3" section="3.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:142</id>
			<description>EL expression evaluation can be deactivated for a group
				of JSP resources as specified by the URL pattern using the
				&lt;el-ignored> subelement of the &lt;jsp-property-group> element.
				If the value provided is false, EL expressions will be treated as
				template text (or uninterpreted attribute values).</description>
			<location chapter="3" section="3.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:252</id>
			<description>The container will not evaluated EL-like constructs
				(${expr}) found in deployed web applications based on Servlet 2.3 or
				earlier.</description>
			<location chapter="3" section="3.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:254</id>
			<description>If are JSP page matches a URL of a property group and
				the el-ignored element is not specified, and the web application is
				2.4 or later, than any EL expressions encounterd will be evaluated.</description>
			<location chapter="3" section="3.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:255</id>
			<description>If a JSP page that matches a URL pattern of a property
				group specifies the isELIgnored attribute, this attribute will take
				precedence over any setting in the JSP property group.</description>
			<location chapter="3" section="3.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:143</id>
			<description>Scripting elements can be allowed for a group of JSP
				resources as specified by the URL pattern using the
				&lt;scripting-invalid> subelement of the &lt;jsp-property-group>
				element. If the value is true, scripting elements such as
				scriptlets, classic expressions, and declarations will be allowed.</description>
			<location chapter="3" section="3.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:144</id>
			<description>Scripting elements can be disallowed for a group of JSP
				resources as specified by the URL pattern using the
				&lt;scripting-invalid> subelement of the &lt;jsp-property-group>
				element. If the value is false, scripting elements such as
				scriptlets, classic expressions, and declarations present within
				this group will result in translation errors for any page containing
				such elements.</description>
			<location chapter="3" section="3.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:256</id>
			<description>If a JSP page matches a URL pattern of a JSP property
				group and the property group contains no scripting-invalid element,
				scripting will be allowed in the page and no translation error will
				occur.</description>
			<location chapter="3" section="3.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:253</id>
			<description>The &lt;page-encoding> element is used to set the
				pageEncoding property of a group of JSP pages.</description>
			<location chapter="3" section="3.4" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:145</id>
			<description>A translation error will occur if the target translation
				unit specifies a different page encoding than that specified in the
				&lt;page-encoding> subelement of the &lt;jsp-property-group>
				element.</description>
			<location chapter="3" section="3.4" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:146</id>
			<description>A translation error will not occur if the target
				translation unit specifies the same page encoding as that specified
				in the &lt;page-encoding> subelement of the &lt;jsp-property-group>
				element (provided no other issues exist within the translation
				unit).</description>
			<location chapter="3" section="3.4" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:147</id>
			<description>The &lt;include-prelude> subelement of the
				&lt;jsp-property-group> element defines a context-relative path to a
				resource within the web application that will be automatically
				included into the beginning of all JSP resources of the particular
				group.</description>
			<location chapter="3" section="3.5" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:148</id>
			<description>The &lt;include-coda> subelement of the
				&lt;jsp-property-group> element defines a context-relative path to a
				resource within the web application that will be automatically
				included into the end of all JSP resources of the particular group.</description>
			<location chapter="3" section="3.5" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:149</id>
			<description>In both cases, &lt;include-prelude> and
				&lt;include-coda>, if there are multiple entries of these elements
				they will be included into the JSP page in the order they appear
				within the &lt;jsp-property-group> element.</description>
			<location chapter="3" section="3.5" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:150</id>
			<description>The &lt;is-xml> subelement of the
				&lt;jsp-property-group> element is used to denote that a group of
				files are JSP doucments, and thus must be interpreted as XML
				documents.</description>
			<location chapter="3" section="3.6" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:150.1</id>
					<description>If 'true', the files denoted must be interpreted as
						XML documents.</description>
					<location chapter="3" section="3.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:150.2</id>
					<description>If 'false', the files in the associated property group
						are assumed not to be JSP documents.</description>
					<location chapter="3" section="3.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:150.3</id>
					<description>If the &lt;is-xml> subelement is false within one
						property-group, but another property-group identifying the same
						set of files sets &lt;is-xml> to true, then the files will be
						processed as XML documents.</description>
					<location chapter="3" section="3.6" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:295</id>
			<description>A translation error occurs if the #{ character sequence
				is used as a String literal (in template text of a JSP 2.1+
				container or as an attribute value for a tag-library where
				jsp-version is 2.1+). [TranslationError#{Sequence]</description>
			<location chapter="3" section="3.7" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:296</id>
			<description>Allowing the character sequence #{ when used as a String
				literal can be done by setting the
				deferred-syntax-allowed-as-literal element to true in the JSP
				configuration. [DeferredSyntaxAllowedAsLiteralElement]</description>
			<location chapter="3" section="3.7" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:297</id>
			<description>Enabling the trimming of whitespaces can be done by
				setting the trim-directive-whitespaces element to true in the JSP
				configuration. [TrimDirectiveWhitespacesElement]</description>
			<location chapter="3" section="3.8" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:249</id>
			<description>For JSP pages in standard syntax, the page character
				encoding is determined from the followed sources:</description>
			<location chapter="4" section="1" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:249.1</id>
					<description>A JSP configuration element page-encoding value whoe
						URL pattern matches the page.</description>
					<location chapter="4" section="1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:249.2</id>
					<description>The pageEncoding attribute of the page directive of
						the page.</description>
					<location chapter="4" section="1" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:249.2.1</id>
							<description>It is a translation-time error to name different
								encodings in the pageEncoding attribute of the page directive of
								a JSP page and in a JSP configuration element whos URL pattern
								matches the page.</description>
							<location chapter="4" section="1" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:249.3</id>
					<description>The charset value of the contentType attribute of the
						page directive. This is used to determine the page character
						encoding if neither a JSP configuration element page-encoding nor
						the pageEncoding attribute are provided.</description>
					<location chapter="4" section="1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:249.4</id>
					<description>If neither the JSP configuration page-encoding
						element, nor the pageEncoding attribute, nor the charset of the
						contentType attribute are present, ISO-8859-1 will be used as the
						encoding for the page.</description>
					<location chapter="4" section="1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:249.5</id>
					<description>Files included using the include directive are read
						using the character encoding of the including page.</description>
					<location chapter="4" section="1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:250</id>
			<description>The JSP container will call
				ServletResponse.setContentType() after determining the content type
				as follows:</description>
			<location chapter="4" section="2" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:250.1</id>
					<description>If the TYPE value of the contentType attribute is
						present in the current translation unit, this TYPE will be used to
						set the initial response content type.</description>
					<location chapter="4" section="2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:250.2</id>
					<description>If the contentType attribute is omitted in a JSP page
						using standard syntax, the initial content type is 'text/html'.</description>
					<location chapter="4" section="2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:250.3</id>
					<description>If the contentType attribute is omitted in a JSP
						document, the initial content type is 'text/xml'.</description>
					<location chapter="4" section="2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:250.4</id>
					<description>The intial response encoding will be the CHARSET value
						of the contentType attribute of the page directive.</description>
					<location chapter="4" section="2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:250.5</id>
					<description>For JSP documents, where the contentType attribute is
						not present, or is present, but doesn't specify a chaset, the
						response encoding will be UTF-8.</description>
					<location chapter="4" section="2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:JSP:SPEC.250.6</id>
					<description>For JSP pages in standard syntax that do not have a
						contentType attribute, or the attribute is present without a
						charset specification:</description>
					<location chapter="4" section="2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:250.6.1</id>
							<description>The response encoding used will be that of the
								pageEncoding attribute or that specified by the JSP
								configuration element page-encoding whise URL pattern matches
								the page.</description>
							<location chapter="4" section="2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:250.6.2</id>
							<description>If the page has no pageEncoding attribute, or there
								is no matching jsp configuration, the response encoding will be
								ISO-8859-1.</description>
							<location chapter="4" section="2" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:251</id>
			<description>The XML view character encoding is always UTF-8</description>
			<location chapter="4" section="2" />
			<comment>Untestable at the moment. Waiting for clarification.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:249.5</id>
			<description>For JSP documents, the page character encoding is
				determined as described in section 4.3.3 and appendix F.1 of the XML
				specification.</description>
			<location chapter="4" section="1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:249.6</id>
			<description>The pageEncoding of a JSP document can also be described
				via the JSP configuration element page-encoding or a pageEncoding
				attribute of the page directive of the page, as long as long as they
				are consistent with the encoding as determined in section 4.3.3 and
				appendix F.1 of the XML specification.</description>
			<location chapter="4" section="1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:249.7</id>
			<description>It is translation-time error to name different encodings
				in two or more of the following: the XML prolog of a JSP page, the
				pageEncoding attribute of the page directive of the JSP page, and in
				a JSP configuration element whose URL pattern matches the page.</description>
			<location chapter="4" section="1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:249.8</id>
			<description>The JSP container must raise a translation-time error if
				an unsupported page character encoding is requested.</description>
			<location chapter="4" section="1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:298</id>
			<description>For tag files in standard syntax, the page character
				encoding is determined from a BOM or the pageEncoding attribute of
				the tag directive of the tag file (in this precedence order), or is
				ISO-8859-1 if neither is specified.
				[PageCharacterEncodingDetermination]</description>
			<location chapter="4" section="1.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:299</id>
			<description>When using a BOM, it is legal to describe the character
				encoding in a JSP configuration element page-encoding or a
				pageEncoding attribute of the page directive of the page, as long as
				they are consistent. [BOMCharacterEncodingDescription ]</description>
			<location chapter="4" section="1.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:300</id>
			<description>For JSP documents in XML syntax, it is legal to also
				describe the character encoding in a JSP configuration element
				page-encoding or a pageEncoding attribute of the page directive of
				the document, as long as they are consistent.
				[BOMLegalCharacterEncoding]</description>
			<location chapter="4" section="1.2" />
		</assertion>
		<!--REVISIT JSP.4 - Localization issues after these have been worked out. -->
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:151</id>
			<description>If the &lt;jsp:useBean> action is used within a
				scriptless context, then the variable exported will be available via
				EL expressions.</description>
			<location chapter="5" section="1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:152</id>
			<description>If both 'type' and 'class' attributes of the
				&lt;jsp:useBean> standard action are present, and 'class' is not
				assignable to 'type', a translation error will occur.</description>
			<location chapter="5" section="1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:153</id>
			<description>A translation error will occur of both the 'beanName'
				and 'class' attributes are specified within the same useBean action.</description>
			<location chapter="5" section="1" />
			<comment>Reference StdActionAttributesValid VC</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:154</id>
			<description>The 'beanName' attribute can accept dynamic attribute
				values (RT or EL).</description>
			<location chapter="5" section="1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:155</id>
			<description>The 'beanName' attribute of the &lt;jsp:useBean> action
				must be of the form "a.b.c", which can resolve to:</description>
			<location chapter="5" section="1" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:155.1</id>
					<description>A java class that will be resolved in the current
						ClassLoader</description>
					<location chapter="5" section="1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:155.2</id>
					<description>A serialized bean instance in the form similar to
						a/b/c.ser that will be resolved in the current ClassLoader.</description>
					<location chapter="5" section="1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:155.3</id>
					<description>If the resource identified by 'beanName' attribute of
						the &lt;jsp:useBean> action cannot be resolved, a request-time
						exception, as indicated in the semantics of the instantiate()
						method of the java.beans.Beans class, will be raised.</description>
					<location chapter="5" section="1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:156</id>
			<description>The 'id' attribute of the &lt;jsp:useBean> actions
				provides the name used to identify the object instance in the
				specified scopes namespace, and also the scripting variable name
				declared and initialized with that reference.</description>
			<location chapter="5" section="1" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:156.1</id>
					<description>The name specified is case sensitive.</description>
					<location chapter="5" section="1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:157</id>
			<description>The value's provided to the 'id' attribute of the
				&lt;jsp:useBean> action must be unique within the given translation
				unit. Any duplicate id's found, will result in a translation error.</description>
			<location chapter="5" section="1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:158</id>
			<description>The 'scope' attribute of the &lt;jsp:useBean> action
				specifies the scope or namespace within which the object reference
				is available.</description>
			<location chapter="5" section="1" />
			<comment>See section JSP.1.8.2 for lifecycle sematics of the scopes
				described below.</comment>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:158.1</id>
					<description>If the 'scope' attribute is not specified, the default
						scope will be 'page'.</description>
					<location chapter="5" section="1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:158.2</id>
					<description>If a value of 'page' is provided to the 'scope'
						attribute, the object will be exported to the page scope.</description>
					<location chapter="5" section="1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:158.3</id>
					<description>If a value of 'request' is provided to the 'scope'
						attribute, the object will be exported to the request scope.</description>
					<location chapter="5" section="1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:158.4</id>
					<description>If a value of 'session' is provided to the 'scope'
						attribute, the object will be exported to the session scope.</description>
					<location chapter="5" section="1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:158.5</id>
					<description>If a value of 'application' is provided to the 'scope'
						attribute, the object will be exported to the application scope.</description>
					<location chapter="5" section="1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:158.6</id>
					<description>If the value provided to the 'scope' attribute is not
						one of 'page', 'request', 'session', or 'application', a
						translation error will occur.</description>
					<location chapter="5" section="1" />
					<comment>CLR-2</comment>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:159</id>
			<description>A translation error will occur if the &lt;jsp:useBean>
				action attempts to export an object to the session scope and
				sessions have been disabled for the target page.</description>
			<location chapter="5" section="1" />
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:160</id>
			<description>For all scopes, it is illegal to change the value of an
				instance object associated with a particular scope, such that its
				new runtime type is a subset of the type(s) of the object previously
				so associated.</description>
			<location chapter="5" section="1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:161</id>
			<description>Sematics: The actions performed in jsp:useBean action
				are:</description>
			<location chapter="5" section="1" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:161.1</id>
					<description>The action searches for objects in scope, the search
						is done synchronized per scope namespace to avoid
						non-deterministic behavior.</description>
					<location chapter="5" section="1" />
					<comment>jsp:useBean sematics</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:161.2</id>
					<description>A scripting language variable of the specified type
						(if given) or class (if type is not give) is defined with the
						given 'id' int he current lexical scope of the scripting language.</description>
					<location chapter="5" section="1" />
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:161.3</id>
					<description>If the 'class' attribute of the action is provided a
						value that referrs to an Abstract class, an Interface, or a class
						with no public no-arg constructor, the implementation may throw a
						java.lang.InstantiationException, or may raise a translation
						error.</description>
					<location chapter="5" section="1" />
					<comment>jsp:useBean semantics</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:161.4</id>
					<description>If the object, as identified by the 'id' and 'scope'
						attributes of the action is found, and the object is not castable
						to the type as specified by the 'type' attribute, a
						java.lang.ClassCastException shall occur. The action will cease
						processing at this point.</description>
					<location chapter="5" section="1" />
					<comment>jsp:useBean semantics</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:161.5</id>
					<description>If the jsp:useBean has a non-empty body, it will be
						ignored (i.e. template text, as well as standard and custom
						actions will not be processed) and the action will cease
						processing.</description>
					<location chapter="5" section="1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:161.6</id>
					<description>If the specified object is not found in the specified
						scope, and neither 'class' nor 'beanName' are given, a
						java.lang.InstantiationException shall occur and the action will
						cease processing.</description>
					<location chapter="5" section="1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:161.7</id>
					<description>If the specified object is not found in the specified
						scope, and the 'class' attribute specifies a non-abstract class
						that defines a public no-args constructor, then the class is
						instantiated and the object reference is associated with a
						scripting variable name as identified by the 'id' attribute and
						exported to the scope as indicated by the 'scope' attribute.</description>
					<location chapter="5" section="1" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:161.7.1</id>
							<description>If the action has a non-empty body, then the body
								will be processed. Template text will be passed through, and
								standard and custom actions will be processed by the container.</description>
							<location chapter="5" section="1" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:161.8</id>
					<description>If the specified object is not found in the specified
						scope, and the 'beanName' attribute is specified, then the method
						instantiate() of java.beans.Beans will be invoked with the
						ClassLoader of the Servlet object with the value of the 'beanName'
						attribute as the argument. If the method succeeds, the object
						refernece is associated with the scripting variable identified by
						the 'id' attribute and expored to the scope as indicated by the
						'scope' attribute.</description>
					<location chapter="5" section="1" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:161.8.1</id>
							<description>If the action has a non-empty body, then the body
								will be processed. Template text will be passed through, and
								standard and custom actions will be processed by the container.</description>
							<location chapter="5" section="1" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:161.8.1.1</id>
									<description>The body of the action can be specified via the
										&lt;jsp:body> action.</description>
									<location chapter="5" section="11" />
								</assertion>
							</sub-assertions>
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:162</id>
			<description>The &lt;jsp:setProperty> action sets the values of
				properties in a Bean.</description>
			<location chapter="5" section="2" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:162.1</id>
					<description>The 'name' attribute specifies the name of a Bean
						instance defined by a &lt;jsp:useBean> action or some other
						action.
					</description>
					<location chapter="5" section="2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:162.1.1</id>
							<description>The Bean instance must contain the property that is
								being set.</description>
							<location chapter="5" section="2" />
						</assertion>
						<assertion required="false" impl-spec="true" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:162.1.2</id>
							<description>If the object in which the property will be set was
								not introduced before the jsp:setProperty call, the container
								implementation is recommended, but not required to raise a
								translation error.</description>
							<location chapter="5" section="2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:162.2</id>
					<description>The 'property' attribute specifies the bean property
						whose value is to be set.</description>
					<location chapter="5" section="2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:162.2.1</id>
							<description>If '*' is provided to the property attribute, the
								action will iterate over the current ServletRequest parameters
								matching parameter names and value types(s) to property names
								and setter method type(s), setting each matched property to the
								value of the matching parameter.</description>
							<location chapter="5" section="2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:162.2.2</id>
							<description>If a parameter has a value of "", the corresponding
								property is not modified.</description>
							<location chapter="5" section="2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:162.3</id>
					<description>The 'param' attribute specifies the name of the
						request parameter whose value will be given to a Bean property.</description>
					<location chapter="5" section="2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:162.4</id>
					<description>If the 'param' attribute is omitted from the action,
						the request parameter name is assumed to be the same as the Bean
						property name.</description>
					<location chapter="5" section="2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:162.5</id>
					<description>If the param is not set in the Request object, or if
						it has the value of "", the action has no effect (a noop).</description>
					<location chapter="5" section="2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:162.6</id>
					<description>A translation error will occur if both the 'param' and
						'value' attributes both specified within the same action.</description>
					<location chapter="5" section="2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:162.7</id>
					<description>The 'value' attribute specifies the value to assign to
						the given property.</description>
					<location chapter="5" section="2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:162.7.1</id>
							<description>The 'value' attribute can accept request-time
								expressions (RT and EL).</description>
							<location chapter="5" section="2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:162.7.2</id>
							<description>The 'value' attribute can be described via the
								&lt;jsp:attribute> standard action.</description>
							<location chapter="5" section="10" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:162.8</id>
					<description>A translation error will occur if the 'property'
						attribute value is '*', and any other attributes are provided to
						the action.</description>
					<location chapter="5" section="2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:162.9</id>
					<description>When assigning values from a parameter in the request
						object, the conversions described in JSP.1.14.2.1 are applied,
						using the target property to determine the target type.</description>
					<location chapter="5" section="2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:162.10</id>
					<description>When assigning from a value given as a String
						constant, the conversions described in JSP.1.14.2.1 are applied,
						using the target property to determine the target type.</description>
					<location chapter="5" section="2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:162.11</id>
					<description>When assigning from a value given as a request-time
						attribute, no type conversions are applied, as indicated in
						Section JSP.1.14.2.2</description>
					<location chapter="5" section="2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:162.12</id>
					<description>When assinging values to indexed properties the values
						must be an array; the rules, as indicated in Section JSP.1.14.2.2
						apply.</description>
					<location chapter="5" section="2" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:163</id>
			<description>The &lt;jsp:getProperty> action places the value of a
				Bean instance property, converted to a String, into the implicit out
				object.</description>
			<location chapter="5" section="3" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:163.1</id>
					<description>The 'name' attribute specifies the name of the Bean
						instance from which the property is obtained.</description>
					<location chapter="5" section="3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:163.2</id>
					<description>The 'property' attribute specifies the name of the
						property to access within the specified Bean instance.</description>
					<location chapter="5" section="3" />
				</assertion>
				<assertion required="false" impl-spec="true" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:163.3</id>
					<description>If the object referenced by the 'name' attribute was
						not 'introduced' via &lt;jsp:useBean> or a custom action with an
						associated VariableInfo entry, the container implementation, is
						recommended (but nore required) to raise a translation error,
						since this page implementation is in violation of the
						specification.</description>
					<location chapter="5" section="3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:163.4</id>
					<description>The conversion to String is done as in the println()
						methods, i.e. the toString() method of the object is used for
						Object instances, and primitive types are converted directly.</description>
					<location chapter="5" section="3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:163.5</id>
					<description>A translation error will occur if the 'property'
						attribute is not specified within the action.</description>
					<location chapter="5" section="3" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:164</id>
			<description>The &lt;jsp:include> action provides for inclusion of
				static and dynamic resources in the same context as the current
				page.</description>
			<location chapter="5" section="4" />
			<comment>Perhaps base a set of tests based on the examples for
				&lt;jsp:include></comment>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:164.1</id>
					<description>The 'page' attribute specifies a relative URL (either
						page or context relative) to a resource within the same web
						application context.</description>
					<location chapter="5" section="4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:164.2</id>
					<description>The 'flush' attribute, if true, will immediately flush
						the buffer prior to inclusion.</description>
					<location chapter="5" section="4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:164.3</id>
					<description>The 'flush' attribute, if false, will not flush the
						buffer prior to inclusion.</description>
					<location chapter="5" section="4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:164.4</id>
					<description>The default value for the 'flush' attribute is false.</description>
					<location chapter="5" section="4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:164.5</id>
					<description>A translation error will occur of the 'page' attribute
						is not specified.</description>
					<location chapter="5" section="4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:164.6</id>
					<description>An included page only has access to the JspWriter
						object (out).</description>
					<location chapter="5" section="4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:164.7</id>
					<description>Any attempt by an included page to set headers, will
						be ignored by the container.</description>
					<location chapter="5" section="4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:164.8</id>
					<description>An include action may use &lt;jsp:param> action
						present as body content to provide request parameters for the
						included resource.</description>
					<location chapter="5" section="4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:164.9</id>
					<description>The 'page' attribute can accept request-time
						expressions (either classic RT or EL).</description>
					<location chapter="5" section="4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:164.10</id>
					<description>The 'page' attribute can be described via the
						&lt;jsp:attribute> standard action.</description>
					<location chapter="5" section="10" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:165</id>
			<description>The &lt;jsp:forward> action will forward the current
				request to the target resource, be it a static resource, a JSP page,
				or a servlet class in the same context as the current page.</description>
			<location chapter="5" section="5" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:165.1</id>
					<description>The 'page' attribute specifies the target resource
						(either via a page relative or context relative path) to which to
						dispatch the current request to.</description>
					<location chapter="5" section="5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:165.2</id>
					<description>The request object will be adjusted according to the
						value of the page attribute.</description>
					<location chapter="5" section="5" />
					<comment>Untestable as this is vague.</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:165.3</id>
					<description>If the page is buffered, the buffer is cleard prior to
						forwarding.</description>
					<location chapter="5" section="5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:165.4</id>
					<description>If the page output is buffered, and the buffer was
						flushed, and attempt to forward the request will result in an
						IllegalStateException</description>
					<location chapter="5" section="5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:165.5</id>
					<description>If the page output was unbuffered and anything has
						been written to it, an attempt to forward the request will result
						in an IllegalStateException.</description>
					<location chapter="5" section="5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:165.6</id>
					<description>The forward action can accept &lt;jsp:param> actions
						as body content to provide request parameters for the target
						resource.</description>
					<location chapter="5" section="5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:165.7</id>
					<description>A translation error will occur of the 'page' attribute
						is omitted from the action.</description>
					<location chapter="5" section="5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:165.8</id>
					<description>The 'page' attribute accepts request-time expressions
						(either classic RT or EL expressions).</description>
					<location chapter="5" section="5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:165.9</id>
					<description>The 'page' attribute can be described via the
						&lt;jsp:attribute> standard action.</description>
					<location chapter="5" section="10" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:166</id>
			<description>The &lt;jsp:param> action specifies key/value
				information.</description>
			<location chapter="5" section="6" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:166.1</id>
					<description>The 'name' attribute specifies the name of the
						parameter.</description>
					<location chapter="5" section="6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:166.2</id>
					<description>The 'value' attribute specifies the value for this
						particular parameter.</description>
					<location chapter="5" section="6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:166.3</id>
					<description>A translation error will occur if the &lt;jsp:param>
						action is not a child of a &lt;jsp:include>, &lt;jsp:forward>,
						&lt;jsp:invoke>, &lt;jsp:doBody>, or a &lt;jsp:params> action.</description>
					<location chapter="5" section="6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:166.4</id>
					<description>If used in conjunction with &lt;jsp:include> the
						target resource will see the original request object including the
						augmented parameters provided by the &lt;jsp:param> action, with
						the new parameters taking precendence over the originals.</description>
					<location chapter="5" section="6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:166.10</id>
					<description>If used in conjunction with &lt;jsp:forward>, the
						target resource will see the original request object including the
						augmented parameters provided by the &lt;jsp:param> action, with
						the new parameters taking precendence over the originals.</description>
					<location chapter="5" section="6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:166.5</id>
					<description>If used in conjuntion with &lt;jsp:include> or
						&lt;jsp:forward>, the new parameters will not apply after the
						action returns.</description>
					<location chapter="5" section="6" />
					<comment>This is not testable for &lt;jsp:forward></comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:166.6</id>
					<description>The 'value' attribute can accept request-time (either
						classic RT or EL) expressions.</description>
					<location chapter="5" section="6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:166.7</id>
					<description>A translation error will occur if either the 'name' or
						'value' attributes is not specified.</description>
					<location chapter="5" section="6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:166.8</id>
					<description>The 'value' attribute can be described via the
						&lt;jsp:attribute> standard action.</description>
					<location chapter="5" section="10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:166.9</id>
					<description>The 'name' attribute can be described via the
						&lt;jsp:attribute> standard action.</description>
					<location chapter="5" section="10" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:167</id>
			<description>The &lt;jsp:plugin> action enables an JSP page author to
				generate plugin re-lated HTML.</description>
			<location chapter="5" section="7" />
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.1</id>
					<description>Depending on the browser's user-agent, the action will
						generate either an HTML OBJECT or EMBED tag.</description>
					<location chapter="5" section="7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.2</id>
					<description>The &lt;jsp:params> action specifies a set of
						parameters (each parameter is defined by a one or more
						&lt;jsp:param> actions).</description>
					<location chapter="5" section="7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:167.2.1</id>
							<description>A translation error will occur of the
								&lt;jsp:params> action is present, but contains no
								&lt;jsp:param> sub-actions.</description>
							<location chapter="5" section="7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:167.2.2</id>
							<description>A translation error will occur if the
								&lt;jsp:params> action is used in any other context outside of
								the &lt;jsp:plugin> action.</description>
							<location chapter="5" section="8" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:167.3</id>
					<description>The &lt;jsp:fallback> attribute specifies alternate
						text if the plugin cannot be started.</description>
					<location chapter="5" section="7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:167.3.1</id>
							<description>The alternate text generated by the
								&lt;jsp:fallback> action is provided as body content.</description>
							<location chapter="5" section="7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:167.3.2</id>
							<description>The body of the &lt;jsp:fallback> attribute can be
								provided via the &lt;jsp:body> action.</description>
							<location chapter="5" section="11" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:167.3.3</id>
							<description>The use of &lt;jsp:fallback> in any other context
								(either independent action or child or another) will result in a
								translation error.</description>
							<location chapter="5" section="9" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.4</id>
					<description>The 'type' attribute will specifiy the type of
						component that will generally be either an applet or a Bean.</description>
					<location chapter="5" section="7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:167.4.1</id>
							<description>A translation error will occur if a value other than
								'bean' or 'applet' is provided to the action</description>
							<location chapter="5" section="7" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.5</id>
					<description>The 'code' attribute specifies the code attribute of
						the object per the HTML specification.</description>
					<location chapter="5" section="7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.6</id>
					<description>The 'codebase' attribute specifies the codebase of the
						object per the HTML specification.</description>
					<location chapter="5" section="7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.7</id>
					<description>The 'align' attribute provides the alignment of the
						object per the HTML specification.</description>
					<location chapter="5" section="7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.8</id>
					<description>The 'archive' attribute provides the archive used by
						the object per the HTML specification.</description>
					<location chapter="5" section="7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.9</id>
					<description>The 'height' attribute specifies the height of the
						object per the HTML specification</description>
					<location chapter="5" section="7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:167.9.1</id>
							<description>The 'height' attribute accepts request-time (either
								classic RT or EL) expressions.</description>
							<location chapter="5" section="7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:167.9.2</id>
							<description>The 'height' attribute can be described via the
								&lt;jsp:attribute> standard action.</description>
							<location chapter="5" section="10" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.10</id>
					<description>The 'hspace' attribute specifies the hspace of the
						object per the HTML specification.</description>
					<location chapter="5" section="7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.11</id>
					<description>The 'jreversion' attribute specifies the version of
						JRE required for the object to fuction properly.</description>
					<location chapter="5" section="7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:167.11.1</id>
							<description>If the 'jreversion' attribute is not specified, the
								default version present in the generated HTML will be "1.2".</description>
							<location chapter="5" section="7" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.12</id>
					<description>The 'name' attribute specifies the logical name for
						the embedded object per the HTML specification.</description>
					<location chapter="5" section="7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.13</id>
					<description>The 'vspace' attribute specifies the vspace to be used
						by the embedded object per the HTML specification.</description>
					<location chapter="5" section="7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:167.14</id>
					<description>The 'title' attribute specifies the title of the
						embedded object per the HTML specification.</description>
					<location chapter="5" section="7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.15</id>
					<description>The 'width' attribute specifies the width of the
						embedded object per the HTML specification.</description>
					<location chapter="5" section="7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:167.15.1</id>
							<description>The 'width' attribute can accep request-time (either
								classic RT or EL) expressions.</description>
							<location chapter="5" section="7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:167.15.2</id>
							<description>The 'width' attribute can be described via the
								&lt;jsp:attribute> standard action.</description>
							<location chapter="5" section="10" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.16</id>
					<description>The 'nspluginurl' attribute specifies the URL where
						the JRE plugin can be downloaded for netscape.</description>
					<location chapter="5" section="7" />
					<sub-assertions>
						<assertion required="true" impl-spec="true" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:167.16.1</id>
							<description>If the 'nspluginurl' attribute is not specified, the
								url returned in the generated HTML is implementation specific.</description>
							<location chapter="5" section="7" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.17</id>
					<description>The 'iepluginurl' attribute specifies the URL where
						the JRE plugin for IE can be downloaded.</description>
					<location chapter="5" section="7" />
					<sub-assertions>
						<assertion required="true" impl-spec="true" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:167.17.1</id>
							<description>If the 'iepluginurl' attribute is not specified, the
								url returned in the generated HTML is implementation specific.</description>
							<location chapter="5" section="7" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.18</id>
					<description>A translation error will occur if the 'code' attribute
						is not specified.</description>
					<location chapter="5" section="7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.19</id>
					<description>A translation error will occur if the 'codebase'
						attribute is not specified.</description>
					<location chapter="5" section="7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.20</id>
					<description>All of the attributes of the jsp:plugin action can be
						described using the jsp:attribute action.</description>
					<location chapter="5" section="7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:167.21</id>
					<description>The body of the jsp:params action can be provided
						using the jsp:body action.</description>
					<location chapter="5" section="7" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:168</id>
			<description>The &lt;jsp:attribute> action allows a page author to
				define the value of a tag handler attribute in an XML element
				instead of in the value of the XML attribute.</description>
			<location chapter="5" section="10" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:168.1</id>
					<description>The 'name' attribute specifies the name of the
						attribute of the attribute for the tag being invoked.</description>
					<location chapter="5" section="10" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:168.1.1</id>
							<description>If the attribute does not accept dynamic attributes,
								and the specified attribute name doesn't exist in the
								surrounding action, a translation error will occur.</description>
							<location chapter="5" section="10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:168.1.2</id>
							<description>A translation error will occur if both an XML
								element attribute and a &lt;jsp:attribute> element are used to
								specify the value for the same attribute.</description>
							<location chapter="5" section="10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:168.1.3</id>
							<description>A translation error will occur if the 'name'
								attribute is not specified.</description>
							<location chapter="5" section="10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:168.1.4</id>
							<description>If the value provided to the 'name' attribute is a
								QName with a prefix that doesn't match that of the applicable
								action, and the action does not accept dynamic attributes, or
								the parent action is not jsp:element, a translation error will
								occur.</description>
							<location chapter="5" section="10" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:168.2</id>
					<description>Any attempt to use the &lt;jsp:attribute> action
						outside of a JSP standard action, or a JSP custom action must
						result in a translation error.</description>
					<location chapter="5" section="10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:168.3</id>
					<description>JSP containers must support the use of
						&lt;jsp:attribute> for both Classic and Simple Tag Handlers.</description>
					<location chapter="5" section="10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:168.4</id>
					<description>For custom action (both Classic and Simple) attribute
						types of type javax.servlet.jsp.tagext.JspFragment, the container
						must create a JspFragment out of the body of the
						&lt;jsp:attribute> action and pass it to the tag handler.</description>
					<location chapter="5" section="10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:168.5</id>
					<description>A translation error will occur if the attribute type
						is javax.servlet.jsp.tagext.JspFragment, and the body of the
						&lt;jsp:attribute> action is not scriptless.</description>
					<location chapter="5" section="10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:168.6</id>
					<description>If the custom action accepts dynamic attributes, and
						the name of the attribute is not one explicity indeicated for the
						tag, then the container will evaluate the body of
						&lt;jsp:attribute> and assign the computed value to the attribute
						using the dynamic attribute machinery.</description>
					<location chapter="5" section="10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:168.7</id>
					<description>For standard or custom actions attributes that accept
						a runtime expression value, the container must evaluate the body
						of the &lt;jsp:attribute> action and use the result of theis
						evaluation as the value of the attribute.</description>
					<location chapter="5" section="10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:168.8</id>
					<description>A translation error must occur if the body of the
						&lt;jsp:attribute> action contains anything but template text when
						the standard or custom action attributes do not accept dynamic
						values.</description>
					<location chapter="5" section="10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:168.9</id>
					<description>If the enclosing action is &lt;jsp:element> then the
						values of the name attribute and the body of the attribute will be
						used to construct the element dynamically.</description>
					<location chapter="5" section="10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:168.10</id>
					<description>If the body of the &lt;jsp:attribute> is empty, it is
						the equivalent of specifying "" (an empty String) as the value of
						the attribute</description>
					<location chapter="5" section="10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:168.11</id>
					<description>A translation-time error must occur if jsp:attribute
						is used to define the value of an attfibute of jsp:attribute.</description>
					<location chapter="5" section="10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:168.12</id>
					<description>Attribute names must be accetped and have the
						appropriate attribute set when jsp:attribute specifies the
						attribute name using a QName.</description>
					<location chapter="5" section="10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:168.13</id>
					<description>If the trim attribute is not specified, then by
						default, strings will be trimmed at translation time, and not at
						runtime.</description>
					<location chapter="5" section="10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:168.14</id>
					<description>If the value of the trim attribute is true, strings
						will be trimmed at translation time, and not at runtime.</description>
					<location chapter="5" section="10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:168.15</id>
					<description>If the value of the trim attribute is false, strings
						will not be trimmed at translation or runtime.</description>
					<location chapter="5" section="10" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSP:SPEC:169</id>
			<description>The body of the &lt;jsp:body> action can be specified
				via the &lt;jsp:body> action.</description>
			<location chapter="5" section="11" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSP:SPEC:248</id>
			<description>The &lt;jsp:body> allows for the explicit definition of
				a body for a custom action.</description>
			<location chapter="5" section="11" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:248.1</id>
					<description>If one or more &lt;jsp:attribute> elements appear in
						the body of a tag invocation but no &lt;jsp:body> element appears
						or an empty &lt;jsp:body> element appears, it is the equivalent of
						the tag having an empty body.</description>
					<location chapter="5" section="11" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:248.2</id>
					<description>It is illegal to use &lt;jsp:body> to provide a body
						to the &lt;jsp:body> and &lt;jsp:attribute> actions.</description>
					<location chapter="5" section="11" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:248.3</id>
					<description>It is illegal for the &lt;jsp:body> action to be
						present in a translation unit without a valid standard action or
						custom action as a parent.</description>
					<location chapter="5" section="11" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSP:SPEC:170</id>
			<description>The &lt;jsp:body> allows for the explicit definition of
				a body for a custom action.</description>
			<location chapter="5" section="11" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:170.1</id>
					<description>The 'value' attribute allows the author to provide the
						body of the action as an attribute value.</description>
					<location chapter="5" section="11" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:170.1.1</id>
							<description>The value of this attribute must evaluate to an
								instance of javax.servlet.jsp.tagext.JspFragment, otherwise a
								JspException must result.</description>
							<location chapter="5" section="11" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:170.1.2</id>
							<description>If the 'value' attribute of &lt;jsp:body> is
								specified and the action has a body, translation error must
								occur.</description>
							<location chapter="5" section="11" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:170.1.3</id>
							<description>If the 'value' attribute of &lt;jsp:body> is not
								specified, and the action has no body, a translation error must
								occur.</description>
							<location chapter="5" section="11" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSP:SPEC:170.1.4</id>
							<description>The 'value' attribute can accept dynamic attribute
								values (both EL and RT).</description>
							<location chapter="5" section="11" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:170.2</id>
					<description>If the 'value' attribute is used to specify the value
						of a custom action defined using a Classic Tag Handler, the
						container must generate code to invoke the fragment, sending the
						output to the current JspWriter, and passing in a Map of paramters
						for all AT_BEGIN and NESTED variables provided by the tag handler.</description>
					<location chapter="5" section="11" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:170.3</id>
					<description>Any attempt to use the value attribute to define the
						body of a standard action must result in a translation error.</description>
					<location chapter="5" section="11" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:171</id>
			<description>The &lt;jsp:invoke> action will invoke the specified
				fragment and write the result to the current JspWriter, or to a
				scoped variable.</description>
			<location chapter="5" section="12" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:171.1</id>
					<description>The 'fragment' attribute specifies the name used to
						identify this fragment during this tag invocation.</description>
					<location chapter="5" section="12" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:171.2</id>
					<description>The 'varReader' attribute specifies the scoped
						attribute in which to store the result of the fragment invocation.
					</description>
					<location chapter="5" section="12" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:171.2.1</id>
							<description>The type of the scoped attribute must be
								java.io.Reader.</description>
							<location chapter="5" section="12" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:171.3</id>
					<description>The 'var' attribute specifies the scoped attribute in
						which to store the result of the fragment invocation.</description>
					<location chapter="5" section="12" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:171.3.1</id>
							<description>The type of the scoped attribute must be
								java.lang.String.</description>
							<location chapter="5" section="12" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:171.4</id>
					<description>The 'scope' attribute specifies the scope in which to
						store the attribute specified by the 'varReader' or 'var'
						attributes.</description>
					<location chapter="5" section="12" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:171.4.1</id>
							<description>A value of 'page' will result in the attribute being
								stored in the page scope.</description>
							<location chapter="5" section="12" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:171.4.2</id>
							<description>A value of 'request' will result in the attribute
								being stored in the request scope.</description>
							<location chapter="5" section="12" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:171.4.3</id>
							<description>A value of 'session' will result in the attribute
								being stored in the session scope.</description>
							<location chapter="5" section="12" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:171.4.4</id>
							<description>A value of 'application' will result in the
								attribute being stroed in the application scope.</description>
							<location chapter="5" section="12" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:171.4.5</id>
							<description>If the 'scope' attribute is not specified, the
								default value of 'page' will be used.</description>
							<location chapter="5" section="12" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:171.4.6</id>
							<description>/XXX FIXME What happens if client not in session and
								session scope is specified.</description>
							<location chapter="5" section="12" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:171.4.7</id>
							<description>A translation error will occur if the scope
								attribute is provided an invalid value.</description>
							<location chapter="5" section="12" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:171.5</id>
					<description>A translation error will occur of the &lt;jsp:invoke>
						is present outside of a tag file context.</description>
					<location chapter="5" section="12" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:171.6</id>
					<description>If neither 'var' nor 'varReader' attribute is
						specified, the result of the invocation will be written to the
						current JspWriter.</description>
					<location chapter="5" section="12.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:171.7</id>
					<description>When the 'varReader' attribute is specified, the
						object must produce the content sent by the fragment to the
						provided writer.</description>
					<location chapter="5" section="12.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:171.8</id>
					<description>When the 'var' attribute is specified, the object must
						store the content sent by the fragment in a String object.</description>
					<location chapter="5" section="12.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:171.9</id>
					<description>A translation error must occur of both 'var' and
						'varReader' are specified within the same action.</description>
					<location chapter="5" section="12" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:171.10</id>
					<description>When 'varReader' attribute is specified, the Reader
						exported must be resettable, such that if its reset() method is
						called, the result of the invoked fragment must be able to be read
						again without re-executing the fragment.</description>
					<location chapter="5" section="12.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:171.11</id>
					<description>A translation error will occur if there is not a
						one-to-one correlation between the number of &lt;jsp:param>
						elements present within the body of the &lt;jsp:invoke> action and
						the required variables as defined by the 'variable' directive.</description>
					<location chapter="5" section="12.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:171.12</id>
					<description>A translation error must not occur because a
						&lt;jsp:param> element appears without a corresponding variable
						directive.</description>
					<location chapter="5" section="12.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:171.13</id>
					<description>A translation error will occur if the body of the
						&lt;jsp:invoke> action contains body content other than white
						space and &lt;jsp:param> subelements.</description>
					<location chapter="5" section="12.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:171.14</id>
					<description>A translation error will occur of the 'fragment'
						attribute is not specified for a particular &lt;jsp:invoke>
						action.</description>
					<location chapter="5" section="12" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:172</id>
			<description>The &lt;jsp:doBody> standard action invokes the body of
				a tag.</description>
			<location chapter="5" section="13" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:172.1</id>
					<description>The 'varReader' attribute specifies the scoped
						attribute in which to store the result of the body invocation.</description>
					<location chapter="5" section="13" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:172.1.1</id>
							<description>The type of the scoped attribute must be
								java.io.Reader.</description>
							<location chapter="5" section="13" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:172.2</id>
					<description>The 'var' attribute specifies the scoped attribute in
						which to store the result of the body invocation.</description>
					<location chapter="5" section="13" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:172.2.1</id>
							<description>The type of the scoped attribute must be
								java.lang.String.</description>
							<location chapter="5" section="13" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:172.3</id>
					<description>The 'scope' attribute specifies the scope in which to
						store the attribute specified by the 'varReader' attribute.</description>
					<location chapter="5" section="13" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:172.3.1</id>
							<description>A value of 'page' will result in the attribute being
								stored in the page scope.</description>
							<location chapter="5" section="13" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:172.3.2</id>
							<description>A value of 'request' will result in the attribute
								being stored in the request scope.</description>
							<location chapter="5" section="13" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:172.3.3</id>
							<description>A value of 'session' will result in the attribute
								being stored in the session scope.</description>
							<location chapter="5" section="13" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:172.3.4</id>
							<description>A value of 'application' will result in the
								attribute being stroed in the application scope.</description>
							<location chapter="5" section="13" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:172.3.5</id>
							<description>If the 'scope' attribute is not specified, the
								default value of 'page' will be used.</description>
							<location chapter="5" section="13" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:172.3.6</id>
							<description>/XXX FIXME What happens if client not in session and
								session scope is specified.</description>
							<location chapter="5" section="13" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:172.3.7</id>
							<description>A translation error will occur if the 'scope'
								attribute is provided an invalid value.</description>
							<location chapter="5" section="13" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:172.4</id>
					<description>A translation error will occur if the 'var' and
						'varReader' attributes are both specified within the same action.</description>
					<location chapter="5" section="13" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:172.5</id>
					<description>A translation error will occur if the &lt;jsp:doBody>
						action contains body content other than white space and
						&lt;jsp:param> subelements.</description>
					<location chapter="5" section="13" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:172.6</id>
					<description>A translation error will occur if there is not a
						one-to-one correlation between the number of &lt;jsp:param>
						elements present within the body of the &lt;jsp:doBody> action and
						the required fragment inputs as defined by the 'variable'
						directive.</description>
					<location chapter="5" section="12" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:172.7</id>
					<description>A translation error must not occur because a
						&lt;jsp:param> element appears without a corresponding variable
						directive.</description>
					<location chapter="5" section="12" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:172.8</id>
					<description>A translation error must occur if a &lt;jsp:param> is
						specified with the same name as a variable with a scope of
						AT_BEGIN, or NESTED.</description>
					<location chapter="5" section="12" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:172.9</id>
					<description>A translation error must not occur because a
						&lt;jsp:param> is specified with the same name as a variable with
						a scope of AT_END.</description>
					<location chapter="5" section="12" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:173</id>
			<description>A JSP document is identified though the following
				algorithm in order or precedence:</description>
			<location chapter="6" section="1" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:173.1</id>
					<description>If a &lt;jsp-property-group> explicitly identifies a
						set of files as JSP Documents (through the use of &lt;is-xml>),
						then that indication overrides any other determination.</description>
					<location chapter="6" section="1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:173.2</id>
					<description>If there is no explicit association and the extension
						is ".jspx", then the file is a JSP document.</description>
					<location chapter="6" section="1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:173.3</id>
					<description>If the file is explicitly or implicitly defined as a
						JSP page and the top element is a jsp:root element, then the file
						is identified as a JSP doucment (provided for backwards
						compatibility).</description>
					<location chapter="6" section="1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:173.4</id>
					<description>It is a translation error for a file that id
						identified as a JSP document to not be a well-formed XML document.</description>
					<location chapter="6" section="1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:174</id>
			<description>RT expressions must be expressed in JSP Documents using
				the following syntax: "%= expr %".</description>
			<location chapter="6" section="1" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:174.1</id>
					<description>Whitespace after the starting '%=' and before the
						ending '%" is optional.</description>
					<location chapter="6" section="1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:174.2</id>
					<description>If an expression appears in more than one run-time
						attribute, they are evaluated left-to-right in the element.</description>
					<location chapter="1" section="12.3" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:175</id>
			<description>It is legal to use any prefix for JSP standard actions
				within JSP documents as long as the require URI,
				'http://java.sun.com/JSP/page" is associated with the specified
				prefix.</description>
			<location chapter="6" section="1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:176</id>
			<description>JSP documents and tag files in XML syntax need not have
				a jsp:root element as its root element.</description>
			<location chapter="6" section="3.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:177</id>
			<description>The jsp:root element can only appear as the root element
				in a JSP document or in a tag file in XMLsyntax; otherwise a
				translation error shall occur.</description>
			<location chapter="6" section="3.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:178</id>
			<description>The jsp:directive.page, a child element of the jsp:root
				element, defines page level properties with the same semantics as
				the page directive in JSP syntax.</description>
			<location chapter="6" section="1.4" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.1</id>
					<description>jsp:directive.page can appear multiple times, and is
						position independent within a given translation unit.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.2</id>
					<description>A translation error will occur if jsp:directive.page
						defines duplicate attribute/values within a given translation
						unit, with the exception of the import attribute.</description>
					<location chapter="1" section="10.1" />
					<comment>NOTE: This may change. Reference PageDirectiveUniqueAttr
						validity constraint.</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.3</id>
					<description>The 'isScriptingEnabled' attribute of
						jsp:directive.page, if true, allows the presence of scripting
						elements (scriptlets, expressions, declarations) within a given
						translation unit.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.4</id>
					<description>The 'isScriptingEnabled' attribute of
						jsp:directive.page, if false, disallows the presence of scripting
						elements (scriptlets, expressions, declarations) within a given
						translation unit and will generate a translation error if they are
						present.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.5</id>
					<description>The default value for 'isScriptingEnabled' of
						jsp:directive.page, if not specified, is true.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.6</id>
					<description>The 'isELEnabled' attribute of jsp:directive.page, if
						true, directs the container to evaluate EL expressions.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.7</id>
					<description>The 'isELEnabled' attribute of jsp:directive.page , if
						false, will result in EL expression not being evaluated by the
						container.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.8</id>
					<description>If the JSP is part of a Web application that is using
						a Servlet 2.3 or lower deployment descriptor, the default value
						for the 'isELEnabled' attribute of jsp:directive.page is false.</description>
					<location chapter="1" section="10.1" />
					<comment>Reference section JSP.2.2.4 Deactivating EL Evaluation</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.9</id>
					<description>If the JSP is part of a Web application that is using
						a Servlet 2.4 deployment descriptor, the default value for the
						'isELEnabled' attribute of jsp:directive.page is true.</description>
					<location chapter="1" section="10.1" />
					<comment>Reference section JSP.2.2.4 Deactivating EL Evaluation</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:178.10</id>
					<description>All scripting languages, specifiable by
						jsp:directive.page's 'language' attribute, must provide some
						implicit objects that a JSP page author can use in declarations,
						scriptlets, and expressions (see Section JSP.1.3.8 for list of
						available implicit objects)</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:178.11</id>
					<description>All scripting languages, specifiable by
						jsp:directive.page's 'language' attribute, must expose the Java
						technology object model to the script environment, especially
						implicit variables, JavaBeans components properties, and public
						methods.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.12</id>
					<description>It is a fatal translation error for a page directive
						with a non-"java" language attribute to appear after the first
						scripting has been encountered.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.13</id>
					<description>The only required scripting language value for the
						'language' attribute is "java".</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.14</id>
					<description>The 'extends' attribute of jsp:directive.page
						specifies a fully qualified Java programming language class name,
						that names the superclass of the class to which this JSP page is
						transformed</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.15</id>
					<description>The 'import' attribute of jsp:directive.page specifies
						the fully qualified Java programming language type name denoting a
						particular type, or of a package name following by the ".*"
						string, denoting all the public types declared in that package,
						that shall be imorted by the translated JSP page implementation
						and is thus available to the scripting language.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.16</id>
					<description>The default import list for a JSP page is java.lang.*,
						javax.servlet.*, javax.servlet.jsp.*, javax.servlet.http.*</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.17</id>
					<description>The 'session' attribute of jsp:directive.page, when
						true, indicates that the JSP page requires participation in an
						HTTP session.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.18</id>
					<description>The 'session' attribute of jsp:directive.page, when
						false, indicates that the JSP page does not participate in an HTTP
						session; the 'session' implicit object is not available to the
						page, and any reference to it within the translation unit will
						result in a translation error.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.19</id>
					<description>If the 'session' attribute of jsp:directive.page is
						not specified, then the page will, by default, participate in an
						HTTP session (default value of true).</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.20</id>
					<description>If the 'buffer' attribute of jsp:directive.page is not
						specified, no buffering will be performed and all output will be
						written directly through to the ServletResponse PrintWriter.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.21</id>
					<description>The size value specified by the 'buffer' attribute of
						jsp:directive.page must be in kilobytes, and the suffix "kb" is
						mandatory.</description>
					<location chapter="1" section="10.1" />
					<comment>NOTE: Spec is unclear as to what happens if a different
						suffix is used, or is not present. Most likely a translation
						error.</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.22</id>
					<description>The container must allocate a buffer at least as large
						as that specified by the 'buffer' attribute of jsp:directive.page.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.23</id>
					<description>The default buffer size of 8kb will be used if the
						'buffer' attribute of the page directive is not specified.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.24</id>
					<description>If the 'autoFlush' attribute of the page directive is
						true, the output will be automatically flushed when the buffer is
						filled.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.25</id>
					<description>If the 'autoFlush' attribute of the page directive is
						false, an exception will be raised to indicate a buffer overflow.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.26</id>
					<description>It is illegal to set the 'autoFlush' attribute of
						jsp:directive.page to false, if the 'buffer' attribute is set to
						none.</description>
					<location chapter="1" section="10.1" />
					<comment>NOTE: This section needs to be clarified in the spec.
						Illegal most likely, in this case, means a translation error, but
						this should be clearly spelled out.</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.27</id>
					<description>If the 'isThreadSafe' attribute of jsp:directive.page
						is false, the container must serialize requests to the JSP (it
						should behave like an STM servlet).</description>
					<location chapter="1" section="10.1" />
					<comment>Cannot test isThreadSafe="true" as the keyword 'may' is
						present. An implementation could potentially serialize requests in
						this case as well....thought I don't know why they would.</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.28</id>
					<description>The 'info' attribute of jsp:directive.page specifies
						an arbitrary string that is incorporated into the translated page,
						that can subsequently be obtained from the page's implementation
						of Servlet.getServletInfo().</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.29</id>
					<description>The 'isErrorPage' attribute of jsp:directive.page.
						when true, will cause the implicit script language variable
						"exception" to be defined and its value is a reference to the
						offending Throwable from the source JSP page in error.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.30</id>
					<description>If the 'isErrorPage' attribute of jsp:directive.page
						is defined as false, then the implicit script language variable
						"exception" will not be available, and any such reference to this
						variable will result in a translation error.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.31</id>
					<description>The 'errorPage' attribute of jsp:directive.page,
						specifies the URL, either page-relative or context-relative, of a
						resource to which any Java programming language Throwable
						object(s) thrown but not caught by the page implementation are
						forwarded for error processing. The following request attributes
						will be made available within the error page:</description>
					<location chapter="1" section="10.1" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:178.31.1</id>
							<description>javax.servlet.jsp.jspException - throw Throwable
								object of the offending exception (for backwards compatibility
								with JSP 1.2)</description>
							<location chapter="1" section="4.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:178.31.2</id>
							<description>javax.servlet.error.exception - as per the Servlet
								specification.</description>
							<location chapter="1" section="4.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:178.31.3</id>
							<description>javax.servlet.error.status_code - as per the Servlet
								specification</description>
							<location chapter="1" section="4.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:178.31.4</id>
							<description>javax.servlet.error.exception_type - as per the
								Servlet specification.</description>
							<location chapter="1" section="4.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:178.31.5</id>
							<description>javax.servlet.error.message - as per the Servlet
								specification.</description>
							<location chapter="1" section="4.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:178.31.6</id>
							<description>javax.servlet.error.request_uri - as per the Servlet
								specification.</description>
							<location chapter="1" section="4.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:178.31.7</id>
							<description>javax.servlet.error.servlet_name - as per the
								Servlet specification.</description>
							<location chapter="1" section="4.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:178.31.8</id>
							<description>An instance of javax.servlet.jsp.ErrorData must be
								provided to the error page.</description>
							<location chapter="1" section="4.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.32</id>
					<description>If the 'errorPage' attribute of jsp:directive.page is
						defined, it will take presendence over any error pages defined in
						the web application's deployment descriptor.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.33</id>
					<description>The character encoding (Content-Type response header)
						can be in the form of TYPE, or TYPE; Charset=CHARSET, with an
						optional white space after the ';'. Charset, if present, must be
						the IANA value for a character encoding. Similarly, if TYPE is a
						MIME type, see the IANA registry for values.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.34</id>
					<description>The default Content-Type for JSP Pages in XML syntax
						is "text/xml".</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.35</id>
					<description>If a charset portion of the value provided to the
						'contentType' attribute is not specified, but the page encoding
						for the JSP page is specified, then the charset used will be that
						of the specified page encoding.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.36</id>
					<description>If a charset is not provided as part of the
						'contentType' attribute value, and the page encoding does not
						specifiy a type, then the default charset is ISO-8859-1 for JSP
						pages in classic syntax.</description>
					<location chapter="1" section="10.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.37</id>
					<description>If a charset is not provided as part of the
						'contentType' attribute value, and the page encoding does not
						specifiy a type, then the default charset is UTF-8 for JSP pages
						in XML syntax.</description>
					<location chapter="1" section="10.1" />
					<comment>Would UTF-16 be valid as well?</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.38</id>
					<description>The 'pageEncoding' attribute of jsp:directive.page
						specifies the character encoding of the page. The value is in the
						form of CHARSET which my be the IANA value for a character
						encoding. If no 'pageEncoding' attribute is specified, the default
						of ISO-8859-1 will be used.</description>
					<location chapter="1" section="10.1" />
					<comment>What about the default encoding for JSP pages in XML
						syntax?</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:178.39</id>
					<description>A JSP container must support the presence of the
						jsp:directive.page element within a JSP page.</description>
					<location chapter="6" section="1.1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:179</id>
			<description>The jsp:directive.include element, like the include
				directive, is used to subsitute test and/or code during JSP page
				translation and has the same semantics as the include directive for
				JSP pages.</description>
			<location chapter="6" section="1.5" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:179.1</id>
					<description>The jsp:directive:include element can appear anywhere
						within a JSP document.</description>
					<location chapter="6" section="1.5" />
					<comment>A assume that this means it's legal to use without it
						being a child of &lt;jsp:root>? If not, this should be clarified.</comment>
				</assertion>
				<assertion required="false" impl-spec="true" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:179.2</id>
					<description>A JSP container can include a mechanism for being
						notified if an included file changes, so the container can
						recompile the JSP page. However, the JSP 2.0 specification does
						not have a way of directing the JSP container that included files
						have changed.</description>
					<location chapter="1" section="10.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:179.3</id>
					<description>The 'file' attribute of jsp:directive.include
						specifies the resource to be imported either relative to web
						appliation context path, or relative to the page performing the
						include.</description>
					<location chapter="1" section="10.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:179.4</id>
					<description>The jsp:directive.include element includes content at
						translation time meaning the bytes of the included resource are
						directly inserted into the page.</description>
					<location chapter="1" section="10.5" />
					<comment>Could test this by having a resource that checks for an
						attribute in the request, since it's included in place without
						including the result, the attribute would be null..</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:179.5</id>
					<description>A JSP container must support the presence of the
						jsp:directive.include element within a JSP page.</description>
					<location chapter="6" section="1.1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:180</id>
			<description>The jsp:declaration element is used to declare scripting
				language constructs that are available to all other scripting
				elements and follows the same semantics as declarations in standard
				JSP syntax.</description>
			<location chapter="6" section="1.6" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:180.1</id>
					<description>A declaration
						(&lt;jsp:declaration>DECL_BODY&lt;/jsp:declaration>) must be a
						complete declarative statment, or sequence thereof, according to
						the syntax of the scripting language specified, otherwise a
						translation error will occur.</description>
					<location chapter="1" section="12.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:180.2</id>
					<description>Declartaions do not produce any output into the
						current out stream.</description>
					<location chapter="1" section="12.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:180.3</id>
					<description>Declarations are initialized when the JSP page is
						initialized and are made available to other delcarations,
						scriptlets, and expressions.</description>
					<location chapter="1" section="12.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:180.4</id>
					<description>A JSP container must support the presence of the
						jsp:declaration element within a JSP page.</description>
					<location chapter="6" section="1.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSP:SPEC:180.5</id>
					<description>A JSP container must support the presence of the
						jsp:declaration element within a JSP page.</description>
					<location chapter="6" section="1.1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:181</id>
			<description>The jsp:scriptlet element are program fragments with the
				same semantics as scriptlets in standard JSP syntax.</description>
			<location chapter="6" section="1.7" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:181.1</id>
					<description>Scriptlets
						(&lt;jsp:scriptlet>SCR_BODY&lt;/jsp:scriptlet>) can contain any
						code framents that are valid for the scripting language specified
						by the 'language' attribute of the page directive, and are
						executed at request time in the order that they appear on the JSP
						page.</description>
					<location chapter="1" section="12.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:181.2</id>
					<description>A JSP container must support the presence of the
						jsp:scriptlet element within a JSP page.</description>
					<location chapter="6" section="1.1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:182</id>
			<description>The jsp:expression element is used to describe complete
				expressions in the scripting language that get evaluated at response
				time. The semantics are the same as expressions in standard JSP
				syntax.</description>
			<location chapter="6" section="1.8" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:182.1</id>
					<description>The result of the expression is coerced to a String
						and emitted into the current JspWriter (out) object.</description>
					<location chapter="1" section="12.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:182.2</id>
					<description>If the result of the expression cannot be coerced to a
						String, the following must happen: If the problem is detected at
						translation time, a translation time error shall occur. If the
						coercion cannot be detected during translation, a
						ClassCaseException shall be raised at request time.</description>
					<location chapter="1" section="12.3" />
					<comment>This detection mechanism will be container dependant.
						Cannot test.</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:182.3</id>
					<description>Expressions are evaluated left to right in the JSP
						document.</description>
					<location chapter="1" section="12.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:182.4</id>
					<description>A translation error will occur if the expression is
						not a complete expression in the scripting language in which it is
						written.</description>
					<location chapter="1" section="12.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:182.5</id>
					<description>A JSP container must support the presence of the
						jsp:expression element within a JSP page.</description>
					<location chapter="6" section="1.1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:183</id>
			<description>The jsp:element element is used to dynamically define an
				XML element</description>
			<location chapter="6" section="1.9" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:183.1</id>
					<description>The name of the element can be provided via the 'name'
						attribute.</description>
					<location chapter="6" section="1.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:183.2</id>
					<description>The value of the 'name' attribute can be provided via
						the jsp:attribute element.</description>
					<location chapter="6" section="1.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:183.3</id>
					<description>The body of the jsp:element element will be the body
						of the generated element.</description>
					<location chapter="6" section="1.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:183.4</id>
					<description>The body of the jsp:element element can be provided by
						the jsp:body element.</description>
					<location chapter="6" section="1.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:183.5</id>
					<description>JSP containers must support the presence of the
						jsp:element within standard JSP pages.</description>
					<location chapter="2" section="1.1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:184</id>
			<description>The jsp:text element can be used to enclose template
				text that will be emitted to the current JspWriter (retaining any
				whitespace within the element).</description>
			<location chapter="6" section="1.12" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:184.1</id>
					<description>JSP contianer's must support the presence of jsp:text
						elements within standard JSP files.</description>
					<location chapter="6" section="1.1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:185</id>
			<description>Any elements that are not standard or custom actions are
				to be passed to the current JspWriter after whitespace processing.</description>
			<location chapter="6" section="1.13" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:186</id>
			<description>The following steps must be taken by containers when
				converting a JSP document to it's internal XML view:</description>
			<location chapter="6" section="2.1" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:186.1</id>
					<description>Expand all include directives into the JSP framgments
						they include.</description>
					<location chapter="6" section="2.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:186.2</id>
					<description>Add the jsp:id attribute</description>
					<location chapter="6" section="2.1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:187</id>
			<description>The following steps must be taken by a container to
				convert a JSP page into its XML view:</description>
			<location chapter="6" section="2.2" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:187.1</id>
					<description>Expand all include directives into the JSP framgments
						the include.</description>
					<location chapter="6" section="2.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:187.2</id>
					<description>Add a jsp:root element as the root, with appropriate
						xmlns:jsp attribute, and convert the taglib directive into
						xmlns:attributes of the jsp:root element.</description>
					<location chapter="6" section="2.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:187.3</id>
					<description>Convert declarations, scriptlets, and expressions into
						their equivalent XML forms.</description>
					<location chapter="6" section="2.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:187.3.1</id>
							<description>JSP declarations are translated into jsp:declaration
								elements.</description>
							<location chapter="5" section="2.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:187.3.2</id>
							<description>JSP scriptlets are translated into jsp:scriptlet
								elements.</description>
							<location chapter="5" section="2.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:187.3.3</id>
							<description>JSP expressions are translated into jsp:expression
								elements.</description>
							<location chapter="6" section="2.9" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:187.4</id>
					<description>Convert request-time attribute expressions into their
						equivalent XML forms.</description>
					<location chapter="6" section="2.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:187.5</id>
					<description>Convert JSP quotations to XML quitations.</description>
					<location chapter="6" section="2.2" />
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:187.6</id>
					<description>Create jsp:text elements for all template text.</description>
					<location chapter="6" section="2.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:187.7</id>
					<description>Add the jsp:id attribute.</description>
					<location chapter="6" section="2.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:187.8</id>
					<description>JSP comments (&lt;%-- comment --%>) are not passed
						through to the XML view of a JSP page.</description>
					<location chapter="6" section="2.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:187.9</id>
					<description>JSP page directives are translated into
						&lt;jsp:directive.page> elements.</description>
					<location chapter="6" section="2.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:187.10</id>
					<description>JSP taglib directives are translated into xmlns:prefix
						attributes of the jsp:root element.</description>
					<location chapter="5" section="2.5" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:260</id>
			<description>A JSP Document with a DOCTYPE declaration must be
				validated by the container in the translation phase. Validation
				errors must be handled the same way as any other translation phase
				errors, as described in Section JSP.1.4.1.</description>
			<location chapter="6" section="2.4" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:188</id>
			<description>As of JSP 2.0, the JSP container must support the jsp:id
				attribute which is only present in the XML view of a JSP page to
				improve the quality of translation time errors.</description>
			<location chapter="6" section="2.13" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:189</id>
			<description>Scripting variables can be defined in one of two ways:</description>
			<location chapter="7" section="1.4.7" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:189.1</id>
					<description>Directly within the TLD for a particular action via
						the &lt;variable> element.</description>
					<location chapter="7" section="1.4.7" />
					<comment>See appendix D and E for TLD info.</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:189.2</id>
					<description>Using a subclass of the TagExtraInfo interface,
						specifically providing a method body to the getVariableInfo()
						call.</description>
					<location chapter="7" section="1.4.7" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:301</id>
			<description>The &lt;body-content> of a SimpleTag cannot be "JSP".
				[BodyContentSimpleTagNotJsp]
			</description>
			<location chapter="7" section="1.5" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:190</id>
			<description>A translation error must occur if a piece of JSP code
				that is to be translated into a JSPFragment (any JSP code in the
				body of a named attribute (&lt;jsp:attribute), that is declared to
				be a fragment in the TLD, or for the body of any tag handled by a
				Simple Tag Handler).</description>
			<location chapter="7" section="1.6" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:191</id>
			<description>A tag library can define listener classes (See
				Servlet.2.4 specification) which will be instantiated and registered
				by the JSP container.</description>
			<location chapter="7" section="1.9" />
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:192</id>
			<description>Listeners must be instantiated before the start of the
				application, however, the order in which listeners are registered is
				undefined.</description>
			<location chapter="7" section="1.9" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:302</id>
			<description> Tag handlers which implement interfaces
				javax.servlet.jsp.tagext.Tag and javax.servlet.jsp.tagext.SimpleTag
				may be annotated for injection. [TagHandlerResourceInjection]</description>
			<location chapter="7" section="1.11" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:303</id>
			<description>Resource injection occurs immediately after an instance
				of a tag handler is constructed, and before any of the tag
				properties are initialized. [TagHandlerResourceInjectionTiming]</description>
			<location chapter="7" section="1.11" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:304</id>
			<description>Event Listeners can be annotated for resource injection.
				[EventListenerResourceInjection]</description>
			<location chapter="7" section="1.11" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:305</id>
			<description>Resource injection occurs immediately after an instance
				of an event handler is constructed, and before it is registered.
				[EventListenerResourceInjectionTiming P1]</description>
			<location chapter="7" section="1.11" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:193</id>
			<description>When tag libraries are deployed in a JSP container as a
				JAR file, the standard JAR conventions described in the Servlet 2.4
				specification apply, including the conventions for dependencies on
				extensions.</description>
			<location chapter="7" section="2.1" />
			<comment>Need to reference Servlet assertion ID's once created.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:194</id>
			<description>Packaged tag libraries must have at least one tag
				library descript file.</description>
			<location chapter="7" section="2.1" />
			<comment>Negative test: package the classes for a few tags, and then
				try to access via a JSP page. Should result in a translation error.
				Silly test, but I guess it works.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:195</id>
			<description>Both classic and simple tag handlers (implemented in
				either Java or as tag files) can be packaged together in the same
				JAR file.</description>
			<location chapter="7" section="2.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:196</id>
			<description>If a JSP container cannot locate a TLD resource path for
				a given URI, a fatal translation error shall result.</description>
			<location chapter="7" section="2.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:197</id>
			<description>If the URI resolves to two different TLD resource paths,
				a translation error will occur.</description>
			<location chapter="7" section="2.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:198</id>
			<description>A TLD must end with the extension ".tld" to be
				recognized by the container.</description>
			<location chapter="7" section="3.1" />
			<comment>Again, a negative test where the TLD ends in say .tlv and a
				JSP tries to use a tag defined therein, a translation error will be
				raised.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:199</id>
			<description>When taglibraries are deployed in a JAR file, the TLDs
				must be present in the META-INF directory in order to be recognized
				by the container.</description>
			<location chapter="7" section="3.1" />
			<comment>Negative test...same as above. Positive tests for this will
				be further down the list.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:200</id>
			<description>When deployed directly in the web application, the TLD's
				must be be in the WEB-INF directory, or some subdirectory thereof.</description>
			<location chapter="7" section="3.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:201</id>
			<description>A translation error will occur if the TLD resource path
				doesn't ultimately resolve directly to a TLD within the web
				application, or to a JAR file that has the taglib.tld file in the
				META-INF directory of the JAR.</description>
			<location chapter="7" section="3.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:306</id>
			<description>TLD files must not be placed inside /WEB-INF/tags or a
				subdirectory of it, unless named implicit.tld and intended to
				configure an implicit tag library with its JSP version and
				tlib-version. [TldPlacementInWEB-INFtags]</description>
			<location chapter="7" section="3.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:202</id>
			<description>Explicit taglib map entries between URI's and TLD
				resource paths can be described using taglib elements of the Web
				Application Deployment descriptor (web.xml).</description>
			<location chapter="7" section="3.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:203</id>
			<description>Implicit taglib map entries can be described via a TLD
				file(s) located in the META-INF directory of the JAR file (TLD is
				not named taglib.tld).</description>
			<location chapter="7" section="3.4" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:203.1</id>
					<description>Each TLD file is examined. If it has a &lt;uri>
						element, then a new &lt;taglib> element is created, with a
						&lt;taglib-uri> subelement whose value is that of the &lt;uri>
						element, and with a &lt;taglib-location> subelement that refers to
						the TLD file.</description>
					<location chapter="7" section="3.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:203.2</id>
					<description>If the created &lt;taglib> element has a different
						&lt;taglib-uri> to any in the taglib map, it is added to the map.</description>
					<location chapter="7" section="3.4" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:204</id>
			<description>The JSP container may "know of" some specific URIs and
				may provide alternate implementations for the tag libraries
				described by these URI's.</description>
			<location chapter="7" section="3.9" />
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:204.1</id>
					<description>When the container does provide an alternate
						implementation, the implementation must provide the same behavior
						as that described by the required, portable tag library
						description described by the URI.</description>
					<location chapter="7" section="3.9" />
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:204.2</id>
					<description>A JSP container must always use the mapping specified
						for a URI in the web.xml deployment descriptor if present. If the
						deployer wishes to use the platform-specific implementation of the
						well-known URI, the mapping for that URI should be removed at
						deployment time.</description>
					<location chapter="7" section="3.9" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:205</id>
			<description>The &lt;taglib-uri> element may be URI of the following
				types:</description>
			<location chapter="7" section="3.6.1" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:205.1</id>
					<description>An absolute URI.</description>
					<location chapter="7" section="3.6.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:205.2</id>
					<description>A context-relative URI (URI starting with '/').</description>
					<location chapter="7" section="3.6.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:205.3</id>
					<description>A page-relative URI (URI that doesn't start with '/').</description>
					<location chapter="7" section="3.6.1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:206</id>
			<description>If the &lt;taglib-location> sublement is a relative URI
				without a leading slash, the resolution of the taglib location will
				be relative to /WEB-INF.</description>
			<location chapter="7" section="3.6.1" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:206.1</id>
					<description>The result of the resolution will be a
						context-relative path (starts with "/").</description>
					<location chapter="7" section="3.6.1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:207</id>
			<description>The following describes the resolution process of the
				taglib directive to compute the TLD resource path.</description>
			<location chapter="7" section="3.6.2" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:207.1</id>
					<description>If the URI is an absolute URI, check the taglib map
						for an entry whose URI is the specified absolute URI. If found,
						the corresponding taglib location is the TLD resource path. The
						taglib will be usable in the page.</description>
					<location chapter="7" section="3.6.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:207.2</id>
					<description>If the absolute URI is not found in the taglib map, a
						translation error will occur.</description>
					<location chapter="7" section="3.6.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:207.3</id>
					<description>If the URI is a context-relative path (URI starts with
						'/'), look in taglib amp for an entry whose taglib URI matchs the
						provided URI. If found, the corresponding location is the TLD
						resource path. The tag library will be available to the page</description>
					<location chapter="7" section="3.6.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:207.4</id>
					<description>If the context-relative URI is not found in the taglib
						map, then the URI provided by the taglib directive is the TLD
						resource path.</description>
					<location chapter="7" section="3.6.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:207.5</id>
					<description>If at translation time, the resource (either a TLD or
						a JAR where taglib.tld is in the META-INF directory) doesn't exist
						as specified by the provided context-relative path, a translation
						error will occur.</description>
					<location chapter="7" section="3.6.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:207.6</id>
					<description>If the URI is a page-relative path (the URI doesn't
						start with a '/') look in the taglib map for the same
						page-relative path. If found, the corresponding taglib location in
						the map is the TLD resource path. The tag library will be
						available to the page.</description>
					<location chapter="7" section="3.6.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:207.7</id>
					<description>If the page-relative URI is not found in the taglib
						map, resolve the page relative path to the current JSP page where
						the directive appears. This will be used as the TLD resource path.
						If the resource is found at the resolved location, the tag library
						will be available to the page.</description>
					<location chapter="7" section="3.6.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:207.8</id>
					<description>If, at translation time, the resource identified by
						the resolved page-relative path doesn't exist (either a TLD or a
						JAR file with a taglib.tld in META-INF), a translation error will
						occur.</description>
					<location chapter="7" section="3.6.2" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:208</id>
			<description>JSP containers must not alter their behavior based on
				the content, the presence, or the absence of a particular Tag or Tag
				Library Extension Element.</description>
			<location chapter="7" section="3.10" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:209</id>
			<description>JSP containers must consider invalid any tag library
				that specifies mustUnderstand='true' for any Tag or Tag Library
				Extension element.</description>
			<location chapter="7" section="3.10" />
			<comment>Marked untestable as container behavior in this case is not
				clear.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:210</id>
			<description>All attribute constraints as described in the TLD must
				be enforced by the container.</description>
			<location chapter="7" section="4.1.1" />
			<comment>Series of negative tests.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:211</id>
			<description>The following must hold true for all tag handlers
				defined as tag files:</description>
			<location chapter="8" section="3" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:211.1</id>
					<description>The tag file implementation must keep a copy of the
						JspContext instance passed to it by the invoking page via
						setJspContext(). This is called the 'Invoking JSP Context'.</description>
					<location chapter="8" section="3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:211.2</id>
					<description>The tag file implementation must create and maintain a
						second instance of JspContext called a 'JSP Context Wrapper'. If
						the Invoking JSP Context is an instance of PageContext, the JSP
						Context Wrapper must also be an instance of PageContext.</description>
					<location chapter="8" section="3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:211.3</id>
					<description>For each invocation of the tag, the JSP Context
						Wrapper must present a clean page scope containing no initial
						elements.
					</description>
					<location chapter="8" section="3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:211.4</id>
					<description>All scopes other than the page scope must be identical
						to this in the Invoking JSP Context and must be modified
						accordingly when updates are made to those scopes in the JSP
						Context Wrapper.</description>
					<location chapter="8" section="3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:211.5</id>
					<description>Any modifications to the page scope, however, must not
						affect the Invoking JSP Context.</description>
					<location chapter="8" section="3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:211.6</id>
					<description>For each attribute declared and specified, a
						page-scoped variable must be created in the page scope of the JSP
						Context Wrapper.</description>
					<location chapter="8" section="3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:211.7</id>
					<description>The name of the variable must be the same as the
						declared attribute name.
					</description>
					<location chapter="8" section="3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:211.8</id>
					<description>The value of the variable must be the value of the
						attribute passed in during invocation.</description>
					<location chapter="8" section="3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:211.9</id>
					<description>For each attribute declared as optional and not
						specified, no page-scoped variable is created.</description>
					<location chapter="8" section="3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:211.10</id>
					<description>If the tag accepts dynamic attributes, then
						page-scoped variables must also be made available for each dynamic
						attribute passed in.</description>
					<location chapter="8" section="3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:211.11</id>
					<description>The 'pageContext' scripting variable must point to the
						JSP Context Wrapper instead of the Invoking JSP Context</description>
					<location chapter="8" section="3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:211.12</id>
					<description>The tag handler must behave as through a tag library
						descriptor entry was defined for it, in accordance with the tag,
						attribute, and variable directives that appear in the tag file
						translation unit.</description>
					<location chapter="8" section="3" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:212</id>
			<description>If &lt;jsp:forward> is used within a tag file, the
				generated tag handler must stop processing upon the return of
				RequestDispatcher.forward() and throw a
				javax.servlet.jsp.SkipPageException</description>
			<location chapter="8" section="3" />
			<comment>Package seems goofy. Since SkipPageException is for use with
				SimpleTagHandlers, shouldn't this be in the tagext package?</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:213</id>
			<description>If a tag file invokes a Classic Tag Handler which
				returns SKIP_PAGE, from doEndTag() , tag file must terminate and
				SkipPageException must be thrown.</description>
			<location chapter="8" section="3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:214</id>
			<description>If a tag file invokes a Classic Tag Handler invokes a a
				Simple Tag Handler which throws SkipPageException, the tag file must
				terminate and SkipPageException must be thrown.</description>
			<location chapter="8" section="3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:215</id>
			<description>If a tag file invokes a Simple Tag Handler which throws
				a SkipPageException, processing must terminate with the tag file
				throwing a SkipPageException</description>
			<location chapter="8" section="3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:216</id>
			<description>In the case of either Simple or Classic Tag Handlers,
				the doFinally() method must be called on enclosing tags that
				implement the TryCatchFinally interface before returning.</description>
			<location chapter="8" section="3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:217</id>
			<description>The doEndTag() methods of enclosing classic tags must
				not be called when SkipPageException is thrown.</description>
			<location chapter="8" section="3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:218</id>
			<description>When a tag file attempts to invoke a classic tag handler
				(i.e one that implements the Tag interface), it must cast the
				JspContext passed to the SimpleTag into a PageContext</description>
			<location chapter="8" section="3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:219</id>
			<description>If the cast by a Simple Tag Handler of a JspContext to a
				PageContext fails, the invocation of the classic tag files, and a
				JspException must be thrown.</description>
			<location chapter="8" section="3" />
			<comment>TCK will never run outside of a servlet env. So the cast
				will always work.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:220</id>
			<description>Tag files can be packaged in the /META-INF/tags
				directory of a JAR file installed in the /WEB-INF/lib directory.</description>
			<location chapter="8" section="4.1" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:220.1</id>
					<description>Any tag files packaged in a JAR file must have a Tag
						Library Descriptor (TLD) present within the JAR file with a
						reference for each tag that is to be recognized by the container
						in the TLD.</description>
					<location chapter="8" section="4.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:220.2</id>
					<description>Any tag files within a JAR file that are not defined
						within a TLD must be ignored by the container.</description>
					<location chapter="8" section="4.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:220.3</id>
					<description>A tag library is considered invalid and must be
						rejected by the container if a &lt;tag-file> element has a
						&lt;name> subelement with the same content as a &lt;name>
						subelement in a &lt;tag> element.</description>
					<location chapter="8" section="4.2" />
					<comment>Marked untestable as 'rejected' is not defined.</comment>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:314</id>
			<description>Tag files packaged in a JAR inherit the JSP version of
				the TLD that references them.
				[JspVersionInheritanceInJarPackagedTagFiles]</description>
			<location chapter="8" section="4.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:221</id>
			<description>Tag files can be packaged in the /WEB-INF/tags/
				directory of a web application or a subdirectory thereof.</description>
			<location chapter="8" section="4.3" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:221.1</id>
					<description>The JSP container must interpret the '/WEB-INF/tags/'
						directory and each subdirectory under it, as another implicitly
						defined tag library containing tag handlers defined by the tag
						files that appear in the directory.</description>
					<location chapter="8" section="4.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:221.2</id>
					<description>The JSP container must generate an implicit tag
						library for each directory under and included /WEB-INF/tags/.</description>
					<location chapter="8" section="4.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:221.3</id>
					<description>The tag library can only be imported via the tagdir
						attribute of the taglib directive.</description>
					<location chapter="8" section="4.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:221.3.1</id>
							<description>The &lt;tlib-version> element will be defined as 1.0</description>
							<location chapter="8" section="4.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:221.3.2</id>
							<description>&lt;short-name> is derived from the directory name
								that that tag file resides in.</description>
							<location chapter="8" section="4.3" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="removed" testable="false">
									<id>JSP:SPEC:221.3.2.1</id>
									<description />
									<location chapter="8" section="4.3" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:221.3.3</id>
							<description>The &lt;tag-file> element is considered to exist for
								each tag file in this directory.
							</description>
							<location chapter="8" section="4.3" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:221.3.3.1</id>
									<description>The &lt;name> for each is the filename of the tag
										file, withouth the .tag extension</description>
									<location chapter="8" section="4.3" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSP:SPEC:221.3.3.2</id>
									<description>The &lt;path> element for each is the path of the
										tag file, relative to the root of the web application.</description>
									<location chapter="8" section="4.3" />
								</assertion>
							</sub-assertions>
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:307</id>
			<description>The JSP version of an implicit tag library defaults to
				2.0. [ImplicitTldDefaultJspVersion]</description>
			<location chapter="8" section="4.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:308</id>
			<description>The JSP version and tlib-version of an implicit tag
				library may be configured by placing a TLD with the reserved name
				implicit.tld in the same directory as the implicit tag library?s
				constituent tag files. [ImplicitTldReservedName]</description>
			<location chapter="8" section="4.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:309</id>
			<description>A JSP 2.1 container must consider only the JSP version
				and tlib-version specified by an implicit.tld file, and ignore its
				short-name element. [ImplicitTldVersionInfo]</description>
			<location chapter="8" section="4.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:310</id>
			<description>Any elements in addition to jsp-version, tlib-version,
				and short-name in an implicit.tld file must cause a translation
				error. [ImplicitTldAdditionalElements]</description>
			<location chapter="8" section="4.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:311</id>
			<description>The JSP version specified in an implicit.tld file must
				be equal to or greater than 2.0, or else a translation error must be
				reported. [ImplicitTldMinimumJspVersion]</description>
			<location chapter="8" section="4.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:222</id>
			<description>Upon deployment, the JSP container must seach for and
				process all tag files appearing in these directories and
				subdirectories. In processing a tag file, the container makes the
				custom actions defined in these tags available to JSP files.</description>
			<location chapter="8" section="4.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:312</id>
			<description>If a tag library directory contains two files with the
				same tag name, the tag library is considered invalid.
				[TwoFilesSameTagName]</description>
			<location chapter="8" section="4.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:313</id>
			<description>It a tag file is referenced by both a TLD as well as an
				implicit TLD, the JSP versions of the TLD and implicit TLD do not
				need to match. [TldImplicitTldJspVersionNotMatch]</description>
			<location chapter="8" section="4.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:223</id>
			<description>A translation error will occur of a page directive is
				present within a tag file.</description>
			<location chapter="8" section="5" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:224</id>
			<description>The taglib directive is legal within Tag files. The
				semantics of the taglib directive within a tag file are identical to
				those of a JSP page.</description>
			<location chapter="8" section="5" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:225</id>
			<description>The include directive is legal within Tag files. The
				semantics of the include directive within a tag file are identical
				to those of a JSP page.</description>
			<location chapter="8" section="5" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:225.1</id>
					<description>If the included file contains syntax unsuitable for
						tag files, a translation error will occur.</description>
					<location chapter="8" section="5" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:226</id>
			<description>The tag directive is only applicable to tag files. Any
				attempt to use the tag directive in a JSP page will result in a
				translation error.</description>
			<location chapter="8" section="5" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:227</id>
			<description>The attribute directive is only applicable to tag files.
				Any attempt to use the attribute directive in a JSP page will result
				in a translation error.</description>
			<location chapter="8" section="5" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:228</id>
			<description>The variable directive is only applicable to tag files.
				Any attempt to use the variable directive in a JSP page will result
				in a translation error.</description>
			<location chapter="8" section="5" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:229</id>
			<description>The 'tag' directive is similar to the page directive,
				but applied to tag files instead of JSP's.</description>
			<location chapter="8" section="5.1" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.1</id>
					<description>A translation unit can container more than one
						instance of the tag directive, all the attributes will apply to
						the complete translation unit (i.e. tag directives are position
						independent).</description>
					<location chapter="8" section="5.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.2</id>
					<description>Unrecoginized attributes or values will result in a
						fatal translation error.</description>
					<location chapter="8" section="5.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.3</id>
					<description>The 'display-name' attribute provides a short name
						that is intended to be displayed by tools.</description>
					<location chapter="8" section="5.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.4</id>
					<description>Multiple 'display-name' attribute/value
						(re)definitions will result in a translation error if values do
						not match.</description>
					<location chapter="8" section="5.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.5</id>
					<description>The 'body-content' attribute specifies the body
						content of this tag.</description>
					<location chapter="8" section="5.1" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.5.1</id>
							<description>A valid value is 'empty' meaning no body.</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.5.2</id>
							<description>A valid value is 'tagdependent'.</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.5.3</id>
							<description>A valid value is 'scriptless'</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.5.4</id>
							<description>If the 'body-content' attribute is not specified, it
								will default to 'scriptless'</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.5.5</id>
							<description>Any other value provided to the 'body-content'
								attribute aside from 'empty', 'tagdependent', or 'scriptless'
								will result in a translation error.</description>
							<location chapter="8" section="5.1" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.6</id>
					<description>Multiple 'body-content' attribute/value
						(re)definitions will result in a translation error if values do
						not match.</description>
					<location chapter="8" section="5.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.7</id>
					<description>The 'dynamic-attributes' attribute indicates whether
						this tag supports additional attributes with dynamic names.</description>
					<location chapter="8" section="5.1" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.7.1</id>
							<description>If 'true', the generated tag handler must implement
								the javax.servlet.jsp.tagext.DynamicAttributes interface.</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.7.2</id>
							<description>If 'false' the generated tag handler will not
								implement the javax.servlet.jsp.tagext.DynamicAttributes
								interface.</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:229.7.3</id>
							<description>The default value is 'false'.</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.7.4</id>
							<description>If any values are provided to the
								'dynamic-attributes' attribute aside from 'true' or 'false' a
								translation error will occur.</description>
							<location chapter="8" section="5.1" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.8</id>
					<description>Multiple 'dyanmic-attribute' attribute/value
						(re)definitions will result in a translation error if values do
						not match.</description>
					<location chapter="8" section="5.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.9</id>
					<description>The 'small-icon' attribute specifies a relative path,
						from the tag source file, of an image file containg a small icon
						that can be used by tools.</description>
					<location chapter="8" section="5.1" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:229.9.1</id>
							<description>If the 'small-icon' attribute is not specified, no
								icon will be used.</description>
							<location chapter="8" section="5.1" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.10</id>
					<description>Multiple 'small-icon' attribute/value (re)definitions
						will result in a translation error if values do not match.</description>
					<location chapter="8" section="5.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.11</id>
					<description>The 'large-icon' attribute specifies a relative path
						from the tag source file, of an image file containing a large icon
						that can be used by tools.</description>
					<location chapter="8" section="5.1" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:229.11.1</id>
							<description>If the 'large-icon' attribute is not specified, no
								icon will be used.</description>
							<location chapter="8" section="5.1" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.12</id>
					<description>Multiple 'large-icon' attribute/value (re)definitions
						will result in a translation error if values do not match.</description>
					<location chapter="8" section="5.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.13</id>
					<description>The 'description' attribute provides an arbitrary
						string that describes this tag.</description>
					<location chapter="8" section="5.1" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:229.13.1</id>
							<description>If the 'description' attribute is not specified, no
								description will be available.</description>
							<location chapter="8" section="5.1" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.14</id>
					<description>Multiple 'description' attribute/value (re)definitions
						will result in a translation error if values do not match.</description>
					<location chapter="8" section="5.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.15</id>
					<description>The 'example' attribute defines an arbitraty string
						describing the use of this action.</description>
					<location chapter="8" section="5.1" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:229.15.1</id>
							<description>If the 'example' attribute is not specified, no
								example string will be available.</description>
							<location chapter="8" section="5.1" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.16</id>
					<description>Multiple 'example' attribute/value (re)definitions
						will result in a translation error if values do not match.</description>
					<location chapter="8" section="5.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.17</id>
					<description>The 'language' attribute specifies the scripting
						language used by the tag file.</description>
					<location chapter="8" section="5.1" />
					<sub-assertions>
						<assertion required="true" impl-spec="true" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:229.17.1</id>
							<description>All scripting languages, specifiable by the tag
								directive's 'language' attribute, must provide some implicit
								objects that a JSP page author can use in declarations,
								scriptlets, and expressions (see Section JSP.1.3.8 for list of
								available implicit objects)</description>
							<location chapter="1" section="10.1" />
						</assertion>
						<assertion required="true" impl-spec="true" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:229.17.2</id>
							<description>All scripting languages, specifiable by the tag
								directive's 'language' attribute, must expose the Java
								technology object model to the script environment, especially
								implicit variables, JavaBeans components properties, and public
								methods.</description>
							<location chapter="1" section="10.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.17.3</id>
							<description>It is a fatal translation error for a tag directive
								with a non-"java" language attribute to appear after the first
								scripting has been encountered.</description>
							<location chapter="1" section="10.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.17.4</id>
							<description>The only required scripting language value for the
								'language' attribute is "java".</description>
							<location chapter="1" section="10.1" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.18</id>
					<description>Multiple 'language' attribute/value (re)definitions
						will result in a translation error if values do not match.</description>
					<location chapter="8" section="5.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.19</id>
					<description>The 'import' attribute of the tag directive specifies
						the fully qualified Java programming language type name denoting a
						particular type, or of a package name following by the ".*"
						string, denoting all the public types declared in that package,
						that shall be imorted by the translated JSP page implementation
						and is thus available to the scripting language.</description>
					<location chapter="8" section="5.1" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.19.1</id>
							<description>The default import list for a tag is java.lang.*,
								javax.servlet.*, javax.servlet.jsp.*, javax.servlet.http.*</description>
							<location chapter="1" section="10.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.19.2</id>
							<description>multiple uses of this attribute are cumulative (with
								ordered set union semantics).</description>
							<location chapter="8" section="5.1" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.20</id>
					<description>The 'pageEncoding' attribute of the tag directive
						specifies the character encoding of the tag. The value is in the
						form of CHARSET which my be the IANA value for a character
						encoding. If no 'pageEncoding' attribute is specified, the default
						of ISO-8859-1 will be used.</description>
					<location chapter="8" section="5.1" />
					<comment>What about Tag files in XML?</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.21</id>
					<description>Multiple 'pageEncoding' attribute/value
						(re)definitions will result in a translation error.</description>
					<location chapter="8" section="5.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.22</id>
					<description>The 'pageEncoding' attribute of the tag directive is
						not influenced at all by any global configuration present in the
						web.xml</description>
					<location chapter="8" section="5.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.23</id>
					<description>The 'isScriptingEnabled' attribute specified whether
						scripting elements are legal within the tag file.</description>
					<location chapter="8" section="5.1" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.23.1</id>
							<description>The 'isScriptingEnabled' attribute of the tag
								directive, if false, disallows the presence of scripting
								elements (scriptlets, expressions, declarations) within a given
								translation unit and will generate a translation error if they
								are present.</description>
							<location chapter="1" section="10.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.23.2</id>
							<description>The default value for 'isScriptingEnabled' of the
								tag directive, if not specified, is true.</description>
							<location chapter="1" section="10.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.23.3</id>
							<description>Any value other than 'true' or 'false' provided to
								the 'isScriptingEnabled' attribute will result in a translation
								error.</description>
							<location chapter="8" section="5.1" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.24</id>
					<description>Multiple 'isScriptingEnabled' attribute/value
						(re)definitions will result in a translation error if values do
						not match.</description>
					<location chapter="8" section="5.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.25</id>
					<description>The 'isELEnabled' attribute of the tag directive
						specifies whether or not the container should evaluate EL
						expressions.</description>
					<location chapter="8" section="5.1" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.25.1</id>
							<description>The 'isELEnabled' attribute of the page directive ,
								if false, will result in EL expressions not being evaluated by
								the container.</description>
							<location chapter="1" section="10.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.25.2</id>
							<description>The default value, if 'isELEnabled' is not
								specified, is true.</description>
							<location chapter="1" section="10.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.25.3</id>
							<description>Any value other than 'true' or 'false' provided to
								the 'isELEnabled' attribute will result in a translation error.</description>
							<location chapter="8" section="5.1" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.26</id>
					<description>The deferredSyntaxAllowedAsLiteral attribute of the
						tag directive carries the same syntax and semantics of the
						deferredSyntaxAllowedAsLiteral attribute of the page directive.
						[DeferredSyntaxAllowedAsLiteralTagDirectiveAttribute]</description>
					<location chapter="8" section="5.1" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:229.26.1</id>
							<description>The deferredSyntaxAllowedAsLiteral attribute of the
								tag directive causes a translation error if specified in a tag
								file with a JSP version less than 2.1.
								[deferredSyntaxAllowedAsLiteralMinimumJspVersion]</description>
							<location chapter="8" section="5.1" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.27</id>
					<description>The trimDirectiveWhiteSpaces attribute of the tag
						directive carries the same syntax and semantics of the
						trimDirectiveWhitespaces attribute of the page directive.
						[TrimDirectiveWhitespacesTagDirectiveAttribute]</description>
					<location chapter="8" section="5.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:229.26</id>
					<description>Multiple 'isELEnabled' attribute/value (re)definitions
						will result in a translation error if values do not match.</description>
					<location chapter="8" section="5.1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:230</id>
			<description>The attribute directive is analogous to the
				&lt;attribute> element in the Tag Library Descriptor, and allows for
				the declaration of custom action attributes.</description>
			<location chapter="8" section="5.2" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:230.1</id>
					<description>The 'name' attribute specifies the unique name of the
						attribute being declared.</description>
					<location chapter="8" section="5.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.1.1</id>
							<description>A translation error will occur if the 'name'
								attribute is not specified.</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.1.2</id>
							<description>A translation error will result if there is an
								attribute directive with a name attribute equal to the value of
								the name-given attribute of a variable directive in this
								translation unit.</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.1.3</id>
							<description>A translation error will result if there is an
								attribute directive with a name attribute equal to the value of
								the dynamicattributes attribute of a tag directive in this
								translation unit.</description>
							<location chapter="8" section="5.2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:230.2</id>
					<description>A translation error will occur if more than one
						attribute directive appears in the same translation unit with the
						same name.</description>
					<location chapter="8" section="5.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:230.3</id>
					<description>The 'required' attribute indicates whether or not the
						attribute must be present.</description>
					<location chapter="8" section="5.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.3.1</id>
							<description>If 'true' the attribute is requried and a
								translation error will occur if the attribute is not provided.</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.3.2</id>
							<description>If 'false', the attribute need not be present.</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.3.3</id>
							<description>If the 'required' attribute is not specified, the
								value of 'false' will be assumed.</description>
							<location chapter="8" section="5.2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:230.4</id>
					<description>The 'fragment' attribute specifies whether this
						attribute is a fragment to be evaluated by the tag handler or a
						normal attribute to be evaluated by the container prior to being
						passed to the tag handler.</description>
					<location chapter="8" section="5.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.4.1</id>
							<description>If 'true', the type of the attribute is fixed to
								javax.servlet.jsp.tagext.JspFragment.</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.4.5</id>
							<description>If the 'fragment' attribute is true, and the 'type'
								attribute is specified, a translation error will occur</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.4.2</id>
							<description>If 'true' the 'rtexprvalue' attribute is fixed at
								true.</description>
							<location chapter="8" section="5.2" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:230.4.2.1</id>
									<description>A translation error will occur if the 'fragment'
										attribute is 'true' and the 'rtexprvalue' attribute is
										specified.</description>
									<location chapter="8" section="5.2" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.4.3</id>
							<description>If 'false', the container will evaluate the
								attribute before passing it to the tag handler.</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.4.4</id>
							<description>If the 'fragment' attribute is not specified, the
								behavior will be as if it was defined as 'false'</description>
							<location chapter="8" section="5.2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:230.5</id>
					<description>The 'rtexprevalue' attribute specifies whether this
						attribute accepts dynamic attribute value.</description>
					<location chapter="8" section="5.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.5.1</id>
							<description>If 'true', the attribute can accept dynamic values.</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.5.2</id>
							<description>If 'false', the attribute cannot accept a dynamic
								value. Any attempt to pass a dynamic value when false will
								result in a translation error.</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.5.3</id>
							<description>If 'rtexprvalue' is not specified, the default of
								'false' will be assumed.</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.5.4</id>
							<description>A translation error will occur if any other value
								outside of 'true' or 'false' is provided.</description>
							<location chapter="8" section="5.2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:230.6</id>
					<description>The 'type' attribute specifies the runtime type of the
						attribute being described.</description>
					<location chapter="8" section="5.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.6.1</id>
							<description>If the 'type' attribute is not specified, the
								default of java.lang.String will be assumed.</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.6.2</id>
							<description>It is a translation error to specify a primitive
								type.</description>
							<location chapter="8" section="5.2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:230.7</id>
					<description>The 'description' attribute specifies a description of
						the attribute.</description>
					<location chapter="8" section="5.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:230.7.1</id>
							<description>If the 'description' attribute is not specified, no
								description will be available.</description>
							<location chapter="8" section="5.2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:230.8</id>
					<description>The deferredValue attribute of the attribute directive
						determines whether the attribute's value represents a deferred
						value expression</description>
					<location chapter="8" section="5.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.8.1</id>
							<description>Only one of deferredValue or deferredMethod
								attribute directive attributes may be true.
								[OnlyOneOfDeferredValueOrMethod]</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.8.2</id>
							<description>If the deferredValueType of the attribute directive
								is specified, default for deferredValue is true, otherwise
								default is false.[DefaultDeferredValue]</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.8.3</id>
							<description>The deferredValue attribute causes a translation
								error if specified in a tag file with a JSP version less than
								2.1. [deferredValueMinimumJspVersion]</description>
							<location chapter="8" section="5.2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:230.9</id>
					<description>The deferredValueType attribute of the attribute
						directive is the expected type resulting from the evaluation of
						the attribute's value expression.</description>
					<location chapter="8" section="5.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.9.1</id>
							<description>The deferredValueType attribute defaults to
								java.lang.String if not specified.
								[DeferredValueTypeNotSpecified]</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.9.2</id>
							<description>If both deferredValueType and deferredValue are
								specified, deferredValue must be true.
								[BothDeferredValueTypeAndDeferredValue]
							</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.9.3</id>
							<description> deferredValue is true, the default for
								deferredValueType is
								java.lang.Object.[DeferredValueTypeDefaultWhenDeferredValueTrue]</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.9.4</id>
							<description> The deferredValueType attribute causes a
								translation error if specified in a tag file with a JSP version
								less than 2.1. [deferredValueTypeMinimumJspVersion]</description>
							<location chapter="8" section="5.2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:230.10</id>
					<description>The deferredMethod attribute of the attribute
						directive determines whether the attribute's value represents a
						deferred method expression.</description>
					<location chapter="8" section="5.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.10.1</id>
							<description>If deferredMethodSignature is specified, the default
								of the deferredMethod attribute is true, otherwise default is
								false. [DefaultDeferredMethod]</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.10.2</id>
							<description>The deferredMethod attribute causes a translation
								error if specified in a tag file with a JSP version less than
								2.1.
								[deferredMethodMinimumJspVersion]
							</description>
							<location chapter="8" section="5.2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSP:SPEC:230.11</id>
					<description>The deferredMethodSignature attribute of the attribute
						directive represents the signature, as defined in the Java
						Language Specification, of the method to be invoked in the
						attribute's method expression.</description>
					<location chapter="8" section="5.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.11.1</id>
							<description>If both deferredMethod and deferredMethodSignature
								are specified, deferredMethod must be true.
								[BothDeferredMethodAndSignature]</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.11.2</id>
							<description>If deferredMethod is true and
								deferredMethodSignature is not specified,
								deferredMethodSignature defaults to void methodname().
								[DefaultDeferredMethodSignature]</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:230.11.3</id>
							<description>The deferredMethodSignature attribute causes a
								translation error if specified in a tag file with a JSP version
								less than 2.1.
								[deferredMethodSignatureMinimumJspVersion]
							</description>
							<location chapter="9" section="5.2" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:231</id>
			<description>The variable directive is analogous to the &lt;variable>
				element in the Tag Library Descriptor, and defines the details of a
				variable exposed by the tag handler to the calling page.</description>
			<location chapter="8" section="5.3" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:231.1</id>
					<description>The 'name-given' attribute specifies the name of the
						scripting variable to be exposed by the tag.</description>
					<location chapter="8" section="5.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:231.1.1</id>
							<description>A translation error will occur if two variable
								directives have the same value for the 'name-given' attribute.</description>
							<location chapter="8" section="5.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:231.2</id>
					<description>The 'name-from-attribute' directive specifies the name
						of an attribute whose (translation-time) value will give the name
						of the variable.</description>
					<location chapter="8" section="5.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:231.2.1</id>
							<description>A translation error will occur if two variable
								directives have the same value for the 'name-from-attribute'
								attribute.</description>
							<location chapter="8" section="5.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:231.3</id>
					<description>A translation error will occur if both the
						'name-given' and the 'name-from-attribute' attributes are
						specified within the same directive.</description>
					<location chapter="8" section="5.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:231.4</id>
					<description>A translation error will occur if neither the
						'name-given' or the 'name-from-attribute' attributes are not
						specified wihin a variable directive.</description>
					<location chapter="8" section="5.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:231.5</id>
					<description>The 'variable-class' attribute specifies the class of
						the variable.</description>
					<location chapter="8" section="5.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:231.5.1</id>
							<description>If the 'variable-class' attribute is not specified,
								the default class of java.lang.String will be assumed.</description>
							<location chapter="8" section="5.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:231.6</id>
					<description>The 'scope' attribute specifies the scope of the
						variable being declared.</description>
					<location chapter="8" section="5.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:231.6.1</id>
							<description>Valid values are AT_BEGIN, AT_END, or NESTED.</description>
							<location chapter="8" section="5.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:231.6.2</id>
							<description>If the 'scope' attribute is not specified, the
								default scope of NESTED will be used.</description>
							<location chapter="8" section="5.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:231.6.3</id>
							<description>If any other value is provided outside of AT_BEGIN,
								NESTED, or AT_END, a translation error will occur.</description>
							<location chapter="8" section="5.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:231.6.4</id>
							<description>A translation error must occur if both 'scope' and
								'fragment' are specified.</description>
							<location chapter="8" section="5.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:231.7</id>
					<description>The 'declare' attribute specifies whether the variable
						is declared or not.</description>
					<location chapter="8" section="5.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:231.7.1</id>
							<description>If 'true', the variable will be declared and
								available based on the specified scope.</description>
							<location chapter="8" section="5.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:231.7.2</id>
							<description>If 'false', the variable will not be declared.</description>
							<location chapter="8" section="5.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:231.7.3</id>
							<description>A translation error must occur if both 'declare' and
								'fragment' are specified.</description>
							<location chapter="8" section="5.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:231.8</id>
					<description>The 'fragment' attribute specifies that the value of
						this variable is scoped to the specified fragment and does not
						appear in the body of the tag.</description>
					<location chapter="8" section="5.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:231.8.1</id>
							<description>A translation error will occur if the value of
								'fragment' does not match the name of an attribute declared
								earier in this page with 'fragment=true'.</description>
							<location chapter="8" section="5.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:231.8.2</id>
							<description>A translation error will occur if 'fragment' is
								specified and either 'scope' or 'declare' is specified.</description>
							<location chapter="8" section="5.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:231.9</id>
					<description>The 'description' attribute provides an optional
						description for the variable being declared.</description>
					<location chapter="8" section="5.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:231.9.1</id>
							<description>If the 'description' attribute is not specified, no
								description will be available.</description>
							<location chapter="8" section="5.3" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:232</id>
			<description>XML view of Tag Files</description>
			<location chapter="8" section="6" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:232.1</id>
					<description>The XML equivalent of the tag directive is the
						jsp:directive.tag element. The semantics followed are the same as
						the tag directive in standard syntax.</description>
					<location chapter="8" section="6" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.1</id>
							<description>A translation unit can contain more than one
								instance of the tag directive, all the attributes will apply to
								the complete translation unit (i.e. tag directives are position
								independent).</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.2</id>
							<description>Unrecoginized attributes or values will result in a
								fatal translation error.</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.3</id>
							<description>The 'display-name' attribute provides a short name
								that is intended to be displayed by tools.</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.4</id>
							<description>Multiple 'display-name' attribute/value
								(re)definitions will result in a translation error if values do
								not match.</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.5</id>
							<description>The 'body-content' attribute specifies the body
								content of this tag.</description>
							<location chapter="8" section="5.1" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.1.5.1</id>
									<description>A valid value is 'empty' meaning no body.</description>
									<location chapter="8" section="5.1" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.1.5.2</id>
									<description>A valid value is 'tagdependent'.</description>
									<location chapter="8" section="5.1" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.1.5.3</id>
									<description>A valid value is 'scriptless'</description>
									<location chapter="8" section="5.1" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.1.5.4</id>
									<description>If the 'body-content' attribute is not specified,
										it will default to 'scriptless'</description>
									<location chapter="8" section="5.1" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.1.5.5</id>
									<description>Any other value provided to the 'body-content'
										attribute aside from 'empty', 'tagdependent', or 'scriptless'
										will result in a translation error.</description>
									<location chapter="8" section="5.1" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.6</id>
							<description>Multiple 'body-content' attribute/value
								(re)definitions will result in a translation error if values do
								not match.</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.7</id>
							<description>The 'dynamic-attributes' attribute indicates whether
								this tag supports additional attributes with dynamic sata.</description>
							<location chapter="8" section="5.1" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.1.7.1</id>
									<description>If 'true', the generated tag handler must
										implement the javax.servlet.jsp.tagext.DynamicAttributes
										interface.</description>
									<location chapter="8" section="5.1" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.1.7.2</id>
									<description>If 'false' the generated tag handler will not
										implement the javax.servlet.jsp.tagext.DynamicAttributes
										interface.</description>
									<location chapter="8" section="5.1" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSP:SPEC:232.1.7.3</id>
									<description>The default value is 'false'.</description>
									<location chapter="8" section="5.1" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.1.7.4</id>
									<description>If any values are provided to the
										'dynamic-attributes' attribute aside from 'true' or 'false' a
										translation error will occur.</description>
									<location chapter="8" section="5.1" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.8</id>
							<description>Multiple 'dyanmic-attribute' attribute/value
								(re)definitions will result in a translation error if values do
								not match.</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.9</id>
							<description>The 'small-icon' attribute specifies a relative
								path, from the tag source file, of an image file containg a
								small icon that can be used by tools.</description>
							<location chapter="8" section="5.1" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSP:SPEC:232.1.9.1</id>
									<description>If the 'small-icon' attribute is not specified, no
										icon will be used.</description>
									<location chapter="8" section="5.1" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.10</id>
							<description>Multiple 'small-icon' attribute/value
								(re)definitions will result in a translation error if values do
								not match.</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.11</id>
							<description>The 'large-icon' attribute specifies a relative path
								from the tag source file, of an image file containing a large
								icon that can be used by tools.</description>
							<location chapter="8" section="5.1" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSP:SPEC:232.1.11.1</id>
									<description>If the 'large-icon' attribute is not specified, no
										icon will be used.</description>
									<location chapter="8" section="5.1" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.12</id>
							<description>Multiple 'large-icon' attribute/value
								(re)definitions will result in a translation error if values do
								not match.</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.13</id>
							<description>The 'decription' attribute provides an arbitrary
								string that describes this tag.</description>
							<location chapter="8" section="5.1" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSP:SPEC:232.1.13.1</id>
									<description>If the 'description' attribute is not specified,
										no description will be available.</description>
									<location chapter="8" section="5.1" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.14</id>
							<description>Multiple 'description' attribute/value
								(re)definitions will result in a translation error if values do
								not match.</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.15</id>
							<description>The 'example' attribute defines an arbitraty string
								describe the use of this action.</description>
							<location chapter="8" section="5.1" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSP:SPEC:232.1.15.1</id>
									<description>If the 'example' attribute is not specified, no
										example string will be available.</description>
									<location chapter="8" section="5.1" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.16</id>
							<description>Multiple 'example' attribute/value (re)definitions
								will result in a translation error if values do not match.</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.17</id>
							<description>The 'language' attribute specifies the scripting
								language used by the tag file.</description>
							<location chapter="8" section="5.1" />
							<sub-assertions>
								<assertion required="true" impl-spec="true"
									defined-by="technology" status="active" testable="false">
									<id>JSP:SPEC:232.1.17.1</id>
									<description>All scripting languages, specifiable by the tag
										directive's 'language' attribute, must provide some implicit
										objects that a JSP page author can use in declarations,
										scriptlets, and expressions (see Section JSP.1.3.8 for list of
										available implicit objects)</description>
									<location chapter="1" section="10.1" />
								</assertion>
								<assertion required="true" impl-spec="true"
									defined-by="technology" status="active" testable="false">
									<id>JSP:SPEC:232.1.17.2</id>
									<description>All scripting languages, specifiable by the tag
										directive's 'language' attribute, must expose the Java
										technology object model to the script environment, especially
										implicit variables, JavaBeans components properties, and
										public methods.</description>
									<location chapter="1" section="10.1" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.1.17.3</id>
									<description>It is a fatal translation error for a tag
										directive with a non-"java" language attribute to appear after
										the first scripting has been encountered.</description>
									<location chapter="1" section="10.1" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.1.17.4</id>
									<description>The only required scripting language value for the
										'language' attribute is "java".</description>
									<location chapter="1" section="10.1" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.18</id>
							<description>Multiple 'language' attribute/value (re)definitions
								will result in a translation error if values do not match.</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.19</id>
							<description>The 'import' attribute of the tag directive
								specifies the fully qualified Java programming language type
								name denoting a particular type, or of a package name following
								by the ".*" string, denoting all the public types declared in
								that package, that shall be imorted by the translated JSP page
								implementation and is thus available to the scripting language.</description>
							<location chapter="8" section="5.1" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.1.19.1</id>
									<description>The default import list for a tag is java.lang.*,
										javax.servlet.*, javax.servlet.jsp.*, javax.servlet.http.*</description>
									<location chapter="1" section="10.1" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.20</id>
							<description>The 'pageEncoding' attribute of the tag directive
								specifies the character encoding of the tag. The value is in the
								form of CHARSET which my be the IANA value for a character
								encoding. If no 'pageEncoding' attribute is specified, the
								default of ISO-8859-1 will be used.</description>
							<location chapter="8" section="5.1" />
							<comment>What about Tag files in XML?</comment>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.21</id>
							<description>Multiple 'pageEncoding' attribute/value
								(re)definitions will result in a translation error.</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.22</id>
							<description>The 'pageEncoding' attribute of the tag directive is
								not influenced at all by any global configuration present in the
								web.xml</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.23</id>
							<description>The 'isScriptingEnabled' attribute specified whether
								scripting elements are legal within the tag file.</description>
							<location chapter="8" section="5.1" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.1.23.1</id>
									<description>The 'isScriptingEnabled' attribute of the tag
										directive, if false, disallows the presence of scripting
										elements (scriptlets, expressions, declarations) within a
										given translation unit and will generate a translation error
										if they are present.</description>
									<location chapter="1" section="10.1" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.1.23.2</id>
									<description>The default value for 'isScriptingEnabled' of the
										tag directive, if not specified, is true.</description>
									<location chapter="1" section="10.1" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.1.23.3</id>
									<description>Any value other than 'true' or 'false' provided to
										the 'isScriptinEnabled' attribute will result in a translation
										error.</description>
									<location chapter="8" section="5.1" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.24</id>
							<description>Multiple 'isScriptingEnabled' attribute/value
								(re)definitions will result in a translation error if values do
								not match.</description>
							<location chapter="8" section="5.1" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.25</id>
							<description>The 'isELEnabled' attribute of the tag directive
								specifies whether or not the container should evaluate EL
								expressions.</description>
							<location chapter="8" section="5.1" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.1.25.1</id>
									<description>The 'isELEnabled' attribute of the page directive
										, if false, will result in EL expressions not being evaluated
										by the container.</description>
									<location chapter="1" section="10.1" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.1.25.2</id>
									<description>The default value, if 'isELEnabled' is not
										specified, is true.</description>
									<location chapter="1" section="10.1" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.1.25.3</id>
									<description>Any value other than 'true' or 'false' provided to
										the 'isELEnabled' attribute will result in a translation
										error.</description>
									<location chapter="8" section="5.1" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.1.26</id>
							<description>Multiple 'isELEnabled' attribute/value
								(re)definitions will result in a translation error if values do
								not match.</description>
							<location chapter="8" section="5.1" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:232.2</id>
					<description>The attribute directive of a tag file can be described
						in XML using the jsp:directive.attribute element. The semantics of
						this element are the same as the attribute directive in standard
						syntax.</description>
					<location chapter="8" section="6" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.2.1</id>
							<description>The 'name' attribute specified the unique name of
								the attribute being declared.</description>
							<location chapter="8" section="5.2" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.2.1.1</id>
									<description>A translation error will occur if the 'name'
										attribute is not specified.</description>
									<location chapter="8" section="5.2" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.2.2</id>
							<description>A translation error will occur if mnore than one
								attribute directive appears in the same translation unit with
								the same name.</description>
							<location chapter="8" section="5.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:232.2.3</id>
							<description>The 'required' attribute indicates whether or not
								the attribute must be present.</description>
							<location chapter="8" section="5.2" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.2.3.1</id>
									<description>If 'true' the attribute is requried and a
										translation error will occur if the attribute is not provided.</description>
									<location chapter="8" section="5.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.2.3.2</id>
									<description>If 'false', the attribute need not be present.</description>
									<location chapter="8" section="5.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.2.3.3</id>
									<description>If the 'required' attribute is not specified, the
										value of 'false' will be assumed.</description>
									<location chapter="8" section="5.2" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.2.4</id>
							<description>The 'fragment' attribute specifies whether this
								attribute is a fragment to be evaluated by the tag handler or a
								normal attribute to be evaluated by the container prior to being
								passed to the tag handler.</description>
							<location chapter="8" section="5.2" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.2.4.1</id>
									<description>If 'true', the type of the attribute is fixed to
										javax.servlet.jsp.tagext.JspFragment and a translation error
										will occur if the 'type' attribute is specified.</description>
									<location chapter="8" section="5.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.2.4.2</id>
									<description>If 'true' the 'rtexprvalue' attribute is fixed at
										true.</description>
									<location chapter="8" section="5.2" />
									<sub-assertions>
										<assertion required="true" impl-spec="false"
											defined-by="technology" status="active" testable="true">
											<id>JSP:SPEC:232.2.4.2.1</id>
											<description>A translation error will occur if the 'fragment'
												attribute is 'true' and the 'rtexprvalue' attribute is
												specified.</description>
											<location chapter="8" section="5.2" />
										</assertion>
									</sub-assertions>
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.2.4.3</id>
									<description>If 'false', the container will evaluate the
										attribute before passing it to the tag handler.</description>
									<location chapter="8" section="5.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.2.4.4</id>
									<description>If the 'fragment' attribute is not specified, the
										behavior will be as if it was defined as 'false'</description>
									<location chapter="8" section="5.2" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.2.5</id>
							<description>The 'rtexprevalue' attribute specifies whether this
								attribute accepts dynamic attribute value.</description>
							<location chapter="8" section="5.2" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.2.5.1</id>
									<description>If 'true', the attribute can accept dynamic
										values.</description>
									<location chapter="8" section="5.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.2.5.2</id>
									<description>If 'false', the attribute cannot accept a dynamic
										value. Any attempt to pass a dynamic value when false will
										result in a translation error.</description>
									<location chapter="8" section="5.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.2.5.3</id>
									<description>If 'rtexprvalue' is not specified, the default of
										'false' will be assumed.</description>
									<location chapter="8" section="5.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.2.5.4</id>
									<description>A translation error will occur if any other value
										outside of 'true' or 'false' is provided.</description>
									<location chapter="8" section="5.2" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.2.6</id>
							<description>The 'type' attribute specifies the runtime type of
								the attribute being described.</description>
							<location chapter="8" section="5.2" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.2.6.1</id>
									<description>If the 'type' attribute is not specified, the
										default of java.lang.String will be assumed.</description>
									<location chapter="8" section="5.2" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.2.7</id>
							<description>The 'description' attribute specifies a description
								of the attribute.</description>
							<location chapter="8" section="5.2" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSP:SPEC:232.2.7.1</id>
									<description>If the 'description' attribute is not specified,
										no description will be available.</description>
									<location chapter="8" section="5.2" />
								</assertion>
							</sub-assertions>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:232.3</id>
					<description>The variable directive of a tag file can be described
						in XML using the jsp:directive.variable element. The semantics are
						the same as the variable directive in standard syntax.</description>
					<location chapter="8" section="5.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.3.1</id>
							<description>The 'name-given' attribute specifies the name of the
								scriptin variable to be exposed by the tag.</description>
							<location chapter="8" section="5.3" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.3.1.1</id>
									<description>A translation error will occur if two variable
										directives have the same value for the 'name-given' attribute.</description>
									<location chapter="8" section="5.3" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.3.2</id>
							<description>The 'name-from-attribute' directive specifies the
								name of an attribute whose (translation-time) value will give
								the name of the variable.</description>
							<location chapter="8" section="5.3" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.3.2.1</id>
									<description>A translation error will occur if two variable
										directives have the same value for the 'name-from-attribute'
										attribute.</description>
									<location chapter="8" section="5.3" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.3.3</id>
							<description>A translation error will occur if both the
								'name-given' and the 'name-from-attribute' attributes are
								specified within the same directive.</description>
							<location chapter="8" section="5.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.3.4</id>
							<description>A translation error will occur if neither the
								'name-given' or the 'name-from-attribute' attributes are not
								specified wihin a variable directive.</description>
							<location chapter="8" section="5.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.3.5</id>
							<description>The 'variable-class' attribute specifies the class
								of the variable.</description>
							<location chapter="8" section="5.3" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.3.5.1</id>
									<description>If the 'variable-class' attribute is not
										specified, the default class of java.lang.String will be
										assumed.</description>
									<location chapter="8" section="5.3" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.3.6</id>
							<description>The 'scope' attribute specifies the scope of the
								variable being declared.</description>
							<location chapter="8" section="5.3" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.3.6.1</id>
									<description>Valid values are AT_BEGIN, AT_END, or NESTED.</description>
									<location chapter="8" section="5.3" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.3.6.2</id>
									<description>If the 'scope' attribute is not specified, the
										default scope of NESTED will be used.</description>
									<location chapter="8" section="5.3" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.3.6.3</id>
									<description>If any other value is provided outside of
										AT_BEGIN, NESTED, or AT_END, a translation error will occur.</description>
									<location chapter="8" section="5.3" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.3.6.4</id>
									<description>A translation error must occur if both 'scope' and
										'fragment' are specified.</description>
									<location chapter="8" section="5.3" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.3.7</id>
							<description>The 'declare' attribute specifies whether the
								variable is declared or not.</description>
							<location chapter="8" section="5.3" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.3.7.1</id>
									<description>If 'true', the variable will be declared and
										available based on the specified scope.</description>
									<location chapter="8" section="5.3" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.3.7.2</id>
									<description>If 'false', the variable will not be declared.</description>
									<location chapter="8" section="5.3" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.3.7.3</id>
									<description>A translation error must occur if both 'declare'
										and 'fragment' are specified.</description>
									<location chapter="8" section="5.3" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.3.8</id>
							<description>The 'fragment' attribute specifies that the value of
								this variable is scoped to the specified fragment and does not
								appear in the boyd of the tag.</description>
							<location chapter="8" section="5.3" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.3.8.1</id>
									<description>A translation error will occur if the value of
										'fragment' does not match the name of an attribute declared
										earier in this page with 'fragment=true'.</description>
									<location chapter="8" section="5.3" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSP:SPEC:232.3.8.2</id>
									<description>A translation error will occur if 'fragment' is
										specified and either 'scope' or 'declare' is specified.</description>
									<location chapter="8" section="5.3" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:232.3.9</id>
							<description>The 'description' attribute provides an optional
								description for the variable being declared.</description>
							<location chapter="8" section="5.3" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSP:SPEC:232.3.9.1</id>
									<description>If the 'description' attribute is not specified,
										no description will be available.</description>
									<location chapter="8" section="5.3" />
								</assertion>
							</sub-assertions>
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:233</id>
			<description>A JSP page is valid for a Java Platform if and only if
				the JSP page implementation class, together with any other classes
				defined by the JSP container, is a valid program for the given Java
				Platform, and if it passes the validation methods for all the tag
				libraries associated with the JSP page.</description>
			<location chapter="9" section="1.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:234</id>
			<description>In JSP 2.0 only 'init' and 'destroy' events are allowed
				events.</description>
			<location chapter="10" section="1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:235</id>
			<description>A JSP page author may provide a jspInit() method, which
				if present, must be called by the container to prepare the page
				before the first request is delivered.</description>
			<location chapter="10" section="1" />
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:236</id>
			<description>A JSP page author may provide a jspDestroy() method that
				can be called by a Container, when a request is not being serviced
				by the JSP page, to reclaim resources.</description>
			<location chapter="10" section="1.1.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:237</id>
			<description>A translation error will occur if a JSP page author
				attempts to override any Servlet methods through a declaration
				scripting element.</description>
			<location chapter="10" section="1.1.1" />
			<comment>Reference 10.2.4 -- All methods in defined by the
				javax.servlet.Servlet interface are declared final.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:238</id>
			<description>The enforcement of the contract between the JSP
				container and the JSP page author is aided by the requirement that
				the Servlet class corresponding to the JSP page must implement the
				HttpJspPage interface if the protocol is HTTP.</description>
			<location chapter="10" section="1.1.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:239</id>
			<description>The enforcement of the contract between the JSP
				container and the JSP page author is aided by the requirement that
				the Servlet class corresponding to the JSP page must implement the
				JspPage interface of the protocol is not HTTP.</description>
			<location chapter="10" section="1.1.2" />
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:240</id>
			<description>The name of the JSP implementation class is
				implementation dependent.</description>
			<location chapter="10" section="2" />
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:241</id>
			<description>The package that the JSP implementation class belongs to
				is implementation dependent.</description>
			<location chapter="10" section="2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:242</id>
			<description>All JSP implementation classes must implement the
				following methods</description>
			<location chapter="10" section="2.1" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:242.1</id>
					<description>Method with signature: public void jspInit()</description>
					<location chapter="10" section="2.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:242.2</id>
					<description>Method with signature: public void jspDestroy()</description>
					<location chapter="10" section="2.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:242.3</id>
					<description>Method with signature: public void
						_jspService(&lt;ServletRequestSubType>,
						&lt;ServletResponseSubType>) throws IOException, ServletException
						-- NOTE: The request/response subtype indicates that the request
						and response object provided must implement the
						javax.servlet.ServletRequest and javax.servlet.ServletResponse
						interfaces respectively.</description>
					<location chapter="10" section="2.1" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSP:SPEC:242.3.1</id>
							<description>The _jspService(ServletRequest, ServletResponse)
								method may not be declared in a JSP page via the JSP declaration
								mechanism.</description>
							<location chapter="10" section="2,1" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:243</id>
			<description>JSP containers that conform to this specification (in
				both JSP page implementation classes, and JSP container runtime)
				must implement the javax.servlet.ServletRequest and
				javax.servlet.ServletResponse interfaces.</description>
			<location chapter="10" section="2.1" />
			<comment>XXX Sent request for clarification on this one</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:244</id>
			<description>All JSP 2.0 compliant containers must support a simple
				precompilation protocol, as well as some basic reserved parameter
				names.</description>
			<location chapter="10" section="4" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSP:SPEC:244.1</id>
					<description>A request to a page with the request parameter
						'jsp_precompile" is a precompilation request.</description>
					<location chapter="10" section="4" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:244.1.1</id>
							<description>If the value of the request parameter
								'jsp_precompile' is 'true' the request will not be delivered to
								the target page.</description>
							<location chapter="10" section="4.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:244.1.2</id>
							<description>If the value of the request parameter
								'jsp_precompile' is 'false', the request will not be delivered
								to the target page.</description>
							<location chapter="10" section="4.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:244.1.3</id>
							<description>If the value of the request parameter
								'jsp_precompile' is 'debug', the request will not be delivered
								to the target page.</description>
							<location chapter="10" section="4.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:244.1.4</id>
							<description>If the value of the request parameter
								'jsp_precompile' is empty (i.e. ""), the request will not be
								delivered to the target page.</description>
							<location chapter="10" section="4.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSP:SPEC:244.1.5</id>
							<description>If the value of the request parameter
								'jsp_precompile' is any other value aside from 'true', 'false',
								'debug', or an empty parameter, a translation error will occur.</description>
							<location chapter="10" section="4.2" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:245</id>
			<description>All JSP 2.0 containers must implement JSR-045 by
				generating source map debugging information for JSP pages written in
				either standard or XML syntax.</description>
			<location chapter="10" section="5" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:246</id>
			<description>The JSP compiler, when producing a class with JSP-045
				debug extensions must produce a .class file with a
				SourceDebugExtension attribute, mapping each line or lines of JSP
				code to the corresponding generated line or lines of Java code.</description>
			<location chapter="10" section="5" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSP:SPEC:247</id>
			<description>The strata, as defined by JSP-045, that maps to the
				original JSP source must be named JSP in the Source Debug Extension.</description>
			<location chapter="10" section="5" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:315</id>
			<description>The XML view of an escaped EL expression using the
				#{expr} syntax follows the same rules as the ${expr} syntax, where
				${ is simply substituted with #{.[#{expr}SameAs${expr}]</description>
			<location chapter="10" section="1.11" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:316</id>
			<description>The same rules for deriving the XML view of escaped
				expressions for the ${expr} syntax apply for the #{expr} syntax,
				where ${ is simply substituted with #{[TemplateTextPoundSign]</description>
			<location chapter="10" section="1.12" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:317</id>
			<description>JSP 2.1 containers are required to provide support for
				JSR-45 for JSP pages and tag files written in either standard or XML
				syntax. [JSR45DebuggingSupport]</description>
			<location chapter="11" section="5" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSP:SPEC:318</id>
			<description>In determining the page encoding of a JSP file where the
				file is preceded by a BOM:
				Read the file using the encoding indicated
				by the BOM, and search for a
				pageEncoding attribute in a page
				declaration.
				Report an error if any of the following conditions are
				met:
				There is a &lt;page-encoding> configuration element whose URL
				pattern
				matches this page and whose encoding does not match the
				encoding
				indicated by the BOM.
				There is a pageEncoding page directive
				attribute whose encoding does not
				match the encoding indicated by the
				BOM.
				[BOMErrorReporting]
			</description>
			<location chapter="D" section="1" />
		</assertion>
	</assertions>
</spec>


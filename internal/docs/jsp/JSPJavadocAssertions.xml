<?xml version = "1.0" encoding = "US-ASCII"?>
<!DOCTYPE spec SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/javadoc_assertions.dtd">
<!--
  Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

  This program and the accompanying materials are made available under the
  terms of the Eclipse Public License v. 2.0, which is available at
  http://www.eclipse.org/legal/epl-2.0.

  This Source Code may also be made available under the following Secondary
  Licenses when the conditions for such availability set forth in the
  Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
  version 2 with the GNU Classpath Exception, which is available at
  https://www.gnu.org/software/classpath/license.html.

  SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->
<javadoc>
	<next-available-id>405</next-available-id>
	<previous-id>1</previous-id>
	<technology>JSP</technology>
	<id>JSP</id>
	<name>JavaServer Pages(TM)</name>
	<version>2.2</version>
	<assertions>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>1</id>
			<description>                            Creates a new ErrorData object
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>ErrorData</class-interface>
			<method name = "ErrorData" return-type = "ErrorData">
				<parameters>
					<parameter>java.lang.Throwable</parameter>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>2</id>
			<description>                            Returns the Throwable that caused the error
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>ErrorData</class-interface>
			<method name = "getThrowable" return-type = "java.lang.Throwable"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>3</id>
			<description>                            Returns the status code of the error
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>ErrorData</class-interface>
			<method name = "getStatusCode" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>4</id>
			<description>                            Returns the request URI
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>ErrorData</class-interface>
			<method name = "getRequestURI" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>5</id>
			<description>                            Returns the name of the servlet invoked
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>ErrorData</class-interface>
			<method name = "getServletName" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>6</id>
			<description>                            Creates a SkipPageException with no message.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>SkipPageException</class-interface>
			<method name = "SkipPageException" return-type = "SkipPageException"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>7</id>
			<description>                            Creates a SkipPageException with the provided message.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>SkipPageException</class-interface>
			<method name = "SkipPageException" return-type = "SkipPageException">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>8</id>
			<description>                            Creates a SkipPageException with the provided message and root cause.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>SkipPageException</class-interface>
			<method name = "SkipPageException" return-type = "SkipPageException">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>9</id>
			<description>                            Creates a SkipPageException with the provided root cause.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>SkipPageException</class-interface>
			<method name = "SkipPageException" return-type = "SkipPageException">
				<parameters>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>10</id>
			<description/>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "PageContext" return-type = "PageContext"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>11</id>
			<description>                              The initialize method is called to initialize an uninitialized PageContext  so that it may be used by a JSP Implementation class to service an  incoming request and response within it's _jspService() method.
                                 This method is typically called from JspFactory.getPageContext() in  order to initialize state.     This method is required to create an initial JspWriter, and associate  the "out" name in page scope with this newly created object.     This method should not be used by page  or tag library authors.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "initialize" return-type = "void">
				<parameters>
					<parameter>Servlet</parameter>
					<parameter>ServletRequest</parameter>
					<parameter>ServletResponse</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>12</id>
			<description>during creation of JspWriter</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "initialize" return-type = "void">
				<parameters>
					<parameter>Servlet</parameter>
					<parameter>ServletRequest</parameter>
					<parameter>ServletResponse</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>13</id>
			<description>if out not correctly initialized</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "initialize" return-type = "void">
				<parameters>
					<parameter>Servlet</parameter>
					<parameter>ServletRequest</parameter>
					<parameter>ServletResponse</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>14</id>
			<description>If one of the given parameters      is invalid</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "initialize" return-type = "void">
				<parameters>
					<parameter>Servlet</parameter>
					<parameter>ServletRequest</parameter>
					<parameter>ServletResponse</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.lang.IllegalArgumentException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>15</id>
			<description>                              This method shall "reset" the internal state of a PageContext, releasing  all internal references, and preparing the PageContext for potential  reuse by a later invocation of initialize().
                             This method is typically  called from JspFactory.releasePageContext().     Subclasses shall envelope this method.     This method should not be used by page  or tag library authors.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "release" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>16</id>
			<description>                            The current value of the session object (an HttpSession).
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "getSession" return-type = "HttpSession"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>17</id>
			<description>                            The current value of the page object (In a Servlet environment this is an isntance of javax.servlet.Servlet).
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "getPage" return-type = "java.lang.Object"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>18</id>
			<description>                            The current value of the request object (a ServletRequest).
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "getRequest" return-type = "ServletRequest"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>19</id>
			<description>                            The current value of the response object (a ServletResponse).
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "getResponse" return-type = "ServletResponse"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>20</id>
			<description>                            The current value of the exception object (an Exception).
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "getException" return-type = "java.lang.Exception"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>21</id>
			<description>                            The ServletConfig instance.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "getServletConfig" return-type = "ServletConfig"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>22</id>
			<description>                            The ServletContext instance.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "getServletContext" return-type = "ServletContext"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>23</id>
			<description>This method is used to re-direct, or "forward" the current   ServletRequest and ServletResponse to another active component in   the application.                                   If the  relativeUrlPath  begins with a "/" then the URL specified  is calculated relative to the DOCROOT of the  ServletContext   for this JSP.  </description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "forward" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>24</id>
			<description>This method is used to re-direct, or "forward" the current   ServletRequest and ServletResponse to another active component in   the application.                                   If the path does not begin with a "/" then the URL   specified is calculated relative to the URL of the request that was  mapped to the calling JSP.      </description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "forward" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>25</id>
			<description>It is only valid to call this method from a  Thread   executing within a  _jspService(...)  method of a JSP.      Once this method has been called successfully, it is illegal for the  calling  Thread  to attempt to modify the   ServletResponse  object.  Any such attempt to do so, shall result  in undefined behavior. Typically, callers immediately return from    _jspService(...)  after calling this method.</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "forward" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>26</id>
			<description>if the page that was forwarded to throws      a ServletException</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "forward" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>ServletException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>27</id>
			<description>if an I/O error occurred while forwarding</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "forward" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>28</id>
			<description>if target resource URL is unresolvable</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "forward" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.lang.IllegalArgumentException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>29</id>
			<description>if ServletResponse is not in a state where a forward can be performed</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "forward" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>30</id>
			<description>if target resource cannot be accessed by caller</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "forward" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.lang.SecurityException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>31</id>
			<description>Causes the resource specified to be processed as part of the current  ServletRequest and ServletResponse being processed by the calling Thread.                               The output of the target resources processing of the request is written  directly to the ServletResponse output stream.      The current JspWriter "out" for this JSP is flushed as a side-effect  of this call, prior to processing the include.      If the  relativeUrlPath  begins with a "/" then the URL specified  is calculated relative to the DOCROOT of the ServletContext  for this JSP. </description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "include" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>32</id>
			<description>Causes the resource specified to be processed as part of the current  ServletRequest and ServletResponse being processed by the calling Thread.                               The output of the target resources processing of the request is written  directly to the ServletResponse output stream.      The current JspWriter "out" for this JSP is flushed as a side-effect  of this call, prior to processing the include.      If the path does not begin with a "/" then the URL   specified is calculated relative to the URL of the request that was  mapped to the calling JSP.     </description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "include" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>33</id>
			<description> It is only valid to call this method from a  Thread   executing within a  _jspService(...)  method of a JSP.</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "include" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>34</id>
			<description>if the inclusion throws a ServletException ??????</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "include" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>ServletException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>35</id>
			<description>if an I/O error occurred while including</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "include" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>36</id>
			<description>if the target resource URL is       unresolvable</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "include" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.lang.IllegalArgumentException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>37</id>
			<description>if target resource cannot be accessed by caller</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "include" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.lang.SecurityException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>38</id>
			<description>                              Causes the resource specified to be processed as part of the current  ServletRequest and ServletResponse being processed by the calling Thread.  If the relativeUrlPath begins with a "/" then the URL specified  is calculated relative to the DOCROOT of the ServletContext  for this JSP. </description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "include" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>39</id>
			<description>                              Causes the resource specified to be processed as part of the current  ServletRequest and ServletResponse being processed by the calling Thread.  If the path does not begin with a "/" then the URL   specified is calculated relative to the URL of the request that was  mapped to the calling JSP. </description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "include" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>40</id>
			<description>                              Causes the resource specified to be processed as part of the current  ServletRequest and ServletResponse being processed by the calling Thread.
                              The output of the target resources processing of the request is written  directly to the current JspWriter returned by a call to getOut().      If flush is true, The current JspWriter "out" for this JSP   is flushed as a side-effect of this call, prior to processing   the include.    
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "include" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>385</id>
			<description>                              Causes the resource specified to be processed as part of the current  ServletRequest and ServletResponse being processed by the calling Thread.
                              The output of the target resources processing of the request is written  directly to the current JspWriter returned by a call to getOut().      If flush is false, "out" is not flushed.   
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "include" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>41</id>
			<description>It is only valid to call this method from a  Thread   executing within a  _jspService(...)  method of a JSP.</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "include" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>42</id>
			<description>if the page that was forwarded to throws      a ServletException ???>???</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "include" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>ServletException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>43</id>
			<description>if an I/O error occurred while including</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "include" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>44</id>
			<description>if the target resource URL is       unresolvable</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "include" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.lang.IllegalArgumentException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>45</id>
			<description>if target resource cannot be accessed by caller</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "include" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.lang.SecurityException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>46</id>
			<description>This method is intended to process an unhandled "page" level exception  by forwarding the exception to the specified error page for this  JSP.</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "handlePageException" return-type = "void">
				<parameters>
					<parameter>java.lang.Exception</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "true" status = "active" testable = "false">
			<id>47</id>
			<description>If forwarding is not possible (for example because the response has already been committed) an implementation dependent mechanism should be used to invoke the error page (e.g. 'including' the error page instead).</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "handlePageException" return-type = "void">
				<parameters>
					<parameter>java.lang.Exception</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>48</id>            
			<description>A JSP implementation class shall typically clean up any local state  prior to invoking this and will return immediately thereafter. It is  illegal to generate any output to the client, or to modify any   ServletResponse state after invoking this call.     This method is kept for backwards compatiblity reasons.  Newly  generated code should use PageContext.handlePageException(Throwable).</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "handlePageException" return-type = "void">
				<parameters>
					<parameter>java.lang.Exception</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>49</id>
			<description>if an error occurs while invoking the error page</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "handlePageException" return-type = "void">
				<parameters>
					<parameter>java.lang.Exception</parameter>
				</parameters>
				<throw>ServletException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>50</id>
			<description>if an I/O error occurred while invoking the error      page</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "handlePageException" return-type = "void">
				<parameters>
					<parameter>java.lang.Exception</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>51</id>
			<description>if the exception is null</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "handlePageException" return-type = "void">
				<parameters>
					<parameter>java.lang.Exception</parameter>
				</parameters>
				<throw>java.lang.NullPointerException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>52</id>
			<description>if target resource cannot be accessed by caller</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "handlePageException" return-type = "void">
				<parameters>
					<parameter>java.lang.Exception</parameter>
				</parameters>
				<throw>java.lang.SecurityException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>53</id>
			<description>                              This method is identical to the handlePageException(Exception),  except that it accepts a Throwable.
                              This is the preferred method  to use as it allows proper implementation of the errorpage  semantics.     This method is intended to process an unhandled "page" level exception  by redirecting the exception to either the specified error page for this  JSP.  
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "handlePageException" return-type = "void">
				<parameters>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "true" status = "active" testable = "false">
			<id>54</id>
			<description>                              This method is identical to the handlePageException(Exception),  except that it accepts a Throwable.
                              This is the preferred method  to use as it allows proper implementation of the errorpage  semantics. If no error page was specified, the result is implementation specific.
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "handlePageException" return-type = "void">
				<parameters>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>55</id>
			<description>A JSP implementation class shall typically clean up any local state  prior to invoking this and will return immediately thereafter. It is  illegal to generate any output to the client, or to modify any   ServletResponse state after invoking this call.</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "handlePageException" return-type = "void">
				<parameters>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>56</id>
			<description>if an error occurs while invoking the error page</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "handlePageException" return-type = "void">
				<parameters>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
				<throw>ServletException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>57</id>
			<description>if an I/O error occurred while invoking the error      page</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "handlePageException" return-type = "void">
				<parameters>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>58</id>
			<description>if the exception is null</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "handlePageException" return-type = "void">
				<parameters>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
				<throw>java.lang.NullPointerException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>59</id>
			<description>if target resource cannot be accessed by caller</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "handlePageException" return-type = "void">
				<parameters>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
				<throw>java.lang.SecurityException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>60</id>
			<description>                            Return a new BodyContent object, save the current "out" JspWriter,  and update the value of the "out" attribute in the page scope  attribute namespace of the PageContext
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "pushBody" return-type = "javax.servlet.jsp.tagext.BodyContent"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>61</id>
			<description>                            Return the previous JspWriter "out" saved by the matching  pushBody(), and update the value of the "out" attribute in  the page scope attribute namespace of the JspConxtext
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "popBody" return-type = "javax.servlet.jsp.JspWriter"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>62</id>
			<description>                            Provides convenient access to error information.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>PageContext</class-interface>
			<method name = "getErrorData" return-type = "javax.servlet.jsp.ErrorData"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>63</id>
			<description>                            Write a line separator.
                              The line separator string is defined by the  system property line.separator, and is not necessarily a single  newline ('\n') character.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "newLine" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>64</id>
			<description>If an I/O error occurs</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "newLine" return-type = "void">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>65</id>
			<description>                            Print a boolean value.
                            
                            
                              The string produced by  is translated into bytes  according to the platform's default character encoding, and these bytes  are written in exactly the manner of the  method.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>66</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>67</id>
			<description>                            Print a character.
                            
                              The character is translated into one or more bytes  according to the platform's default character encoding, and these bytes  are written in exactly the manner of the  method.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>char</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>68</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>char</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>69</id>
			<description>                            Print an integer.
                            
                            
                              The string produced by  is translated into bytes according  to the platform's default character encoding, and these bytes are  written in exactly the manner of the   method.
                            
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>70</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>71</id>
			<description>                            Print a long integer.
                            
                            
                              The string produced by  is translated into bytes  according to the platform's default character encoding, and these bytes  are written in exactly the manner of the   method.
                            
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>72</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>long</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>73</id>
			<description>                            Print a floating-point number.
                            
                            
                              The string produced by  is translated into bytes  according to the platform's default character encoding, and these bytes  are written in exactly the manner of the   method.
                            
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>float</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>74</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>float</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>75</id>
			<description>                            Print a double-precision floating-point number.
                            
                            
                              The string produced by   is translated into  bytes according to the platform's default character encoding, and these  bytes are written in exactly the manner of the  method.
                            
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>double</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>76</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>double</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>77</id>
			<description>                            Print an array of characters.
                            
                              The characters are converted into bytes  according to the platform's default character encoding, and these bytes  are written in exactly the manner of the   method.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>char[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>78</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>char[]</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>79</id>
			<description>If &lt;code>s&lt;/code> is &lt;code>null&lt;/code></description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>char[]</parameter>
				</parameters>
				<throw>java.lang.NullPointerException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>80</id>
			<description>                            Print a string.
                            
                              If the argument is null then the string  "null" is printed.  Otherwise, the string's characters are  converted into bytes according to the platform's default character  encoding, and these bytes are written in exactly the manner of the   method.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>81</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>82</id>
			<description>                            Print an object.
                            
                            
                              The string produced by the  method is translated into bytes  according to the platform's default character encoding, and these bytes  are written in exactly the manner of the   method.
                            
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>83</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "print" return-type = "void">
				<parameters>
					<parameter>java.lang.Object</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>84</id>
			<description>                            Terminate the current line by writing the line separator string.
                              The  line separator string is defined by the system property  line.separator, and is not necessarily a single newline  character ('\n').
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>85</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>86</id>
			<description>                            Print a boolean value and then terminate the line.
                            
                            
                              This method behaves  as though it invokes  and then  .
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>87</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>88</id>
			<description>                            Print a character and then terminate the line.
                            
                            
                              This method behaves as  though it invokes  and then .
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<parameters>
					<parameter>char</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>89</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<parameters>
					<parameter>char</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>90</id>
			<description>                            Print an integer and then terminate the line.
                            
                            
                              This method behaves as  though it invokes  and then .
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>91</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>92</id>
			<description>                            Print a long integer and then terminate the line.
                            
                            
                              This method behaves  as though it invokes  and then  .
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<parameters>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>93</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<parameters>
					<parameter>long</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>94</id>
			<description>                            Print a floating-point number and then terminate the line.
                            
                            
                              This method  behaves as though it invokes  and then  .
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<parameters>
					<parameter>float</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>95</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<parameters>
					<parameter>float</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>96</id>
			<description>                            Print a double-precision floating-point number and then terminate the  line.
                            
                            
                              This method behaves as though it invokes  and then .
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<parameters>
					<parameter>double</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>97</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<parameters>
					<parameter>double</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>98</id>
			<description>                            Print an array of characters and then terminate the line.
                              This method  behaves as though it invokes print(char[]) and then  println().
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<parameters>
					<parameter>char[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>99</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<parameters>
					<parameter>char[]</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>100</id>
			<description>                            Print a String and then terminate the line.
                            
                            
                              This method behaves as  though it invokes  and then  .
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>101</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>102</id>
			<description>                            Print an Object and then terminate the line.
                            
                            
                              This method behaves as  though it invokes  and then  .
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<parameters>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>103</id>
			<description>If an error occured while writing</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "println" return-type = "void">
				<parameters>
					<parameter>java.lang.Object</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>104</id>
			<description>                            Clear the contents of the buffer.
                             If the buffer has been already  been flushed then the clear operation shall throw an IOException  to signal the fact that some data has already been irrevocably   written to the client response stream.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "clear" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>105</id>
			<description>If an I/O error occurs</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "clear" return-type = "void">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>106</id>
			<description>                            Clears the current contents of the buffer.
                             Unlike clear(), this  method will not throw an IOException if the buffer has already been  flushed. It merely clears the current content of the buffer and  returns.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "clearBuffer" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>107</id>
			<description>If an I/O error occurs</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "clearBuffer" return-type = "void">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>108</id>
			<description>                            Flush the stream.
                              If the stream has saved any characters from the  various write() methods in a buffer, write them immediately to their  intended destination.  Then, if that destination is another character or  byte stream, flush it.  Thus one flush() invocation will flush all the  buffers in a chain of Writers and OutputStreams.    The method may be invoked indirectly if the buffer size is exceeded.    Once a stream has been closed,  further write() or flush() invocations will cause an IOException to be  thrown.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "flush" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>109</id>
			<description>If an I/O error occurs</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "flush" return-type = "void">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>110</id>
			<description>                            Close the stream, flushing it first.
                                This method needs not be invoked explicitly for the initial JspWriter  as the code generated by the JSP container will automatically  include a call to close().    Closing a previously-closed stream, unlike flush(), has no effect.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "close" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>111</id>
			<description>If an I/O error occurs</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "close" return-type = "void">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>112</id>
			<description>                            This method returns the size of the buffer used by the JspWriter.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "getBufferSize" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>113</id>
			<description>                            This method returns the number of unused bytes in the buffer.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "getRemaining" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>114</id>
			<description>                            This method indicates whether the JspWriter is autoFlushing.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspWriter</class-interface>
			<method name = "isAutoFlush" return-type = "boolean"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>115</id>
			<description>                            Constructs a new JspTagException with the specified message.
                              The message can be written to the server log and/or displayed  for the user.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspTagException</class-interface>
			<method name = "JspTagException" return-type = "JspTagException">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>116</id>
			<description>                            Constructs a new JspTagException with no message.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspTagException</class-interface>
			<method name = "JspTagException" return-type = "JspTagException"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>117</id>
			<description>                            Constructs a new JspTagException when the JSP Tag  needs to throw an exception and include a message   about the "root cause" exception that interfered with its   normal operation, including a description message.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspTagException</class-interface>
			<method name = "JspTagException" return-type = "JspTagException">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>118</id>
			<description>                            Constructs a new JSP Tag exception when the JSP Tag  needs to throw an exception and include a message  about the "root cause" exception that interfered with its  normal operation.
                              The exception's message is based on the localized  message of the underlying exception.   This method calls the getLocalizedMessage method  on the Throwable exception to get a localized exception  message. When subclassing JspTagException,   this method can be overridden to create an exception message   designed for a specific locale.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspTagException</class-interface>
			<method name = "JspTagException" return-type = "JspTagException">
				<parameters>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>119</id>
			<description/>
			<package>javax.servlet.jsp</package>
			<class-interface>JspFactory</class-interface>
			<method name = "JspFactory" return-type = "JspFactory"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>120</id>
			<description>                              set the default factory for this implementation.
                             It is illegal for  any principal other than the JSP Engine runtime to call this method.  
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspFactory</class-interface>
			<method name = "setDefaultFactory" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.JspFactory</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>121</id>
			<description>                            Returns the default factory for this implementation.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspFactory</class-interface>
			<method name = "getDefaultFactory" return-type = "javax.servlet.jsp.JspFactory"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>122</id>
			<description>                              obtains an instance of an implementation dependent   javax.servlet.jsp.PageContext abstract class for the calling Servlet  and currently pending request and response.
                                   This method is typically called early in the processing of the   _jspService() method of a JSP implementation class in order to   obtain a PageContext object for the request being processed.      Invoking this method shall result in the PageContext.initialize()  method being invoked. The PageContext returned is properly initialized.      All PageContext objects obtained via this method shall be released  by invoking releasePageContext().  
                            
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspFactory</class-interface>
			<method name = "getPageContext" return-type = "javax.servlet.jsp.PageContext">
				<parameters>
					<parameter>Servlet</parameter>
					<parameter>ServletRequest</parameter>
					<parameter>ServletResponse</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>123</id>
			<description>                              called to release a previously allocated PageContext object.
                              Results in PageContext.release() being invoked.  This method should be invoked prior to returning from the _jspService() method of a JSP implementation  class.  
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspFactory</class-interface>
			<method name = "releasePageContext" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.PageContext</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>124</id>
			<description>                              called to get implementation-specific information on the current JSP engine.
                            
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspFactory</class-interface>
			<method name = "getEngineInfo" return-type = "javax.servlet.jsp.JspEngineInfo"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>125</id>
			<description>                            Construct a JspException
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspException</class-interface>
			<method name = "JspException" return-type = "JspException"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>126</id>
			<description>                            Constructs a new JSP exception with the  specified message.
                             The message can be written   to the server log and/or displayed for the user.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspException</class-interface>
			<method name = "JspException" return-type = "JspException">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>127</id>
			<description>                            Constructs a new JSP exception when the JSP   needs to throw an exception and include a message   about the "root cause" exception that interfered with its   normal operation, including a description message.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspException</class-interface>
			<method name = "JspException" return-type = "JspException">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>128</id>
			<description>                            Constructs a new JSP exception when the JSP   needs to throw an exception and include a message  about the "root cause" exception that interfered with its  normal operation.
                              The exception's message is based on the localized  message of the underlying exception.   This method calls the getLocalizedMessage method  on the Throwable exception to get a localized exception  message. When subclassing JspException,   this method can be overridden to create an exception message   designed for a specific locale.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspException</class-interface>
			<method name = "JspException" return-type = "JspException">
				<parameters>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>129</id>
			<description>                            Returns the exception that caused this JSP exception.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspException</class-interface>
			<method name = "getRootCause" return-type = "java.lang.Throwable"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>130</id>
			<description/>
			<package>javax.servlet.jsp</package>
			<class-interface>JspEngineInfo</class-interface>
			<method name = "JspEngineInfo" return-type = "JspEngineInfo"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>131</id>
			<description>                            Return the version number of the JSP specification that is supported by  this JSP engine.
                                Specification version numbers that consists of positive decimal integers  separated by periods ".", for example, "2.0" or "1.2.3.4.5.6.7".  This allows an extensible number to be used to  represent major, minor, micro, etc versions.  The version number must begin with a number.  
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspEngineInfo</class-interface>
			<method name = "getSpecificationVersion" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>132</id>
			<description/>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "JspContext" return-type = "JspContext"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>380</id>
			<description>Return the previous JspWriter 'out' saved by the matching pushBody() and update the value of the 'out' attribute in the page scope attribute namespace of the JspContext.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "popBody" return-type = "JspWriter"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>381</id>
			<description>Return a new JspWriter object that sends output to the provided writer.</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "pushBody" return-type = "JspWriter">
				<parameters>
					<parameter>java.io.Writer</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>133</id>
			<description>                            Register the name and value specified with page scope semantics.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "setAttribute" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>396</id>
			<description>If the value passed is null, this has the same effect as calling removeAttribute(name, PageContext.PAGE_SCOPE).
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "setAttribute" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>134</id>
			<description>if the name is null</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "setAttribute" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
				<throw>java.lang.NullPointerException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>135</id>
			<description>                            register the name and value specified with appropriate scope semantics.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "setAttribute" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>397</id>
			<description>If the value passed in is null this has the same effect as calling removeAttribute(name, scope).
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "setAttribute" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>136</id>
			<description>if the name is null</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "setAttribute" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.lang.NullPointerException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>398</id>
			<description>if the scope is invalid</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "setAttribute" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.lang.IllegalArgumentException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>399</id>
			<description>If the scope is PageContext.SESSION_SCOPE but the page that was requested does not participate in a session or the session has been invalidated.</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "setAttribute" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>137</id>
			<description>if the scope is invalid</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "setAttribute" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.lang.IllegalArgumentException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>138</id>
			<description>                            Returns the object associated with the name in the page scope or null  if not found.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "getAttribute" return-type = "java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>139</id>
			<description>if the name is null</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "getAttribute" return-type = "java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.lang.NullPointerException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>140</id>
			<description>if the scope is invalid</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "getAttribute" return-type = "java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.lang.IllegalArgumentException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>141</id>
			<description>                            Return the object associated with the name in the specified  scope or null if not found.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "getAttribute" return-type = "java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>142</id>
			<description>if the name is null</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "getAttribute" return-type = "java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.lang.NullPointerException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>143</id>
			<description>if the scope is invalid</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "getAttribute" return-type = "java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.lang.IllegalArgumentException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>390</id>
			<description>if the scope is PageContext.SESSION_SCOPE but the page that was requested does not participate in a session or the session has been invalidated</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "getAttribute" return-type = "java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>144</id>
			<description>                            Searches for the named attribute in page, request, session (if valid),  and application scope(s) in order and returns the value associated or  null.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "findAttribute" return-type = "java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>387</id>
			<description>If the name is null
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "findAttribute" return-type = "java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>                                
				<throw>java.lang.NullPointerException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>145</id>
			<description>                            Remove the object reference associated with the given name from all scopes.  Does nothing if there is no such object.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "removeAttribute" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>391</id>
			<description> if the name is null
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "removeAttribute" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>                                
				<throw>java.lang.NullPointerException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>146</id>
			<description>                            Remove the object reference associated with the specified name  in the given scope.  Does nothing if there is no such object.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "removeAttribute" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>392</id>
			<description>If the scope is invalid
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "removeAttribute" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>                                
				<throw>java.lang.IllegalArgumentException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>393</id>
			<description>If the name is null
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "removeAttribute" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>                                
				<throw>java.lang.NullPointerException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>394</id>
			<description>If the scope is PageContext.SESSION_SCOPE but the page that was requested does not particpate in a session or the session has been invalidated.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "removeAttribute" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>                                
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>147</id>
			<description>                            Get the scope where a given attribute is defined.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "getAttributesScope" return-type = "int">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>389</id>
			<description>if the name is null
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "getAttributesScope" return-type = "int">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>                                
				<throw>java.lang.NullPointerException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>148</id>
			<description>                            Enumerate all the attributes in a given scope
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "getAttributeNamesInScope" return-type = "java.util.Enumeration">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>387</id>
			<description>if the scope is invalid
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "getAttributeNamesInScope" return-type = "java.util.Enumeration">
				<parameters>
					<parameter>int</parameter>
				</parameters>                                
				<throw>java.lang.IllegalArgumentException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>388</id>
			<description>If the scope is PageContext.SESSION_SCOPE but the page that was requested does not participate in a session or the session has been invalidated.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "getAttributeNamesInScope" return-type = "java.util.Enumeration">
				<parameters>
					<parameter>int</parameter>
				</parameters>                                
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>149</id>
			<description>                            The current value of the out object (a JspWriter).
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "getOut" return-type = "javax.servlet.jsp.JspWriter"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>150</id>
			<description>                            Provides programmatic access to the ExpressionEvaluator.
                              The JSP Container must return a valid instance of an   ExpressionEvaluator that can parse EL expressions.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "getExpressionEvaluator" return-type = "javax.servlet.jsp.el.ExpressionEvaluator"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>151</id>
			<description>                            Returns an instance of a VariableResolver that provides access to the  implicit objects specified in the JSP specification using this JspContext  as the context object
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "getVariableResolver" return-type = "javax.servlet.jsp.el.VariableResolver"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>152</id>
			<description>                            The jspInit() method is invoked when the JSP page is initialized.
                             It  is the responsibility of the JSP implementation (and of the class  mentioned by the extends attribute, if present) that at this point  invocations to the getServletConfig() method will return the desired  value.   A JSP page can override this method by including a definition for it  in a declaration element.   A JSP page should redefine the init() method from Servlet.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspPage</class-interface>
			<method name = "jspInit" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>153</id>
			<description>                            The jspDestroy() method is invoked when the JSP page is about to be  destroyed.
                                A JSP page can override this method by including a definition for it  in a declaration element.   A JSP page should redefine the destroy() method from Servlet.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspPage</class-interface>
			<method name = "jspDestroy" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>154</id>
			<description>                            The _jspService() method corresponds to the body of the JSP page.
                             This  method is defined automatically by the JSP container and should never  be defined by the JSP page author.    If a superclass is specified using the extends attribute, that  superclass may choose to perform some actions in its service() method  before or after calling the _jspService() method.  See using the extends  attribute in the JSP_Engine chapter of the JSP specification.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>HttpJspPage</class-interface>
			<method name = "_jspService" return-type = "void">
				<parameters>
					<parameter>HttpServletRequest</parameter>
					<parameter>HttpServletResponse</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>155</id>
			<description>Thrown if an error occurred during the       processing of the JSP and that the container should take       appropriate action to clean up the request.</description>
			<package>javax.servlet.jsp</package>
			<class-interface>HttpJspPage</class-interface>
			<method name = "_jspService" return-type = "void">
				<parameters>
					<parameter>HttpServletRequest</parameter>
					<parameter>HttpServletResponse</parameter>
				</parameters>
				<throw>ServletException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>156</id>
			<description>Thrown if an error occurred while writing the      response for this page.</description>
			<package>javax.servlet.jsp</package>
			<class-interface>HttpJspPage</class-interface>
			<method name = "_jspService" return-type = "void">
				<parameters>
					<parameter>HttpServletRequest</parameter>
					<parameter>HttpServletResponse</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>157</id>
			<description>                            Creates an ELParseException with no detail message.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ELParseException</class-interface>
			<method name = "ELParseException" return-type = "ELParseException"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>158</id>
			<description>                            Creates an ELParseException with the provided detail message.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ELParseException</class-interface>
			<method name = "ELParseException" return-type = "ELParseException">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>159</id>
			<description>                            Creates an ELException with no detail message.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ELException</class-interface>
			<method name = "ELException" return-type = "ELException"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>160</id>
			<description>                            Creates an ELException with the provided detail message.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ELException</class-interface>
			<method name = "ELException" return-type = "ELException">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>161</id>
			<description>                            Creates an ELException with the given root cause
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ELException</class-interface>
			<method name = "ELException" return-type = "ELException">
				<parameters>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>162</id>
			<description>                            Creates an ELException with the given detail message and root cause.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ELException</class-interface>
			<method name = "ELException" return-type = "ELException">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>163</id>
			<description>                            Returns the root cause
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ELException</class-interface>
			<method name = "getRootCause" return-type = "java.lang.Throwable"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>164</id>
			<description>                            String representation
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ELException</class-interface>
			<method name = "toString" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>165</id>
			<description>                            Resolves the specified local name and prefix into a Java.lang.Method.
                              Returns null if the prefix and local name are not found.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>FunctionMapper</class-interface>
			<method name = "resolveFunction" return-type = "java.lang.reflect.Method">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>384</id>
			<description>                            Resolves the specified variable.
                              Returns null if the variable is not found.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>VariableResolver</class-interface>
			<method name = "resolveVariable" return-type = "java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>166</id>
			<description>                            Resolves the specified variable.
                              Returns null if the variable is not found.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>VariableResolver</class-interface>
			<method name = "resolveVariable" return-type = "java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>167</id>
			<description>if a failure occurred while trying to resolve      the given variable</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>VariableResolver</class-interface>
			<method name = "resolveVariable" return-type = "java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
				<throw>javax.servlet.jsp.el.ELException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>379</id>
			<description>Default constructor.</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ExpressionEvaluator</class-interface>
			<method name = "ExpressionEvaluator" return-type = "ExpressionEvaluator"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>168</id>
			<description>                            Prepare an expression for later evaluation.</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ExpressionEvaluator</class-interface>
			<method name = "parseExpression" return-type = "javax.servlet.jsp.el.Expression">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Class</parameter>
					<parameter>javax.servlet.jsp.el.FunctionMapper</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "false" impl-spec = "true" status = "active" testable = "false">
			<id>169</id>
			<description>This method should perform  syntactic validation of the expression; if in doing so it detects errors, it  should raise an ELParseException.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ExpressionEvaluator</class-interface>
			<method name = "parseExpression" return-type = "javax.servlet.jsp.el.Expression">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Class</parameter>
					<parameter>javax.servlet.jsp.el.FunctionMapper</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "false" impl-spec = "false" status = "active" testable = "false">
			<id>170</id>
			<description>Thrown if parsing errors were found.</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ExpressionEvaluator</class-interface>
			<method name = "parseExpression" return-type = "javax.servlet.jsp.el.Expression">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Class</parameter>
					<parameter>javax.servlet.jsp.el.FunctionMapper</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>javax.servlet.jsp.el.ELException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>171</id>
			<description>                            Evaluates an expression.</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ExpressionEvaluator</class-interface>
			<method name = "evaluate" return-type = "java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Class</parameter>
					<parameter>javax.servlet.jsp.el.VariableResolver</parameter>
					<parameter>javax.servlet.jsp.el.FunctionMapper</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "false" impl-spec = "true" status = "active" testable = "false">
			<id>172</id>
			<description>This method may perform some syntactic validation  and, if so, it should raise an ELParseException error if it encounters syntactic  errors.  EL evaluation errors should cause an ELException to be raised.</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ExpressionEvaluator</class-interface>
			<method name = "evaluate" return-type = "java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Class</parameter>
					<parameter>javax.servlet.jsp.el.VariableResolver</parameter>
					<parameter>javax.servlet.jsp.el.FunctionMapper</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>173</id>
			<description>Thrown if the expression evaluation failed.</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ExpressionEvaluator</class-interface>
			<method name = "evaluate" return-type = "java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Class</parameter>
					<parameter>javax.servlet.jsp.el.VariableResolver</parameter>
					<parameter>javax.servlet.jsp.el.FunctionMapper</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>javax.servlet.jsp.el.ELException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>378</id>
			<description>Default constructor</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>Expression</class-interface>
			<method name = "Expression" return-type = "Expression"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>174</id>
			<description>                            Evaluates an expression that was previously prepared.</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>Expression</class-interface>
			<method name = "evaluate" return-type = "java.lang.Object">
				<parameters>
					<parameter>javax.servlet.jsp.el.VariableResolver</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "false" impl-spec = "true" status = "active" testable = "false">
			<id>175</id>
			<description>In some implementations  preparing an expression involves full syntactic validation, but others may  not do so.  Evaluating the expression may raise an ELParseException as well  as other ELExceptions due to run-time evaluation.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>Expression</class-interface>
			<method name = "evaluate" return-type = "java.lang.Object">
				<parameters>
					<parameter>javax.servlet.jsp.el.VariableResolver</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>176</id>
			<description>Thrown if the expression evaluation failed.</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>Expression</class-interface>
			<method name = "evaluate" return-type = "java.lang.Object">
				<parameters>
					<parameter>javax.servlet.jsp.el.VariableResolver</parameter>
				</parameters>
				<throw>javax.servlet.jsp.el.ELException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>177</id>
			<description>                            Constructor  These objects can be created (at translation time) by the TagExtraInfo  instances.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>VariableInfo</class-interface>
			<method name = "VariableInfo" return-type = "VariableInfo">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>178</id>
			<description>                            Returns the name of the scripting variable
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>VariableInfo</class-interface>
			<method name = "getVarName" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>179</id>
			<description>                            Returns the type of this variable
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>VariableInfo</class-interface>
			<method name = "getClassName" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>180</id>
			<description>                            Returns whether this is a new variable.
                              If so, in some languages this will require a declaration.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>VariableInfo</class-interface>
			<method name = "getDeclare" return-type = "boolean"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>181</id>
			<description>                            Returns the lexical scope of the variable.
                            
                            
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>VariableInfo</class-interface>
			<method name = "getScope" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>182</id>
			<description>                            Create a ValidationMessage.
                              The message String should be  non-null.  The value of id may be null, if the message  is not specific to any XML element, or if no jsp:id  attributes were passed on.  If non-null, the value of  id must be the value of a jsp:id attribute for the PageData  passed into the validate() method.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>ValidationMessage</class-interface>
			<method name = "ValidationMessage" return-type = "ValidationMessage">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>183</id>
			<description>                            Get the jsp:id.
                              Null means that there is no information available.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>ValidationMessage</class-interface>
			<method name = "getId" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>184</id>
			<description>                            Get the localized validation message.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>ValidationMessage</class-interface>
			<method name = "getMessage" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>185</id>
			<description>                            Constructor for TagVariableInfo
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagVariableInfo</class-interface>
			<method name = "TagVariableInfo" return-type = "TagVariableInfo">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>186</id>
			<description>                            JSP 2.0 Constructor for TagVariableInfo
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagVariableInfo</class-interface>
			<method name = "TagVariableInfo" return-type = "TagVariableInfo">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>187</id>
			<description>                            The body of the &lt;name-given> element
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagVariableInfo</class-interface>
			<method name = "getNameGiven" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>188</id>
			<description>                            The body of the &lt;name-from-attribute> element.
                              This is the name of an attribute whose (translation-time)  value will give the name of the variable.  One of   or  is required.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagVariableInfo</class-interface>
			<method name = "getNameFromAttribute" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>189</id>
			<description>                            The body of the &lt;class-name> element.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagVariableInfo</class-interface>
			<method name = "getClassName" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>190</id>
			<description>                            The body of the &lt;declare> element
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagVariableInfo</class-interface>
			<method name = "getDeclare" return-type = "boolean"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>191</id>
			<description>                            The body of the &lt;scope> element
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagVariableInfo</class-interface>
			<method name = "getScope" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>192</id>
			<description>                            The body of the &lt;fragment> element
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagVariableInfo</class-interface>
			<method name = "getFragment" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>193</id>
			<description>                            Default constructor, all subclasses are required to define only  a public constructor with the same signature, and to call the  superclass constructor.
                               This constructor is called by the code generated by the JSP  translator.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagSupport</class-interface>
			<method name = "TagSupport" return-type = "TagSupport"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>194</id>
			<description>                            Find the instance of a given class type that is closest to a given  instance.
                              This method uses the getParent method from the Tag  interface.  This method is used for coordination among cooperating tags.     The current version of the specification only provides one formal  way of indicating the observable type of a tag handler: its  tag handler implementation class, described in the tag-class  subelement of the tag element.  This is extended in an  informal manner by allowing the tag library author to  indicate in the description subelement an observable type.  The type should be a subtype of the tag handler implementation  class or void.  This addititional constraint can be exploited by a  specialized container that knows about that specific tag library,  as in the case of the JSP standard tag library.     When a tag library author provides information on the  observable type of a tag handler, client programmatic code  should adhere to that constraint.  Specifically, the Class  passed to findAncestorWithClass should be a subtype of the  observable type.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagSupport</class-interface>
			<method name = "findAncestorWithClass" return-type = "javax.servlet.jsp.tagext.Tag">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.Tag</parameter>
					<parameter>java.lang.Class</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>195</id>
			<description>                            Default processing of the start tag, returning SKIP_BODY.
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagSupport</class-interface>
			<method name = "doStartTag" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>196</id>
			<description>if an error occurs while processing this tag</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagSupport</class-interface>
			<method name = "doStartTag" return-type = "int">
				<throw>javax.servlet.jsp.JspException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>197</id>
			<description>                            Default processing of the end tag returning EVAL_PAGE.
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagSupport</class-interface>
			<method name = "doEndTag" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>198</id>
			<description>if an error occurs while processing this tag</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagSupport</class-interface>
			<method name = "doEndTag" return-type = "int">
				<throw>javax.servlet.jsp.JspException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>199</id>
			<description>                            Default processing for a body
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagSupport</class-interface>
			<method name = "doAfterBody" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>200</id>
			<description>if an error occurs while processing this tag</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagSupport</class-interface>
			<method name = "doAfterBody" return-type = "int">
				<throw>javax.servlet.jsp.JspException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>201</id>
			<description>                            Release state.
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagSupport</class-interface>
			<method name = "release" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>202</id>
			<description>                            Set the nesting tag of this tag.
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagSupport</class-interface>
			<method name = "setParent" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.Tag</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>203</id>
			<description>                            The Tag instance most closely enclosing this tag instance.
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagSupport</class-interface>
			<method name = "getParent" return-type = "javax.servlet.jsp.tagext.Tag"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>204</id>
			<description>                            Set the id attribute for this tag.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagSupport</class-interface>
			<method name = "setId" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>205</id>
			<description>                            The value of the id attribute of this tag; or null.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagSupport</class-interface>
			<method name = "getId" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>206</id>
			<description>                            Set the page context.
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagSupport</class-interface>
			<method name = "setPageContext" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.PageContext</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>207</id>
			<description>                            Associate a value with a String key.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagSupport</class-interface>
			<method name = "setValue" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>208</id>
			<description>                            Get a the value associated with a key.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagSupport</class-interface>
			<method name = "getValue" return-type = "java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>209</id>
			<description>                            Remove a value associated with a key.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagSupport</class-interface>
			<method name = "removeValue" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>210</id>
			<description> Enumerate the keys for the values kept by this tag handler.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagSupport</class-interface>
			<method name = "getValues" return-type = "java.util.Enumeration"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>211</id>
			<description/>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryValidator</class-interface>
			<method name = "TagLibraryValidator" return-type = "TagLibraryValidator"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>212</id>
			<description>                            Set the init data in the TLD for this validator.
                              Parameter names are keys, and parameter values are the values.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryValidator</class-interface>
			<method name = "setInitParameters" return-type = "void">
				<parameters>
					<parameter>java.util.Map</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>213</id>
			<description>                            Get the init parameters data as an immutable Map.
                              Parameter names are keys, and parameter values are the values.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryValidator</class-interface>
			<method name = "getInitParameters" return-type = "java.util.Map"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>214</id>
			<description>                            Validate a JSP page.
                              This will get invoked once per directive in the JSP page.  This method will return null if the page is valid; otherwise  the method should return an array of ValidationMessage objects.  An array of length zero is also interpreted as no errors.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryValidator</class-interface>
			<method name = "validate" return-type = "javax.servlet.jsp.tagext.ValidationMessage[]">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>javax.servlet.jsp.tagext.PageData</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>386</id>
			<description>                            Validate a JSP page.
                              This will get invoked once per directive in the JSP page.  An array of length greater than zero is interpreted as an error (translation error occurs).
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryValidator</class-interface>
			<method name = "validate" return-type = "javax.servlet.jsp.tagext.ValidationMessage[]">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>javax.servlet.jsp.tagext.PageData</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>215</id>
			<description>                            Release any data kept by this instance for validation purposes
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryValidator</class-interface>
			<method name = "release" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>216</id>
			<description>                            The value of the uri attribute from the taglib directive for   this library.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryInfo</class-interface>
			<method name = "getURI" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>217</id>
			<description>                            The value of the tagdir attribute from the &amp;lt;%@ taglib directive for  this tag library.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryInfo</class-interface>
			<method name = "getTagdir" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>218</id>
			<description>                            The prefix assigned to this taglib from the taglib directive
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryInfo</class-interface>
			<method name = "getPrefixString" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>219</id>
			<description>                            The preferred short name (prefix) as indicated in the TLD.
                              This may be used by authoring tools as the preferred prefix  to use when creating an taglib directive for this library.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryInfo</class-interface>
			<method name = "getShortName" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>220</id>
			<description>                            The "reliable" URN indicated in the TLD (the uri element).
                              This may be used by authoring tools as a global identifier to use when creating a taglib directive  for this library.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryInfo</class-interface>
			<method name = "getReliableURN" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>221</id>
			<description>                            Information (documentation) for this TLD.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryInfo</class-interface>
			<method name = "getInfoString" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>222</id>
			<description>                            A string describing the required version of the JSP container.
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryInfo</class-interface>
			<method name = "getRequiredVersion" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>223</id>
			<description>                            An array describing the tags that are defined in this tag library.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryInfo</class-interface>
			<method name = "getTags" return-type = "javax.servlet.jsp.tagext.TagInfo[]"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>224</id>
			<description>                            An array describing the tag files that are defined in this tag library.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryInfo</class-interface>
			<method name = "getTagFiles" return-type = "javax.servlet.jsp.tagext.TagFileInfo[]"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>225</id>
			<description>                            Get the TagInfo for a given tag name, looking through all the  tags in this tag library.
                              Returns null if no tag is found.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryInfo</class-interface>
			<method name = "getTag" return-type = "javax.servlet.jsp.tagext.TagInfo">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>226</id>
			<description>                            Get the TagFileInfo for a given tag name, looking through all the  tag files in this tag library.
                              Returns null if no tag file is found.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryInfo</class-interface>
			<method name = "getTagFile" return-type = "javax.servlet.jsp.tagext.TagFileInfo">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>227</id>
			<description>                            An array describing the functions that are defined in this tag library.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryInfo</class-interface>
			<method name = "getFunctions" return-type = "javax.servlet.jsp.tagext.FunctionInfo[]"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>228</id>
			<description>                            Get the FunctionInfo for a given function name, looking through all the  functions in this tag library.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryInfo</class-interface>
			<method name = "getFunction" return-type = "javax.servlet.jsp.tagext.FunctionInfo">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>229</id>
			<description>                            Constructor for TagInfo from data in the JSP 2.0 format for TLD.
                              This class is to be instantiated only from the TagLibrary code  under request from some JSP code that is parsing a  TLD (Tag Library Descriptor).   Note that, since TagLibibraryInfo reflects both TLD information  and taglib directive information, a TagInfo instance is  dependent on a taglib directive.  This is probably a  design error, which may be fixed in the future.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "TagInfo" return-type = "TagInfo">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>javax.servlet.jsp.tagext.TagLibraryInfo</parameter>
					<parameter>javax.servlet.jsp.tagext.TagExtraInfo</parameter>
					<parameter>javax.servlet.jsp.tagext.TagAttributeInfo[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>230</id>
			<description>                            Constructor for TagInfo from data in the JSP 1.2 format for TLD.
                              This class is to be instantiated only from the TagLibrary code  under request from some JSP code that is parsing a  TLD (Tag Library Descriptor).   Note that, since TagLibibraryInfo reflects both TLD information  and taglib directive information, a TagInfo instance is  dependent on a taglib directive.  This is probably a  design error, which may be fixed in the future.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "TagInfo" return-type = "TagInfo">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>javax.servlet.jsp.tagext.TagLibraryInfo</parameter>
					<parameter>javax.servlet.jsp.tagext.TagExtraInfo</parameter>
					<parameter>javax.servlet.jsp.tagext.TagAttributeInfo[]</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>javax.servlet.jsp.tagext.TagVariableInfo[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>231</id>
			<description>                            Constructor for TagInfo from data in the JSP 2.0 format for TLD.
                              This class is to be instantiated only from the TagLibrary code  under request from some JSP code that is parsing a  TLD (Tag Library Descriptor).   Note that, since TagLibibraryInfo reflects both TLD information  and taglib directive information, a TagInfo instance is  dependent on a taglib directive.  This is probably a  design error, which may be fixed in the future.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "TagInfo" return-type = "TagInfo">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>javax.servlet.jsp.tagext.TagLibraryInfo</parameter>
					<parameter>javax.servlet.jsp.tagext.TagExtraInfo</parameter>
					<parameter>javax.servlet.jsp.tagext.TagAttributeInfo[]</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>javax.servlet.jsp.tagext.TagVariableInfo[]</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>232</id>
			<description>                            The name of the Tag.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "getTagName" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>233</id>
			<description>                            Attribute information (in the TLD) on this tag.
                              The return is an array describing the attributes of this tag, as  indicated in the TLD.  or a zero-length array if the tag has no attributes.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "getAttributes" return-type = "javax.servlet.jsp.tagext.TagAttributeInfo[]"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>234</id>
			<description>                            Information on the scripting objects created by this tag at runtime.
                              This is a convenience method on the associated TagExtraInfo class.    Default is null if the tag has no "id" attribute,  otherwise, {"id", Object}
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "getVariableInfo" return-type = "javax.servlet.jsp.tagext.VariableInfo[]">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.TagData</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>235</id>
			<description>                            Translation-time validation of the attributes.
                               This is a convenience method on the associated TagExtraInfo class.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "isValid" return-type = "boolean">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.TagData</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>236</id>
			<description>                            Translation-time validation of the attributes.
                              This is a convenience method on the associated TagExtraInfo class.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "validate" return-type = "javax.servlet.jsp.tagext.ValidationMessage[]">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.TagData</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>237</id>
			<description>                            Set the instance for extra tag information
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "setTagExtraInfo" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.TagExtraInfo</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>238</id>
			<description>                            The instance (if any) for extra tag information
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "getTagExtraInfo" return-type = "javax.servlet.jsp.tagext.TagExtraInfo"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>239</id>
			<description>                            Name of the class that provides the handler for this tag.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "getTagClassName" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>240</id>
			<description>                            The bodycontent information for this tag.  If the bodycontent is not defined for thsi tag, the defaul of JSP will be returned.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "getBodyContent" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>241</id>
			<description>                            The information string for the tag.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "getInfoString" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>242</id>
			<description>                            Set the TagLibraryInfo property.
                               Note that a TagLibraryInfo element is dependent  not just on the TLD information but also on the  specific taglib instance used.  This means that  a fair amount of work needs to be done to construct  and initialize TagLib objects.   If used carefully, this setter can be used to avoid having to  create new TagInfo elements for each taglib directive.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "setTagLibrary" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.TagLibraryInfo</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>243</id>
			<description>                            The instance of TabLibraryInfo we belong to.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "getTagLibrary" return-type = "javax.servlet.jsp.tagext.TagLibraryInfo"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>244</id>
			<description>                            Get the displayName or null if not defined.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "getDisplayName" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>245</id>
			<description>                            Get the path to the small icon
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "getSmallIcon" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>246</id>
			<description>                            Get the path to the large icon
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "getLargeIcon" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>247</id>
			<description>                            Get TagVariableInfo objects associated with this TagInfo
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "getTagVariableInfos" return-type = "javax.servlet.jsp.tagext.TagVariableInfo[]"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>248</id>
			<description>                            Get dynamicAttributes associated with this TagInfo
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagInfo</class-interface>
			<method name = "hasDynamicAttributes" return-type = "boolean"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>249</id>
			<description>                            Constructor for TagFragmentAttributeInfo.
                              This class is to be instantiated only from the  TagLibrary code under request from some JSP code that is parsing a  TLD (Tag Library Descriptor).
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagFragmentAttributeInfo</class-interface>
			<method name = "TagFragmentAttributeInfo" return-type = "TagFragmentAttributeInfo">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>javax.servlet.jsp.tagext.TagFragmentAttributeInfo.TagFragmentAttributeInfo.FragmentInput[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>250</id>
			<description>                            The name of the fragment attribute.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagFragmentAttributeInfo</class-interface>
			<method name = "getName" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>251</id>
			<description>                            The description of the fragment attribute.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagFragmentAttributeInfo</class-interface>
			<method name = "getDescription" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>252</id>
			<description>                            The fragment inputs of the fragment attribute.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagFragmentAttributeInfo</class-interface>
			<method name = "getFragmentInputs" return-type = "javax.servlet.jsp.tagext.TagFragmentAttributeInfo.TagFragmentAttributeInfo.FragmentInput[]"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>253</id>
			<description>                            Whether this attribute is required.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagFragmentAttributeInfo</class-interface>
			<method name = "isRequired" return-type = "boolean"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>254</id>
			<description>                            Constructor for FragmentInput.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagFragmentAttributeInfo.FragmentInput</class-interface>
			<method name = "TagFragmentAttributeInfo.FragmentInput" return-type = "TagFragmentAttributeInfo.FragmentInput">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>255</id>
			<description>                            The name of the fragment input.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagFragmentAttributeInfo.FragmentInput</class-interface>
			<method name = "getName" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>256</id>
			<description>                            The type (as a String) of the fragment input.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagFragmentAttributeInfo.FragmentInput</class-interface>
			<method name = "getTypeName" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>257</id>
			<description>                            The description of the fragment input.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagFragmentAttributeInfo.FragmentInput</class-interface>
			<method name = "getDescription" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>258</id>
			<description>                            Constructor for TagFileInfo from data in the JSP 2.0 format for TLD.
                              This class is to be instantiated only from the TagLibrary code  under request from some JSP code that is parsing a  TLD (Tag Library Descriptor).   Note that, since TagLibibraryInfo reflects both TLD information  and taglib directive information, a TagFileInfo instance is  dependent on a taglib directive.  This is probably a  design error, which may be fixed in the future.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagFileInfo</class-interface>
			<method name = "TagFileInfo" return-type = "TagFileInfo">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>javax.servlet.jsp.tagext.TagInfo</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>259</id>
			<description>                            The unique action name of this tag.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagFileInfo</class-interface>
			<method name = "getName" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>260</id>
			<description>                            Where to find the .tag file implementing this action.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagFileInfo</class-interface>
			<method name = "getPath" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>261</id>
			<description>                            Returns information about this tag, parsed from the directives   in the tag file.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagFileInfo</class-interface>
			<method name = "getTagInfo" return-type = "javax.servlet.jsp.tagext.TagInfo"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>262</id>
			<description/>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagExtraInfo</class-interface>
			<method name = "TagExtraInfo" return-type = "TagExtraInfo"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>263</id>
			<description>                            information on scripting variables defined by the tag associated with  this TagExtraInfo instance.
                              Request-time attributes are indicated as such in the TagData parameter.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagExtraInfo</class-interface>
			<method name = "getVariableInfo" return-type = "javax.servlet.jsp.tagext.VariableInfo[]">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.TagData</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>264</id>
			<description>                            Translation-time validation of the attributes.
                               Request-time attributes are indicated as such in the TagData parameter.  Note that the preferred way to do validation is with the validate()  method, since it can return more detailed information.
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagExtraInfo</class-interface>
			<method name = "isValid" return-type = "boolean">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.TagData</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>265</id>
			<description>                            Translation-time validation of the attributes.
                              Request-time attributes are indicated as such in the TagData parameter.  Because of the higher quality validation messages possible,   this is the preferred way to do validation (although isValid()   still works).      JSP 2.0 and higher containers call validate() instead of isValid().  The default implementation of this method is to call isValid().  If   isValid() returns false, a generic ValidationMessage[] is returned  indicating isValid() returned false.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagExtraInfo</class-interface>
			<method name = "validate" return-type = "javax.servlet.jsp.tagext.ValidationMessage[]">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.TagData</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>266</id>
			<description>                            Set the TagInfo for this class.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagExtraInfo</class-interface>
			<method name = "setTagInfo" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.TagInfo</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>267</id>
			<description>                            Get the TagInfo for this class.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagExtraInfo</class-interface>
			<method name = "getTagInfo" return-type = "javax.servlet.jsp.tagext.TagInfo"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>268</id>
			<description>                            Constructor for TagData.
                                 A typical constructor may be    static final Object[][] att = {{"connection", "conn0"}, {"id", "query0"}};  static final TagData td = new TagData(att);     All values must be Strings except for those holding the  distinguished object REQUEST_TIME_VALUE.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagData</class-interface>
			<method name = "TagData" return-type = "TagData">
				<parameters>
					<parameter>java.lang.Object[][]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>269</id>
			<description>                            Constructor for a TagData.
                               If you already have the attributes in a hashtable, use this  constructor.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagData</class-interface>
			<method name = "TagData" return-type = "TagData">
				<parameters>
					<parameter>java.util.Hashtable</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>270</id>
			<description>                            The value of the tag's id attribute.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagData</class-interface>
			<method name = "getId" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>271</id>
			<description>                            The value of the attribute.  If a static value is specified for an attribute that accepts a request-time attribute expression then that static value is returned even if the value is provided in the body of an action.  The distinguised object REQUEST_TIME_VALUE is only returned if the value is specified as a request-time attribute expression or via the jsp:attribute action with a body that contains dynamic content (scripts, scripting expressions, EL expressions, standard actions, or custom actions).</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagData</class-interface>
			<method name = "getAttribute" return-type = "java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>272</id>
			<description>                            Set the value of an attribute.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagData</class-interface>
			<method name = "setAttribute" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>273</id>
			<description>                            Get the value for a given attribute.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagData</class-interface>
			<method name = "getAttributeString" return-type = "java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>274</id>
			<description>if attribute value is not a String</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagData</class-interface>
			<method name = "getAttributeString" return-type = "java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.lang.ClassCastException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>275</id>
			<description>                            Enumerates the attributes.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagData</class-interface>
			<method name = "getAttributes" return-type = "java.util.Enumeration"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>276</id>
			<description>                            Constructor for TagAttributeInfo.
                              This class is to be instantiated only from the  TagLibrary code under request from some JSP code that is parsing a  TLD (Tag Library Descriptor).
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAttributeInfo</class-interface>
			<method name = "TagAttributeInfo" return-type = "TagAttributeInfo">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>277</id>
			<description>                            JSP 2.0 Constructor for TagAttributeInfo.
                              This class is to be instantiated only from the  TagLibrary code under request from some JSP code that is parsing a  TLD (Tag Library Descriptor).
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAttributeInfo</class-interface>
			<method name = "TagAttributeInfo" return-type = "TagAttributeInfo">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>278</id>
			<description>                            The name of this attribute.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAttributeInfo</class-interface>
			<method name = "getName" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>279</id>
			<description>                            The type (as a String) of this attribute.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAttributeInfo</class-interface>
			<method name = "getTypeName" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>280</id>
			<description>                            Whether this attribute can hold a request-time value.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAttributeInfo</class-interface>
			<method name = "canBeRequestTime" return-type = "boolean"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>281</id>
			<description>                            Whether this attribute is required.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAttributeInfo</class-interface>
			<method name = "isRequired" return-type = "boolean"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>282</id>
			<description>                            Convenience static method that goes through an array of TagAttributeInfo  objects and looks for "id".
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAttributeInfo</class-interface>
			<method name = "getIdAttribute" return-type = "javax.servlet.jsp.tagext.TagAttributeInfo">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.TagAttributeInfo[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>283</id>
			<description>                            Whether this attribute is of type JspFragment
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAttributeInfo</class-interface>
			<method name = "isFragment" return-type = "boolean"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>284</id>
			<description>                            Returns a String representation of this TagAttributeInfo, suitable  for debugging purposes.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAttributeInfo</class-interface>
			<method name = "toString" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>285</id>
			<description>                            Creates a new TagAdapter that wraps the given SimeplTag and   returns the parent tag when getParent() is called.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAdapter</class-interface>
			<method name = "TagAdapter" return-type = "TagAdapter">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.SimpleTag</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>286</id>
			<description>                            Must not be called.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAdapter</class-interface>
			<method name = "setPageContext" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.PageContext</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>287</id>
			<description>Must not be called</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAdapter</class-interface>
			<method name = "setPageContext" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.PageContext</parameter>
				</parameters>
				<throw>java.lang.UnsupportedOperationException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>288</id>
			<description>                            Must not be called.
                              The parent of this tag is always   getAdaptee().getParent().
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAdapter</class-interface>
			<method name = "setParent" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.Tag</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>289</id>
			<description>Must not be called.</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAdapter</class-interface>
			<method name = "setParent" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.Tag</parameter>
				</parameters>
				<throw>java.lang.UnsupportedOperationException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>290</id>
			<description>                            Returns the value passed to setParent().
                                This will either be the enclosing Tag (if parent implements Tag),  or an adapter to the enclosing Tag (if parent does  not implement Tag).
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAdapter</class-interface>
			<method name = "getParent" return-type = "javax.servlet.jsp.tagext.Tag"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>291</id>
			<description>                            Gets the tag that is being adapted to the Tag interface.
                              This should be an instance of SimpleTag in JSP 2.0, but room  is left for other kinds of tags in future spec versions.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAdapter</class-interface>
			<method name = "getAdaptee" return-type = "javax.servlet.jsp.tagext.JspTag"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>292</id>
			<description>                            Must not be called.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAdapter</class-interface>
			<method name = "doStartTag" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>293</id>
			<description>never thrown</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAdapter</class-interface>
			<method name = "doStartTag" return-type = "int">
				<throw>javax.servlet.jsp.JspException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>294</id>
			<description>Must not be called</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAdapter</class-interface>
			<method name = "doStartTag" return-type = "int">
				<throw>java.lang.UnsupportedOperationException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>295</id>
			<description>                            Must not be called.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAdapter</class-interface>
			<method name = "doEndTag" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>296</id>
			<description>never thrown</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAdapter</class-interface>
			<method name = "doEndTag" return-type = "int">
				<throw>javax.servlet.jsp.JspException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>297</id>
			<description>Must not be called</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAdapter</class-interface>
			<method name = "doEndTag" return-type = "int">
				<throw>java.lang.UnsupportedOperationException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>298</id>
			<description>                            Must not be called.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAdapter</class-interface>
			<method name = "release" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>299</id>
			<description>Must not be called</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAdapter</class-interface>
			<method name = "release" return-type = "void">
				<throw>java.lang.UnsupportedOperationException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>300</id>
			<description/>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTagSupport</class-interface>
			<method name = "SimpleTagSupport" return-type = "SimpleTagSupport"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>301</id>
			<description>                            Default processing of the tag does nothing.
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTagSupport</class-interface>
			<method name = "doTag" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>302</id>
			<description>Subclasses can throw JspException to indicate      an error occurred while processing this tag.</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTagSupport</class-interface>
			<method name = "doTag" return-type = "void">
				<throw>javax.servlet.jsp.JspException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>303</id>
			<description>Subclasses can throw IOException if there was      an error writing to the output stream</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTagSupport</class-interface>
			<method name = "doTag" return-type = "void">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>304</id>
			<description>If the page that      (either directly or indirectly) invoked this tag is to      cease evaluation.  A Simple Tag Handler generated from a       tag file must throw this exception if an invoked Classic       Tag Handler returned SKIP_PAGE or if an invoked Simple      Tag Handler threw SkipPageException or if an invoked Jsp Fragment      threw a SkipPageException.</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTagSupport</class-interface>
			<method name = "doTag" return-type = "void">
				<throw>javax.servlet.jsp.SkipPageException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>305</id>
			<description>                            Sets the parent of this tag, for collaboration purposes.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTagSupport</class-interface>
			<method name = "setParent" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.JspTag</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>306</id>
			<description>                            Returns the parent of this tag, for collaboration purposes.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTagSupport</class-interface>
			<method name = "getParent" return-type = "javax.servlet.jsp.tagext.JspTag"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>307</id>
			<description>                            Stores the provided JSP context in the protected   jspContext field.
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTagSupport</class-interface>
			<method name = "setJspContext" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.JspContext</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>308</id>
			<description>                            Returns the page context passed in by the container via   setJspContext.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTagSupport</class-interface>
			<method name = "getJspContext" return-type = "javax.servlet.jsp.JspContext"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>309</id>
			<description>                            Stores the provided JspFragment.
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTagSupport</class-interface>
			<method name = "setJspBody" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.JspFragment</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>310</id>
			<description>                            Returns the body passed in by the container via setJspBody
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTagSupport</class-interface>
			<method name = "getJspBody" return-type = "javax.servlet.jsp.tagext.JspFragment"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>311</id>
			<description>                            Find the instance of a given class type that is closest to a given  instance.
                              This method uses the getParent method from the Tag and/or SimpleTag  interfaces.  This method is used for coordination among   cooperating tags.     For every instance of TagAdapter encoutnered will traversing the ancestors the tag handler returned by TagAdapter.getAdatpee() - instead of the TagAdapter itself - is compared to klass.  If the tag handler matches it - and not its TagAdapter - is returned. The current version of the specification only provides one formal  way of indicating the observable type of a tag handler: its  tag handler implementation class, described in the tag-class  subelement of the tag element.  This is extended in an  informal manner by allowing the tag library author to  indicate in the description subelement an observable type.  The type should be a subtype of the tag handler implementation  class or void.  This addititional constraint can be exploited by a  specialized container that knows about that specific tag library,  as in the case of the JSP standard tag library.     When a tag library author provides information on the  observable type of a tag handler, client programmatic code  should adhere to that constraint.  Specifically, the Class  passed to findAncestorWithClass should be a subtype of the  observable type.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTagSupport</class-interface>
			<method name = "findAncestorWithClass" return-type = "javax.servlet.jsp.tagext.JspTag">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.JspTag</parameter>
					<parameter>java.lang.Class</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>312</id>
			<description/>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>PageData</class-interface>
			<method name = "PageData" return-type = "PageData"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>313</id>
			<description>                            Returns an input stream on the XML view of a JSP page. The stream is encoded in UTF-8.
                              Recall tht the XML view of a JSP page has the include  directives expanded.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>PageData</class-interface>
			<method name = "getInputStream" return-type = "java.io.InputStream"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>314</id>
			<description>                            Constructor for FunctionInfo.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>FunctionInfo</class-interface>
			<method name = "FunctionInfo" return-type = "FunctionInfo">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>315</id>
			<description>                            The name of the function.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>FunctionInfo</class-interface>
			<method name = "getName" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>316</id>
			<description>                            The class of the function.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>FunctionInfo</class-interface>
			<method name = "getFunctionClass" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>317</id>
			<description>                            The signature of the function.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>FunctionInfo</class-interface>
			<method name = "getFunctionSignature" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>318</id>
			<description>                            Default constructor, all subclasses are required to only define  a public constructor with the same signature, and to call the  superclass constructor.
                               This constructor is called by the code generated by the JSP  translator.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyTagSupport</class-interface>
			<method name = "BodyTagSupport" return-type = "BodyTagSupport"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>319</id>
			<description>                            Default processing of the start tag returning EVAL_BODY_BUFFERED
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyTagSupport</class-interface>
			<method name = "doStartTag" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>320</id>
			<description>if an error occurred while processing this tag</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyTagSupport</class-interface>
			<method name = "doStartTag" return-type = "int">
				<throw>javax.servlet.jsp.JspException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>321</id>
			<description>                            Default processing of the end tag returning EVAL_PAGE.
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyTagSupport</class-interface>
			<method name = "doEndTag" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>322</id>
			<description>if an error occurred while processing this tag</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyTagSupport</class-interface>
			<method name = "doEndTag" return-type = "int">
				<throw>javax.servlet.jsp.JspException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>323</id>
			<description>                            Prepare for evaluation of the body: stash the bodyContent away.
                            
                            
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyTagSupport</class-interface>
			<method name = "setBodyContent" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.BodyContent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>324</id>
			<description>                            Prepare for evaluation of the body just before the first body evaluation:  no action.
                            
                            
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyTagSupport</class-interface>
			<method name = "doInitBody" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>325</id>
			<description>if an error occurred while processing this tag</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyTagSupport</class-interface>
			<method name = "doInitBody" return-type = "void">
				<throw>javax.servlet.jsp.JspException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>326</id>
			<description>                            After the body evaluation: do not reevaluate and continue with the page.
                              By default nothing is done with the bodyContent data (if any).
                            
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyTagSupport</class-interface>
			<method name = "doAfterBody" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>327</id>
			<description>if an error occurred while processing this tag</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyTagSupport</class-interface>
			<method name = "doAfterBody" return-type = "int">
				<throw>javax.servlet.jsp.JspException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>328</id>
			<description>                            Release state.
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyTagSupport</class-interface>
			<method name = "release" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>329</id>
			<description>                            Get current bodyContent.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyTagSupport</class-interface>
			<method name = "getBodyContent" return-type = "javax.servlet.jsp.tagext.BodyContent"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>330</id>
			<description>                            Get surrounding out JspWriter.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyTagSupport</class-interface>
			<method name = "getPreviousOut" return-type = "javax.servlet.jsp.JspWriter"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>331</id>
			<description>                            Redefined flush() so it is not legal.
                                 It is not valid to flush a BodyContent because there is no backing  stream behind it.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyContent</class-interface>
			<method name = "flush" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>332</id>
			<description>always thrown</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyContent</class-interface>
			<method name = "flush" return-type = "void">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>333</id>
			<description>                            Clear the body without throwing any exceptions.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyContent</class-interface>
			<method name = "clearBody" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>334</id>
			<description>                            Return the value of this BodyContent as a Reader.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyContent</class-interface>
			<method name = "getReader" return-type = "java.io.Reader"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>335</id>
			<description>                            Return the value of the BodyContent as a String.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyContent</class-interface>
			<method name = "getString" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>336</id>
			<description>                            Write the contents of this BodyContent into a Writer.
                              Subclasses may optimize common invocation patterns.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyContent</class-interface>
			<method name = "writeOut" return-type = "void">
				<parameters>
					<parameter>java.io.Writer</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>337</id>
			<description>if an I/O error occurred while writing the      contents of this BodyContent to the given Writer</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyContent</class-interface>
			<method name = "writeOut" return-type = "void">
				<parameters>
					<parameter>java.io.Writer</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>338</id>
			<description>                            Get the enclosing JspWriter.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyContent</class-interface>
			<method name = "getEnclosingWriter" return-type = "javax.servlet.jsp.JspWriter"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>339</id>
			<description>                            Invoked if a Throwable occurs while evaluating the BODY  inside a tag or in any of the following methods:  Tag.doStartTag(), Tag.doEndTag(),  IterationTag.doAfterBody() and BodyTag.doInitBody().
                               This method is not invoked if the Throwable occurs during  one of the setter methods.   This method may throw an exception (the same or a new one)  that will be propagated further up the nest chain.  If an exception  is thrown, doFinally() will be invoked.   This method is intended to be used to respond to an exceptional  condition.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TryCatchFinally</class-interface>
			<method name = "doCatch" return-type = "void">
				<parameters>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>340</id>
			<description>Throwable if the exception is to be rethrown further up the next chain</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TryCatchFinally</class-interface>
			<method name = "doCatch" return-type = "void">
				<parameters>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
				<throw>java.lang.Throwable</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>341</id>
			<description>                            Invoked in all cases after doEndTag() for any class implementing  Tag, IterationTag or BodyTag.
                              This method is invoked even if  an exception has occurred in the BODY of the tag,  or in any of the following methods:  Tag.doStartTag(), Tag.doEndTag(),  IterationTag.doAfterBody() and BodyTag.doInitBody().   This method is not invoked if the Throwable occurs during  one of the setter methods.   This method should not throw an Exception.   This method is intended to maintain per-invocation data  integrity and resource management actions.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TryCatchFinally</class-interface>
			<method name = "doFinally" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>342</id>
			<description>                            Set the current page context.
                              This method is invoked by the JSP page implementation object  prior to doStartTag().    This value is *not* reset by doEndTag() and must be explicitly reset  by a page implementation if it changes between calls to doStartTag().
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>Tag</class-interface>
			<method name = "setPageContext" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.PageContext</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>343</id>
			<description>                            Set the parent (closest enclosing tag handler) of this tag handler.
                              Invoked by the JSP page implementation object prior to doStartTag().    This value is *not* reset by doEndTag() and must be explicitly reset  by a page implementation.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>Tag</class-interface>
			<method name = "setParent" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.Tag</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>344</id>
			<description>                            Get the parent (closest enclosing tag handler) for this tag handler.
                                 The getParent() method can be used to navigate the nested tag  handler structure at runtime for cooperation among custom actions;  for example, the findAncestorWithClass() method in TagSupport  provides a convenient way of doing this.     The current version of the specification only provides one formal  way of indicating the observable type of a tag handler: its  tag handler implementation class, described in the tag-class  subelement of the tag element.  This is extended in an  informal manner by allowing the tag library author to  indicate in the description subelement an observable type.  The type should be a subtype of the tag handler implementation  class or void.  This addititional constraint can be exploited by a  specialized container that knows about that specific tag library,  as in the case of the JSP standard tag library.
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>Tag</class-interface>
			<method name = "getParent" return-type = "javax.servlet.jsp.tagext.Tag"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>345</id>
			<description>                            Process the start tag for this instance.
                              This method is invoked by the JSP page implementation object.     The doStartTag method assumes that the properties pageContext and  parent have been set. It also assumes that any properties exposed as  attributes have been set too.  When this method is invoked, the body  has not yet been evaluated.  When a Tag returns EVAL_BODY_INCLUDE the result of evaluating  the body (if any) is included into the current "out" JspWriter as it  happens and then doEndTag() is invoked.
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>Tag</class-interface>
			<method name = "doStartTag" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>346</id>
			<description>                            Process the start tag for this instance.
                              This method is invoked by the JSP page implementation object.     The doStartTag method assumes that the properties pageContext and  parent have been set. It also assumes that any properties exposed as  attributes have been set too.  When this method is invoked, the body  has not yet been evaluated. Returning BodyTag.EVAL_BODY_BUFFERED is only valid  if the tag handler  implements BodyTag.
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>Tag</class-interface>
			<method name = "doStartTag" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>347</id>
			<description>                            Process the start tag for this instance.
                              This method is invoked by the JSP page implementation object.     The doStartTag method assumes that the properties pageContext and  parent have been set. It also assumes that any properties exposed as  attributes have been set too.  When this method is invoked, the body  has not yet been evaluated.  When SKIP_PAGE is returned, the processing of the page will cease and no remainder tag methods, such as doEndTag() will be called within this JSP page implementation object.
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>Tag</class-interface>
			<method name = "doStartTag" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>348</id>
			<description>The JSP container will recynchronize the values of any AT_EBING and NESTED variables (defined by the associated TagExtraInfo or TLD) after the invocation of doStartTag() except for a tag handler implementing BodyTag whose doStartTag() method returns BodyTag.EVAL_BODY_BUFFERED. </description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>Tag</class-interface>
			<method name = "doStartTag" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>349</id>
			<description>if an error occurred while processing this tag</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>Tag</class-interface>
			<method name = "doStartTag" return-type = "int">
				<throw>javax.servlet.jsp.JspException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>350</id>
			<description>                            Process the end tag for this instance.
                              This method is invoked by the JSP page implementation object  on all Tag handlers.     This method will be called after returning from doStartTag. The  body of the action may or may not have been evaluated, depending on  the return value of doStartTag.     If this method returns EVAL_PAGE, the rest of the page continues  to be evaluated. 
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>Tag</class-interface>
			<method name = "doEndTag" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>351</id>
			<description>                            Process the end tag for this instance.
                              This method is invoked by the JSP page implementation object  on all Tag handlers.     This method will be called after returning from doStartTag. The  body of the action may or may not have been evaluated, depending on  the return value of doStartTag.      If this method returns SKIP_PAGE, the rest of  the page is not evaluated, the request is completed, and   the doEndTag() methods of enclosing tags are not invoked.  If this  request was forwarded or included from another page (or Servlet),  only the current page evaluation is stopped. 
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>Tag</class-interface>
			<method name = "doEndTag" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>352</id>
			<description>                            Process the end tag for this instance.
                              This method is invoked by the JSP page implementation object  on all Tag handlers.     This method will be called after returning from doStartTag. The  body of the action may or may not have been evaluated, depending on  the return value of doStartTag.     If this method returns EVAL_PAGE, the rest of the page continues  to be evaluated.  If this method returns SKIP_PAGE, the rest of  the page is not evaluated, the request is completed, and   the doEndTag() methods of enclosing tags are not invoked.  If this  request was forwarded or included from another page (or Servlet),  only the current page evaluation is stopped.     The JSP container will resynchronize  any variable values that are indicated as so in TagExtraInfo after the  invocation of doEndTag().
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>Tag</class-interface>
			<method name = "doEndTag" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>353</id>
			<description>The JSP container will resynchronize the values of any AT_BEGIN and AT_END variables (defined by the assocaited TagExtraInfo or TLD) after the invocation of doEndTag().</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>Tag</class-interface>
			<method name = "doEndTag" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>354</id>
			<description>if an error occurred while processing this tag</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>Tag</class-interface>
			<method name = "doEndTag" return-type = "int">
				<throw>javax.servlet.jsp.JspException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>355</id>
			<description>                            Called on a Tag handler to release state.
                              The page compiler guarantees that JSP page implementation  objects will invoke this method on all tag handlers,  but there may be multiple invocations on doStartTag and doEndTag in between.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>Tag</class-interface>
			<method name = "release" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>356</id>
			<description>                            Called by the container to invoke this tag.
                              The implementation of this method is provided by the tag library  developer, and handles all tag processing, body iteration, etc.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTag</class-interface>
			<method name = "doTag" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>400</id>
			<description>The JSP container will recynchronize any AT_BEGIN and AT_END variables (defined by the associated tag file TagExtraInfo or TLD) after the invocation of doTag().</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTag</class-interface>
			<method name = "doTag" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>357</id>
			<description>If an error occurred       while processing this tag.</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTag</class-interface>
			<method name = "doTag" return-type = "void">
				<throw>javax.servlet.jsp.JspException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>358</id>
			<description>If there was an error writing to the      output stream.</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTag</class-interface>
			<method name = "doTag" return-type = "void">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>359</id>
			<description>If the page that      (either directly or indirectly) invoked this tag is to      cease evaluation.  A Simple Tag Handler generated from a       tag file must throw this exception if an invoked Classic       Tag Handler returned SKIP_PAGE or if an invoked Simple      Tag Handler threw SkipPageException or if an invoked Jsp Fragment      threw a SkipPageException.</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTag</class-interface>
			<method name = "doTag" return-type = "void">
				<throw>javax.servlet.jsp.SkipPageException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>360</id>
			<description>                            Sets the parent of this tag, for collaboration purposes.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTag</class-interface>
			<method name = "setParent" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.JspTag</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>361</id>
			<description>                            Returns the parent of this tag, for collaboration purposes.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTag</class-interface>
			<method name = "getParent" return-type = "javax.servlet.jsp.tagext.JspTag"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>362</id>
			<description>                            Stores the provided JSP context in the protected   jspContext field.
                            
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTag</class-interface>
			<method name = "setJspContext" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.JspContext</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>363</id>
			<description>                            Provides the body of this tag as a JspFragment object, able to be   invoked zero or more times by the tag handler.
                                 This method is invoked by the JSP page implementation   object prior to doTag().
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>SimpleTag</class-interface>
			<method name = "setJspBody" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.JspFragment</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>403</id>
			<description/>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>JspFragment</class-interface>
			<method name = "JspFragment" return-type = "JspFragment"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>404</id>
			<description>Returns the JspContext that is bound to this JspFragment.</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>JspFragment</class-interface>
			<method name = "getJspContext" return-type = "JspContext"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>382</id>
			<description>                            Executes the fragment and directs all output to the given Writer,  or the JspWriter returned by the getOut() method of the JspContext  associated with the fragment if out is null.</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>JspFragment</class-interface>
			<method name = "invoke" return-type = "void">
				<parameters>
					<parameter>java.io.Writer</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>401</id>
			<description>Thrown if an error occured      while invoking this fragment.</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>JspFragment</class-interface>
			<method name = "invoke" return-type = "void">
				<parameters>
					<parameter>java.io.Writer</parameter>
				</parameters>
				<throw>javax.servlet.jsp.JspException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>402</id>
			<description>If there was an error writing to the       stream.</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>JspFragment</class-interface>
			<method name = "invoke" return-type = "void">
				<parameters>
					<parameter>java.io.Writer</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "true">
			<id>364</id>
			<description>                            Executes the fragment and directs all output to the given Writer,  or the JspWriter returned by the getOut() method of the JspContext  associated with the fragment if out is null.</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>JspFragment</class-interface>
			<method name = "invoke" return-type = "void">
				<parameters>
					<parameter>java.io.Writer</parameter>
					<parameter>java.util.Map</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "false">
			<id>365</id>
			<description>Thrown if an error occured      while invoking this fragment.</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>JspFragment</class-interface>
			<method name = "invoke" return-type = "void">
				<parameters>
					<parameter>java.io.Writer</parameter>
					<parameter>java.util.Map</parameter>
				</parameters>
				<throw>javax.servlet.jsp.JspException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "removed" testable = "false">
			<id>366</id>
			<description>If there was an error writing to the       stream.</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>JspFragment</class-interface>
			<method name = "invoke" return-type = "void">
				<parameters>
					<parameter>java.io.Writer</parameter>
					<parameter>java.util.Map</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>367</id>
			<description>Thrown if the page      that (either directly or indirectly) invoked the tag handler that      invoked this fragment is to cease evaluation.  The container      must throw this exception if a Classic Tag Handler returned      Tag.SKIP_PAGE or if a Simple Tag Handler threw SkipPageException.</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>JspFragment</class-interface>
			<method name = "invoke" return-type = "void">
				<parameters>
					<parameter>java.io.Writer</parameter>
				</parameters>
				<throw>javax.servlet.jsp.SkipPageException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>368</id>
			<description>                            Process body (re)evaluation.
                              This method is invoked by the  JSP Page implementation object after every evaluation of  the body into the BodyEvaluation object. The method is  not invoked if there is no body evaluation.
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>IterationTag</class-interface>
			<method name = "doAfterBody" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>369</id>
			<description>                            Process body (re)evaluation.
                              This method is invoked by the  JSP Page implementation object after every evaluation of  the body into the BodyEvaluation object.  If doAfterBody returns EVAL_BODY_AGAIN, a new evaluation of the  body will happen (followed by another invocation of doAfterBody).  
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>IterationTag</class-interface>
			<method name = "doAfterBody" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>386</id>
			<description>                            Process body (re)evaluation.
                              This method is invoked by the  JSP Page implementation object after every evaluation of  the body into the BodyEvaluation object.  If doAfterBody returns SKIP_PAGE no more body evaluations will occur and the doEndTag method will be invoked.
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>IterationTag</class-interface>
			<method name = "doAfterBody" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>370</id>
			<description/>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>IterationTag</class-interface>
			<method name = "doAfterBody" return-type = "int">
				<throw>javax.servlet.jsp.JspException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>371</id>
			<description> 
 The JSP container will resynchronize the values of any AT_BEGIN and NESTED variables (defined by the associated TagExtraInfo or TLD) after the invocation of doAfterBody().
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>IterationTag</class-interface>
			<method name = "doAfterBody" return-type = "int"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>372</id>
			<description>                            Called when a tag declared to accept dynamic attributes is passed  an attribute that is not declared in the Tag Library Descriptor.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>DynamicAttributes</class-interface>
			<method name = "setDynamicAttribute" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>373</id>
			<description>if the tag handler wishes to      signal that it does not accept the given attribute.  The       container must not call doStartTag() or doTag() for this tag.</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>DynamicAttributes</class-interface>
			<method name = "setDynamicAttribute" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
				<throw>javax.servlet.jsp.JspException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>374</id>
			<description>                            Set the bodyContent property.
                              This method is invoked by the JSP page implementation object at  most once per action invocation.  This method will be invoked before doInitBody.  This method will not be invoked for empty tags or for non-empty  tags whose doStartTag() method returns SKIP_BODY or EVAL_BODY_INCLUDE.     When setBodyContent is invoked, the value of the implicit object out  has already been changed in the pageContext object.  The BodyContent  object passed will have not data on it but may have been reused  (and cleared) from some previous invocation.     The BodyContent object is available and with the appropriate content  until after the invocation of the doEndTag method, at which case it  may be reused.
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyTag</class-interface>
			<method name = "setBodyContent" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.tagext.BodyContent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>375</id>
			<description>                            Prepare for evaluation of the body.
                              This method is invoked by the JSP page implementation object  after setBodyContent and before the first time  the body is to be evaluated.
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyTag</class-interface>
			<method name = "doInitBody" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>376</id>
			<description>                            Prepare for evaluation of the body.
                              This method will not be invoked for empty tags or for non-empty  tags whose doStartTag() method returns SKIP_BODY or EVAL_BODY_INCLUDE. 
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyTag</class-interface>
			<method name = "doInitBody" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>377</id>
			<description>The JSP container will resynchronize the values if AT_BEGIN and NESTED variabled (defined by the associated TagExtraInfo or TLD) after the invfocation of doInitBody().</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyTag</class-interface>
			<method name = "doInitBody" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>378</id>
			<description>If an error occurred while processing this tag</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>BodyTag</class-interface>
			<method name = "doInitBody" return-type = "void">
				<throw>javax.servlet.jsp.JspException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>406</id>
			<description>                            The _jspService()method corresponds to the body of the JSP page.
                             This  method is defined automatically by the JSP container and should never  be defined by the JSP page author.    If a superclass is specified using the extends attribute, that  superclass may choose to perform some actions in its service() method  before or after calling the _jspService() method.  See using the extends  attribute in the JSP_Engine chapter of the JSP specification.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>HttpJspPage</class-interface>
			<method name = "_jspService" return-type = "void">
				<parameters>
					<parameter>HttpServletRequest</parameter>
					<parameter>HttpServletResponse</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>407</id>
			<description>Thrown if an error occurred during the       processing of the JSP and that the container should take       appropriate action to clean up the request.</description>
			<package>javax.servlet.jsp</package>
			<class-interface>HttpJspPage</class-interface>
			<method name = "_jspService" return-type = "void">
				<parameters>
					<parameter>HttpServletRequest</parameter>
					<parameter>HttpServletResponse</parameter>
				</parameters>
				<throw>ServletException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>408</id>
			<description>Thrown if an error occurred while writing the      response for this page.</description>
			<package>javax.servlet.jsp</package>
			<class-interface>HttpJspPage</class-interface>
			<method name = "_jspService" return-type = "void">
				<parameters>
					<parameter>HttpServletRequest</parameter>
					<parameter>HttpServletResponse</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>409</id>
			<description>                            Registers a ELContextListeners so that context objects  can be added whenever a new ELContext is created.
                            
                               At a minimum, the ELContext objects created will  contain a reference to the JspContext for this request,  which is added by the JSP container.  This is sufficient for all the  default ELResolvers listed in #addELResolver.  Note that JspContext.class is used as the key to ELContext.putContext()  for the JspContext object reference.   This method is generally used by frameworks and applications that  register their own ELResolver that needs context other  than JspContext. The listener will typically add the  necessary context to the ELContext provided in the  event object. Registering a listener that adds context allows the  ELResolvers in the stack to access the context they  need when they do a resolution.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspApplicationContext</class-interface>
			<method name = "addELContextListener" return-type = "void">
				<parameters>
					<parameter>javax.el.ELContextListener</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>410</id>
			<description>                            Adds an ELResolver to affect the way EL variables  and properties are resolved for EL expressions appearing in JSP pages  and tag files.
                            
                            
                            
                            
                            
                            
                               For example, in the EL expression ${employee.lastName}, an  ELResolver determines what object "employee"  references and how to find its "lastName" property.   When evaluating an expression, the JSP container will consult a  set of standard resolvers as well as any resolvers registered via  this method. The set of resolvers are consulted in the following  order:      javax.servlet.jsp.el.ImplicitObjectELResolver    ELResolvers registered via this method, in the        order in which they are registered.    javax.el.MapELResolverjavax.el.ListELResolverjavax.el.ArrayELResolverjavax.el.BeanELResolverjavax.servlet.jsp.el.ScopedAttributeELResolver     It is illegal to register an ELResolver after the  application has received any request from the client. If an  attempt is made to register an ELResolver after that time,  an IllegalStateException is thrown.  This restriction is  in place to allow the JSP container to optimize for the common  case where no additional ELResolvers are in the chain,  aside from the standard ones. It is permissible to add  ELResolvers before or after initialization to  a CompositeELResolver that is already in the chain.   It is not possible to remove an ELResolver registered  with this method, once it has been registered.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspApplicationContext</class-interface>
			<method name = "addELResolver" return-type = "void">
				<parameters>
					<parameter>javax.el.ELResolver</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>411</id>
			<description>                            Returns a factory used to create ValueExpressions and  MethodExpressions so that EL expressions can be  parsed and evaluated.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspApplicationContext</class-interface>
			<method name = "getExpressionFactory" return-type = "javax.el.ExpressionFactory"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "deprecated" testable = "true">
			<id>412</id>
			<description>                            Returns an instance of a VariableResolver that provides access to the  implicit objects specified in the JSP specification using this JspContext  as the context object.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspContext</class-interface>
			<method name = "getVariableResolver" return-type = "javax.servlet.jsp.el.VariableResolver"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>413</id>
			<description>                            Returns the default factory for this implementation.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspFactory</class-interface>
			<method name = "getDefaultFactory" return-type = "javax.servlet.jsp.JspFactory"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>414</id>
			<description>                              called to get implementation-specific information on the current JSP engine.
                            
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspFactory</class-interface>
			<method name = "getEngineInfo" return-type = "javax.servlet.jsp.JspEngineInfo"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>415</id>
			<description>                            Obtains the JspApplicationContext instance associated  with the web application for the given ServletContext.
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspFactory</class-interface>
			<method name = "getJspApplicationContext" return-type = "javax.servlet.jsp.JspApplicationContext">
				<parameters>
					<parameter>ServletContext</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>416</id>
			<description>                              obtains an instance of an implementation dependent   javax.servlet.jsp.PageContext abstract class for the calling Servlet  and currently pending request and response.
                                   This method is typically called early in the processing of the   _jspService() method of a JSP implementation class in order to   obtain a PageContext object for the request being processed.      Invoking this method shall result in the PageContext.initialize()  method being invoked. The PageContext returned is properly initialized.      All PageContext objects obtained via this method shall be released  by invoking releasePageContext().  
                            
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspFactory</class-interface>
			<method name = "getPageContext" return-type = "javax.servlet.jsp.PageContext">
				<parameters>
					<parameter>Servlet</parameter>
					<parameter>ServletRequest</parameter>
					<parameter>ServletResponse</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>417</id>
			<description>                            Sole constructor.
                             (For invocation by subclass constructors,   typically implicit.)
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspFactory</class-interface>
			<method name = "JspFactory" return-type = "JspFactory"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>418</id>
			<description>                              called to release a previously allocated PageContext object.
                              Results in PageContext.release() being invoked.  This method should be invoked prior to returning from the _jspService() method of a JSP implementation  class.  
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspFactory</class-interface>
			<method name = "releasePageContext" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.PageContext</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>419</id>
			<description>                              set the default factory for this implementation.
                             It is illegal for  any principal other than the JSP Engine runtime to call this method.  
                        
			</description>
			<package>javax.servlet.jsp</package>
			<class-interface>JspFactory</class-interface>
			<method name = "setDefaultFactory" return-type = "void">
				<parameters>
					<parameter>javax.servlet.jsp.JspFactory</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>420</id>
			<description>                            If the base object is null, returns   String.class.
                              Otherwise, returns null.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ImplicitObjectELResolver</class-interface>
			<method name = "getCommonPropertyType" return-type = "java.lang.Class">
				<parameters>
					<parameter>javax.el.ELContext</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>421</id>
			<description>                            If the base object is null, and the property matches  the name of a JSP implicit object, returns an Iterator  containing FeatureDescriptor objects with information  about each JSP implicit object resolved by this resolver.
                            
                            
                            
                             Otherwise,  returns null.   The Iterator returned must contain one instance of   java.beans.FeatureDescriptor for each of the EL implicit objects  defined by the JSP spec. Each info object contains information about   a single implicit object, and is initialized as follows:        displayName - The name of the implicit object.      name - Same as displayName property.      shortDescription - A suitable description for the implicit          object. Will vary by implementation.      expert - false      hidden - false      preferred - true    In addition, the following named attributes must be set in the  returned FeatureDescriptors:        ELResolver#TYPE - The runtime type of the implicit object.      ELResolver#RESOLVABLE_AT_DESIGN_TIME - true.  
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ImplicitObjectELResolver</class-interface>
			<method name = "getFeatureDescriptors" return-type = "java.util.Iterator">
				<parameters>
					<parameter>javax.el.ELContext</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>422</id>
			<description>                            If the base object is null, and the property matches  the name of a JSP implicit object, returns null to  indicate that no types are ever accepted to setValue().
                               The propertyResolved property of the   ELContext object must be set to true by   this resolver before returning if an implicit object is matched. If   this property is not true after this method is called,  the caller should ignore the return value.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ImplicitObjectELResolver</class-interface>
			<method name = "getType" return-type = "java.lang.Class">
				<parameters>
					<parameter>javax.el.ELContext</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>423</id>
			<description>                            If the base object is null, and the property matches  the name of a JSP implicit object, returns the implicit object.
                               The propertyResolved property of the   ELContext object must be set to true by   this resolver before returning if an implicit object is matched. If   this property is not true after this method is called,  the caller should ignore the return value.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ImplicitObjectELResolver</class-interface>
			<method name = "getValue" return-type = "java.lang.Object">
				<parameters>
					<parameter>javax.el.ELContext</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>424</id>
			<description/>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ImplicitObjectELResolver</class-interface>
			<method name = "ImplicitObjectELResolver" return-type = "ImplicitObjectELResolver"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>425</id>
			<description>                            If the base object is null, and the property matches  the name of a JSP implicit object, returns true  to indicate that implicit objects cannot be overwritten.
                               The propertyResolved property of the   ELContext object must be set to true by   this resolver before returning if an implicit object is matched. If   this property is not true after this method is called,  the caller should ignore the return value.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ImplicitObjectELResolver</class-interface>
			<method name = "isReadOnly" return-type = "boolean">
				<parameters>
					<parameter>javax.el.ELContext</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>426</id>
			<description>                            If the base object is null, and the property matches  the name of a JSP implicit object, throws  PropertyNotWritableException to indicate that implicit  objects cannot be overwritten.
                               The propertyResolved property of the   ELContext object must be set to true by   this resolver before returning if an implicit object is matched. If   this property is not true after this method is called,  the caller should ignore the return value.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ImplicitObjectELResolver</class-interface>
			<method name = "setValue" return-type = "void">
				<parameters>
					<parameter>javax.el.ELContext</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>427</id>
			<description>                            If the base object is null, returns   String.class.
                              Otherwise, returns null.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ScopedAttributeELResolver</class-interface>
			<method name = "getCommonPropertyType" return-type = "java.lang.Class">
				<parameters>
					<parameter>javax.el.ELContext</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>428</id>
			<description>                            If the base object is null, returns an   Iterator containing FeatureDescriptor objects   with information about each scoped attribute resolved by this   resolver.
                            
                            
                            
                             Otherwise, returns null.   The Iterator returned must contain one instance of   java.beans.FeatureDescriptor for each scoped attribute found in  any scope. Each info object contains information about   a single scoped attribute, and is initialized as follows:         displayName - The name of the scoped attribute.      name - Same as displayName property.      shortDescription - A suitable description for the scoped          attribute. Should include the attribute's current scope          (page, request, session, application). Will vary by           implementation.      expert - false      hidden - false      preferred - true    In addition, the following named attributes must be set in the  returned FeatureDescriptors:        ELResolver#TYPE - The current runtime type of the scoped attribute.      ELResolver#RESOLVABLE_AT_DESIGN_TIME - true.  
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ScopedAttributeELResolver</class-interface>
			<method name = "getFeatureDescriptors" return-type = "java.util.Iterator">
				<parameters>
					<parameter>javax.el.ELContext</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>429</id>
			<description>                            If the base object is null, returns   Object.class to indicate that any type is valid to  set for a scoped attribute.
                               The propertyResolved property of the   ELContext object must be set to true by   this resolver before returning if base is null. If   this property is not true after this method is called,  the caller should ignore the return value.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ScopedAttributeELResolver</class-interface>
			<method name = "getType" return-type = "java.lang.Class">
				<parameters>
					<parameter>javax.el.ELContext</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>430</id>
			<description>                            If the base object is null, searches the page,   request, session and application scopes for an attribute with  the given name and returns it, or null if no  attribute exists with the current name.
                               The propertyResolved property of the   ELContext object must be set to true by   this resolver before returning if base is null. If   this property is not true after this method is called,  the caller should ignore the return value.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ScopedAttributeELResolver</class-interface>
			<method name = "getValue" return-type = "java.lang.Object">
				<parameters>
					<parameter>javax.el.ELContext</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>431</id>
			<description>                            If the base object is null, returns false  to indicate that scoped attributes are never read-only.
                               The propertyResolved property of the   ELContext object must be set to true by   this resolver before returning if base is null. If   this property is not true after this method is called,  the caller should ignore the return value.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ScopedAttributeELResolver</class-interface>
			<method name = "isReadOnly" return-type = "boolean">
				<parameters>
					<parameter>javax.el.ELContext</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>432</id>
			<description/>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ScopedAttributeELResolver</class-interface>
			<method name = "ScopedAttributeELResolver" return-type = "ScopedAttributeELResolver"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>433</id>
			<description>                            If the base object is null, sets an existing scoped  attribute to the new value, or creates a new scoped attribute if one  does not exist by this name.
                               If the provided attribute name matches the key of an attribute   in page scope, request scope, session scope, or application scope, the   corresponding attribute value will be replaced by the provided value.  Otherwise, a new page scope attribute will be created with the  given name and value.   The propertyResolved property of the   ELContext object must be set to true by   this resolver before returning if base is null. If   this property is not true after this method is called,  the caller should ignore the return value.
                        
			</description>
			<package>javax.servlet.jsp.el</package>
			<class-interface>ScopedAttributeELResolver</class-interface>
			<method name = "setValue" return-type = "void">
				<parameters>
					<parameter>javax.el.ELContext</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>434</id>
			<description>                            Called by the container generated code to set a value for the  jspId attribute.
                              An unique identification string, relative to  this page, is generated at translation time.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>JspIdConsumer</class-interface>
			<method name = "setJspId" return-type = "void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>435</id>
			<description>                            JSP 2.1 Constructor for TagAttributeInfo.
                              This class is to be instantiated only from the  TagLibrary code under request from some JSP code that is parsing a  TLD (Tag Library Descriptor).
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAttributeInfo</class-interface>
			<method name = "TagAttributeInfo" return-type = "TagAttributeInfo">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
					<parameter>boolean</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
					<parameter>boolean</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>436</id>
			<description>                            Returns true if this attribute is to be passed a  ValueExpression so that expression evaluation  can be deferred.
                               If this method returns true, then  getTypeName() must return  "javax.el.ValueExpression".   The getExpectedType() method can be used to retrieve  the expected type this value expression will be constructed with.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAttributeInfo</class-interface>
			<method name = "isDeferredValue" return-type = "boolean"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>437</id>
			<description>                            Returns true if this attribute is to be passed a  MethodExpression so that expression evaluation  can be deferred.
                               If this method returns true, then  getTypeName() must return  "javax.el.MethodExpression".   The getMethodSignature() method can be used to retrieve  the expected method signature this method expression will be  constructed with.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAttributeInfo</class-interface>
			<method name = "isDeferredMethod" return-type = "boolean"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>438</id>
			<description>                            Returns the name of the expected type (as a String) of this  deferred value attribute.
                               This method returns null if  isDeferredValue() returns false.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAttributeInfo</class-interface>
			<method name = "getExpectedTypeName" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>439</id>
			<description>                            Returns the expected method signature of this deferred method attribute.
                               This method returns null if  isDeferredMethod() returns false.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagAttributeInfo</class-interface>
			<method name = "getMethodSignature" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>440</id>
			<description>                            Returns an array of TagLibraryInfo objects representing the entire set  of tag libraries (including this TagLibraryInfo) imported by taglib  directives in the translation unit that references this  TagLibraryInfo.
                               If a tag library is imported more than once and bound to different  prefices, only the TagLibraryInfo bound to the first prefix must be  included in the returned array.
                        
			</description>
			<package>javax.servlet.jsp.tagext</package>
			<class-interface>TagLibraryInfo</class-interface>
			<method name = "getTagLibraryInfos" return-type = "javax.servlet.jsp.tagext.TagLibraryInfo[]"/>
		</assertion>
	</assertions>
</javadoc>


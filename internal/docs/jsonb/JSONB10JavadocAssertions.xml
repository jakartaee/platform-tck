<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE javadoc SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/javadoc_assertions.dtd">
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<javadoc>
  <next-available-id>82</next-available-id>
  <previous-id>1</previous-id>
  <technology>JSONB</technology>
  <id>JSONB 1.0</id>
  <name>JSONB 1.0</name>
  <version>1.0</version>
  <assertions>
    <!-- ********************************************************************************** -->
    <!-- ********************************************************************************** -->
    <!-- ********************************************************************************** -->
    <!-- COMMON ASSERTIONS LISTED BELOW -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>1</id>
      <description>Reads in a JSON data from the specified string and return the resulting content tree.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="fromJson" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>2</id>
      <description>If any unexpected error(s) occur(s) during deserialization.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="fromJson" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>javax.json.bind.JsonbException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>3</id>
      <description>Reads in a JSON data from the specified string and return the resulting content tree.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="fromJson" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.reflect.Type</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>4</id>
      <description>If any unexpected error(s) occur(s) during deserialization.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="fromJson" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.reflect.Type</parameter>
        </parameters>
        <throw>javax.json.bind.JsonbException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>5</id>
      <description>Reads in a JSON data from the specified Reader and return the resulting content tree.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="fromJson" return-type="java.lang.Object">
        <parameters>
          <parameter>java.io.Reader</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>6</id>
      <description>If any unexpected error(s) occur(s) during deserialization.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="fromJson" return-type="java.lang.Object">
        <parameters>
          <parameter>java.io.Reader</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>javax.json.bind.JsonbException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>7</id>
      <description>Reads in a JSON data from the specified Reader and return the resulting content tree.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="fromJson" return-type="java.lang.Object">
        <parameters>
          <parameter>java.io.Reader</parameter>
          <parameter>java.lang.reflect.Type</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>8</id>
      <description>If any unexpected error(s) occur(s) during deserialization.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="fromJson" return-type="java.lang.Object">
        <parameters>
          <parameter>java.io.Reader</parameter>
          <parameter>java.lang.reflect.Type</parameter>
        </parameters>
        <throw>javax.json.bind.JsonbException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>9</id>
      <description>Reads in a JSON data from the specified InputStream and return the resulting content tree.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="fromJson" return-type="java.lang.Object">
        <parameters>
          <parameter>java.io.InputStream</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>10</id>
      <description>If any unexpected error(s) occur(s) during deserialization.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="fromJson" return-type="java.lang.Object">
        <parameters>
          <parameter>java.io.InputStream</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>javax.json.bind.JsonbException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>11</id>
      <description>Reads in a JSON data from the specified InputStream and return the resulting content tree.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="fromJson" return-type="java.lang.Object">
        <parameters>
          <parameter>java.io.InputStream</parameter>
          <parameter>java.lang.reflect.Type</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>12</id>
      <description>If any unexpected error(s) occur(s) during deserialization.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="fromJson" return-type="java.lang.Object">
        <parameters>
          <parameter>java.io.InputStream</parameter>
          <parameter>java.lang.reflect.Type</parameter>
        </parameters>
        <throw>javax.json.bind.JsonbException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>13</id>
      <description>Writes the Java object tree with root object object to a String instance as JSON.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="toJson" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>14</id>
      <description>If any unexpected problem occurs during the serialization, such as I/O error.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="toJson" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>javax.json.bind.JsonbException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>15</id>
      <description>Writes the Java object tree with root object object to a String instance as JSON.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="toJson" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.reflect.Type</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>16</id>
      <description>If any unexpected problem occurs during the serialization, such as I/O error.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="toJson" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.reflect.Type</parameter>
        </parameters>
        <throw>javax.json.bind.JsonbException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>17</id>
      <description>Writes the object content tree into a Writer character stream.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="toJson" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.io.Writer</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>18</id>
      <description>If any unexpected problem occurs during the serialization.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="toJson" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.io.Writer</parameter>
        </parameters>
        <throw>javax.json.bind.JsonbException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>19</id>
      <description>Writes the object content tree into a Writer character stream.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="toJson" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.reflect.Type</parameter>
          <parameter>java.io.Writer</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>20</id>
      <description>If any unexpected problem occurs during the serialization.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="toJson" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.reflect.Type</parameter>
          <parameter>java.io.Writer</parameter>
        </parameters>
        <throw>javax.json.bind.JsonbException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>21</id>
      <description>Writes the object content tree into output stream.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="toJson" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.io.OutputStream</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>22</id>
      <description>If any unexpected problem occurs during the serialization.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="toJson" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.io.OutputStream</parameter>
        </parameters>
        <throw>javax.json.bind.JsonbException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>23</id>
      <description>Writes the object content tree into output stream.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="toJson" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.reflect.Type</parameter>
          <parameter>java.io.OutputStream</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>24</id>
      <description>If any unexpected problem occurs during the serialization.</description>
      <package>javax.json.bind</package>
      <class-interface>Jsonb</class-interface>
      <method name="toJson" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.reflect.Type</parameter>
          <parameter>java.io.OutputStream</parameter>
        </parameters>
        <throw>javax.json.bind.JsonbException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>25</id>
      <description>Returns a new instance of javax.json.bind.Jsonb Jsonb based on the parameters and configuration specified previously in this builder.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbBuilder</class-interface>
      <method name="build" return-type="javax.json.bind.Jsonb" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>26</id>
      <description>Create a new javax.json.bind.Jsonb instance using the default JsonbBuilder implementation provided as returned from javax.json.bind.spi.JsonbProvider#provider() method.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbBuilder</class-interface>
      <method name="create" return-type="javax.json.bind.Jsonb" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>27</id>
      <description>Create a new javax.json.bind.Jsonb instance using the default JsonbBuilder implementation provided as returned from javax.json.bind.spi.JsonbProvider#provider() method, configured with provided configuration.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbBuilder</class-interface>
      <method name="create" return-type="javax.json.bind.Jsonb">
        <parameters>
          <parameter>javax.json.bind.JsonbConfig</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>28</id>
      <description>Create a new JsonbBuilder instance as returned by the default javax.json.bind.spi.JsonbProvider#provider() method.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbBuilder</class-interface>
      <method name="newBuilder" return-type="javax.json.bind.JsonbBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>29</id>
      <description>Create a new JsonbBuilder instance as returned by javax.json.bind.spi.JsonbProvider#provider(String) method.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbBuilder</class-interface>
      <method name="newBuilder" return-type="javax.json.bind.JsonbBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>30</id>
      <description>Create a new JsonbBuilder instance as returned by provider#create call.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbBuilder</class-interface>
      <method name="newBuilder" return-type="javax.json.bind.JsonbBuilder">
        <parameters>
          <parameter>javax.json.bind.spi.JsonbProvider</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>31</id>
      <description>Set configuration which will be set to the newly created javax.json.bind.Jsonb Jsonb instance.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbBuilder</class-interface>
      <method name="withConfig" return-type="javax.json.bind.JsonbBuilder">
        <parameters>
          <parameter>javax.json.bind.JsonbConfig</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>32</id>
      <description>Provides a JSON-P provider to be used for all JSON-P related operations.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbBuilder</class-interface>
      <method name="withProvider" return-type="javax.json.bind.JsonbBuilder">
        <parameters>
          <parameter>JsonProvider</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>33</id>
      <description>Return all configuration properties as an unmodifiable map.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbConfig</class-interface>
      <method name="getAsMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>34</id>
      <description>Return value of particular configuration property. The method can only be used to retrieve one of the standard JSON Binding properties defined in this class or a provider specific property. Attempting to get an undefined property will result in an empty Optional value. See Supported Properties.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbConfig</class-interface>
      <method name="getProperty" return-type="java.util.Optional">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>35</id>
      <description />
      <package>javax.json.bind</package>
      <class-interface>JsonbConfig</class-interface>
      <method name="JsonbConfig" return-type="JsonbConfig" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>36</id>
      <description>Set the particular configuration property to a new value. The method can only be used to set one of the standard JSON Binding properties defined in this class or a provider specific property.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbConfig</class-interface>
      <method name="setProperty" return-type="javax.json.bind.JsonbConfig">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>37</id>
      <description>Property used to specify custom mapping adapters. Configures value of ADAPTERS property. Calling withAdapters more than once will merge the adapters with previous value.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbConfig</class-interface>
      <method name="withAdapters" return-type="javax.json.bind.JsonbConfig">
        <parameters>
          <parameter>javax.json.bind.adapter.JsonbAdapter[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>38</id>
      <description>Property used to specify custom binary data strategy. Configures value of BINARY_DATA_STRATEGY property.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbConfig</class-interface>
      <method name="withBinaryDataStrategy" return-type="javax.json.bind.JsonbConfig">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>39</id>
      <description>Property used to specify custom date format. This format will be used by default for all date classes serialization and deserialization.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbConfig</class-interface>
      <method name="withDateFormat" return-type="javax.json.bind.JsonbConfig">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Locale</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>40</id>
      <description>Property used to specify custom deserializers. Configures value of DESERIALIZERS property. Calling withDeserializers more than once will merge the deserializers with previous value.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbConfig</class-interface>
      <method name="withDeserializers" return-type="javax.json.bind.JsonbConfig">
        <parameters>
          <parameter>javax.json.bind.serializer.JsonbDeserializer[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>41</id>
      <description>The binding operations will default to this property for encoding of JSON data. For input data (fromJson), selected encoding is used if the encoding cannot be detected automatically. Default value is 'UTF-8'. Configures value of ENCODING property.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbConfig</class-interface>
      <method name="withEncoding" return-type="javax.json.bind.JsonbConfig">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>42</id>
      <description>Property used to specify whether or not the serialized JSON data is formatted with linefeeds and indentation. Configures value of FORMATTING property.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbConfig</class-interface>
      <method name="withFormatting" return-type="javax.json.bind.JsonbConfig">
        <parameters>
          <parameter>java.lang.Boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>43</id>
      <description>Property used to specify custom locale.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbConfig</class-interface>
      <method name="withLocale" return-type="javax.json.bind.JsonbConfig">
        <parameters>
          <parameter>java.util.Locale</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>44</id>
      <description>Property used to specify whether null values should be serialized to JSON document or skipped. Configures value of NULL_VALUES property.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbConfig</class-interface>
      <method name="withNullValues" return-type="javax.json.bind.JsonbConfig">
        <parameters>
          <parameter>java.lang.Boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>45</id>
      <description>Property used to specify custom naming strategy. Configures value of JSONB_PROPERTY_NAMING_STRATEGY property.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbConfig</class-interface>
      <method name="withPropertyNamingStrategy" return-type="javax.json.bind.JsonbConfig">
        <parameters>
          <parameter>javax.json.bind.config.PropertyNamingStrategy</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>46</id>
      <description>Property used to specify custom naming strategy. Configures value of JSONB_PROPERTY_NAMING_STRATEGY property.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbConfig</class-interface>
      <method name="withPropertyNamingStrategy" return-type="javax.json.bind.JsonbConfig">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>47</id>
      <description>Property used to specify property order strategy. Configures values of JSONB_PROPERTY_ORDER_STRATEGY property.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbConfig</class-interface>
      <method name="withPropertyOrderStrategy" return-type="javax.json.bind.JsonbConfig">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>48</id>
      <description>Property used to specify custom property visibility strategy. Configures value of PROPERTY_VISIBILITY_STRATEGY property.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbConfig</class-interface>
      <method name="withPropertyVisibilityStrategy" return-type="javax.json.bind.JsonbConfig">
        <parameters>
          <parameter>javax.json.bind.config.PropertyVisibilityStrategy</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>49</id>
      <description>Property used to specify custom serializers. Configures value of SERIALIZERS property. Calling withSerializers more than once will merge the serializers with previous value.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbConfig</class-interface>
      <method name="withSerializers" return-type="javax.json.bind.JsonbConfig">
        <parameters>
          <parameter>javax.json.bind.serializer.JsonbSerializer[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>50</id>
      <description>Property used to specify whether strict I-JSON serialization compliance should be enforced. Configures value of STRICT_IJSON property.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbConfig</class-interface>
      <method name="withStrictIJSON" return-type="javax.json.bind.JsonbConfig">
        <parameters>
          <parameter>java.lang.Boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>51</id>
      <description>Constructs a new runtime exception with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to #initCause.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbException</class-interface>
      <method name="JsonbException" return-type="JsonbException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>52</id>
      <description>Constructs a new runtime exception with the specified detail message and cause. Note that the detail message associated with cause is not automatically incorporated in this runtime exception's detail message.</description>
      <package>javax.json.bind</package>
      <class-interface>JsonbException</class-interface>
      <method name="JsonbException" return-type="JsonbException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>53</id>
      <description>This method is used on deserialization only. It contains a conversion logic from type Adapted to type Original.</description>
      <package>javax.json.bind.adapter</package>
      <class-interface>JsonbAdapter</class-interface>
      <method name="adaptFromJson" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>54</id>
      <description>if there is an error during the conversion.</description>
      <package>javax.json.bind.adapter</package>
      <class-interface>JsonbAdapter</class-interface>
      <method name="adaptFromJson" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.Exception</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>55</id>
      <description>This method is used on serialization only. It contains a conversion logic from type Original to type Adapted. After conversion Adapted type will be mapped to JSON the standard way.</description>
      <package>javax.json.bind.adapter</package>
      <class-interface>JsonbAdapter</class-interface>
      <method name="adaptToJson" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>56</id>
      <description>if there is an error during the conversion.</description>
      <package>javax.json.bind.adapter</package>
      <class-interface>JsonbAdapter</class-interface>
      <method name="adaptToJson" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.Exception</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>57</id>
      <description>Custom java.util.Locale to use.</description>
      <package>javax.json.bind.annotation</package>
      <class-interface>JsonbDateFormat</class-interface>
      <method name="locale" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>58</id>
      <description>Specifies the date pattern to use.</description>
      <package>javax.json.bind.annotation</package>
      <class-interface>JsonbDateFormat</class-interface>
      <method name="value" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>59</id>
      <description>True if field with null value should be serialized as key/value pair into JSON with null value.</description>
      <package>javax.json.bind.annotation</package>
      <class-interface>JsonbNillable</class-interface>
      <method name="value" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>60</id>
      <description>Custom java.util.Locale to use.</description>
      <package>javax.json.bind.annotation</package>
      <class-interface>JsonbNumberFormat</class-interface>
      <method name="locale" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>61</id>
      <description>Specifies the number pattern to use.</description>
      <package>javax.json.bind.annotation</package>
      <class-interface>JsonbNumberFormat</class-interface>
      <method name="value" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>62</id>
      <description>True if field with null value should be serialized as key/value pair into JSON with null value.</description>
      <package>javax.json.bind.annotation</package>
      <class-interface>JsonbProperty</class-interface>
      <method name="nillable" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>63</id>
      <description>Customized name of the field (or JavaBean property).</description>
      <package>javax.json.bind.annotation</package>
      <class-interface>JsonbProperty</class-interface>
      <method name="value" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>64</id>
      <description>Order in which properties are serialized. Names must correspond to original names defined in Java class before any customization applied.</description>
      <package>javax.json.bind.annotation</package>
      <class-interface>JsonbPropertyOrder</class-interface>
      <method name="value" return-type="java.lang.String[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>65</id>
      <description>Custom JsonbAdapter which provides custom mapping for given field or JavaBean property.</description>
      <package>javax.json.bind.annotation</package>
      <class-interface>JsonbTypeAdapter</class-interface>
      <method name="value" return-type="java.lang.Class" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>66</id>
      <description>Custom JsonbDeserializer which provides custom mapping for given field or JavaBean property.</description>
      <package>javax.json.bind.annotation</package>
      <class-interface>JsonbTypeDeserializer</class-interface>
      <method name="value" return-type="java.lang.Class" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>67</id>
      <description>Custom JsonbSerializer which provides custom mapping for given field or JavaBean property.</description>
      <package>javax.json.bind.annotation</package>
      <class-interface>JsonbTypeSerializer</class-interface>
      <method name="value" return-type="java.lang.Class" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>68</id>
      <description>Custom property visibility strategy used to resolve visibility of the members.</description>
      <package>javax.json.bind.annotation</package>
      <class-interface>JsonbVisibility</class-interface>
      <method name="value" return-type="java.lang.Class" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>69</id>
      <description>Translates the property name into its JSON field name representation.</description>
      <package>javax.json.bind.config</package>
      <class-interface>PropertyNamingStrategy</class-interface>
      <method name="translateName" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>70</id>
      <description>Responds whether the given field should be considered as the JsonbProperty.</description>
      <package>javax.json.bind.config</package>
      <class-interface>PropertyVisibilityStrategy</class-interface>
      <method name="isVisible" return-type="boolean">
        <parameters>
          <parameter>java.lang.reflect.Field</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>71</id>
      <description>Responds whether the given method should be considered as the JsonbProperty.</description>
      <package>javax.json.bind.config</package>
      <class-interface>PropertyVisibilityStrategy</class-interface>
      <method name="isVisible" return-type="boolean">
        <parameters>
          <parameter>java.lang.reflect.Method</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>72</id>
      <description>Deserialize JSON stream into instance of provided class using javax.json.stream.JsonParser. JsonParser cursor have to be at KEY_NAME before START_OBJECT / START_ARRAY, or at START_OBJECT / START_ARRAY to call this method. After deserialization is complete JsonParser will be at END_OBJECT / END_ARRAY for deserialized JSON structure. If method is called for the same type, which is deserializer bound to, deserializer recursion is suppressed. Otherwise deserializers are reentrant during deserialization process started by this method. JsonParser instance of JSONB runtime is shared with custom deserializer.</description>
      <package>javax.json.bind.serializer</package>
      <class-interface>DeserializationContext</class-interface>
      <method name="deserialize" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>JsonParser</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>73</id>
      <description>Deserialize JSON stream into instance of provided class using javax.json.stream.JsonParser. JsonParser cursor have to be at KEY_NAME before START_OBJECT / START_ARRAY, or at START_OBJECT / START_ARRAY to call this method. After deserialization is complete JsonParser will be at END_OBJECT / END_ARRAY for deserialized JSON structure. If method is called for the same type, which is deserializer bound to, deserializer recursion is suppressed. Otherwise deserializers are reentrant during deserialization process started by this method. JsonParser instance of JSONB runtime is shared with custom deserializer.</description>
      <package>javax.json.bind.serializer</package>
      <class-interface>DeserializationContext</class-interface>
      <method name="deserialize" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.reflect.Type</parameter>
          <parameter>JsonParser</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>74</id>
      <description>Deserialize JSON stream into object.</description>
      <package>javax.json.bind.serializer</package>
      <class-interface>JsonbDeserializer</class-interface>
      <method name="deserialize" return-type="java.lang.Object">
        <parameters>
          <parameter>JsonParser</parameter>
          <parameter>javax.json.bind.serializer.DeserializationContext</parameter>
          <parameter>java.lang.reflect.Type</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>75</id>
      <description>Serializes object into JSON stream.</description>
      <package>javax.json.bind.serializer</package>
      <class-interface>JsonbSerializer</class-interface>
      <method name="serialize" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>JsonGenerator</parameter>
          <parameter>javax.json.bind.serializer.SerializationContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>76</id>
      <description>Serializes arbitrary object to JSON, using current javax.json.stream.JsonGenerator instance. Serialization is ran as serialization of a root type from user JsonbSerializer. JsonGenerator instance is shared with JSONB and user serializer.</description>
      <package>javax.json.bind.serializer</package>
      <class-interface>SerializationContext</class-interface>
      <method name="serialize" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>JsonGenerator</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>77</id>
      <description>Serializes arbitrary object to JSON, using current javax.json.stream.JsonGenerator instance. Serialization is ran as serialization of a root type from user JsonbSerializer. JsonGenerator instance is shared with JSONB and user serializer. Method without key parameter is intended to serialize inside JSON_ARRAYs.</description>
      <package>javax.json.bind.serializer</package>
      <class-interface>SerializationContext</class-interface>
      <method name="serialize" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>JsonGenerator</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>78</id>
      <description>Returns a new instance of javax.json.bind.JsonbBuilder JsonbBuilder class. javax.json.bind.JsonbBuilder JsonbBuilder provides necessary getter methods to access required parameters.</description>
      <package>javax.json.bind.spi</package>
      <class-interface>JsonbProvider</class-interface>
      <method name="create" return-type="javax.json.bind.JsonbBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>80</id>
      <description>Creates a JSON Binding provider object by using the java.util.ServiceLoader#load(Class) method. The first provider of JsonbProvider class from list of providers returned by ServiceLoader.load call is returned. If there are no available service providers, this method tries to load the default service provider using Class#forName(String) method.</description>
      <package>javax.json.bind.spi</package>
      <class-interface>JsonbProvider</class-interface>
      <method name="provider" return-type="javax.json.bind.spi.JsonbProvider" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>81</id>
      <description>Creates a JSON Binding provider object by using the java.util.ServiceLoader#load(Class) method, matching providerName. The first provider of JsonbProvider class from list of providers returned by ServiceLoader.load call, matching providerName is returned. If no such provider is found, JsonbException is thrown.</description>
      <package>javax.json.bind.spi</package>
      <class-interface>JsonbProvider</class-interface>
      <method name="provider" return-type="javax.json.bind.spi.JsonbProvider">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
  </assertions>
</javadoc>


<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE javadoc SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/javadoc_assertions.dtd">
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<javadoc>
<next-available-id>602</next-available-id>
<previous-id>599</previous-id>
<technology>JMS</technology>
<id>JMS 1.0.2b</id>
<name>Java API for Java Messaging System</name>
<version>1.0</version>
<assertions>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:1</id>
<description>
                            Constructs an &lt;CODE&gt;IllegalStateException&lt;/CODE&gt; with the specified reason   and error code.
                        </description>
<package>javax.jms</package>
<class-interface>IllegalStateException</class-interface>
<method name="IllegalStateException" return-type="IllegalStateException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:2</id>
<description>
                            Constructs an &lt;CODE&gt;IllegalStateException&lt;/CODE&gt; with the specified    reason.
                             The error code defaults to null.
                        </description>
<package>javax.jms</package>
<class-interface>IllegalStateException</class-interface>
<method name="IllegalStateException" return-type="IllegalStateException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:3</id>
<description>
                            Constructs a &lt;CODE&gt;ResourceAllocationException&lt;/CODE&gt; with the specified    reason and error code.
                        </description>
<package>javax.jms</package>
<class-interface>ResourceAllocationException</class-interface>
<method name="ResourceAllocationException" return-type="ResourceAllocationException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:4</id>
<description>
                            Constructs a &lt;CODE&gt;ResourceAllocationException&lt;/CODE&gt; with the specified    reason.
                             The error code defaults to null.
                        </description>
<package>javax.jms</package>
<class-interface>ResourceAllocationException</class-interface>
<method name="ResourceAllocationException" return-type="ResourceAllocationException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:5</id>
<description>
                            Constructs a &lt;CODE&gt;MessageFormatException&lt;/CODE&gt; with the specified    reason and error code.
                        </description>
<package>javax.jms</package>
<class-interface>MessageFormatException</class-interface>
<method name="MessageFormatException" return-type="MessageFormatException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:6</id>
<description>
                            Constructs a &lt;CODE&gt;MessageFormatException&lt;/CODE&gt; with the specified    reason.
                             The error code defaults to null.
                        </description>
<package>javax.jms</package>
<class-interface>MessageFormatException</class-interface>
<method name="MessageFormatException" return-type="MessageFormatException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:7</id>
<description>
                            Constructs a &lt;CODE&gt;TransactionInProgressException&lt;/CODE&gt; with the    specified reason and error code.
                        </description>
<package>javax.jms</package>
<class-interface>TransactionInProgressException</class-interface>
<method name="TransactionInProgressException" return-type="TransactionInProgressException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:8</id>
<description>
                            Constructs a &lt;CODE&gt;TransactionInProgressException&lt;/CODE&gt; with the    specified reason.
                             The error code defaults to null.
                        </description>
<package>javax.jms</package>
<class-interface>TransactionInProgressException</class-interface>
<method name="TransactionInProgressException" return-type="TransactionInProgressException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:9</id>
<description>
                            Constructs a &lt;CODE&gt;TransactionRolledBackException&lt;/CODE&gt; with the    specified reason and error code.
                        </description>
<package>javax.jms</package>
<class-interface>TransactionRolledBackException</class-interface>
<method name="TransactionRolledBackException" return-type="TransactionRolledBackException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:10</id>
<description>
                            Constructs a &lt;CODE&gt;TransactionRolledBackException&lt;/CODE&gt; with the    specified reason.
                             The error code defaults to null.
                        </description>
<package>javax.jms</package>
<class-interface>TransactionRolledBackException</class-interface>
<method name="TransactionRolledBackException" return-type="TransactionRolledBackException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:11</id>
<description>
                            Constructs an &lt;CODE&gt;InvalidSelectorException&lt;/CODE&gt; with the specified    reason and error code.
                        </description>
<package>javax.jms</package>
<class-interface>InvalidSelectorException</class-interface>
<method name="InvalidSelectorException" return-type="InvalidSelectorException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:12</id>
<description>
                            Constructs an &lt;CODE&gt;InvalidSelectorException&lt;/CODE&gt; with the specified    reason.
                             The error code defaults to null.
                        </description>
<package>javax.jms</package>
<class-interface>InvalidSelectorException</class-interface>
<method name="InvalidSelectorException" return-type="InvalidSelectorException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:13</id>
<description>
                            Constructs an &lt;CODE&gt;InvalidDestinationException&lt;/CODE&gt; with the specified    reason and error code.
                        </description>
<package>javax.jms</package>
<class-interface>InvalidDestinationException</class-interface>
<method name="InvalidDestinationException" return-type="InvalidDestinationException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:14</id>
<description>
                            Constructs an &lt;CODE&gt;InvalidDestinationException&lt;/CODE&gt; with the specified    reason.
                             The error code defaults to null.
                        </description>
<package>javax.jms</package>
<class-interface>InvalidDestinationException</class-interface>
<method name="InvalidDestinationException" return-type="InvalidDestinationException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:15</id>
<description>
                            Constructs a &lt;CODE&gt;MessageEOFException&lt;/CODE&gt; with the specified    reason and error code.
                        </description>
<package>javax.jms</package>
<class-interface>MessageEOFException</class-interface>
<method name="MessageEOFException" return-type="MessageEOFException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:16</id>
<description>
                            Constructs a &lt;CODE&gt;MessageEOFException&lt;/CODE&gt; with the specified    reason.
                             The error code defaults to null.
                        </description>
<package>javax.jms</package>
<class-interface>MessageEOFException</class-interface>
<method name="MessageEOFException" return-type="MessageEOFException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:17</id>
<description>
                            Constructs a &lt;CODE&gt;MessageNotWriteableException&lt;/CODE&gt; with the specified    reason and error code.
                        </description>
<package>javax.jms</package>
<class-interface>MessageNotWriteableException</class-interface>
<method name="MessageNotWriteableException" return-type="MessageNotWriteableException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:18</id>
<description>
                            Constructs a &lt;CODE&gt;MessageNotWriteableException&lt;/CODE&gt; with the specified    reason.
                             The error code defaults to null.
                        </description>
<package>javax.jms</package>
<class-interface>MessageNotWriteableException</class-interface>
<method name="MessageNotWriteableException" return-type="MessageNotWriteableException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:19</id>
<description>
                            Constructs an &lt;CODE&gt;InvalidClientIDException&lt;/CODE&gt; with the specified    reason and error code.
                        </description>
<package>javax.jms</package>
<class-interface>InvalidClientIDException</class-interface>
<method name="InvalidClientIDException" return-type="InvalidClientIDException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:20</id>
<description>
                            Constructs an &lt;CODE&gt;InvalidClientIDException&lt;/CODE&gt; with the specified    reason.
                             The error code defaults to null.
                        </description>
<package>javax.jms</package>
<class-interface>InvalidClientIDException</class-interface>
<method name="InvalidClientIDException" return-type="InvalidClientIDException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:21</id>
<description>
                            Constructs a &lt;CODE&gt;JMSSecurityException&lt;/CODE&gt; with the specified    reason and error code.
                        </description>
<package>javax.jms</package>
<class-interface>JMSSecurityException</class-interface>
<method name="JMSSecurityException" return-type="JMSSecurityException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:22</id>
<description>
                            Constructs a &lt;CODE&gt;JMSSecurityException&lt;/CODE&gt; with the specified    reason.
                             The error code defaults to null.
                        </description>
<package>javax.jms</package>
<class-interface>JMSSecurityException</class-interface>
<method name="JMSSecurityException" return-type="JMSSecurityException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:23</id>
<description>
                            Constructs a &lt;CODE&gt;MessageNotReadableException&lt;/CODE&gt; with the specified    reason and error code.
                        </description>
<package>javax.jms</package>
<class-interface>MessageNotReadableException</class-interface>
<method name="MessageNotReadableException" return-type="MessageNotReadableException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:24</id>
<description>
                            Constructs a &lt;CODE&gt;MessageNotReadableException&lt;/CODE&gt; with the specified    reason.
                             The error code defaults to null.
                        </description>
<package>javax.jms</package>
<class-interface>MessageNotReadableException</class-interface>
<method name="MessageNotReadableException" return-type="MessageNotReadableException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:25</id>
<description>
                            Constructor for the &lt;CODE&gt;QueueRequestor&lt;/CODE&gt; class.
                                 &lt;P&gt;This implementation assumes the session parameter to be non-transacted,  with a delivery mode of either &lt;CODE&gt;AUTO_ACKNOWLEDGE&lt;/CODE&gt; or   &lt;CODE&gt;DUPS_OK_ACKNOWLEDGE&lt;/CODE&gt;.
                        </description>
<package>javax.jms</package>
<class-interface>QueueRequestor</class-interface>
<method name="QueueRequestor" return-type="QueueRequestor">
<parameters>
<parameter>jakarta.jms.QueueSession</parameter>
<parameter>jakarta.jms.Queue</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:26</id>
<description>
                            Sends a request and waits for a reply.
                             The temporary queue is used for  the &lt;CODE&gt;JMSReplyTo&lt;/CODE&gt; destination, and only one reply per request   is expected.
                        </description>
<package>javax.jms</package>
<class-interface>QueueRequestor</class-interface>
<method name="request" return-type="jakarta.jms.Message">
<parameters>
<parameter>jakarta.jms.Message</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:27</id>
<description>if the JMS provider fails to complete the                          request due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueRequestor</class-interface>
<method name="request" return-type="jakarta.jms.Message">
<parameters>
<parameter>jakarta.jms.Message</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:28</id>
<description>
                            Closes the &lt;CODE&gt;QueueRequestor&lt;/CODE&gt; and its session.
                               &lt;P&gt;Since a provider may allocate some resources on behalf of a   &lt;CODE&gt;QueueRequestor&lt;/CODE&gt; outside the Java virtual machine, clients   should close them when they   are not needed. Relying on garbage collection to eventually reclaim   these resources may not be timely enough.     &lt;P&gt;Note that this method closes the &lt;CODE&gt;QueueSession&lt;/CODE&gt; object   passed to the &lt;CODE&gt;QueueRequestor&lt;/CODE&gt; constructor.
                        </description>
<package>javax.jms</package>
<class-interface>QueueRequestor</class-interface>
<method name="close" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:29</id>
<description>if the JMS provider fails to close the                          &lt;CODE&gt;QueueRequestor&lt;/CODE&gt; due to some internal                          error.</description>
<package>javax.jms</package>
<class-interface>QueueRequestor</class-interface>
<method name="close" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:30</id>
<description>
                            Constructor for the &lt;CODE&gt;TopicRequestor&lt;/CODE&gt; class.
                                &lt;P&gt;This implementation assumes the session parameter to be non-transacted,  with a delivery mode of either &lt;CODE&gt;AUTO_ACKNOWLEDGE&lt;/CODE&gt; or   &lt;CODE&gt;DUPS_OK_ACKNOWLEDGE&lt;/CODE&gt;.
                        </description>
<package>javax.jms</package>
<class-interface>TopicRequestor</class-interface>
<method name="TopicRequestor" return-type="TopicRequestor">
<parameters>
<parameter>jakarta.jms.TopicSession</parameter>
<parameter>jakarta.jms.Topic</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:31</id>
<description>
                            Sends a request and waits for a reply.
                             The temporary topic is used for  the &lt;CODE&gt;JMSReplyTo&lt;/CODE&gt; destination; the first reply is returned,   and any following replies are discarded.
                        </description>
<package>javax.jms</package>
<class-interface>TopicRequestor</class-interface>
<method name="request" return-type="jakarta.jms.Message">
<parameters>
<parameter>jakarta.jms.Message</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:32</id>
<description>if the JMS provider fails to complete the                          request due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TopicRequestor</class-interface>
<method name="request" return-type="jakarta.jms.Message">
<parameters>
<parameter>jakarta.jms.Message</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:33</id>
<description>
                            Closes the &lt;CODE&gt;TopicRequestor&lt;/CODE&gt; and its session.
                               &lt;P&gt;Since a provider may allocate some resources on behalf of a   &lt;CODE&gt;TopicRequestor&lt;/CODE&gt; outside the Java virtual machine, clients   should close them when they   are not needed. Relying on garbage collection to eventually reclaim   these resources may not be timely enough.   &lt;P&gt;Note that this method closes the &lt;CODE&gt;TopicSession&lt;/CODE&gt; object   passed to the &lt;CODE&gt;TopicRequestor&lt;/CODE&gt; constructor.
                        </description>
<package>javax.jms</package>
<class-interface>TopicRequestor</class-interface>
<method name="close" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:34</id>
<description>if the JMS provider fails to close the                          &lt;CODE&gt;TopicRequestor&lt;/CODE&gt; due to some internal                          error.</description>
<package>javax.jms</package>
<class-interface>TopicRequestor</class-interface>
<method name="close" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:35</id>
<description>
                            Constructs a &lt;CODE&gt;JMSException&lt;/CODE&gt; with the specified reason and    error code.
                        </description>
<package>javax.jms</package>
<class-interface>JMSException</class-interface>
<method name="JMSException" return-type="JMSException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:36</id>
<description>
                            Constructs a &lt;CODE&gt;JMSException&lt;/CODE&gt; with the specified reason and with   the error code defaulting to null.
                        </description>
<package>javax.jms</package>
<class-interface>JMSException</class-interface>
<method name="JMSException" return-type="JMSException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:37</id>
<description>
                            Gets the vendor-specific error code.
                        </description>
<package>javax.jms</package>
<class-interface>JMSException</class-interface>
<method name="getErrorCode" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:38</id>
<description>
                            Gets the exception linked to this one.
                        </description>
<package>javax.jms</package>
<class-interface>JMSException</class-interface>
<method name="getLinkedException" return-type="java.lang.Exception"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:39</id>
<description>
                            Adds a linked &lt;CODE&gt;Exception&lt;/CODE&gt;.
                        </description>
<package>javax.jms</package>
<class-interface>JMSException</class-interface>
<method name="setLinkedException" return-type="void">
<parameters>
<parameter>java.lang.Exception</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:40</id>
<description>
                            Notifies user of a JMS exception.
                        </description>
<package>javax.jms</package>
<class-interface>ExceptionListener</class-interface>
<method name="onException" return-type="void">
<parameters>
<parameter>jakarta.jms.JMSException</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:41</id>
<description>
                            Return the &lt;CODE&gt;ServerSession&lt;/CODE&gt;'s &lt;CODE&gt;Session&lt;/CODE&gt;.
                             This must   be a &lt;CODE&gt;Session&lt;/CODE&gt; created by the same &lt;CODE&gt;Connection&lt;/CODE&gt;   that will be dispatching messages to it. The provider will assign one or  more messages to the &lt;CODE&gt;Session&lt;/CODE&gt;   and then call &lt;CODE&gt;start&lt;/CODE&gt; on the &lt;CODE&gt;ServerSession&lt;/CODE&gt;.
                        </description>
<package>javax.jms</package>
<class-interface>ServerSession</class-interface>
<method name="getSession" return-type="jakarta.jms.Session"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:42</id>
<description>if the JMS provider fails to get the associated                          session for this &lt;CODE&gt;ServerSession&lt;/CODE&gt; due                          to some internal error.</description>
<package>javax.jms</package>
<class-interface>ServerSession</class-interface>
<method name="getSession" return-type="jakarta.jms.Session">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:43</id>
<description>
                            Cause the &lt;CODE&gt;Session&lt;/CODE&gt;'s &lt;CODE&gt;run&lt;/CODE&gt; method to be called   to process messages that were just assigned to it.
                        </description>
<package>javax.jms</package>
<class-interface>ServerSession</class-interface>
<method name="start" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:44</id>
<description>if the JMS provider fails to start the server                          session to process messages due to some internal                          error.</description>
<package>javax.jms</package>
<class-interface>ServerSession</class-interface>
<method name="start" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:45</id>
<description>
                            Creates an XA topic connection with the default user identity.
                              The connection is created in stopped mode. No messages   will be delivered until the &lt;code&gt;Connection.start&lt;/code&gt; method  is explicitly called.
                        </description>
<package>javax.jms</package>
<class-interface>XATopicConnectionFactory</class-interface>
<method name="createXATopicConnection" return-type="jakarta.jms.XATopicConnection"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:46</id>
<description>if the JMS provider fails to create an XA topic                           connection due to some internal error.</description>
<package>javax.jms</package>
<class-interface>XATopicConnectionFactory</class-interface>
<method name="createXATopicConnection" return-type="jakarta.jms.XATopicConnection">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:47</id>
<description>
                            Creates an XA topic connection with the specified user identity.
                              The connection is created in stopped mode. No messages   will be delivered until the &lt;code&gt;Connection.start&lt;/code&gt; method  is explicitly called.
                        </description>
<package>javax.jms</package>
<class-interface>XATopicConnectionFactory</class-interface>
<method name="createXATopicConnection" return-type="jakarta.jms.XATopicConnection">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:48</id>
<description>if the JMS provider fails to create an XA topic                           connection due to some internal error.</description>
<package>javax.jms</package>
<class-interface>XATopicConnectionFactory</class-interface>
<method name="createXATopicConnection" return-type="jakarta.jms.XATopicConnection">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:49</id>
<description>
                            Creates an XA queue connection with the default user identity.
                              The connection is created in stopped mode. No messages   will be delivered until the &lt;code&gt;Connection.start&lt;/code&gt; method  is explicitly called.
                        </description>
<package>javax.jms</package>
<class-interface>XAQueueConnectionFactory</class-interface>
<method name="createXAQueueConnection" return-type="jakarta.jms.XAQueueConnection"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:50</id>
<description>if the JMS provider fails to create an XA queue                           connection due to some internal error.</description>
<package>javax.jms</package>
<class-interface>XAQueueConnectionFactory</class-interface>
<method name="createXAQueueConnection" return-type="jakarta.jms.XAQueueConnection">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:51</id>
<description>
                            Creates an XA queue connection with the specified user identity.
                              The connection is created in stopped mode. No messages   will be delivered until the &lt;code&gt;Connection.start&lt;/code&gt; method  is explicitly called.
                        </description>
<package>javax.jms</package>
<class-interface>XAQueueConnectionFactory</class-interface>
<method name="createXAQueueConnection" return-type="jakarta.jms.XAQueueConnection">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:52</id>
<description>if the JMS provider fails to create an XA queue                           connection due to some internal error.</description>
<package>javax.jms</package>
<class-interface>XAQueueConnectionFactory</class-interface>
<method name="createXAQueueConnection" return-type="jakarta.jms.XAQueueConnection">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:53</id>
<description>
                            Creates a topic connection with the default user identity.
                              The connection is created in stopped mode. No messages   will be delivered until the &lt;code&gt;Connection.start&lt;/code&gt; method  is explicitly called.
                        </description>
<package>javax.jms</package>
<class-interface>TopicConnectionFactory</class-interface>
<method name="createTopicConnection" return-type="jakarta.jms.TopicConnection"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:54</id>
<description>if the JMS provider fails to create a topic                           connection due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TopicConnectionFactory</class-interface>
<method name="createTopicConnection" return-type="jakarta.jms.TopicConnection">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:55</id>
<description>
                            Creates a topic connection with the specified user identity.
                              The connection is created in stopped mode. No messages   will be delivered until the &lt;code&gt;Connection.start&lt;/code&gt; method  is explicitly called.
                        </description>
<package>javax.jms</package>
<class-interface>TopicConnectionFactory</class-interface>
<method name="createTopicConnection" return-type="jakarta.jms.TopicConnection">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:56</id>
<description>if the JMS provider fails to create a topic                           connection due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TopicConnectionFactory</class-interface>
<method name="createTopicConnection" return-type="jakarta.jms.TopicConnection">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:57</id>
<description>
                            Creates a queue connection with the default user identity.
                              The connection is created in stopped mode. No messages   will be delivered until the &lt;code&gt;Connection.start&lt;/code&gt; method  is explicitly called.
                        </description>
<package>javax.jms</package>
<class-interface>QueueConnectionFactory</class-interface>
<method name="createQueueConnection" return-type="jakarta.jms.QueueConnection"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:58</id>
<description>if the JMS provider fails to create the queue                           connection due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueConnectionFactory</class-interface>
<method name="createQueueConnection" return-type="jakarta.jms.QueueConnection">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:59</id>
<description>
                            Creates a queue connection with the specified user identity.
                              The connection is created in stopped mode. No messages   will be delivered until the &lt;code&gt;Connection.start&lt;/code&gt; method  is explicitly called.
                        </description>
<package>javax.jms</package>
<class-interface>QueueConnectionFactory</class-interface>
<method name="createQueueConnection" return-type="jakarta.jms.QueueConnection">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:60</id>
<description>if the JMS provider fails to create the queue                           connection due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueConnectionFactory</class-interface>
<method name="createQueueConnection" return-type="jakarta.jms.QueueConnection">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:61</id>
<description>
                            Gets the JMS API version.
                        </description>
<package>javax.jms</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getJMSVersion" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:62</id>
<description>if the JMS provider fails to retrieve the                          metadata due to some internal error.</description>
<package>javax.jms</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getJMSVersion" return-type="java.lang.String">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:63</id>
<description>
                            Gets the JMS major version number.
                        </description>
<package>javax.jms</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getJMSMajorVersion" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:64</id>
<description>if the JMS provider fails to retrieve the                          metadata due to some internal error.</description>
<package>javax.jms</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getJMSMajorVersion" return-type="int">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:65</id>
<description>
                            Gets the JMS minor version number.
                        </description>
<package>javax.jms</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getJMSMinorVersion" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:66</id>
<description>if the JMS provider fails to retrieve the                          metadata due to some internal error.</description>
<package>javax.jms</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getJMSMinorVersion" return-type="int">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:67</id>
<description>
                            Gets the JMS provider name.
                        </description>
<package>javax.jms</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getJMSProviderName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:68</id>
<description>if the JMS provider fails to retrieve the                          metadata due to some internal error.</description>
<package>javax.jms</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getJMSProviderName" return-type="java.lang.String">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:69</id>
<description>
                            Gets the JMS provider version.
                        </description>
<package>javax.jms</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getProviderVersion" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:70</id>
<description>if the JMS provider fails to retrieve the                          metadata due to some internal error.</description>
<package>javax.jms</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getProviderVersion" return-type="java.lang.String">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:71</id>
<description>
                            Gets the JMS provider major version number.
                        </description>
<package>javax.jms</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getProviderMajorVersion" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:72</id>
<description>if the JMS provider fails to retrieve the                          metadata due to some internal error.</description>
<package>javax.jms</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getProviderMajorVersion" return-type="int">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:73</id>
<description>
                            Gets the JMS provider minor version number.
                        </description>
<package>javax.jms</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getProviderMinorVersion" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:74</id>
<description>if the JMS provider fails to retrieve the                          metadata due to some internal error.</description>
<package>javax.jms</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getProviderMinorVersion" return-type="int">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:75</id>
<description>
                            Gets an enumeration of the JMSX property names.
                        </description>
<package>javax.jms</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getJMSXPropertyNames" return-type="java.util.Enumeration"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:76</id>
<description>if the JMS provider fails to retrieve the                          metadata due to some internal error.</description>
<package>javax.jms</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getJMSXPropertyNames" return-type="java.util.Enumeration">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:77</id>
<description>
                            Sets whether message IDs are disabled.
                                 &lt;P&gt;Since message IDs take some effort to create and increase a  message's size, some JMS providers may be able to optimize message  overhead if they are given a hint that the message ID is not used by  an application. By calling the &lt;CODE&gt;setDisableMessageID&lt;/CODE&gt;    method on this message producer, a JMS client enables this potential   optimization for all messages sent by this message producer. If the JMS   provider accepts this hint,   these messages must have the message ID set to null; if the provider   ignores the hint, the message ID must be set to its normal unique value.   &lt;P&gt;Message IDs are enabled by default.
                        </description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="setDisableMessageID" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:78</id>
<description>if the JMS provider fails to set message ID to                          disabled due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="setDisableMessageID" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:79</id>
<description>
                            Gets an indication of whether message IDs are disabled.
                        </description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="getDisableMessageID" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:80</id>
<description>if the JMS provider fails to determine if                           message IDs are disabled due to some internal                           error.</description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="getDisableMessageID" return-type="boolean">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:81</id>
<description>
                            Sets whether message timestamps are disabled.
                                 &lt;P&gt;Since timestamps take some effort to create and increase a   message's size, some JMS providers may be able to optimize message   overhead if they are given a hint that the timestamp is not used by an   application. By calling the &lt;CODE&gt;setDisableMessageTimestamp&lt;/CODE&gt;   method on this message producer, a JMS client enables this potential   optimization for all messages sent by this message producer.  If the   JMS provider accepts this hint,   these messages must have the timestamp set to zero; if the provider   ignores the hint, the timestamp must be set to its normal value.     &lt;P&gt;Message timestamps are enabled by default.
                        </description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="setDisableMessageTimestamp" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:82</id>
<description>if the JMS provider fails to set timestamps to                          disabled due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="setDisableMessageTimestamp" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:83</id>
<description>
                            Gets an indication of whether message timestamps are disabled.
                        </description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="getDisableMessageTimestamp" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:84</id>
<description>if the JMS provider fails to determine if                           timestamps are disabled due to some internal                           error.</description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="getDisableMessageTimestamp" return-type="boolean">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:85</id>
<description>
                            Sets the producer's default delivery mode.
                                 &lt;P&gt;Delivery mode is set to &lt;CODE&gt;PERSISTENT&lt;/CODE&gt; by default.
                            
                            
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="setDeliveryMode" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:86</id>
<description>if the JMS provider fails to set the delivery                           mode due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="setDeliveryMode" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:87</id>
<description>
                            Gets the producer's default delivery mode.
                            
                        </description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="getDeliveryMode" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:88</id>
<description>if the JMS provider fails to get the delivery                           mode due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="getDeliveryMode" return-type="int">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:89</id>
<description>
                            Sets the producer's default priority.
                                 &lt;P&gt;The JMS API defines ten levels of priority value, with 0 as the   lowest priority and 9 as the highest. Clients should consider priorities  0-4 as gradations of normal priority and priorities 5-9 as gradations   of expedited priority. Priority is set to 4 by default.
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="setPriority" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:90</id>
<description>if the JMS provider fails to set the priority                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="setPriority" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:91</id>
<description>
                            Gets the producer's default priority.
                            
                        </description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="getPriority" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:92</id>
<description>if the JMS provider fails to get the priority                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="getPriority" return-type="int">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:93</id>
<description>
                            Sets the default length of time in milliseconds from its dispatch time  that a produced message should be retained by the message system.
                               &lt;P&gt;Time to live is set to zero by default.
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="setTimeToLive" return-type="void">
<parameters>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:94</id>
<description>if the JMS provider fails to set the time to                           live due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="setTimeToLive" return-type="void">
<parameters>
<parameter>long</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:95</id>
<description>
                            Gets the default length of time in milliseconds from its dispatch time  that a produced message should be retained by the message system.
                            
                        </description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="getTimeToLive" return-type="long"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:96</id>
<description>if the JMS provider fails to get the time to                           live due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="getTimeToLive" return-type="long">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:97</id>
<description>
                            Closes the message producer.
                               &lt;P&gt;Since a provider may allocate some resources on behalf of a  &lt;CODE&gt;MessageProducer&lt;/CODE&gt; outside the Java virtual machine, clients   should close them when they  are not needed. Relying on garbage collection to eventually reclaim  these resources may not be timely enough.
                        </description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="close" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:98</id>
<description>if the JMS provider fails to close the producer                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MessageProducer</class-interface>
<method name="close" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:99</id>
<description>
                            Returns an XA resource to the caller.
                        </description>
<package>javax.jms</package>
<class-interface>XASession</class-interface>
<method name="getXAResource" return-type="javax.transaction.xa.XAResource"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:100</id>
<description>
                            Indicates whether the session is in transacted mode.
                        </description>
<package>javax.jms</package>
<class-interface>XASession</class-interface>
<method name="getTransacted" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:101</id>
<description>if the JMS provider fails to return the                           transaction mode due to some internal error.</description>
<package>javax.jms</package>
<class-interface>XASession</class-interface>
<method name="getTransacted" return-type="boolean">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:102</id>
<description>
                            Throws a &lt;CODE&gt;TransactionInProgressException&lt;/CODE&gt;, since it should   not be called for an &lt;CODE&gt;XASession&lt;/CODE&gt; object.
                        </description>
<package>javax.jms</package>
<class-interface>XASession</class-interface>
<method name="commit" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:103</id>
<description/>
<package>javax.jms</package>
<class-interface>XASession</class-interface>
<method name="commit" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:104</id>
<description>
                            Throws a &lt;CODE&gt;TransactionInProgressException&lt;/CODE&gt;, since it should   not be called for an &lt;CODE&gt;XASession&lt;/CODE&gt; object.
                        </description>
<package>javax.jms</package>
<class-interface>XASession</class-interface>
<method name="rollback" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:105</id>
<description/>
<package>javax.jms</package>
<class-interface>XASession</class-interface>
<method name="rollback" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:106</id>
<description>
                            Gets the client identifier for this connection.
                                 &lt;P&gt;This value is specific to the JMS provider.  It is either preconfigured   by an administrator in a &lt;CODE&gt;ConnectionFactory&lt;/CODE&gt; object  or assigned dynamically by the application by calling the  &lt;code&gt;setClientID&lt;/code&gt; method.
                        </description>
<package>javax.jms</package>
<class-interface>Connection</class-interface>
<method name="getClientID" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:107</id>
<description>if the JMS provider fails to return                          the client ID for this connection due                          to some internal error.</description>
<package>javax.jms</package>
<class-interface>Connection</class-interface>
<method name="getClientID" return-type="java.lang.String">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:108</id>
<description>
                            Sets the client identifier for this connection.
                                 &lt;P&gt;The preferred way to assign a JMS client's client identifier is for  it to be configured in a client-specific &lt;CODE&gt;ConnectionFactory&lt;/CODE&gt;  object and transparently assigned to the &lt;CODE&gt;Connection&lt;/CODE&gt; object  it creates.    &lt;P&gt;Alternatively, a client can set a connection's client identifier  using a provider-specific value. The facility to set a connection's  client identifier explicitly is not a mechanism for overriding the  identifier that has been administratively configured. It is provided  for the case where no administratively specified identifier exists.  If one does exist, an attempt to change it by setting it must throw an  &lt;CODE&gt;IllegalStateException&lt;/CODE&gt;. If a client sets the client identifier  explicitly, it must do so immediately after it creates the connection   and before any other  action on the connection is taken. After this point, setting the  client identifier is a programming error that should throw an  &lt;CODE&gt;IllegalStateException&lt;/CODE&gt;.   &lt;P&gt;The purpose of the client identifier is to associate a connection and  its objects with a state maintained on behalf of the client by a   provider. The only such state identified by the JMS API is that required  to support durable subscriptions.   &lt;P&gt;If another connection with the same &lt;code&gt;clientID&lt;/code&gt; is already running when  this method is called, the JMS provider should detect the duplicate ID and throw  an &lt;CODE&gt;InvalidClientIDException&lt;/CODE&gt;.
                        </description>
<package>javax.jms</package>
<class-interface>Connection</class-interface>
<method name="setClientID" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:109</id>
<description>if the JMS provider fails to                          set the client ID for this connection due                          to some internal error.</description>
<package>javax.jms</package>
<class-interface>Connection</class-interface>
<method name="setClientID" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:110</id>
<description>
                            Gets the metadata for this connection.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Connection</class-interface>
<method name="getMetaData" return-type="jakarta.jms.ConnectionMetaData"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:111</id>
<description>if the JMS provider fails to                          get the connection metadata for this connection.</description>
<package>javax.jms</package>
<class-interface>Connection</class-interface>
<method name="getMetaData" return-type="jakarta.jms.ConnectionMetaData">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:112</id>
<description>
                            Gets the &lt;CODE&gt;ExceptionListener&lt;/CODE&gt; object for this connection.
                        </description>
<package>javax.jms</package>
<class-interface>Connection</class-interface>
<method name="getExceptionListener" return-type="jakarta.jms.ExceptionListener"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:113</id>
<description>if the JMS provider fails to                          get the &lt;CODE&gt;ExceptionListener&lt;/CODE&gt; for this                           connection.</description>
<package>javax.jms</package>
<class-interface>Connection</class-interface>
<method name="getExceptionListener" return-type="jakarta.jms.ExceptionListener">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:114</id>
<description>
                            Sets an exception listener for this connection.
                               &lt;P&gt;If a JMS provider detects a serious problem with a connection, it  informs the connection's &lt;CODE&gt;ExceptionListener&lt;/CODE&gt;, if one has been  registered. It does this by calling the listener's  &lt;CODE&gt;onException&lt;/CODE&gt; method, passing it a &lt;CODE&gt;JMSException&lt;/CODE&gt;  object describing the problem.   &lt;P&gt;An exception listener allows a client to be notified of a problem  asynchronously.  Some connections only consume messages, so they would have no other   way to learn their connection has failed.   &lt;P&gt;A connection serializes execution of its  &lt;CODE&gt;ExceptionListener&lt;/CODE&gt;.   &lt;P&gt;A JMS provider should attempt to resolve connection problems   itself before it notifies the client of them.
                        </description>
<package>javax.jms</package>
<class-interface>Connection</class-interface>
<method name="setExceptionListener" return-type="void">
<parameters>
<parameter>jakarta.jms.ExceptionListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:115</id>
<description>if the JMS provider fails to                          set the exception listener for this connection.</description>
<package>javax.jms</package>
<class-interface>Connection</class-interface>
<method name="setExceptionListener" return-type="void">
<parameters>
<parameter>jakarta.jms.ExceptionListener</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:116</id>
<description>
                            Starts (or restarts) a connection's delivery of incoming messages.
                              A call to &lt;CODE&gt;start&lt;/CODE&gt; on a connection that has already been  started is ignored.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Connection</class-interface>
<method name="start" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:117</id>
<description>if the JMS provider fails to start                          message delivery due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Connection</class-interface>
<method name="start" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:118</id>
<description>
                            Temporarily stops a connection's delivery of incoming messages.
                              Delivery can be restarted using the connection's &lt;CODE&gt;start&lt;/CODE&gt;  method. When the connection is stopped,  delivery to all the connection's message consumers is inhibited:  synchronous receives block, and messages are not delivered to message  listeners.   &lt;P&gt;This call blocks until receives and/or message listeners in progress  have completed.   &lt;P&gt;Stopping a connection has no effect on its ability to send messages.  A call to &lt;CODE&gt;stop&lt;/CODE&gt; on a connection that has already been  stopped is ignored.   &lt;P&gt;A call to &lt;CODE&gt;stop&lt;/CODE&gt; must not return until delivery of messages  has paused. This means that a client can rely on the fact that none of   its message listeners will be called and that all threads of control   waiting for &lt;CODE&gt;receive&lt;/CODE&gt; calls to return will not return with a   message until the  connection is restarted. The receive timers for a stopped connection  continue to advance, so receives may time out while the connection is  stopped.    &lt;P&gt;If message listeners are running when &lt;CODE&gt;stop&lt;/CODE&gt; is invoked,   the &lt;CODE&gt;stop&lt;/CODE&gt; call must  wait until all of them have returned before it may return. While these  message listeners are completing, they must have the full services of the  connection available to them.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Connection</class-interface>
<method name="stop" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:119</id>
<description>if the JMS provider fails to stop                          message delivery due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Connection</class-interface>
<method name="stop" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:120</id>
<description>
                            Closes the connection.
                               &lt;P&gt;Since a provider typically allocates significant resources outside   the JVM on behalf of a connection, clients should close these resources  when they are not needed. Relying on garbage collection to eventually   reclaim these resources may not be timely enough.   &lt;P&gt;There is no need to close the sessions, producers, and consumers  of a closed connection.   &lt;P&gt;Closing a connection causes all temporary destinations to be  deleted.   &lt;P&gt;When this method is invoked, it should not return until message  processing has been shut down in an orderly fashion. This means that all  message   listeners that may have been running have returned, and that all pending   receives have returned. A close terminates all pending message receives   on the connection's sessions' consumers. The receives may return with a   message or with null, depending on whether there was a message available   at the time of the close. If one or more of the connection's sessions'   message listeners is processing a message at the time when connection   &lt;CODE&gt;close&lt;/CODE&gt; is invoked, all the facilities of the connection and   its sessions must remain available to those listeners until they return   control to the JMS provider.    &lt;P&gt;Closing a connection causes any of its sessions' transactions  in progress to be rolled back. In the case where a session's  work is coordinated by an external transaction manager, a session's   &lt;CODE&gt;commit&lt;/CODE&gt; and &lt;CODE&gt;rollback&lt;/CODE&gt; methods are  not used and the result of a closed session's work is determined  later by the transaction manager.   Closing a connection does NOT force an   acknowledgment of client-acknowledged sessions.     &lt;P&gt;Invoking the &lt;CODE&gt;acknowledge&lt;/CODE&gt; method of a received message   from a closed connection's session must throw an   &lt;CODE&gt;IllegalStateException&lt;/CODE&gt;.  Closing a closed connection must   NOT throw an exception.
                        </description>
<package>javax.jms</package>
<class-interface>Connection</class-interface>
<method name="close" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:121</id>
<description>if the JMS provider fails to close the                          connection due to some internal error. For                           example, a failure to release resources                          or to close a socket connection can cause                          this exception to be thrown.</description>
<package>javax.jms</package>
<class-interface>Connection</class-interface>
<method name="close" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:122</id>
<description>
                            Gets this message consumer's message selector expression.
                        </description>
<package>javax.jms</package>
<class-interface>MessageConsumer</class-interface>
<method name="getMessageSelector" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:123</id>
<description>if the JMS provider fails to get the message                          selector due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MessageConsumer</class-interface>
<method name="getMessageSelector" return-type="java.lang.String">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:124</id>
<description>
                            Gets the message consumer's &lt;CODE&gt;MessageListener&lt;/CODE&gt;.
                            
                        </description>
<package>javax.jms</package>
<class-interface>MessageConsumer</class-interface>
<method name="getMessageListener" return-type="jakarta.jms.MessageListener"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:125</id>
<description>if the JMS provider fails to get the message                          listener due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MessageConsumer</class-interface>
<method name="getMessageListener" return-type="jakarta.jms.MessageListener">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:126</id>
<description>
                            Sets the message consumer's &lt;CODE&gt;MessageListener&lt;/CODE&gt;.
                                &lt;P&gt;Setting the message listener to null is the equivalent of   unsetting the message listener for the message consumer.   &lt;P&gt;The effect of calling &lt;CODE&gt;MessageConsumer.setMessageListener&lt;/CODE&gt;  while messages are being consumed by an existing listener  or the consumer is being used to consume messages synchronously  is undefined.
                            
                        </description>
<package>javax.jms</package>
<class-interface>MessageConsumer</class-interface>
<method name="setMessageListener" return-type="void">
<parameters>
<parameter>jakarta.jms.MessageListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:127</id>
<description>if the JMS provider fails to set the message                          listener due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MessageConsumer</class-interface>
<method name="setMessageListener" return-type="void">
<parameters>
<parameter>jakarta.jms.MessageListener</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:128</id>
<description>
                            Receives the next message produced for this message consumer.
                                 &lt;P&gt;This call blocks indefinitely until a message is produced  or until this message consumer is closed.   &lt;P&gt;If this &lt;CODE&gt;receive&lt;/CODE&gt; is done within a transaction, the   consumer retains the message until the transaction commits.
                        </description>
<package>javax.jms</package>
<class-interface>MessageConsumer</class-interface>
<method name="receive" return-type="jakarta.jms.Message"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:129</id>
<description>if the JMS provider fails to receive the next                          message due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MessageConsumer</class-interface>
<method name="receive" return-type="jakarta.jms.Message">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:130</id>
<description>
                            Receives the next message that arrives within the specified  timeout interval.
                                 &lt;P&gt;This call blocks until a message arrives, the  timeout expires, or this message consumer is closed.  A &lt;CODE&gt;timeout&lt;/CODE&gt; of zero never expires, and the call blocks   indefinitely.
                        </description>
<package>javax.jms</package>
<class-interface>MessageConsumer</class-interface>
<method name="receive" return-type="jakarta.jms.Message">
<parameters>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:131</id>
<description>if the JMS provider fails to receive the next                          message due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MessageConsumer</class-interface>
<method name="receive" return-type="jakarta.jms.Message">
<parameters>
<parameter>long</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:132</id>
<description>
                            Receives the next message if one is immediately available.
                        </description>
<package>javax.jms</package>
<class-interface>MessageConsumer</class-interface>
<method name="receiveNoWait" return-type="jakarta.jms.Message"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:133</id>
<description>if the JMS provider fails to receive the next                          message due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MessageConsumer</class-interface>
<method name="receiveNoWait" return-type="jakarta.jms.Message">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:134</id>
<description>
                            Closes the message consumer.
                               &lt;P&gt;Since a provider may allocate some resources on behalf of a  &lt;CODE&gt;MessageConsumer&lt;/CODE&gt; outside the Java virtual machine, clients   should close them when they  are not needed. Relying on garbage collection to eventually reclaim  these resources may not be timely enough.   &lt;P&gt;This call blocks until a &lt;CODE&gt;receive&lt;/CODE&gt; or message listener in   progress has completed. A blocked message consumer &lt;CODE&gt;receive&lt;/CODE&gt;   call   returns null when this message consumer is closed.
                        </description>
<package>javax.jms</package>
<class-interface>MessageConsumer</class-interface>
<method name="close" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:135</id>
<description>if the JMS provider fails to close the consumer                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MessageConsumer</class-interface>
<method name="close" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:136</id>
<description>
                            Deletes this temporary queue.
                             If there are existing receivers  still using it, a &lt;CODE&gt;JMSException&lt;/CODE&gt; will be thrown.
                        </description>
<package>javax.jms</package>
<class-interface>TemporaryQueue</class-interface>
<method name="delete" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:137</id>
<description>if the JMS provider fails to delete the                           temporary queue due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TemporaryQueue</class-interface>
<method name="delete" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:138</id>
<description>
                            Gets the queue session associated with this &lt;CODE&gt;XAQueueSession&lt;/CODE&gt;.
                        </description>
<package>javax.jms</package>
<class-interface>XAQueueSession</class-interface>
<method name="getQueueSession" return-type="jakarta.jms.QueueSession"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:139</id>
<description>if an internal error occurs.</description>
<package>javax.jms</package>
<class-interface>XAQueueSession</class-interface>
<method name="getQueueSession" return-type="jakarta.jms.QueueSession">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:140</id>
<description>
                            Creates a &lt;CODE&gt;QueueSession&lt;/CODE&gt; object.
                            
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>QueueConnection</class-interface>
<method name="createQueueSession" return-type="jakarta.jms.QueueSession">
<parameters>
<parameter>boolean</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:141</id>
<description>if the &lt;CODE&gt;QueueConnection&lt;/CODE&gt; object fails                          to create a session due to some internal error or                          lack of support for the specific transaction                          and acknowledgement mode.</description>
<package>javax.jms</package>
<class-interface>QueueConnection</class-interface>
<method name="createQueueSession" return-type="jakarta.jms.QueueSession">
<parameters>
<parameter>boolean</parameter>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:142</id>
<description>
                            Creates a connection consumer for this connection (optional operation).
                              This is an expert facility not used by regular JMS clients.
                            
                        </description>
<package>javax.jms</package>
<class-interface>QueueConnection</class-interface>
<method name="createConnectionConsumer" return-type="jakarta.jms.ConnectionConsumer">
<parameters>
<parameter>jakarta.jms.Queue</parameter>
<parameter>java.lang.String</parameter>
<parameter>jakarta.jms.ServerSessionPool</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:143</id>
<description>if the &lt;CODE&gt;QueueConnection&lt;/CODE&gt; object fails                          to create a connection consumer due to some                          internal error or invalid arguments for                           &lt;CODE&gt;sessionPool&lt;/CODE&gt; and                           &lt;CODE&gt;messageSelector&lt;/CODE&gt;.</description>
<package>javax.jms</package>
<class-interface>QueueConnection</class-interface>
<method name="createConnectionConsumer" return-type="jakarta.jms.ConnectionConsumer">
<parameters>
<parameter>jakarta.jms.Queue</parameter>
<parameter>java.lang.String</parameter>
<parameter>jakarta.jms.ServerSessionPool</parameter>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:144</id>
<description>
                            Creates a &lt;CODE&gt;TopicSession&lt;/CODE&gt; object.
                            
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>TopicConnection</class-interface>
<method name="createTopicSession" return-type="jakarta.jms.TopicSession">
<parameters>
<parameter>boolean</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:145</id>
<description>if the &lt;CODE&gt;TopicConnection&lt;/CODE&gt; object fails                          to create a session due to some internal error or                          lack of support for the specific transaction                          and acknowledgement mode.</description>
<package>javax.jms</package>
<class-interface>TopicConnection</class-interface>
<method name="createTopicSession" return-type="jakarta.jms.TopicSession">
<parameters>
<parameter>boolean</parameter>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:146</id>
<description>
                            Creates a connection consumer for this connection (optional operation).
                              This is an expert facility not used by regular JMS clients.
                            
                        </description>
<package>javax.jms</package>
<class-interface>TopicConnection</class-interface>
<method name="createConnectionConsumer" return-type="jakarta.jms.ConnectionConsumer">
<parameters>
<parameter>jakarta.jms.Topic</parameter>
<parameter>java.lang.String</parameter>
<parameter>jakarta.jms.ServerSessionPool</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:147</id>
<description>if the &lt;CODE&gt;TopicConnection&lt;/CODE&gt; object fails                          to create a connection consumer due to some                          internal error or invalid arguments for                           &lt;CODE&gt;sessionPool&lt;/CODE&gt; and                           &lt;CODE&gt;messageSelector&lt;/CODE&gt;.</description>
<package>javax.jms</package>
<class-interface>TopicConnection</class-interface>
<method name="createConnectionConsumer" return-type="jakarta.jms.ConnectionConsumer">
<parameters>
<parameter>jakarta.jms.Topic</parameter>
<parameter>java.lang.String</parameter>
<parameter>jakarta.jms.ServerSessionPool</parameter>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:148</id>
<description>
                            Create a durable connection consumer for this connection (optional operation).
                               This is an expert facility not used by regular JMS clients.
                            
                        </description>
<package>javax.jms</package>
<class-interface>TopicConnection</class-interface>
<method name="createDurableConnectionConsumer" return-type="jakarta.jms.ConnectionConsumer">
<parameters>
<parameter>jakarta.jms.Topic</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
<parameter>jakarta.jms.ServerSessionPool</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:149</id>
<description>if the &lt;CODE&gt;TopicConnection&lt;/CODE&gt; object fails                          to create a connection consumer due to some                          internal error or invalid arguments for                           &lt;CODE&gt;sessionPool&lt;/CODE&gt; and                           &lt;CODE&gt;messageSelector&lt;/CODE&gt;.</description>
<package>javax.jms</package>
<class-interface>TopicConnection</class-interface>
<method name="createDurableConnectionConsumer" return-type="jakarta.jms.ConnectionConsumer">
<parameters>
<parameter>jakarta.jms.Topic</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
<parameter>jakarta.jms.ServerSessionPool</parameter>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:150</id>
<description>
                            Gets the server session pool associated with this connection consumer.
                        </description>
<package>javax.jms</package>
<class-interface>ConnectionConsumer</class-interface>
<method name="getServerSessionPool" return-type="jakarta.jms.ServerSessionPool"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:151</id>
<description>if the JMS provider fails to get the server                           session pool associated with this consumer due                          to some internal error.</description>
<package>javax.jms</package>
<class-interface>ConnectionConsumer</class-interface>
<method name="getServerSessionPool" return-type="jakarta.jms.ServerSessionPool">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:152</id>
<description>
                            Closes the connection consumer.
                               &lt;P&gt;Since a provider may allocate some resources on behalf of a   connection consumer outside the Java virtual machine, clients should   close these resources when  they are not needed. Relying on garbage collection to eventually   reclaim these resources may not be timely enough.
                        </description>
<package>javax.jms</package>
<class-interface>ConnectionConsumer</class-interface>
<method name="close" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:153</id>
<description>if the JMS provider fails to release resources                           on behalf of the connection consumer or fails                          to close the connection consumer.</description>
<package>javax.jms</package>
<class-interface>ConnectionConsumer</class-interface>
<method name="close" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:154</id>
<description>
                            Gets the topic session associated with this &lt;CODE&gt;XATopicSession&lt;/CODE&gt;.
                        </description>
<package>javax.jms</package>
<class-interface>XATopicSession</class-interface>
<method name="getTopicSession" return-type="jakarta.jms.TopicSession"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:155</id>
<description>if an internal error occurs.</description>
<package>javax.jms</package>
<class-interface>XATopicSession</class-interface>
<method name="getTopicSession" return-type="jakarta.jms.TopicSession">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:156</id>
<description>
                            This is the lowest-overhead delivery mode because it does not require   that the message be logged to stable storage.
                             The level of JMS provider  failure that causes a &lt;CODE&gt;NON_PERSISTENT&lt;/CODE&gt; message to be lost is   not defined.   &lt;P&gt;A JMS provider must deliver a &lt;CODE&gt;NON_PERSISTENT&lt;/CODE&gt; message   with an   at-most-once guarantee. This means that it may lose the message, but it   must not deliver it twice.
                        </description>
<package>javax.jms</package>
<class-interface>int</class-interface>
<field name="NON_PERSISTENT" type="public static final"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:157</id>
<description>
                            This delivery mode instructs the JMS provider to log the message to stable   storage as part of the client's send operation.
                             Only a hard media   failure should cause a &lt;CODE&gt;PERSISTENT&lt;/CODE&gt; message to be lost.
                        </description>
<package>javax.jms</package>
<class-interface>int</class-interface>
<field name="PERSISTENT" type="public static final"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:158</id>
<description>
                            Creates a queue identity given a &lt;CODE&gt;Queue&lt;/CODE&gt; name.
                               &lt;P&gt;This facility is provided for the rare cases where clients need to  dynamically manipulate queue identity. It allows the creation of a  queue identity with a provider-specific name. Clients that depend   on this ability are not portable.   &lt;P&gt;Note that this method is not for creating the physical queue.   The physical creation of queues is an administrative task and is not  to be initiated by the JMS API. The one exception is the  creation of temporary queues, which is accomplished with the   &lt;CODE&gt;createTemporaryQueue&lt;/CODE&gt; method.
                        </description>
<package>javax.jms</package>
<class-interface>QueueSession</class-interface>
<method name="createQueue" return-type="jakarta.jms.Queue">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:159</id>
<description>if the session fails to create a queue                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueSession</class-interface>
<method name="createQueue" return-type="jakarta.jms.Queue">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:160</id>
<description>
                            Creates a &lt;CODE&gt;QueueReceiver&lt;/CODE&gt; object to receive messages from the  specified queue.
                        </description>
<package>javax.jms</package>
<class-interface>QueueSession</class-interface>
<method name="createReceiver" return-type="jakarta.jms.QueueReceiver">
<parameters>
<parameter>jakarta.jms.Queue</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:161</id>
<description>if the session fails to create a receiver                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueSession</class-interface>
<method name="createReceiver" return-type="jakarta.jms.QueueReceiver">
<parameters>
<parameter>jakarta.jms.Queue</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:162</id>
<description>
                            Creates a &lt;CODE&gt;QueueReceiver&lt;/CODE&gt; object to receive messages from the   specified queue using a message selector.
                        </description>
<package>javax.jms</package>
<class-interface>QueueSession</class-interface>
<method name="createReceiver" return-type="jakarta.jms.QueueReceiver">
<parameters>
<parameter>jakarta.jms.Queue</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:163</id>
<description>if the session fails to create a receiver                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueSession</class-interface>
<method name="createReceiver" return-type="jakarta.jms.QueueReceiver">
<parameters>
<parameter>jakarta.jms.Queue</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:164</id>
<description>
                            Creates a &lt;CODE&gt;QueueSender&lt;/CODE&gt; object to send messages to the   specified queue.
                        </description>
<package>javax.jms</package>
<class-interface>QueueSession</class-interface>
<method name="createSender" return-type="jakarta.jms.QueueSender">
<parameters>
<parameter>jakarta.jms.Queue</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:165</id>
<description>if the session fails to create a sender                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueSession</class-interface>
<method name="createSender" return-type="jakarta.jms.QueueSender">
<parameters>
<parameter>jakarta.jms.Queue</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:166</id>
<description>
                            Creates a &lt;CODE&gt;QueueBrowser&lt;/CODE&gt; object to peek at the messages on   the specified queue.
                        </description>
<package>javax.jms</package>
<class-interface>QueueSession</class-interface>
<method name="createBrowser" return-type="jakarta.jms.QueueBrowser">
<parameters>
<parameter>jakarta.jms.Queue</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:167</id>
<description>if the session fails to create a browser                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueSession</class-interface>
<method name="createBrowser" return-type="jakarta.jms.QueueBrowser">
<parameters>
<parameter>jakarta.jms.Queue</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:168</id>
<description>
                            Creates a &lt;CODE&gt;QueueBrowser&lt;/CODE&gt; object to peek at the messages on   the specified queue using a message selector.
                        </description>
<package>javax.jms</package>
<class-interface>QueueSession</class-interface>
<method name="createBrowser" return-type="jakarta.jms.QueueBrowser">
<parameters>
<parameter>jakarta.jms.Queue</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:169</id>
<description>if the session fails to create a browser                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueSession</class-interface>
<method name="createBrowser" return-type="jakarta.jms.QueueBrowser">
<parameters>
<parameter>jakarta.jms.Queue</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:170</id>
<description>
                            Creates a &lt;CODE&gt;TemporaryQueue&lt;/CODE&gt; object.
                             Its lifetime will be that   of the &lt;CODE&gt;QueueConnection&lt;/CODE&gt; unless it is deleted earlier.
                        </description>
<package>javax.jms</package>
<class-interface>QueueSession</class-interface>
<method name="createTemporaryQueue" return-type="jakarta.jms.TemporaryQueue"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:171</id>
<description>if the session fails to create a temporary queue                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueSession</class-interface>
<method name="createTemporaryQueue" return-type="jakarta.jms.TemporaryQueue">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:172</id>
<description>
                            Creates a topic identity given a &lt;CODE&gt;Topic&lt;/CODE&gt; name.
                               &lt;P&gt;This facility is provided for the rare cases where clients need to  dynamically manipulate topic identity. This allows the creation of a  topic identity with a provider-specific name. Clients that depend   on this ability are not portable.   &lt;P&gt;Note that this method is not for creating the physical topic.   The physical creation of topics is an administrative task and is not  to be initiated by the JMS API. The one exception is the  creation of temporary topics, which is accomplished with the   &lt;CODE&gt;createTemporaryTopic&lt;/CODE&gt; method.
                        </description>
<package>javax.jms</package>
<class-interface>TopicSession</class-interface>
<method name="createTopic" return-type="jakarta.jms.Topic">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:173</id>
<description>if the session fails to create a topic                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TopicSession</class-interface>
<method name="createTopic" return-type="jakarta.jms.Topic">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:174</id>
<description>
                            Creates a nondurable subscriber to the specified topic.
                                 &lt;P&gt;A client uses a &lt;CODE&gt;TopicSubscriber&lt;/CODE&gt; object to receive   messages that have been published to a topic.   &lt;P&gt;Regular &lt;CODE&gt;TopicSubscriber&lt;/CODE&gt; objects are not durable.   They receive only messages that are published while they are active.   &lt;P&gt;In some cases, a connection may both publish and subscribe to a   topic. The subscriber &lt;CODE&gt;NoLocal&lt;/CODE&gt; attribute allows a subscriber  to inhibit the delivery of messages published by its own connection.  The default value for this attribute is false.
                        </description>
<package>javax.jms</package>
<class-interface>TopicSession</class-interface>
<method name="createSubscriber" return-type="jakarta.jms.TopicSubscriber">
<parameters>
<parameter>jakarta.jms.Topic</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:175</id>
<description>if the session fails to create a subscriber                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TopicSession</class-interface>
<method name="createSubscriber" return-type="jakarta.jms.TopicSubscriber">
<parameters>
<parameter>jakarta.jms.Topic</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:176</id>
<description>
                            Creates a nondurable subscriber to the specified topic, using a  message selector or specifying whether messages published by its  own connection should be delivered to it.
                               &lt;P&gt;A client uses a &lt;CODE&gt;TopicSubscriber&lt;/CODE&gt; object to receive   messages that have been published to a topic.     &lt;P&gt;Regular &lt;CODE&gt;TopicSubscriber&lt;/CODE&gt; objects are not durable.   They receive only messages that are published while they are active.   &lt;P&gt;Messages filtered out by a subscriber's message selector will   never be delivered to the subscriber. From the subscriber's   perspective, they do not exist.   &lt;P&gt;In some cases, a connection may both publish and subscribe to a   topic. The subscriber &lt;CODE&gt;NoLocal&lt;/CODE&gt; attribute allows a subscriber  to inhibit the delivery of messages published by its own connection.  The default value for this attribute is false.
                        </description>
<package>javax.jms</package>
<class-interface>TopicSession</class-interface>
<method name="createSubscriber" return-type="jakarta.jms.TopicSubscriber">
<parameters>
<parameter>jakarta.jms.Topic</parameter>
<parameter>java.lang.String</parameter>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:177</id>
<description>if the session fails to create a subscriber                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TopicSession</class-interface>
<method name="createSubscriber" return-type="jakarta.jms.TopicSubscriber">
<parameters>
<parameter>jakarta.jms.Topic</parameter>
<parameter>java.lang.String</parameter>
<parameter>boolean</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:178</id>
<description>
                            Creates a durable subscriber to the specified topic.
                                 &lt;P&gt;If a client needs to receive all the messages published on a   topic, including the ones published while the subscriber is inactive,  it uses a durable &lt;CODE&gt;TopicSubscriber&lt;/CODE&gt;. The JMS provider  retains a record of this   durable subscription and insures that all messages from the topic's   publishers are retained until they are acknowledged by this   durable subscriber or they have expired.   &lt;P&gt;Sessions with durable subscribers must always provide the same   client identifier. In addition, each client must specify a name that   uniquely identifies (within client identifier) each durable   subscription it creates. Only one session at a time can have a   &lt;CODE&gt;TopicSubscriber&lt;/CODE&gt; for a particular durable subscription.   &lt;P&gt;A client can change an existing durable subscription by creating   a durable &lt;CODE&gt;TopicSubscriber&lt;/CODE&gt; with the same name and a new   topic and/or   message selector. Changing a durable subscriber is equivalent to   unsubscribing (deleting) the old one and creating a new one.   &lt;P&gt;In some cases, a connection may both publish and subscribe to a   topic. The subscriber &lt;CODE&gt;NoLocal&lt;/CODE&gt; attribute allows a subscriber  to inhibit the delivery of messages published by its own connection.  The default value for this attribute is false.
                        </description>
<package>javax.jms</package>
<class-interface>TopicSession</class-interface>
<method name="createDurableSubscriber" return-type="jakarta.jms.TopicSubscriber">
<parameters>
<parameter>jakarta.jms.Topic</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:179</id>
<description>if the session fails to create a subscriber                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TopicSession</class-interface>
<method name="createDurableSubscriber" return-type="jakarta.jms.TopicSubscriber">
<parameters>
<parameter>jakarta.jms.Topic</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:180</id>
<description>
                            Creates a durable subscriber to the specified topic, using a  message selector or specifying whether messages published by its  own connection should be delivered to it.
                                 &lt;P&gt;If a client needs to receive all the messages published on a   topic, including the ones published while the subscriber is inactive,  it uses a durable &lt;CODE&gt;TopicSubscriber&lt;/CODE&gt;. The JMS provider  retains a record of this   durable subscription and insures that all messages from the topic's   publishers are retained until they are acknowledged by this   durable subscriber or they have expired.   &lt;P&gt;Sessions with durable subscribers must always provide the same  client identifier. In addition, each client must specify a name which  uniquely identifies (within client identifier) each durable  subscription it creates. Only one session at a time can have a  &lt;CODE&gt;TopicSubscriber&lt;/CODE&gt; for a particular durable subscription.  An inactive durable subscriber is one that exists but  does not currently have a message consumer associated with it.   &lt;P&gt;A client can change an existing durable subscription by creating   a durable &lt;CODE&gt;TopicSubscriber&lt;/CODE&gt; with the same name and a new   topic and/or   message selector. Changing a durable subscriber is equivalent to   unsubscribing (deleting) the old one and creating a new one.
                        </description>
<package>javax.jms</package>
<class-interface>TopicSession</class-interface>
<method name="createDurableSubscriber" return-type="jakarta.jms.TopicSubscriber">
<parameters>
<parameter>jakarta.jms.Topic</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:181</id>
<description>if the session fails to create a subscriber                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TopicSession</class-interface>
<method name="createDurableSubscriber" return-type="jakarta.jms.TopicSubscriber">
<parameters>
<parameter>jakarta.jms.Topic</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
<parameter>boolean</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:182</id>
<description>
                            Creates a publisher for the specified topic.
                               &lt;P&gt;A client uses a &lt;CODE&gt;TopicPublisher&lt;/CODE&gt; object to publish   messages on a topic.  Each time a client creates a &lt;CODE&gt;TopicPublisher&lt;/CODE&gt; on a topic, it  defines a   new sequence of messages that have no ordering relationship with the   messages it has previously sent.
                        </description>
<package>javax.jms</package>
<class-interface>TopicSession</class-interface>
<method name="createPublisher" return-type="jakarta.jms.TopicPublisher">
<parameters>
<parameter>jakarta.jms.Topic</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:183</id>
<description>if the session fails to create a publisher                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TopicSession</class-interface>
<method name="createPublisher" return-type="jakarta.jms.TopicPublisher">
<parameters>
<parameter>jakarta.jms.Topic</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:184</id>
<description>
                            Creates a &lt;CODE&gt;TemporaryTopic&lt;/CODE&gt; object.
                             Its lifetime will be that   of the &lt;CODE&gt;TopicConnection&lt;/CODE&gt; unless it is deleted earlier.
                        </description>
<package>javax.jms</package>
<class-interface>TopicSession</class-interface>
<method name="createTemporaryTopic" return-type="jakarta.jms.TemporaryTopic"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:185</id>
<description>if the session fails to create a temporary                          topic due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TopicSession</class-interface>
<method name="createTemporaryTopic" return-type="jakarta.jms.TemporaryTopic">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:186</id>
<description>
                            Unsubscribes a durable subscription that has been created by a client.
                                 &lt;P&gt;This method deletes the state being maintained on behalf of the   subscriber by its provider.   &lt;P&gt;It is erroneous for a client to delete a durable subscription  while there is an active &lt;CODE&gt;TopicSubscriber&lt;/CODE&gt; for the   subscription, or while a consumed message is part of a pending   transaction or has not been acknowledged in the session.
                        </description>
<package>javax.jms</package>
<class-interface>TopicSession</class-interface>
<method name="unsubscribe" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:187</id>
<description>if the session fails to unsubscribe to the                           durable subscription due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TopicSession</class-interface>
<method name="unsubscribe" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:188</id>
<description>
                            Gets the name of this topic.
                                 &lt;P&gt;Clients that depend upon the name are not portable.
                        </description>
<package>javax.jms</package>
<class-interface>Topic</class-interface>
<method name="getTopicName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:189</id>
<description>if the JMS provider implementation of                           &lt;CODE&gt;Topic&lt;/CODE&gt; fails to return the topic                          name due to some internal                          error.</description>
<package>javax.jms</package>
<class-interface>Topic</class-interface>
<method name="getTopicName" return-type="java.lang.String">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:190</id>
<description>
                            Returns a string representation of this object.
                        </description>
<package>javax.jms</package>
<class-interface>Topic</class-interface>
<method name="toString" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:191</id>
<description>
                            Gets the &lt;CODE&gt;Topic&lt;/CODE&gt; associated with this subscriber.
                        </description>
<package>javax.jms</package>
<class-interface>TopicSubscriber</class-interface>
<method name="getTopic" return-type="jakarta.jms.Topic"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:192</id>
<description>if the JMS provider fails to get the topic for                          this topic subscriber                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TopicSubscriber</class-interface>
<method name="getTopic" return-type="jakarta.jms.Topic">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:193</id>
<description>
                            Gets the &lt;CODE&gt;NoLocal&lt;/CODE&gt; attribute for this subscriber.
                               The default value for this attribute is false.
                        </description>
<package>javax.jms</package>
<class-interface>TopicSubscriber</class-interface>
<method name="getNoLocal" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:194</id>
<description>if the JMS provider fails to get the                          &lt;CODE&gt;NoLocal&lt;/CODE&gt; attribute for                          this topic subscriber                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TopicSubscriber</class-interface>
<method name="getNoLocal" return-type="boolean">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:195</id>
<description>
                            Gets the topic associated with this &lt;CODE&gt;TopicPublisher&lt;/CODE&gt;.
                        </description>
<package>javax.jms</package>
<class-interface>TopicPublisher</class-interface>
<method name="getTopic" return-type="jakarta.jms.Topic"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:196</id>
<description>if the JMS provider fails to get the topic for                          this &lt;CODE&gt;TopicPublisher&lt;/CODE&gt;                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TopicPublisher</class-interface>
<method name="getTopic" return-type="jakarta.jms.Topic">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:197</id>
<description>
                            Publishes a message to the topic.
                              Uses the &lt;CODE&gt;TopicPublisher&lt;/CODE&gt;'s default delivery mode, priority,  and time to live.
                            
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>TopicPublisher</class-interface>
<method name="publish" return-type="void">
<parameters>
<parameter>jakarta.jms.Message</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:198</id>
<description>if the JMS provider fails to publish the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TopicPublisher</class-interface>
<method name="publish" return-type="void">
<parameters>
<parameter>jakarta.jms.Message</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:199</id>
<description>
                            Publishes a message to the topic, specifying delivery mode,  priority, and time to live.
                        </description>
<package>javax.jms</package>
<class-interface>TopicPublisher</class-interface>
<method name="publish" return-type="void">
<parameters>
<parameter>jakarta.jms.Message</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:200</id>
<description>if the JMS provider fails to publish the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TopicPublisher</class-interface>
<method name="publish" return-type="void">
<parameters>
<parameter>jakarta.jms.Message</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
<parameter>long</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:201</id>
<description>
                            Publishes a message to a topic for an unidentified message producer.
                               Uses the &lt;CODE&gt;TopicPublisher&lt;/CODE&gt;'s default delivery mode,   priority, and time to live.     &lt;P&gt;Typically, a message producer is assigned a topic at creation   time; however, the JMS API also supports unidentified message producers,  which require that the topic be supplied every time a message is  published.
                            
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>TopicPublisher</class-interface>
<method name="publish" return-type="void">
<parameters>
<parameter>jakarta.jms.Topic</parameter>
<parameter>jakarta.jms.Message</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:202</id>
<description>if the JMS provider fails to publish the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TopicPublisher</class-interface>
<method name="publish" return-type="void">
<parameters>
<parameter>jakarta.jms.Topic</parameter>
<parameter>jakarta.jms.Message</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:203</id>
<description>
                            Publishes a message to a topic for an unidentified message   producer, specifying delivery mode, priority and time to live.
                                 &lt;P&gt;Typically, a message producer is assigned a topic at creation  time; however, the JMS API also supports unidentified message producers,  which require that the topic be supplied every time a message is  published.
                        </description>
<package>javax.jms</package>
<class-interface>TopicPublisher</class-interface>
<method name="publish" return-type="void">
<parameters>
<parameter>jakarta.jms.Topic</parameter>
<parameter>jakarta.jms.Message</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:204</id>
<description>if the JMS provider fails to publish the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TopicPublisher</class-interface>
<method name="publish" return-type="void">
<parameters>
<parameter>jakarta.jms.Topic</parameter>
<parameter>jakarta.jms.Message</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
<parameter>long</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:205</id>
<description>
                            With this acknowledgment mode, the session automatically acknowledges  a client's receipt of a message either when the session has successfully   returned from a call to &lt;CODE&gt;receive&lt;/CODE&gt; or when the message   listener the session has called to process the message successfully   returns.
                        </description>
<package>javax.jms</package>
<class-interface>int</class-interface>
<field name="AUTO_ACKNOWLEDGE" type="public static final"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:206</id>
<description>
                            With this acknowledgment mode, the client acknowledges a consumed   message by calling the message's &lt;CODE&gt;acknowledge&lt;/CODE&gt; method.
                               Acknowledging a consumed message acknowledges all messages that the   session has consumed.   &lt;P&gt;When client acknowledgment mode is used, a client may build up a   large number of unacknowledged messages while attempting to process   them. A JMS provider should provide administrators with a way to   limit client overrun so that clients are not driven to resource   exhaustion and ensuing failure when some resource they are using   is temporarily blocked.
                            
                        </description>
<package>javax.jms</package>
<class-interface>int</class-interface>
<field name="CLIENT_ACKNOWLEDGE" type="public static final"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:207</id>
<description>
                            This acknowledgment mode instructs the session to lazily acknowledge   the delivery of messages.
                             This is likely to result in the delivery of   some duplicate messages if the JMS provider fails, so it should only be   used by consumers that can tolerate duplicate messages. Use of this    mode can reduce session overhead by minimizing the work the   session does to prevent duplicates.
                        </description>
<package>javax.jms</package>
<class-interface>int</class-interface>
<field name="DUPS_OK_ACKNOWLEDGE" type="public static final"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:208</id>
<description>
                            Creates a &lt;CODE&gt;BytesMessage&lt;/CODE&gt; object.
                             A &lt;CODE&gt;BytesMessage&lt;/CODE&gt;   object is used to send a message containing a stream of uninterpreted   bytes.
                        </description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="createBytesMessage" return-type="jakarta.jms.BytesMessage"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:209</id>
<description>if the JMS provider fails to create this message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="createBytesMessage" return-type="jakarta.jms.BytesMessage">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:210</id>
<description>
                            Creates a &lt;CODE&gt;MapMessage&lt;/CODE&gt; object.
                             A &lt;CODE&gt;MapMessage&lt;/CODE&gt;   object is used to send a self-defining set of name-value pairs, where   names are &lt;CODE&gt;String&lt;/CODE&gt; objects and values are primitive values   in the Java programming language.
                        </description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="createMapMessage" return-type="jakarta.jms.MapMessage"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:211</id>
<description>if the JMS provider fails to create this message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="createMapMessage" return-type="jakarta.jms.MapMessage">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:212</id>
<description>
                            Creates a &lt;CODE&gt;Message&lt;/CODE&gt; object.
                             The &lt;CODE&gt;Message&lt;/CODE&gt;   interface is the root interface of all JMS messages. A   &lt;CODE&gt;Message&lt;/CODE&gt; object holds all the   standard message header information. It can be sent when a message   containing only header information is sufficient.
                        </description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="createMessage" return-type="jakarta.jms.Message"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:213</id>
<description>if the JMS provider fails to create this message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="createMessage" return-type="jakarta.jms.Message">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:214</id>
<description>
                            Creates an &lt;CODE&gt;ObjectMessage&lt;/CODE&gt; object.
                             An   &lt;CODE&gt;ObjectMessage&lt;/CODE&gt; object is used to send a message   that contains a serializable Java object.
                        </description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="createObjectMessage" return-type="jakarta.jms.ObjectMessage"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:215</id>
<description>if the JMS provider fails to create this message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="createObjectMessage" return-type="jakarta.jms.ObjectMessage">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:216</id>
<description>
                            Creates an initialized &lt;CODE&gt;ObjectMessage&lt;/CODE&gt; object.
                             An   &lt;CODE&gt;ObjectMessage&lt;/CODE&gt; object is used   to send a message that contains a serializable Java object.
                        </description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="createObjectMessage" return-type="jakarta.jms.ObjectMessage">
<parameters>
<parameter>java.io.Serializable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:217</id>
<description>if the JMS provider fails to create this message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="createObjectMessage" return-type="jakarta.jms.ObjectMessage">
<parameters>
<parameter>java.io.Serializable</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:218</id>
<description>
                            Creates a &lt;CODE&gt;StreamMessage&lt;/CODE&gt; object.
                             A   &lt;CODE&gt;StreamMessage&lt;/CODE&gt; object is used to send a   self-defining stream of primitive values in the Java programming   language.
                        </description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="createStreamMessage" return-type="jakarta.jms.StreamMessage"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:219</id>
<description>if the JMS provider fails to create this message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="createStreamMessage" return-type="jakarta.jms.StreamMessage">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:220</id>
<description>
                            Creates a &lt;CODE&gt;TextMessage&lt;/CODE&gt; object.
                             A &lt;CODE&gt;TextMessage&lt;/CODE&gt;   object is used to send a message containing a &lt;CODE&gt;String&lt;/CODE&gt;  object.
                        </description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="createTextMessage" return-type="jakarta.jms.TextMessage"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:221</id>
<description>if the JMS provider fails to create this message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="createTextMessage" return-type="jakarta.jms.TextMessage">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:222</id>
<description>
                            Creates an initialized &lt;CODE&gt;TextMessage&lt;/CODE&gt; object.
                             A   &lt;CODE&gt;TextMessage&lt;/CODE&gt; object is used to send   a message containing a &lt;CODE&gt;String&lt;/CODE&gt;.
                        </description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="createTextMessage" return-type="jakarta.jms.TextMessage">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:223</id>
<description>if the JMS provider fails to create this message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="createTextMessage" return-type="jakarta.jms.TextMessage">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:224</id>
<description>
                            Indicates whether the session is in transacted mode.
                        </description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="getTransacted" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:225</id>
<description>if the JMS provider fails to return the                           transaction mode due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="getTransacted" return-type="boolean">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:226</id>
<description>
                            Commits all messages done in this transaction and releases any locks  currently held.
                        </description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="commit" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:227</id>
<description>if the JMS provider fails to commit the                          transaction due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="commit" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:228</id>
<description>
                            Rolls back any messages done in this transaction and releases any locks   currently held.
                        </description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="rollback" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:229</id>
<description>if the JMS provider fails to roll back the                          transaction due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="rollback" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:230</id>
<description>
                            Closes the session.
                               &lt;P&gt;Since a provider may allocate some resources on behalf of a session   outside the JVM, clients should close the resources when they are not   needed.   Relying on garbage collection to eventually reclaim these resources   may not be timely enough.   &lt;P&gt;There is no need to close the producers and consumers  of a closed session.    &lt;P&gt; This call will block until a &lt;CODE&gt;receive&lt;/CODE&gt; call or message   listener in progress has completed. A blocked message consumer  &lt;CODE&gt;receive&lt;/CODE&gt; call returns &lt;CODE&gt;null&lt;/CODE&gt; when this session   is closed.   &lt;P&gt;Closing a transacted session must roll back the transaction  in progress.    &lt;P&gt;This method is the only &lt;CODE&gt;Session&lt;/CODE&gt; method that can   be called concurrently.    &lt;P&gt;Invoking any other &lt;CODE&gt;Session&lt;/CODE&gt; method on a closed session   must throw a &lt;CODE&gt;JMSException.IllegalStateException&lt;/CODE&gt;. Closing a   closed session must &lt;I&gt;not&lt;/I&gt; throw an exception.
                        </description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="close" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:231</id>
<description>if the JMS provider fails to close the                          session due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="close" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:232</id>
<description>
                            Stops message delivery in this session, and restarts message delivery  with the oldest unacknowledged message.
                                 &lt;P&gt;All consumers deliver messages in a serial order.  Acknowledging a received message automatically acknowledges all   messages that have been delivered to the client.   &lt;P&gt;Restarting a session causes it to take the following actions:   &lt;UL&gt;    &lt;LI&gt;Stop message delivery    &lt;LI&gt;Mark all messages that might have been delivered but not         acknowledged as "redelivered"    &lt;LI&gt;Restart the delivery sequence including all unacknowledged         messages that had been previously delivered. Redelivered messages        do not have to be delivered in         exactly their original delivery order.  &lt;/UL&gt;
                        </description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="recover" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:233</id>
<description>if the JMS provider fails to stop and restart                          message delivery due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="recover" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:234</id>
<description>
                            Returns the session's distinguished message listener (optional).
                            
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="getMessageListener" return-type="jakarta.jms.MessageListener"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:235</id>
<description>if the JMS provider fails to get the message                           listener due to an internal error.</description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="getMessageListener" return-type="jakarta.jms.MessageListener">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:236</id>
<description>
                            Sets the session's distinguished message listener (optional).
                               &lt;P&gt;When the distinguished message listener is set, no other form of   message receipt in the session can   be used; however, all forms of sending messages are still supported.    &lt;P&gt;This is an expert facility not used by regular JMS clients.
                            
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="setMessageListener" return-type="void">
<parameters>
<parameter>jakarta.jms.MessageListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:237</id>
<description>if the JMS provider fails to set the message                           listener due to an internal error.</description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="setMessageListener" return-type="void">
<parameters>
<parameter>jakarta.jms.MessageListener</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:238</id>
<description>
                            Optional operation, intended to be used only by Application Servers,  not by ordinary JMS clients.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Session</class-interface>
<method name="run" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:239</id>
<description>
                            Return a server session from the pool.
                        </description>
<package>javax.jms</package>
<class-interface>ServerSessionPool</class-interface>
<method name="getServerSession" return-type="jakarta.jms.ServerSession"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:240</id>
<description>if an application server fails to                          return a &lt;CODE&gt;ServerSession&lt;/CODE&gt; out of its                          server session pool.</description>
<package>javax.jms</package>
<class-interface>ServerSessionPool</class-interface>
<method name="getServerSession" return-type="jakarta.jms.ServerSession">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:241</id>
<description>
                            Deletes this temporary topic.
                             If there are existing subscribers  still using it, a &lt;CODE&gt;JMSException&lt;/CODE&gt; will be thrown.
                        </description>
<package>javax.jms</package>
<class-interface>TemporaryTopic</class-interface>
<method name="delete" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:242</id>
<description>if the JMS provider fails to delete the                          temporary topic due to some internal error.</description>
<package>javax.jms</package>
<class-interface>TemporaryTopic</class-interface>
<method name="delete" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:243</id>
<description>
                            Creates an &lt;CODE&gt;XATopicSession&lt;/CODE&gt; object.
                        </description>
<package>javax.jms</package>
<class-interface>XATopicConnection</class-interface>
<method name="createXATopicSession" return-type="jakarta.jms.XATopicSession"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:244</id>
<description>if the &lt;CODE&gt;XATopicConnection&lt;/CODE&gt; object                          fails to create an XA topic session due to some                           internal error.</description>
<package>javax.jms</package>
<class-interface>XATopicConnection</class-interface>
<method name="createXATopicSession" return-type="jakarta.jms.XATopicSession">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:245</id>
<description>
                            Creates an &lt;CODE&gt;XATopicSession&lt;/CODE&gt; object.
                        </description>
<package>javax.jms</package>
<class-interface>XATopicConnection</class-interface>
<method name="createTopicSession" return-type="jakarta.jms.TopicSession">
<parameters>
<parameter>boolean</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:246</id>
<description>if the &lt;CODE&gt;XATopicConnection&lt;/CODE&gt; object                          fails to create an XA topic session due to some                           internal error.</description>
<package>javax.jms</package>
<class-interface>XATopicConnection</class-interface>
<method name="createTopicSession" return-type="jakarta.jms.TopicSession">
<parameters>
<parameter>boolean</parameter>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:247</id>
<description>
                            Gets the &lt;CODE&gt;Queue&lt;/CODE&gt; associated with this queue receiver.
                        </description>
<package>javax.jms</package>
<class-interface>QueueReceiver</class-interface>
<method name="getQueue" return-type="jakarta.jms.Queue"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:248</id>
<description>if the JMS provider fails to get the queue for                          this queue receiver                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueReceiver</class-interface>
<method name="getQueue" return-type="jakarta.jms.Queue">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:249</id>
<description>
                            Creates an &lt;CODE&gt;XAQueueSession&lt;/CODE&gt; object.
                        </description>
<package>javax.jms</package>
<class-interface>XAQueueConnection</class-interface>
<method name="createXAQueueSession" return-type="jakarta.jms.XAQueueSession"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:250</id>
<description>if the &lt;CODE&gt;XAQueueConnection&lt;/CODE&gt; object                           fails to create an XA queue session due to some                          internal error.</description>
<package>javax.jms</package>
<class-interface>XAQueueConnection</class-interface>
<method name="createXAQueueSession" return-type="jakarta.jms.XAQueueSession">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:251</id>
<description>
                            Creates an &lt;CODE&gt;XAQueueSession&lt;/CODE&gt; object.
                        </description>
<package>javax.jms</package>
<class-interface>XAQueueConnection</class-interface>
<method name="createQueueSession" return-type="jakarta.jms.QueueSession">
<parameters>
<parameter>boolean</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:252</id>
<description>if the &lt;CODE&gt;XAQueueConnection&lt;/CODE&gt; object                           fails to create an XA queue session due to some                          internal error.</description>
<package>javax.jms</package>
<class-interface>XAQueueConnection</class-interface>
<method name="createQueueSession" return-type="jakarta.jms.QueueSession">
<parameters>
<parameter>boolean</parameter>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:253</id>
<description>
                            Gets the queue associated with this &lt;CODE&gt;QueueSender&lt;/CODE&gt;.
                        </description>
<package>javax.jms</package>
<class-interface>QueueSender</class-interface>
<method name="getQueue" return-type="jakarta.jms.Queue"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:254</id>
<description>if the JMS provider fails to get the queue for                          this &lt;CODE&gt;QueueSender&lt;/CODE&gt;                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueSender</class-interface>
<method name="getQueue" return-type="jakarta.jms.Queue">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:255</id>
<description>
                            Sends a message to the queue.
                             Uses the &lt;CODE&gt;QueueSender&lt;/CODE&gt;'s   default delivery mode, priority, and time to live.
                            
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>QueueSender</class-interface>
<method name="send" return-type="void">
<parameters>
<parameter>jakarta.jms.Message</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:256</id>
<description>if the JMS provider fails to send the message                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueSender</class-interface>
<method name="send" return-type="void">
<parameters>
<parameter>jakarta.jms.Message</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:257</id>
<description>
                            Sends a message to the queue, specifying delivery mode, priority, and   time to live.
                        </description>
<package>javax.jms</package>
<class-interface>QueueSender</class-interface>
<method name="send" return-type="void">
<parameters>
<parameter>jakarta.jms.Message</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:258</id>
<description>if the JMS provider fails to send the message                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueSender</class-interface>
<method name="send" return-type="void">
<parameters>
<parameter>jakarta.jms.Message</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
<parameter>long</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:259</id>
<description>
                            Sends a message to a queue for an unidentified message producer.
                              Uses the &lt;CODE&gt;QueueSender&lt;/CODE&gt;'s default delivery mode, priority,  and time to live.   &lt;P&gt;Typically, a message producer is assigned a queue at creation   time; however, the JMS API also supports unidentified message producers,  which require that the queue be supplied every time a message is  sent.
                            
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>QueueSender</class-interface>
<method name="send" return-type="void">
<parameters>
<parameter>jakarta.jms.Queue</parameter>
<parameter>jakarta.jms.Message</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:260</id>
<description>if the JMS provider fails to send the message                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueSender</class-interface>
<method name="send" return-type="void">
<parameters>
<parameter>jakarta.jms.Queue</parameter>
<parameter>jakarta.jms.Message</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:261</id>
<description>
                            Sends a message to a queue for an unidentified message producer,   specifying delivery mode, priority and time to live.
                                 &lt;P&gt;Typically, a message producer is assigned a queue at creation   time; however, the JMS API also supports unidentified message producers,  which require that the queue be supplied every time a message is  sent.
                        </description>
<package>javax.jms</package>
<class-interface>QueueSender</class-interface>
<method name="send" return-type="void">
<parameters>
<parameter>jakarta.jms.Queue</parameter>
<parameter>jakarta.jms.Message</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:262</id>
<description>if the JMS provider fails to send the message                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueSender</class-interface>
<method name="send" return-type="void">
<parameters>
<parameter>jakarta.jms.Queue</parameter>
<parameter>jakarta.jms.Message</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
<parameter>long</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:263</id>
<description>
                            Gets the queue associated with this queue browser.
                        </description>
<package>javax.jms</package>
<class-interface>QueueBrowser</class-interface>
<method name="getQueue" return-type="jakarta.jms.Queue"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:264</id>
<description>if the JMS provider fails to get the                          queue associated with this browser                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueBrowser</class-interface>
<method name="getQueue" return-type="jakarta.jms.Queue">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:265</id>
<description>
                            Gets this queue browser's message selector expression.
                        </description>
<package>javax.jms</package>
<class-interface>QueueBrowser</class-interface>
<method name="getMessageSelector" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:266</id>
<description>if the JMS provider fails to get the                          message selector for this browser                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueBrowser</class-interface>
<method name="getMessageSelector" return-type="java.lang.String">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:267</id>
<description>
                            Gets an enumeration for browsing the current queue messages in the  order they would be received.
                        </description>
<package>javax.jms</package>
<class-interface>QueueBrowser</class-interface>
<method name="getEnumeration" return-type="java.util.Enumeration"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:268</id>
<description>if the JMS provider fails to get the                          enumeration for this browser                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueBrowser</class-interface>
<method name="getEnumeration" return-type="java.util.Enumeration">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:269</id>
<description>
                            Closes the &lt;CODE&gt;QueueBrowser&lt;/CODE&gt;.
                               &lt;P&gt;Since a provider may allocate some resources on behalf of a   QueueBrowser outside the Java virtual machine, clients should close them  when they   are not needed. Relying on garbage collection to eventually reclaim   these resources may not be timely enough.
                        </description>
<package>javax.jms</package>
<class-interface>QueueBrowser</class-interface>
<method name="close" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:270</id>
<description>if the JMS provider fails to close this                          browser due to some internal error.</description>
<package>javax.jms</package>
<class-interface>QueueBrowser</class-interface>
<method name="close" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:271</id>
<description>
                            Sets the serializable object containing this message's data.
                              It is important to note that an &lt;CODE&gt;ObjectMessage&lt;/CODE&gt;  contains a snapshot of the object at the time &lt;CODE&gt;setObject()&lt;/CODE&gt;  is called; subsequent modifications of the object will have no   effect on the &lt;CODE&gt;ObjectMessage&lt;/CODE&gt; body.
                        </description>
<package>javax.jms</package>
<class-interface>ObjectMessage</class-interface>
<method name="setObject" return-type="void">
<parameters>
<parameter>java.io.Serializable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:272</id>
<description>if the JMS provider fails to set the object                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>ObjectMessage</class-interface>
<method name="setObject" return-type="void">
<parameters>
<parameter>java.io.Serializable</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:273</id>
<description>
                            Gets the serializable object containing this message's data.
                             The   default value is null.
                        </description>
<package>javax.jms</package>
<class-interface>ObjectMessage</class-interface>
<method name="getObject" return-type="java.io.Serializable"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:274</id>
<description>if the JMS provider fails to get the object                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>ObjectMessage</class-interface>
<method name="getObject" return-type="java.io.Serializable">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:275</id>
<description>
                            Passes a message to the listener.
                        </description>
<package>javax.jms</package>
<class-interface>MessageListener</class-interface>
<method name="onMessage" return-type="void">
<parameters>
<parameter>jakarta.jms.Message</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:276</id>
<description>
                            Reads a &lt;code&gt;boolean&lt;/code&gt; from the bytes message stream.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readBoolean" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:277</id>
<description>if the JMS provider fails to read the message                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readBoolean" return-type="boolean">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:278</id>
<description>
                            Reads a signed 8-bit value from the bytes message stream.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readByte" return-type="byte"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:279</id>
<description>if the JMS provider fails to read the message                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readByte" return-type="byte">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:280</id>
<description>
                            Reads an unsigned 8-bit number from the bytes message stream.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readUnsignedByte" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:281</id>
<description>if the JMS provider fails to read the message                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readUnsignedByte" return-type="int">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:282</id>
<description>
                            Reads a signed 16-bit number from the bytes message stream.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readShort" return-type="short"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:283</id>
<description>if the JMS provider fails to read the message                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readShort" return-type="short">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:284</id>
<description>
                            Reads an unsigned 16-bit number from the bytes message stream.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readUnsignedShort" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:285</id>
<description>if the JMS provider fails to read the message                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readUnsignedShort" return-type="int">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:286</id>
<description>
                            Reads a Unicode character value from the bytes message stream.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readChar" return-type="char"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:287</id>
<description>if the JMS provider fails to read the message                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readChar" return-type="char">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:288</id>
<description>
                            Reads a signed 32-bit integer from the bytes message stream.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readInt" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:289</id>
<description>if the JMS provider fails to read the message                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readInt" return-type="int">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:290</id>
<description>
                            Reads a signed 64-bit integer from the bytes message stream.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readLong" return-type="long"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:291</id>
<description>if the JMS provider fails to read the message                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readLong" return-type="long">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:292</id>
<description>
                            Reads a &lt;code&gt;float&lt;/code&gt; from the bytes message stream.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readFloat" return-type="float"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:293</id>
<description>if the JMS provider fails to read the message                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readFloat" return-type="float">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:294</id>
<description>
                            Reads a &lt;code&gt;double&lt;/code&gt; from the bytes message stream.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readDouble" return-type="double"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:295</id>
<description>if the JMS provider fails to read the message                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readDouble" return-type="double">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:296</id>
<description>
                            Reads a string that has been encoded using a modified UTF-8  format from the bytes message stream.
                               &lt;P&gt;For more information on the UTF-8 format, see "File System Safe  UCS Transformation Format (FSS_UTF)", X/Open Preliminary Specification,  X/Open Company Ltd., Document Number: P316. This information also  appears in ISO/IEC 10646, Annex P.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readUTF" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:297</id>
<description>if the JMS provider fails to read the message                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readUTF" return-type="java.lang.String">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:298</id>
<description>
                            Reads a byte array from the bytes message stream.
                               &lt;P&gt;If the length of array &lt;code&gt;value&lt;/code&gt; is less than the number of   bytes remaining to be read from the stream, the array should   be filled. A subsequent call reads the next increment, and so on.    &lt;P&gt;If the number of bytes remaining in the stream is less than the   length of   array &lt;code&gt;value&lt;/code&gt;, the bytes should be read into the array.   The return value of the total number of bytes read will be less than  the length of the array, indicating that there are no more bytes left   to be read from the stream. The next read of the stream returns -1.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readBytes" return-type="int">
<parameters>
<parameter>byte[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:299</id>
<description>if the JMS provider fails to read the message                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readBytes" return-type="int">
<parameters>
<parameter>byte[]</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:300</id>
<description>
                            Reads a portion of the bytes message stream.
                               &lt;P&gt;If the length of array &lt;code&gt;value&lt;/code&gt; is less than the number of  bytes remaining to be read from the stream, the array should   be filled. A subsequent call reads the next increment, and so on.    &lt;P&gt;If the number of bytes remaining in the stream is less than the   length of   array &lt;code&gt;value&lt;/code&gt;, the bytes should be read into the array.   The return value of the total number of bytes read will be less than  the length of the array, indicating that there are no more bytes left   to be read from the stream. The next read of the stream returns -1.   &lt;p&gt; If &lt;code&gt;length&lt;/code&gt; is negative, or  &lt;code&gt;length&lt;/code&gt; is greater than the length of the array  &lt;code&gt;value&lt;/code&gt;, then an &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; is  thrown. No bytes will be read from the stream for this exception case.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readBytes" return-type="int">
<parameters>
<parameter>byte[]</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:301</id>
<description>if the JMS provider fails to read the message                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="readBytes" return-type="int">
<parameters>
<parameter>byte[]</parameter>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:302</id>
<description>
                            Writes a &lt;code&gt;boolean&lt;/code&gt; to the bytes message stream as a 1-byte   value.
                              The value &lt;code&gt;true&lt;/code&gt; is written as the value   &lt;code&gt;(byte)1&lt;/code&gt;; the value &lt;code&gt;false&lt;/code&gt; is written as   the value &lt;code&gt;(byte)0&lt;/code&gt;.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeBoolean" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:303</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeBoolean" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:304</id>
<description>
                            Writes a &lt;code&gt;byte&lt;/code&gt; to the bytes message stream as a 1-byte   value.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeByte" return-type="void">
<parameters>
<parameter>byte</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:305</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeByte" return-type="void">
<parameters>
<parameter>byte</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:306</id>
<description>
                            Writes a &lt;code&gt;short&lt;/code&gt; to the bytes message stream as two bytes,  high byte first.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeShort" return-type="void">
<parameters>
<parameter>short</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:307</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeShort" return-type="void">
<parameters>
<parameter>short</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:308</id>
<description>
                            Writes a &lt;code&gt;char&lt;/code&gt; to the bytes message stream as a 2-byte  value, high byte first.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeChar" return-type="void">
<parameters>
<parameter>char</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:309</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeChar" return-type="void">
<parameters>
<parameter>char</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:310</id>
<description>
                            Writes an &lt;code&gt;int&lt;/code&gt; to the bytes message stream as four bytes,   high byte first.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeInt" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:311</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeInt" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:312</id>
<description>
                            Writes a &lt;code&gt;long&lt;/code&gt; to the bytes message stream as eight bytes,   high byte first.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeLong" return-type="void">
<parameters>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:313</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeLong" return-type="void">
<parameters>
<parameter>long</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:314</id>
<description>
                            Converts the &lt;code&gt;float&lt;/code&gt; argument to an &lt;code&gt;int&lt;/code&gt; using   the  &lt;code&gt;floatToIntBits&lt;/code&gt; method in class &lt;code&gt;Float&lt;/code&gt;,  and then writes that &lt;code&gt;int&lt;/code&gt; value to the bytes message  stream as a 4-byte quantity, high byte first.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeFloat" return-type="void">
<parameters>
<parameter>float</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:315</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeFloat" return-type="void">
<parameters>
<parameter>float</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:316</id>
<description>
                            Converts the &lt;code&gt;double&lt;/code&gt; argument to a &lt;code&gt;long&lt;/code&gt; using   the  &lt;code&gt;doubleToLongBits&lt;/code&gt; method in class &lt;code&gt;Double&lt;/code&gt;,  and then writes that &lt;code&gt;long&lt;/code&gt; value to the bytes message  stream as an 8-byte quantity, high byte first.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeDouble" return-type="void">
<parameters>
<parameter>double</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:317</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeDouble" return-type="void">
<parameters>
<parameter>double</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:318</id>
<description>
                            Writes a string to the bytes message stream using UTF-8 encoding in a   machine-independent manner.
                               &lt;P&gt;For more information on the UTF-8 format, see "File System Safe   UCS Transformation Format (FSS_UTF)", X/Open Preliminary Specification,         X/Open Company Ltd., Document Number: P316. This information also   appears in ISO/IEC 10646, Annex P.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeUTF" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:319</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeUTF" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:320</id>
<description>
                            Writes a byte array to the bytes message stream.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeBytes" return-type="void">
<parameters>
<parameter>byte[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:321</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeBytes" return-type="void">
<parameters>
<parameter>byte[]</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:322</id>
<description>
                            Writes a portion of a byte array to the bytes message stream.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeBytes" return-type="void">
<parameters>
<parameter>byte[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:323</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeBytes" return-type="void">
<parameters>
<parameter>byte[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:324</id>
<description>
                            Writes an object to the bytes message stream.
                               &lt;P&gt;This method works only for the objectified primitive  object types (&lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;,   &lt;code&gt;Long&lt;/code&gt;&amp;nbsp;...), &lt;code&gt;String&lt;/code&gt; objects, and byte   arrays.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeObject" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:325</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="writeObject" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:326</id>
<description>
                            Puts the message body in read-only mode and repositions the stream of   bytes to the beginning.
                        </description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="reset" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:327</id>
<description>if the JMS provider fails to reset the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>BytesMessage</class-interface>
<method name="reset" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:328</id>
<description>
                            Reads a &lt;code&gt;boolean&lt;/code&gt; from the stream message.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readBoolean" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:329</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readBoolean" return-type="boolean">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:330</id>
<description>
                            Reads a &lt;code&gt;byte&lt;/code&gt; value from the stream message.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readByte" return-type="byte"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:331</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readByte" return-type="byte">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:332</id>
<description>
                            Reads a 16-bit integer from the stream message.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readShort" return-type="short"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:333</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readShort" return-type="short">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:334</id>
<description>
                            Reads a Unicode character value from the stream message.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readChar" return-type="char"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:335</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readChar" return-type="char">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:336</id>
<description>
                            Reads a 32-bit integer from the stream message.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readInt" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:337</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readInt" return-type="int">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:338</id>
<description>
                            Reads a 64-bit integer from the stream message.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readLong" return-type="long"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:339</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readLong" return-type="long">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:340</id>
<description>
                            Reads a &lt;code&gt;float&lt;/code&gt; from the stream message.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readFloat" return-type="float"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:341</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readFloat" return-type="float">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:342</id>
<description>
                            Reads a &lt;code&gt;double&lt;/code&gt; from the stream message.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readDouble" return-type="double"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:343</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readDouble" return-type="double">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:344</id>
<description>
                            Reads a &lt;CODE&gt;String&lt;/CODE&gt; from the stream message.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readString" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:345</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readString" return-type="java.lang.String">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:346</id>
<description>
                            Reads a byte array field from the stream message into the   specified &lt;CODE&gt;byte[]&lt;/CODE&gt; object (the read buffer).
                                 &lt;P&gt;To read the field value, &lt;CODE&gt;readBytes&lt;/CODE&gt; should be   successively called   until it returns a value less than the length of the read buffer.  The value of the bytes in the buffer following the last byte   read is undefined.    &lt;P&gt;If &lt;CODE&gt;readBytes&lt;/CODE&gt; returns a value equal to the length of the   buffer, a subsequent &lt;CODE&gt;readBytes&lt;/CODE&gt; call must be made. If there   are no more bytes to be read, this call returns -1.    &lt;P&gt;If the byte array field value is null, &lt;CODE&gt;readBytes&lt;/CODE&gt;   returns -1.   &lt;P&gt;If the byte array field value is empty, &lt;CODE&gt;readBytes&lt;/CODE&gt;   returns 0.    &lt;P&gt;Once the first &lt;CODE&gt;readBytes&lt;/CODE&gt; call on a &lt;CODE&gt;byte[]&lt;/CODE&gt;  field value has been made,  the full value of the field must be read before it is valid to read   the next field. An attempt to read the next field before that has   been done will throw a &lt;CODE&gt;MessageFormatException&lt;/CODE&gt;.    &lt;P&gt;To read the byte field value into a new &lt;CODE&gt;byte[]&lt;/CODE&gt; object,   use the &lt;CODE&gt;readObject&lt;/CODE&gt; method.
                            
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readBytes" return-type="int">
<parameters>
<parameter>byte[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:347</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readBytes" return-type="int">
<parameters>
<parameter>byte[]</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:348</id>
<description>
                            Reads an object from the stream message.
                               &lt;P&gt;This method can be used to return, in objectified format,  an object in the Java programming language ("Java object") that has   been written to the stream with the equivalent  &lt;CODE&gt;writeObject&lt;/CODE&gt; method call, or its equivalent primitive  &lt;CODE&gt;write&lt;I&gt;type&lt;/I&gt;&lt;/CODE&gt; method.     &lt;P&gt;Note that byte values are returned as &lt;CODE&gt;byte[]&lt;/CODE&gt;, not   &lt;CODE&gt;Byte[]&lt;/CODE&gt;.   &lt;P&gt;An attempt to call &lt;CODE&gt;readObject&lt;/CODE&gt; to read a byte field   value into a new &lt;CODE&gt;byte[]&lt;/CODE&gt; object before the full value of the  byte field has been read will throw a   &lt;CODE&gt;MessageFormatException&lt;/CODE&gt;.
                            
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readObject" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:349</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="readObject" return-type="java.lang.Object">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:350</id>
<description>
                            Writes a &lt;code&gt;boolean&lt;/code&gt; to the stream message.
                              The value &lt;code&gt;true&lt;/code&gt; is written as the value   &lt;code&gt;(byte)1&lt;/code&gt;; the value &lt;code&gt;false&lt;/code&gt; is written as   the value &lt;code&gt;(byte)0&lt;/code&gt;.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeBoolean" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:351</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeBoolean" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:352</id>
<description>
                            Writes a &lt;code&gt;byte&lt;/code&gt; to the stream message.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeByte" return-type="void">
<parameters>
<parameter>byte</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:353</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeByte" return-type="void">
<parameters>
<parameter>byte</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:354</id>
<description>
                            Writes a &lt;code&gt;short&lt;/code&gt; to the stream message.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeShort" return-type="void">
<parameters>
<parameter>short</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:355</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeShort" return-type="void">
<parameters>
<parameter>short</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:356</id>
<description>
                            Writes a &lt;code&gt;char&lt;/code&gt; to the stream message.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeChar" return-type="void">
<parameters>
<parameter>char</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:357</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeChar" return-type="void">
<parameters>
<parameter>char</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:358</id>
<description>
                            Writes an &lt;code&gt;int&lt;/code&gt; to the stream message.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeInt" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:359</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeInt" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:360</id>
<description>
                            Writes a &lt;code&gt;long&lt;/code&gt; to the stream message.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeLong" return-type="void">
<parameters>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:361</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeLong" return-type="void">
<parameters>
<parameter>long</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:362</id>
<description>
                            Writes a &lt;code&gt;float&lt;/code&gt; to the stream message.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeFloat" return-type="void">
<parameters>
<parameter>float</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:363</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeFloat" return-type="void">
<parameters>
<parameter>float</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:364</id>
<description>
                            Writes a &lt;code&gt;double&lt;/code&gt; to the stream message.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeDouble" return-type="void">
<parameters>
<parameter>double</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:365</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeDouble" return-type="void">
<parameters>
<parameter>double</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:366</id>
<description>
                            Writes a &lt;code&gt;String&lt;/code&gt; to the stream message.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeString" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:367</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeString" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:368</id>
<description>
                            Writes a byte array field to the stream message.
                               &lt;P&gt;The byte array &lt;code&gt;value&lt;/code&gt; is written to the message  as a byte array field. Consecutively written byte array fields are   treated as two distinct fields when the fields are read.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeBytes" return-type="void">
<parameters>
<parameter>byte[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:369</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeBytes" return-type="void">
<parameters>
<parameter>byte[]</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:370</id>
<description>
                            Writes a portion of a byte array as a byte array field to the stream   message.
                                 &lt;P&gt;The a portion of the byte array &lt;code&gt;value&lt;/code&gt; is written to the  message as a byte array field. Consecutively written byte   array fields are treated as two distinct fields when the fields are   read.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeBytes" return-type="void">
<parameters>
<parameter>byte[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:371</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeBytes" return-type="void">
<parameters>
<parameter>byte[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:372</id>
<description>
                            Writes an object to the stream message.
                               &lt;P&gt;This method works only for the objectified primitive  object types (&lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;,   &lt;code&gt;Long&lt;/code&gt;&amp;nbsp;...), &lt;code&gt;String&lt;/code&gt; objects, and byte   arrays.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeObject" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:373</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="writeObject" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:374</id>
<description>
                            Puts the message body in read-only mode and repositions the stream  to the beginning.
                        </description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="reset" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:375</id>
<description>if the JMS provider fails to reset the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>StreamMessage</class-interface>
<method name="reset" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:376</id>
<description>
                            Sets the string containing this message's data.
                        </description>
<package>javax.jms</package>
<class-interface>TextMessage</class-interface>
<method name="setText" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:377</id>
<description>if the JMS provider fails to set the text due to                          some internal error.</description>
<package>javax.jms</package>
<class-interface>TextMessage</class-interface>
<method name="setText" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:378</id>
<description>
                            Gets the string containing this message's data.
                              The default  value is null.
                        </description>
<package>javax.jms</package>
<class-interface>TextMessage</class-interface>
<method name="getText" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:379</id>
<description>if the JMS provider fails to get the text due to                          some internal error.</description>
<package>javax.jms</package>
<class-interface>TextMessage</class-interface>
<method name="getText" return-type="java.lang.String">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:380</id>
<description>
                            The message producer's default delivery mode is &lt;CODE&gt;PERSISTENT&lt;/CODE&gt;.
                            
                        </description>
<package>javax.jms</package>
<class-interface>int</class-interface>
<field name="DEFAULT_DELIVERY_MODE" type="public static final"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:381</id>
<description>
                            The message producer's default priority is 4.
                        </description>
<package>javax.jms</package>
<class-interface>int</class-interface>
<field name="DEFAULT_PRIORITY" type="public static final"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:382</id>
<description>
                            The message producer's default time to live is unlimited; the message    never expires.
                        </description>
<package>javax.jms</package>
<class-interface>long</class-interface>
<field name="DEFAULT_TIME_TO_LIVE" type="public static final"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:383</id>
<description>
                            Gets the message ID.
                               &lt;P&gt;The &lt;CODE&gt;JMSMessageID&lt;/CODE&gt; header field contains a value that   uniquely identifies each message sent by a provider.     &lt;P&gt;When a message is sent, &lt;CODE&gt;JMSMessageID&lt;/CODE&gt; can be ignored.   When the &lt;CODE&gt;send&lt;/CODE&gt; or &lt;CODE&gt;publish&lt;/CODE&gt; method returns, it   contains a provider-assigned value.   &lt;P&gt;A &lt;CODE&gt;JMSMessageID&lt;/CODE&gt; is a &lt;CODE&gt;String&lt;/CODE&gt; value that   should function as a   unique key for identifying messages in a historical repository.   The exact scope of uniqueness is provider-defined. It should at   least cover all messages for a specific installation of a   provider, where an installation is some connected set of message   routers.   &lt;P&gt;All &lt;CODE&gt;JMSMessageID&lt;/CODE&gt; values must start with the prefix   &lt;CODE&gt;'ID:'&lt;/CODE&gt;.   Uniqueness of message ID values across different providers is   not required.   &lt;P&gt;Since message IDs take some effort to create and increase a  message's size, some JMS providers may be able to optimize message  overhead if they are given a hint that the message ID is not used by  an application. By calling the   &lt;CODE&gt;MessageProducer.setDisableMessageID&lt;/CODE&gt; method, a JMS client   enables this potential optimization for all messages sent by that   message producer. If the JMS provider accepts this  hint, these messages must have the message ID set to null; if the   provider ignores the hint, the message ID must be set to its normal   unique value.
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSMessageID" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:384</id>
<description>if the JMS provider fails to get the message ID                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSMessageID" return-type="java.lang.String">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:385</id>
<description>
                            Sets the message ID.
                                 &lt;P&gt;JMS providers set this field when a message is sent. This method  can be used to change the value for a message that has been received.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSMessageID" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:386</id>
<description>if the JMS provider fails to set the message ID                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSMessageID" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:387</id>
<description>
                            Gets the message timestamp.
                                 &lt;P&gt;The &lt;CODE&gt;JMSTimestamp&lt;/CODE&gt; header field contains the time a   message was   handed off to a provider to be sent. It is not the time the   message was actually transmitted, because the actual send may occur   later due to transactions or other client-side queueing of messages.   &lt;P&gt;When a message is sent, &lt;CODE&gt;JMSTimestamp&lt;/CODE&gt; is ignored. When   the &lt;CODE&gt;send&lt;/CODE&gt; or &lt;CODE&gt;publish&lt;/CODE&gt;  method returns, it contains a a time value somewhere in the interval   between the call and the return. The value is in the format of a normal   millis time value in the Java programming language.   &lt;P&gt;Since timestamps take some effort to create and increase a   message's size, some JMS providers may be able to optimize message   overhead if they are given a hint that the timestamp is not used by an   application. By calling the  &lt;CODE&gt;MessageProducer.setDisableMessageTimestamp&lt;/CODE&gt; method, a JMS   client enables this potential optimization for all messages sent by   that message producer. If the JMS provider accepts this  hint, these messages must have the timestamp set to zero; if the   provider ignores the hint, the timestamp must be set to its normal   value.
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSTimestamp" return-type="long"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:388</id>
<description>if the JMS provider fails to get the timestamp                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSTimestamp" return-type="long">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:389</id>
<description>
                            Sets the message timestamp.
                                 &lt;P&gt;JMS providers set this field when a message is sent. This method  can be used to change the value for a message that has been received.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSTimestamp" return-type="void">
<parameters>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:390</id>
<description>if the JMS provider fails to set the timestamp                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSTimestamp" return-type="void">
<parameters>
<parameter>long</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:391</id>
<description>
                            Gets the correlation ID as an array of bytes for the message.
                                 &lt;P&gt;The use of a &lt;CODE&gt;byte[]&lt;/CODE&gt; value for   &lt;CODE&gt;JMSCorrelationID&lt;/CODE&gt; is non-portable.
                            
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSCorrelationIDAsBytes" return-type="byte[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:392</id>
<description>if the JMS provider fails to get the correlation                          ID due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSCorrelationIDAsBytes" return-type="byte[]">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:393</id>
<description>
                            Sets the correlation ID as an array of bytes for the message.
                                &lt;P&gt;The array is copied before the method returns, so  future modifications to the array will not alter this message header.     &lt;P&gt;If a provider supports the native concept of correlation ID, a   JMS client may need to assign specific &lt;CODE&gt;JMSCorrelationID&lt;/CODE&gt;   values to match those expected by native messaging clients.   JMS providers without native correlation ID values are not required to   support this method and its corresponding get method; their   implementation may throw a  &lt;CODE&gt;java.lang.UnsupportedOperationException&lt;/CODE&gt;.    &lt;P&gt;The use of a &lt;CODE&gt;byte[]&lt;/CODE&gt; value for   &lt;CODE&gt;JMSCorrelationID&lt;/CODE&gt; is non-portable.
                            
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSCorrelationIDAsBytes" return-type="void">
<parameters>
<parameter>byte[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:394</id>
<description>if the JMS provider fails to set the correlation                          ID due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSCorrelationIDAsBytes" return-type="void">
<parameters>
<parameter>byte[]</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:395</id>
<description>
                            Sets the correlation ID for the message.
                                 &lt;P&gt;A client can use the &lt;CODE&gt;JMSCorrelationID&lt;/CODE&gt; header field to   link one message with another. A typical use is to link a response   message with its request message.     &lt;P&gt;&lt;CODE&gt;JMSCorrelationID&lt;/CODE&gt; can hold one of the following:     &lt;UL&gt;       &lt;LI&gt;A provider-specific message ID       &lt;LI&gt;An application-specific &lt;CODE&gt;String&lt;/CODE&gt;       &lt;LI&gt;A provider-native &lt;CODE&gt;byte[]&lt;/CODE&gt; value     &lt;/UL&gt;     &lt;P&gt;Since each message sent by a JMS provider is assigned a message ID  value, it is convenient to link messages via message ID. All message ID  values must start with the &lt;CODE&gt;'ID:'&lt;/CODE&gt; prefix.     &lt;P&gt;In some cases, an application (made up of several clients) needs to  use an application-specific value for linking messages. For instance,  an application may use &lt;CODE&gt;JMSCorrelationID&lt;/CODE&gt; to hold a value   referencing some external information. Application-specified values   must not start with the &lt;CODE&gt;'ID:'&lt;/CODE&gt; prefix; this is reserved for   provider-generated message ID values.     &lt;P&gt;If a provider supports the native concept of correlation ID, a JMS  client may need to assign specific &lt;CODE&gt;JMSCorrelationID&lt;/CODE&gt; values   to match those expected by clients that do not use the JMS API. A   &lt;CODE&gt;byte[]&lt;/CODE&gt; value is used for this  purpose. JMS providers without native correlation ID values are not  required to support &lt;CODE&gt;byte[]&lt;/CODE&gt; values. The use of a   &lt;CODE&gt;byte[]&lt;/CODE&gt; value for &lt;CODE&gt;JMSCorrelationID&lt;/CODE&gt; is   non-portable.
                            
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSCorrelationID" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:396</id>
<description>if the JMS provider fails to set the correlation                          ID due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSCorrelationID" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:397</id>
<description>
                            Gets the correlation ID for the message.
                                 &lt;P&gt;This method is used to return correlation ID values that are   either provider-specific message IDs or application-specific   &lt;CODE&gt;String&lt;/CODE&gt; values.
                            
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSCorrelationID" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:398</id>
<description>if the JMS provider fails to get the correlation                          ID due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSCorrelationID" return-type="java.lang.String">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:399</id>
<description>
                            Gets the &lt;CODE&gt;Destination&lt;/CODE&gt; object to which a reply to this   message should be sent.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSReplyTo" return-type="jakarta.jms.Destination"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:400</id>
<description>if the JMS provider fails to get the                            &lt;CODE&gt;JMSReplyTo&lt;/CODE&gt; destination due to some                           internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSReplyTo" return-type="jakarta.jms.Destination">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:401</id>
<description>
                            Sets the &lt;CODE&gt;Destination&lt;/CODE&gt; object to which a reply to this   message should be sent.
                                 &lt;P&gt;The &lt;CODE&gt;JMSReplyTo&lt;/CODE&gt; header field contains the destination   where a reply   to the current message should be sent. If it is null, no reply is   expected. The destination may be either a &lt;CODE&gt;Queue&lt;/CODE&gt; object or  a &lt;CODE&gt;Topic&lt;/CODE&gt; object.   &lt;P&gt;Messages sent with a null &lt;CODE&gt;JMSReplyTo&lt;/CODE&gt; value may be a   notification of some event, or they may just be some data the sender   thinks is of interest.   &lt;P&gt;Messages with a &lt;CODE&gt;JMSReplyTo&lt;/CODE&gt; value typically expect a   response. A response is optional; it is up to the client to decide.    These messages are called requests. A message sent in response to a   request is called a reply.   &lt;P&gt;In some cases a client may wish to match a request it sent earlier   with a reply it has just received. The client can use the   &lt;CODE&gt;JMSCorrelationID&lt;/CODE&gt; header field for this purpose.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSReplyTo" return-type="void">
<parameters>
<parameter>jakarta.jms.Destination</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:402</id>
<description>if the JMS provider fails to set the                            &lt;CODE&gt;JMSReplyTo&lt;/CODE&gt; destination due to some                           internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSReplyTo" return-type="void">
<parameters>
<parameter>jakarta.jms.Destination</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:403</id>
<description>
                            Gets the &lt;CODE&gt;Destination&lt;/CODE&gt; object for this message.
                                 &lt;P&gt;The &lt;CODE&gt;JMSDestination&lt;/CODE&gt; header field contains the   destination to which the message is being sent.     &lt;P&gt;When a message is sent, this field is ignored. After completion  of the &lt;CODE&gt;send&lt;/CODE&gt; or &lt;CODE&gt;publish&lt;/CODE&gt; method, the field   holds the destination specified by the method.     &lt;P&gt;When a message is received, its &lt;CODE&gt;JMSDestination&lt;/CODE&gt; value   must be equivalent to the value assigned when it was sent.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSDestination" return-type="jakarta.jms.Destination"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:404</id>
<description>if the JMS provider fails to get the destination                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSDestination" return-type="jakarta.jms.Destination">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:405</id>
<description>
                            Sets the &lt;CODE&gt;Destination&lt;/CODE&gt; object for this message.
                                 &lt;P&gt;JMS providers set this field when a message is sent. This method   can be used to change the value for a message that has been received.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSDestination" return-type="void">
<parameters>
<parameter>jakarta.jms.Destination</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:406</id>
<description>if the JMS provider fails to set the destination                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSDestination" return-type="void">
<parameters>
<parameter>jakarta.jms.Destination</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:407</id>
<description>
                            Gets the &lt;CODE&gt;DeliveryMode&lt;/CODE&gt; value specified for this message.
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSDeliveryMode" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:408</id>
<description>if the JMS provider fails to get the                           delivery mode due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSDeliveryMode" return-type="int">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:409</id>
<description>
                            Sets the &lt;CODE&gt;DeliveryMode&lt;/CODE&gt; value for this message.
                                 &lt;P&gt;JMS providers set this field when a message is sent. This method   can be used to change the value for a message that has been received.
                            
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSDeliveryMode" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:410</id>
<description>if the JMS provider fails to set the                           delivery mode due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSDeliveryMode" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:411</id>
<description>
                            Gets an indication of whether this message is being redelivered.
                               &lt;P&gt;If a client receives a message with the &lt;CODE&gt;JMSRedelivered&lt;/CODE&gt;   field set,  it is likely, but not guaranteed, that this message was delivered  earlier but that its receipt was not acknowledged  at that time.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSRedelivered" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:412</id>
<description>if the JMS provider fails to get the redelivered                          state due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSRedelivered" return-type="boolean">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:413</id>
<description>
                            Specifies whether this message is being redelivered.
                                 &lt;P&gt;This field is set at the time the message is delivered. This  method can be used to change the value for a message that has  been received.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSRedelivered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:414</id>
<description>if the JMS provider fails to set the redelivered                          state due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSRedelivered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:415</id>
<description>
                            Gets the message type identifier supplied by the client when the  message was sent.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:416</id>
<description>if the JMS provider fails to get the message                           type due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSType" return-type="java.lang.String">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:417</id>
<description>
                            Sets the message type.
                               &lt;P&gt;Some JMS providers use a message repository that contains the   definitions of messages sent by applications. The &lt;CODE&gt;JMSType&lt;/CODE&gt;   header field may reference a message's definition in the provider's  repository.   &lt;P&gt;The JMS API does not define a standard message definition repository,  nor does it define a naming policy for the definitions it contains.    &lt;P&gt;Some messaging systems require that a message type definition for   each application message be created and that each message specify its   type. In order to work with such JMS providers, JMS clients should   assign a value to &lt;CODE&gt;JMSType&lt;/CODE&gt;, whether the application makes   use of it or not. This ensures that the field is properly set for those   providers that require it.   &lt;P&gt;To ensure portability, JMS clients should use symbolic values for   &lt;CODE&gt;JMSType&lt;/CODE&gt; that can be configured at installation time to the   values defined in the current provider's message repository. If string   literals are used, they may not be valid type names for some JMS   providers.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:418</id>
<description>if the JMS provider fails to set the message                           type due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:419</id>
<description>
                            Gets the message's expiration value.
                                 &lt;P&gt;When a message is sent, the &lt;CODE&gt;JMSExpiration&lt;/CODE&gt; header field   is left unassigned. After completion of the &lt;CODE&gt;send&lt;/CODE&gt; or   &lt;CODE&gt;publish&lt;/CODE&gt; method, it holds the expiration time of the  message. This is the sum of the time-to-live value specified by the  client and the GMT at the time of the &lt;CODE&gt;send&lt;/CODE&gt; or   &lt;CODE&gt;publish&lt;/CODE&gt;.   &lt;P&gt;If the time-to-live is specified as zero, &lt;CODE&gt;JMSExpiration&lt;/CODE&gt;   is set to zero to indicate that the message does not expire.   &lt;P&gt;When a message's expiration time is reached, a provider should  discard it. The JMS API does not define any form of notification of   message expiration.   &lt;P&gt;Clients should not receive messages that have expired; however,  the JMS API does not guarantee that this will not happen.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSExpiration" return-type="long"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:420</id>
<description>if the JMS provider fails to get the message                           expiration due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSExpiration" return-type="long">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:421</id>
<description>
                            Sets the message's expiration value.
                               &lt;P&gt;JMS providers set this field when a message is sent. This method   can be used to change the value for a message that has been received.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSExpiration" return-type="void">
<parameters>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:422</id>
<description>if the JMS provider fails to set the message                           expiration due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSExpiration" return-type="void">
<parameters>
<parameter>long</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:423</id>
<description>
                            Gets the message priority level.
                                 &lt;P&gt;The JMS API defines ten levels of priority value, with 0 as the   lowest  priority and 9 as the highest. In addition, clients should consider  priorities 0-4 as gradations of normal priority and priorities 5-9  as gradations of expedited priority.     &lt;P&gt;The JMS API does not require that a provider strictly implement   priority   ordering of messages; however, it should do its best to deliver   expedited messages ahead of normal messages.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSPriority" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:424</id>
<description>if the JMS provider fails to get the message                           priority due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getJMSPriority" return-type="int">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:425</id>
<description>
                            Sets the priority level for this message.
                                 &lt;P&gt;JMS providers set this field when a message is sent. This method   can be used to change the value for a message that has been received.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSPriority" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:426</id>
<description>if the JMS provider fails to set the message                           priority due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setJMSPriority" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:427</id>
<description>
                            Clears a message's properties.
                               &lt;P&gt;The message's header fields and body are not cleared.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="clearProperties" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:428</id>
<description>if the JMS provider fails to clear the message                           properties due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="clearProperties" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:429</id>
<description>
                            Indicates whether a property value exists.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="propertyExists" return-type="boolean">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:430</id>
<description>if the JMS provider fails to determine if the                           property exists due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="propertyExists" return-type="boolean">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:431</id>
<description>
                            Returns the value of the &lt;CODE&gt;boolean&lt;/CODE&gt; property with the    specified name.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getBooleanProperty" return-type="boolean">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:432</id>
<description>if the JMS provider fails to get the property                          value due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getBooleanProperty" return-type="boolean">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:433</id>
<description>
                            Returns the value of the &lt;CODE&gt;byte&lt;/CODE&gt; property with the specified   name.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getByteProperty" return-type="byte">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:434</id>
<description>if the JMS provider fails to get the property                          value due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getByteProperty" return-type="byte">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:435</id>
<description>
                            Returns the value of the &lt;CODE&gt;short&lt;/CODE&gt; property with the specified   name.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getShortProperty" return-type="short">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:436</id>
<description>if the JMS provider fails to get the property                          value due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getShortProperty" return-type="short">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:437</id>
<description>
                            Returns the value of the &lt;CODE&gt;int&lt;/CODE&gt; property with the specified   name.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getIntProperty" return-type="int">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:438</id>
<description>if the JMS provider fails to get the property                          value due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getIntProperty" return-type="int">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:439</id>
<description>
                            Returns the value of the &lt;CODE&gt;long&lt;/CODE&gt; property with the specified   name.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getLongProperty" return-type="long">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:440</id>
<description>if the JMS provider fails to get the property                          value due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getLongProperty" return-type="long">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:441</id>
<description>
                            Returns the value of the &lt;CODE&gt;float&lt;/CODE&gt; property with the specified   name.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getFloatProperty" return-type="float">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:442</id>
<description>if the JMS provider fails to get the property                          value due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getFloatProperty" return-type="float">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:443</id>
<description>
                            Returns the value of the &lt;CODE&gt;double&lt;/CODE&gt; property with the specified  name.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getDoubleProperty" return-type="double">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:444</id>
<description>if the JMS provider fails to get the property                          value due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getDoubleProperty" return-type="double">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:445</id>
<description>
                            Returns the value of the &lt;CODE&gt;String&lt;/CODE&gt; property with the specified  name.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getStringProperty" return-type="java.lang.String">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:446</id>
<description>if the JMS provider fails to get the property                          value due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getStringProperty" return-type="java.lang.String">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:447</id>
<description>
                            Returns the value of the Java object property with the specified name.
                                 &lt;P&gt;This method can be used to return, in objectified format,  an object that has been stored as a property in the message with the   equivalent &lt;CODE&gt;setObjectProperty&lt;/CODE&gt; method call, or its equivalent  primitive &lt;CODE&gt;set&lt;I&gt;type&lt;/I&gt;Property&lt;/CODE&gt; method.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getObjectProperty" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:448</id>
<description>if the JMS provider fails to get the property                          value due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getObjectProperty" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:449</id>
<description>
                            Returns an &lt;CODE&gt;Enumeration&lt;/CODE&gt; of all the property names.
                               &lt;P&gt;Note that JMS standard header fields are not considered  properties and are not returned in this enumeration.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getPropertyNames" return-type="java.util.Enumeration"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:450</id>
<description>if the JMS provider fails to get the property                           names due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="getPropertyNames" return-type="java.util.Enumeration">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:451</id>
<description>
                            Sets a &lt;CODE&gt;boolean&lt;/CODE&gt; property value with the specified name into   the message.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setBooleanProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:452</id>
<description>if the JMS provider fails to set the property                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setBooleanProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>boolean</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:453</id>
<description>
                            Sets a &lt;CODE&gt;byte&lt;/CODE&gt; property value with the specified name into   the message.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setByteProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>byte</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:454</id>
<description>if the JMS provider fails to set the property                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setByteProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>byte</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:455</id>
<description>
                            Sets a &lt;CODE&gt;short&lt;/CODE&gt; property value with the specified name into  the message.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setShortProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>short</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:456</id>
<description>if the JMS provider fails to set the property                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setShortProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>short</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:457</id>
<description>
                            Sets an &lt;CODE&gt;int&lt;/CODE&gt; property value with the specified name into  the message.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setIntProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:458</id>
<description>if the JMS provider fails to set the property                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setIntProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:459</id>
<description>
                            Sets a &lt;CODE&gt;long&lt;/CODE&gt; property value with the specified name into   the message.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setLongProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:460</id>
<description>if the JMS provider fails to set the property                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setLongProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>long</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:461</id>
<description>
                            Sets a &lt;CODE&gt;float&lt;/CODE&gt; property value with the specified name into   the message.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setFloatProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>float</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:462</id>
<description>if the JMS provider fails to set the property                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setFloatProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>float</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:463</id>
<description>
                            Sets a &lt;CODE&gt;double&lt;/CODE&gt; property value with the specified name into   the message.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setDoubleProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>double</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:464</id>
<description>if the JMS provider fails to set the property                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setDoubleProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>double</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:465</id>
<description>
                            Sets a &lt;CODE&gt;String&lt;/CODE&gt; property value with the specified name into   the message.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setStringProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:466</id>
<description>if the JMS provider fails to set the property                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setStringProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:467</id>
<description>
                            Sets a Java object property value with the specified name into the   message.
                                 &lt;P&gt;Note that this method works only for the objectified primitive  object types (&lt;CODE&gt;Integer&lt;/CODE&gt;, &lt;CODE&gt;Double&lt;/CODE&gt;,   &lt;CODE&gt;Long&lt;/CODE&gt; ...) and &lt;CODE&gt;String&lt;/CODE&gt; objects.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setObjectProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:468</id>
<description>if the JMS provider fails to set the property                           due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="setObjectProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:469</id>
<description>
                            Acknowledges all consumed messages of the session of this consumed   message.
                                 &lt;P&gt;All consumed JMS messages support the &lt;CODE&gt;acknowledge&lt;/CODE&gt;   method for use when a client has specified that its JMS session's   consumed messages are to be explicitly acknowledged.  By invoking   &lt;CODE&gt;acknowledge&lt;/CODE&gt; on a consumed message, a client acknowledges   all messages consumed by the session that the message was delivered to.    &lt;P&gt;Calls to &lt;CODE&gt;acknowledge&lt;/CODE&gt; are ignored for both transacted   sessions and sessions specified to use implicit acknowledgement modes.   &lt;P&gt;A client may individually acknowledge each message as it is consumed,  or it may choose to acknowledge messages as an application-defined group   (which is done by calling acknowledge on the last received message of the group,   thereby acknowledging all messages consumed by the session.)   &lt;P&gt;Messages that have been received but not acknowledged may be   redelivered.
                            
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="acknowledge" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:470</id>
<description>if the JMS provider fails to acknowledge the                          messages due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="acknowledge" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:471</id>
<description>
                            Clears out the message body.
                             Clearing a message's body does not clear   its header values or property entries.   &lt;P&gt;If this message body was read-only, calling this method leaves  the message body in the same state as an empty body in a newly  created message.
                        </description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="clearBody" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:472</id>
<description>if the JMS provider fails to clear the message                          body due to some internal error.</description>
<package>javax.jms</package>
<class-interface>Message</class-interface>
<method name="clearBody" return-type="void">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:473</id>
<description>
                            Gets the name of this queue.
                                 &lt;P&gt;Clients that depend upon the name are not portable.
                        </description>
<package>javax.jms</package>
<class-interface>Queue</class-interface>
<method name="getQueueName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:474</id>
<description>if the JMS provider implementation of                           &lt;CODE&gt;Queue&lt;/CODE&gt; fails to return the queue                          name due to some internal                          error.</description>
<package>javax.jms</package>
<class-interface>Queue</class-interface>
<method name="getQueueName" return-type="java.lang.String">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:475</id>
<description>
                            Returns a string representation of this object.
                        </description>
<package>javax.jms</package>
<class-interface>Queue</class-interface>
<method name="toString" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:476</id>
<description>
                            Returns the &lt;CODE&gt;boolean&lt;/CODE&gt; value with the specified name.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getBoolean" return-type="boolean">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:477</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getBoolean" return-type="boolean">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:478</id>
<description>
                            Returns the &lt;CODE&gt;byte&lt;/CODE&gt; value with the specified name.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getByte" return-type="byte">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:479</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getByte" return-type="byte">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:480</id>
<description>
                            Returns the &lt;CODE&gt;short&lt;/CODE&gt; value with the specified name.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getShort" return-type="short">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:481</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getShort" return-type="short">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:482</id>
<description>
                            Returns the Unicode character value with the specified name.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getChar" return-type="char">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:483</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getChar" return-type="char">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:484</id>
<description>
                            Returns the &lt;CODE&gt;int&lt;/CODE&gt; value with the specified name.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getInt" return-type="int">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:485</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getInt" return-type="int">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:486</id>
<description>
                            Returns the &lt;CODE&gt;long&lt;/CODE&gt; value with the specified name.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getLong" return-type="long">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:487</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getLong" return-type="long">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:488</id>
<description>
                            Returns the &lt;CODE&gt;float&lt;/CODE&gt; value with the specified name.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getFloat" return-type="float">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:489</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getFloat" return-type="float">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:490</id>
<description>
                            Returns the &lt;CODE&gt;double&lt;/CODE&gt; value with the specified name.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getDouble" return-type="double">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:491</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getDouble" return-type="double">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:492</id>
<description>
                            Returns the &lt;CODE&gt;String&lt;/CODE&gt; value with the specified name.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getString" return-type="java.lang.String">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:493</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getString" return-type="java.lang.String">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:494</id>
<description>
                            Returns the byte array value with the specified name.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getBytes" return-type="byte[]">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:495</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getBytes" return-type="byte[]">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:496</id>
<description>
                            Returns the value of the object with the specified name.
                               &lt;P&gt;This method can be used to return, in objectified format,  an object in the Java programming language ("Java object") that had   been stored in the Map with the equivalent  &lt;CODE&gt;setObject&lt;/CODE&gt; method call, or its equivalent primitive  &lt;CODE&gt;set&lt;I&gt;type&lt;/I&gt;&lt;/CODE&gt; method.   &lt;P&gt;Note that byte values are returned as &lt;CODE&gt;byte[]&lt;/CODE&gt;, not   &lt;CODE&gt;Byte[]&lt;/CODE&gt;.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getObject" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:497</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getObject" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:498</id>
<description>
                            Returns an &lt;CODE&gt;Enumeration&lt;/CODE&gt; of all the names in the   &lt;CODE&gt;MapMessage&lt;/CODE&gt; object.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getMapNames" return-type="java.util.Enumeration"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:499</id>
<description>if the JMS provider fails to read the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="getMapNames" return-type="java.util.Enumeration">
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:500</id>
<description>
                            Sets a &lt;CODE&gt;boolean&lt;/CODE&gt; value with the specified name into the Map.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setBoolean" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:501</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setBoolean" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>boolean</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:502</id>
<description>
                            Sets a &lt;CODE&gt;byte&lt;/CODE&gt; value with the specified name into the Map.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setByte" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>byte</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:503</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setByte" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>byte</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:504</id>
<description>
                            Sets a &lt;CODE&gt;short&lt;/CODE&gt; value with the specified name into the Map.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setShort" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>short</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:505</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setShort" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>short</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:506</id>
<description>
                            Sets a Unicode character value with the specified name into the Map.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setChar" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>char</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:507</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setChar" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>char</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:508</id>
<description>
                            Sets an &lt;CODE&gt;int&lt;/CODE&gt; value with the specified name into the Map.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setInt" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:509</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setInt" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:510</id>
<description>
                            Sets a &lt;CODE&gt;long&lt;/CODE&gt; value with the specified name into the Map.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setLong" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:511</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setLong" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>long</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:512</id>
<description>
                            Sets a &lt;CODE&gt;float&lt;/CODE&gt; value with the specified name into the Map.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setFloat" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>float</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:513</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setFloat" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>float</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:514</id>
<description>
                            Sets a &lt;CODE&gt;double&lt;/CODE&gt; value with the specified name into the Map.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setDouble" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>double</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:515</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setDouble" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>double</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:516</id>
<description>
                            Sets a &lt;CODE&gt;String&lt;/CODE&gt; value with the specified name into the Map.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setString" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:517</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setString" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:518</id>
<description>
                            Sets a byte array value with the specified name into the Map.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setBytes" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>byte[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:519</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setBytes" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>byte[]</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:520</id>
<description>
                            Sets a portion of the byte array value with the specified name into the   Map.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setBytes" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>byte[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:521</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setBytes" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>byte[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:522</id>
<description>
                            Sets an object value with the specified name into the Map.
                               &lt;P&gt;This method works only for the objectified primitive  object types (&lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;,   &lt;code&gt;Long&lt;/code&gt;&amp;nbsp;...), &lt;code&gt;String&lt;/code&gt; objects, and byte   arrays.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setObject" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:523</id>
<description>if the JMS provider fails to write the message                          due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="setObject" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:524</id>
<description>
                            Indicates whether an item exists in this &lt;CODE&gt;MapMessage&lt;/CODE&gt; object.
                        </description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="itemExists" return-type="boolean">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JMS:JAVADOC:525</id>
<description>if the JMS provider fails to determine if the                           item exists due to some internal error.</description>
<package>javax.jms</package>
<class-interface>MapMessage</class-interface>
<method name="itemExists" return-type="boolean">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.jms.JMSException</throw>
</method>
</assertion>
</assertions>
</javadoc>

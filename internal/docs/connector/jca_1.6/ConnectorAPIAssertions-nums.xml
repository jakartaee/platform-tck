<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE javadoc SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/javadoc_assertions.dtd">
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<javadoc>
<next-available-id>413</next-available-id>
<previous-id>1</previous-id>
<technology>Connector</technology>
<id>Connector</id>
<name>J2EE Connector Architeture Spec</name>
<version>1.6</version>
<assertions>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1</id>
<description>
                            Constructs a new instance with null as its detail message.
                        </description>
<package>jakarta.resource</package>
<class-interface>NotSupportedException</class-interface>
<method name="NotSupportedException" return-type="NotSupportedException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2</id>
<description>
                            Constructs a new instance with the specified detail message.
                        </description>
<package>jakarta.resource</package>
<class-interface>NotSupportedException</class-interface>
<method name="NotSupportedException" return-type="NotSupportedException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>3</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource</package>
<class-interface>NotSupportedException</class-interface>
<method name="NotSupportedException" return-type="NotSupportedException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>4</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource</package>
<class-interface>NotSupportedException</class-interface>
<method name="NotSupportedException" return-type="NotSupportedException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>5</id>
<description>
                            Constructs a new throwable with the specified detail message and  error code.
                        </description>
<package>jakarta.resource</package>
<class-interface>NotSupportedException</class-interface>
<method name="NotSupportedException" return-type="NotSupportedException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>6</id>
<description>
                            Sets the Reference instance.
                             This method is called by the   deployment code to set the Reference that can be later   returned by the getReference method (as defined in the   javax.naming.Referenceable interface).
                            
                        </description>
<package>jakarta.resource</package>
<class-interface>Referenceable</class-interface>
<method name="setReference" return-type="void">
<parameters>
<parameter>javax.naming.Reference</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>7</id>
<description>
                            Get the error code.
                        </description>
<package>jakarta.resource</package>
<class-interface>ResourceException</class-interface>
<method name="getErrorCode" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>8</id>
<description>
                            Get the exception linked to this ResourceException
                        </description>
<package>jakarta.resource</package>
<class-interface>ResourceException</class-interface>
<method name="getLinkedException" return-type="java.lang.Exception"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>9</id>
<description>
                            Returns a detailed message string describing this exception.
                        </description>
<package>jakarta.resource</package>
<class-interface>ResourceException</class-interface>
<method name="getMessage" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>10</id>
<description>
                            Constructs a new instance with null as its detail message.
                        </description>
<package>jakarta.resource</package>
<class-interface>ResourceException</class-interface>
<method name="ResourceException" return-type="ResourceException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>11</id>
<description>
                            Constructs a new instance with the specified detail message.
                        </description>
<package>jakarta.resource</package>
<class-interface>ResourceException</class-interface>
<method name="ResourceException" return-type="ResourceException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>12</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource</package>
<class-interface>ResourceException</class-interface>
<method name="ResourceException" return-type="ResourceException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>13</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource</package>
<class-interface>ResourceException</class-interface>
<method name="ResourceException" return-type="ResourceException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>14</id>
<description>
                            Create a new throwable with the specified message and error code.
                        </description>
<package>jakarta.resource</package>
<class-interface>ResourceException</class-interface>
<method name="ResourceException" return-type="ResourceException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>15</id>
<description>
                            Set the error code.
                        </description>
<package>jakarta.resource</package>
<class-interface>ResourceException</class-interface>
<method name="setErrorCode" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>16</id>
<description>
                            Add a linked Exception to this ResourceException.
                        </description>
<package>jakarta.resource</package>
<class-interface>ResourceException</class-interface>
<method name="setLinkedException" return-type="void">
<parameters>
<parameter>java.lang.Exception</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>17</id>
<description>
                            Initiates close of the connection handle at the application level.
                               A client should not use a closed connection to interact with    an EIS.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Connection</class-interface>
<method name="close" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>18</id>
<description>Exception thrown if close                               on a connection handle fails.            Any invalid connection close invocation--example,               calling close on a connection handle that is                already closed--should also throw this exception.</description>
<package>jakarta.resource.cci</package>
<class-interface>Connection</class-interface>
<method name="close" return-type="void">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>19</id>
<description>
                            Creates an Interaction associated with this Connection.
                             An   Interaction enables an application to execute EIS functions.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Connection</class-interface>
<method name="createInteraction" return-type="jakarta.resource.cci.Interaction"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>20</id>
<description>Failed to create an Interaction</description>
<package>jakarta.resource.cci</package>
<class-interface>Connection</class-interface>
<method name="createInteraction" return-type="jakarta.resource.cci.Interaction">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>21</id>
<description>
                            Returns an LocalTransaction instance that enables a component to   demarcate resource manager local transactions on the Connection.
                               If a resource adapter does not allow a component to demarcate    local transactions on an Connection using LocalTransaction    interface, then the method getLocalTransaction should throw a    NotSupportedException.
                            
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Connection</class-interface>
<method name="getLocalTransaction" return-type="jakarta.resource.cci.LocalTransaction"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>22</id>
<description>Failed to return a LocalTransaction                                 instance because of a resource                                 adapter error</description>
<package>jakarta.resource.cci</package>
<class-interface>Connection</class-interface>
<method name="getLocalTransaction" return-type="jakarta.resource.cci.LocalTransaction">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>23</id>
<description>
                            Gets the information on the underlying EIS instance represented   through an active connection.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Connection</class-interface>
<method name="getMetaData" return-type="jakarta.resource.cci.ConnectionMetaData"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>24</id>
<description>Failed to get information about the                          connected EIS instance. Error can be                         resource adapter-internal, EIS-specific                         or communication related.</description>
<package>jakarta.resource.cci</package>
<class-interface>Connection</class-interface>
<method name="getMetaData" return-type="jakarta.resource.cci.ConnectionMetaData">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>25</id>
<description>
                            Gets the information on the ResultSet functionality supported by   a connected EIS instance.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Connection</class-interface>
<method name="getResultSetInfo" return-type="jakarta.resource.cci.ResultSetInfo"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>26</id>
<description>Failed to get ResultSet related                                    information</description>
<package>jakarta.resource.cci</package>
<class-interface>Connection</class-interface>
<method name="getResultSetInfo" return-type="jakarta.resource.cci.ResultSetInfo">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>27</id>
<description>
                            Gets a connection to an EIS instance.
                             This getConnection variant   should be used when a component wants the container to manage EIS    sign-on. This case is termed container-managed sign-on. The    component does not pass any security information.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ConnectionFactory</class-interface>
<method name="getConnection" return-type="jakarta.resource.cci.Connection"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>28</id>
<description>Failed to get a connection to                                 the EIS instance. Examples of                                 error cases are:                       Invalid configuration of ManagedConnectionFactory--                example: invalid server name            Application server-internal error--example:                connection pool related error            Communication error             EIS-specific error--example: EIS not active            Resource adapter-internal error            Security related error; example: invalid user            Failure to allocate system resources          </description>
<package>jakarta.resource.cci</package>
<class-interface>ConnectionFactory</class-interface>
<method name="getConnection" return-type="jakarta.resource.cci.Connection">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>29</id>
<description>
                            Gets a connection to an EIS instance.
                             A component should use    the getConnection variant with jakarta.resource.cci.ConnectionSpec   parameter, if it needs to pass any resource adapter specific    security information and connection parameters. In the component-   managed sign-on case, an application component passes security    information (example: username, password) through the    ConnectionSpec instance.     It is important to note that the properties passed through    the getConnection method should be client-specific (example:    username, password, language) and not related to the    configuration of a target EIS instance (example: port number,    server name). The ManagedConnectionFactory instance is configured   with complete set of properties required for the creation of a    connection to an EIS instance.
                            
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ConnectionFactory</class-interface>
<method name="getConnection" return-type="jakarta.resource.cci.Connection">
<parameters>
<parameter>jakarta.resource.cci.ConnectionSpec</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>30</id>
<description>Failed to get a connection to                               the EIS instance. Examples of                               error cases are:                       Invalid specification of input parameters            Invalid configuration of ManagedConnectionFactory--                example: invalid server name            Application server-internal error--example:                connection pool related error            Communication error             EIS-specific error--example: EIS not active            Resource adapter-internal error            Security related error; example: invalid user            Failure to allocate system resources          </description>
<package>jakarta.resource.cci</package>
<class-interface>ConnectionFactory</class-interface>
<method name="getConnection" return-type="jakarta.resource.cci.Connection">
<parameters>
<parameter>jakarta.resource.cci.ConnectionSpec</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>31</id>
<description>
                            Gets metadata for the Resource Adapter.
                             Note that the metadata   information is about the ResourceAdapter and not the EIS instance.   An invocation of this method does not require that an active   connection to an EIS instance should have been established.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ConnectionFactory</class-interface>
<method name="getMetaData" return-type="jakarta.resource.cci.ResourceAdapterMetaData"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>32</id>
<description>Failed to get metadata information                                about the resource adapter</description>
<package>jakarta.resource.cci</package>
<class-interface>ConnectionFactory</class-interface>
<method name="getMetaData" return-type="jakarta.resource.cci.ResourceAdapterMetaData">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>33</id>
<description>
                            Gets a RecordFactory instance.
                             The RecordFactory is used for   the creation of generic Record instances.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ConnectionFactory</class-interface>
<method name="getRecordFactory" return-type="jakarta.resource.cci.RecordFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>34</id>
<description>Failed to create a RecordFactory</description>
<package>jakarta.resource.cci</package>
<class-interface>ConnectionFactory</class-interface>
<method name="getRecordFactory" return-type="jakarta.resource.cci.RecordFactory">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>35</id>
<description>
                            Returns product name of the underlying EIS instance connected   through the Connection that produced this metadata.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getEISProductName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>36</id>
<description>Failed to get the information for                                the EIS instance</description>
<package>jakarta.resource.cci</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getEISProductName" return-type="java.lang.String">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>37</id>
<description>
                            Returns product version of the underlying EIS instance.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getEISProductVersion" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>38</id>
<description>Failed to get the information for                                the EIS instance</description>
<package>jakarta.resource.cci</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getEISProductVersion" return-type="java.lang.String">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>39</id>
<description>
                            Returns the user name for an active connection as known to    the underlying EIS instance.
                             The name corresponds the resource   principal under whose security context a connection to the   EIS instance has been established.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getUserName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>40</id>
<description>Failed to get the information for                                the EIS instance</description>
<package>jakarta.resource.cci</package>
<class-interface>ConnectionMetaData</class-interface>
<method name="getUserName" return-type="java.lang.String">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>41</id>
<description>
                            Clears all the warning reported by this Interaction instance.
                             After    a call to this method, the method getWarnings will return null    until a new warning is reported for this Interaction.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Interaction</class-interface>
<method name="clearWarnings" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>42</id>
<description>Failed to clear ResourceWarnings                                associated with Interaction</description>
<package>jakarta.resource.cci</package>
<class-interface>Interaction</class-interface>
<method name="clearWarnings" return-type="void">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>43</id>
<description>
                            Closes the current Interaction and release all the resources   held for this instance by the resource adapter.
                             The close of an    Interaction instance does not close the associated Connection    instance. It is recommended that Interaction instances be   closed explicitly to free any held resources.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Interaction</class-interface>
<method name="close" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>44</id>
<description>Failed to close the Interaction                              instance. Invoking close on an                               already closed Interaction should                               also throw this exception.</description>
<package>jakarta.resource.cci</package>
<class-interface>Interaction</class-interface>
<method name="close" return-type="void">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>45</id>
<description>
                            Executes an interaction represented by the InteractionSpec.
                               This form of invocation takes an input Record and updates   the output Record.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Interaction</class-interface>
<method name="execute" return-type="boolean">
<parameters>
<parameter>jakarta.resource.cci.InteractionSpec</parameter>
<parameter>jakarta.resource.cci.Record</parameter>
<parameter>jakarta.resource.cci.Record</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>46</id>
<description>Exception if execute operation                                fails. Examples of error cases                                are:                       Resource adapter internal, EIS-specific or                  communication error              Invalid specification of an InteractionSpec,                  input or output record structure             Errors in use of input or output Record             Invalid connection associated with this                  Interaction       </description>
<package>jakarta.resource.cci</package>
<class-interface>Interaction</class-interface>
<method name="execute" return-type="boolean">
<parameters>
<parameter>jakarta.resource.cci.InteractionSpec</parameter>
<parameter>jakarta.resource.cci.Record</parameter>
<parameter>jakarta.resource.cci.Record</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>47</id>
<description>
                            Executes an interaction represented by the InteractionSpec.
                               This form of invocation takes an input Record and returns an    output Record if the execution of the Interaction has been   successfull.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Interaction</class-interface>
<method name="execute" return-type="jakarta.resource.cci.Record">
<parameters>
<parameter>jakarta.resource.cci.InteractionSpec</parameter>
<parameter>jakarta.resource.cci.Record</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>48</id>
<description>Exception if execute operation                                fails. Examples of error cases                                are:                       Resource adapter internal, EIS-specific or                  communication error              Invalid specification of an InteractionSpec                  or input record structure             Errors in use of input Record or creation                 of an output Record             Invalid connection associated with this                  Interaction       </description>
<package>jakarta.resource.cci</package>
<class-interface>Interaction</class-interface>
<method name="execute" return-type="jakarta.resource.cci.Record">
<parameters>
<parameter>jakarta.resource.cci.InteractionSpec</parameter>
<parameter>jakarta.resource.cci.Record</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>49</id>
<description>
                            Gets the Connection associated with the Interaction.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Interaction</class-interface>
<method name="getConnection" return-type="jakarta.resource.cci.Connection"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>50</id>
<description>
                            Gets the first ResourceWarning from the chain of warnings   associated with this Interaction instance.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Interaction</class-interface>
<method name="getWarnings" return-type="jakarta.resource.cci.ResourceWarning"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>51</id>
<description>Failed to get ResourceWarnings                                associated with Interaction</description>
<package>jakarta.resource.cci</package>
<class-interface>Interaction</class-interface>
<method name="getWarnings" return-type="jakarta.resource.cci.ResourceWarning">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>52</id>
<description>
                            Begins a local transaction on an EIS instance.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>LocalTransaction</class-interface>
<method name="begin" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>53</id>
<description>Failed to begin a local                               transaction. Examples of                               error cases are:                          Resource adapter internal or EIS-specific                  error              Connection is already participating in a                   local or JTA transaction             </description>
<package>jakarta.resource.cci</package>
<class-interface>LocalTransaction</class-interface>
<method name="begin" return-type="void">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>54</id>
<description>
                            Commits the current local transaction and release all locks held    by the underlying EIS instance.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>LocalTransaction</class-interface>
<method name="commit" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>55</id>
<description>Failed to commit a local                               transaction. Examples of                               error cases are:                         Resource adapter internal or EIS-specific error              Violation of integrity constraints, deadlock                   detection, communication failure during                   transaction completion, or any retry requirement              Connection is participating in an active JTA                  transaction               Invalid transaction context; commit                  operation invoked without an active                  transaction context          </description>
<package>jakarta.resource.cci</package>
<class-interface>LocalTransaction</class-interface>
<method name="commit" return-type="void">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>56</id>
<description>
                            Rollbacks the current resource manager local transaction.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>LocalTransaction</class-interface>
<method name="rollback" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>57</id>
<description>Failed to rollback a local                               transaction. Examples of                               error cases are:                           Resource adapter internal or EIS-specific error               Connection is participating in an active JTA                    transaction                Invalid transaction context; rollback                   operation invoked without an active                   transaction context           </description>
<package>jakarta.resource.cci</package>
<class-interface>LocalTransaction</class-interface>
<method name="rollback" return-type="void">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>58</id>
<description>
                            This method allows an EIS to call a message endpoint using a   request-response style communication.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>MessageListener</class-interface>
<method name="onMessage" return-type="jakarta.resource.cci.Record">
<parameters>
<parameter>jakarta.resource.cci.Record</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>59</id>
<description>indicates an exceptional condition.</description>
<package>jakarta.resource.cci</package>
<class-interface>MessageListener</class-interface>
<method name="onMessage" return-type="jakarta.resource.cci.Record">
<parameters>
<parameter>jakarta.resource.cci.Record</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>60</id>
<description>
                            Creates and returns a copy of this object.
                             The precise    meaning of "copy" may depend on the class of the object.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Record</class-interface>
<method name="clone" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>61</id>
<description>If the object's class does not support the             Cloneable interface Subclasses that override the             clone method can also throw this exception to             indicate that an instance cannot be cloned.</description>
<package>jakarta.resource.cci</package>
<class-interface>Record</class-interface>
<method name="clone" return-type="java.lang.Object">
<throw>java.lang.CloneNotSupportedException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>62</id>
<description>
                            Check if this instance is equal to another Record.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Record</class-interface>
<method name="equals" return-type="boolean">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>63</id>
<description>
                            Gets the name of the Record.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Record</class-interface>
<method name="getRecordName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>64</id>
<description>
                            Gets a short description string for the Record.
                             This property   is used primarily by application development tools.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Record</class-interface>
<method name="getRecordShortDescription" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>65</id>
<description>
                            Returns the hash code for the Record instance.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Record</class-interface>
<method name="hashCode" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>66</id>
<description>
                            Sets the name of the Record.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Record</class-interface>
<method name="setRecordName" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>67</id>
<description>
                            Sets a short description string for the Record.
                             This property   is used primarily by application development tools.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Record</class-interface>
<method name="setRecordShortDescription" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>68</id>
<description>
                            Creates a IndexedRecord.
                             The method takes the name of the record   that is to be created by the RecordFactory. The name of the    record acts as a pointer to the meta information (stored in    the metadata repository) for a specific record type.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>RecordFactory</class-interface>
<method name="createIndexedRecord" return-type="jakarta.resource.cci.IndexedRecord">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>69</id>
<description>Failed to create an IndexedRecord.                              Example error cases are:                                                         Invalid specification of record name               Resource adapter internal error               Failed to access metadata repository           </description>
<package>jakarta.resource.cci</package>
<class-interface>RecordFactory</class-interface>
<method name="createIndexedRecord" return-type="jakarta.resource.cci.IndexedRecord">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>70</id>
<description>
                            Creates a MappedRecord.
                             The method takes the name of the record   that is to be created by the RecordFactory. The name of the    record acts as a pointer to the meta information (stored in    the metadata repository) for a specific record type.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>RecordFactory</class-interface>
<method name="createMappedRecord" return-type="jakarta.resource.cci.MappedRecord">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>71</id>
<description>Failed to create a MappedRecord.                              Example error cases are:                                                         Invalid specification of record name               Resource adapter internal error               Failed to access metadata repository           </description>
<package>jakarta.resource.cci</package>
<class-interface>RecordFactory</class-interface>
<method name="createMappedRecord" return-type="jakarta.resource.cci.MappedRecord">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>72</id>
<description>
                            Gets a tool displayable name of the resource adapter.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResourceAdapterMetaData</class-interface>
<method name="getAdapterName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>73</id>
<description>
                            Gets a tool displayable short desription of the resource   adapter.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResourceAdapterMetaData</class-interface>
<method name="getAdapterShortDescription" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>74</id>
<description>
                            Gets the name of the vendor that has provided the resource    adapter.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResourceAdapterMetaData</class-interface>
<method name="getAdapterVendorName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>75</id>
<description>
                            Gets the version of the resource adapter.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResourceAdapterMetaData</class-interface>
<method name="getAdapterVersion" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>76</id>
<description>
                            Returns an array of fully-qualified names of InteractionSpec   types supported by the CCI implementation for this resource   adapter.
                             Note that the fully-qualified class name is for    the implementation class of an InteractionSpec. This method    may be used by tools vendor to find information on the    supported InteractionSpec types. The method should return    an array of length 0 if the CCI implementation does not    define specific InteractionSpec types.
                            
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResourceAdapterMetaData</class-interface>
<method name="getInteractionSpecsSupported" return-type="java.lang.String[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>77</id>
<description>
                            Returns a string representation of the version of the    connector architecture specification that is supported by   the resource adapter.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResourceAdapterMetaData</class-interface>
<method name="getSpecVersion" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>78</id>
<description>
                            Returns true if the implementation class for the Interaction    interface implements public boolean execute(InteractionSpec    ispec, Record input, Record output) method; otherwise the    method returns false.
                            
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResourceAdapterMetaData</class-interface>
<method name="supportsExecuteWithInputAndOutputRecord" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>79</id>
<description>
                            Returns true if the implementation class for the Interaction   interface implements public Record execute(InteractionSpec   ispec, Record input) method; otherwise the method returns    false.
                            
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResourceAdapterMetaData</class-interface>
<method name="supportsExecuteWithInputRecordOnly" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>80</id>
<description>
                            Returns true if the resource adapter implements the LocalTransaction   interface and supports local transaction demarcation on the    underlying EIS instance through the LocalTransaction interface.
                            
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResourceAdapterMetaData</class-interface>
<method name="supportsLocalTransactionDemarcation" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>81</id>
<description>
                            Retrieves the warning chained to this ResourceWarning  object.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResourceWarning</class-interface>
<method name="getLinkedWarning" return-type="jakarta.resource.cci.ResourceWarning"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>82</id>
<description>
                            Constructs a new instance with null as its detail message.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResourceWarning</class-interface>
<method name="ResourceWarning" return-type="ResourceWarning"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>83</id>
<description>
                            Constructs a new instance with the specified detail message.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResourceWarning</class-interface>
<method name="ResourceWarning" return-type="ResourceWarning">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>84</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResourceWarning</class-interface>
<method name="ResourceWarning" return-type="ResourceWarning">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>85</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResourceWarning</class-interface>
<method name="ResourceWarning" return-type="ResourceWarning">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>86</id>
<description>
                            Constructs a new throwable with the specified detail message and   an error code.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResourceWarning</class-interface>
<method name="ResourceWarning" return-type="ResourceWarning">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>87</id>
<description>
                            Adds an ResourceWarning object to the end of the chain.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResourceWarning</class-interface>
<method name="setLinkedWarning" return-type="void">
<parameters>
<parameter>jakarta.resource.cci.ResourceWarning</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>88</id>
<description>
                            Indicates whether or not a visible row delete can be detected by  calling ResultSet.rowDeleted.
                              If deletesAreDetected  returns false, then deleted rows are removed from the ResultSet.
                            
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="deletesAreDetected" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>89</id>
<description>Failed to get the information</description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="deletesAreDetected" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>90</id>
<description>
                            Indicates whether or not a visible row insert can be detected  by calling ResultSet.rowInserted.
                            
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="insertsAreDetected" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>91</id>
<description>Failed to get the information</description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="insertsAreDetected" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>92</id>
<description>
                            Indicates whether deletes made by others are visible.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="othersDeletesAreVisible" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>93</id>
<description>Failed to get the information</description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="othersDeletesAreVisible" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>94</id>
<description>
                            Indicates whether inserts made by others are visible.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="othersInsertsAreVisible" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>95</id>
<description>Failed to get the information</description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="othersInsertsAreVisible" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>96</id>
<description>
                            Indicates whether updates made by others are visible.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="othersUpdatesAreVisible" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>97</id>
<description>Failed to get the information</description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="othersUpdatesAreVisible" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>98</id>
<description>
                            Indicates whether a ResultSet's own deletes are visible.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="ownDeletesAreVisible" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>99</id>
<description>Failed to get the information</description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="ownDeletesAreVisible" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>100</id>
<description>
                            Indicates whether a ResultSet's own inserts are visible.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="ownInsertsAreVisible" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>101</id>
<description>Failed to get the information</description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="ownInsertsAreVisible" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>102</id>
<description>
                            Indicates whether a ResultSet's own updates are visible.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="ownUpdatesAreVisible" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>103</id>
<description>Failed to get the information</description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="ownUpdatesAreVisible" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>104</id>
<description>
                            Indicates whether or not a resource adapter supports a type  of ResultSet.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="supportsResultSetType" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>105</id>
<description>Failed to get the information</description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="supportsResultSetType" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>106</id>
<description>
                            Indicates whether or not a resource adapter supports the   concurrency type in combination with the given ResultSet type/
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="supportsResultTypeConcurrency" return-type="boolean">
<parameters>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>107</id>
<description>Failed to get the information</description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="supportsResultTypeConcurrency" return-type="boolean">
<parameters>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>108</id>
<description>
                            Indicates whether or not a visible row update can be detected   by calling the method ResultSet.rowUpdated.
                            
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="updatesAreDetected" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>109</id>
<description>Failed to get the information</description>
<package>jakarta.resource.cci</package>
<class-interface>ResultSetInfo</class-interface>
<method name="updatesAreDetected" return-type="boolean">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>110</id>
<description>
                            Read data from an InputStream and initialize fields of a    Streamable object.
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Streamable</class-interface>
<method name="read" return-type="void">
<parameters>
<parameter>java.io.InputStream</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>111</id>
<description/>
<package>jakarta.resource.cci</package>
<class-interface>Streamable</class-interface>
<method name="read" return-type="void">
<parameters>
<parameter>java.io.InputStream</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>112</id>
<description>
                            Write fields of a Streamable object to an OutputStream
                        </description>
<package>jakarta.resource.cci</package>
<class-interface>Streamable</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>java.io.OutputStream</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>113</id>
<description/>
<package>jakarta.resource.cci</package>
<class-interface>Streamable</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>java.io.OutputStream</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>114</id>
<description>
                            Indicates the message listener type(s) associated with this activation.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>Activation</class-interface>
<method name="messageListeners" return-type="java.lang.Class[]"/>
</assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
<id>115</id>
<description>
                            This method may be called by a deployment tool to validate the overall  activation configuration information provided by the endpoint deployer.
                              This helps to catch activation configuration errors earlier on without  having to wait until endpoint activation time for configuration  validation. The implementation of this self-validation check behavior is  optional.    Note: Since Java EE Connector 1.6 specification, resource adapter  implementations are recommended to use the annotations or the XML   validation deployment descriptor facilities defined by the Bean Validation  specification to express their validation requirements of its configuration   properties to the application server.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ActivationSpec</class-interface>
<method name="validate" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>116</id>
<description/>
<package>jakarta.resource.spi</package>
<class-interface>ActivationSpec</class-interface>
<method name="validate" return-type="void">
<throw>jakarta.resource.spi.InvalidPropertyException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>117</id>
<description>
                            Specifies the Java type of the interface implemented by the administered  object.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>AdministeredObject</class-interface>
<method name="adminObjectInterfaces" return-type="java.lang.Class[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>118</id>
<description>
                            Constructs a new instance with null as its detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ApplicationServerInternalException</class-interface>
<method name="ApplicationServerInternalException" return-type="ApplicationServerInternalException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>119</id>
<description>
                            Constructs a new instance with the specified detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ApplicationServerInternalException</class-interface>
<method name="ApplicationServerInternalException" return-type="ApplicationServerInternalException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>120</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ApplicationServerInternalException</class-interface>
<method name="ApplicationServerInternalException" return-type="ApplicationServerInternalException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>121</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ApplicationServerInternalException</class-interface>
<method name="ApplicationServerInternalException" return-type="ApplicationServerInternalException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>122</id>
<description>
                            Constructs a new throwable with the specified detail message and   an error code.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ApplicationServerInternalException</class-interface>
<method name="ApplicationServerInternalException" return-type="ApplicationServerInternalException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>123</id>
<description>
                            The authentication-mechanismType specifies an authentication  mechanism supported by the resource adapter.
                             Note that this  support is for the resource adapter and not for the  underlying EIS instance.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>AuthenticationMechanism</class-interface>
<method name="authMechanism" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>124</id>
<description>
                            Represents the interface that the resource adapter implementation  supports for the representation of the credentials.
                               Note that BasicPassword mechanism type should support the  jakarta.resource.spi.security.PasswordCredential interface.  The Kerbv5 mechanism type should support the  org.ietf.jgss.GSSCredential interface or the deprecated  jakarta.resource.spi.security.GenericCredential interface.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>AuthenticationMechanism</class-interface>
<method name="credentialInterface" return-type="jakarta.resource.spi.AuthenticationMechanism.AuthenticationMechanism.CredentialInterface"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>125</id>
<description>
                            The optional description specifies  any resource adapter specific requirement for the support of  security contract and authentication mechanism.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>AuthenticationMechanism</class-interface>
<method name="description" return-type="java.lang.String[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>126</id>
<description/>
<package>jakarta.resource.spi</package>
<class-interface>AuthenticationMechanism.CredentialInterface</class-interface>
<method name="valueOf" return-type="jakarta.resource.spi.AuthenticationMechanism.AuthenticationMechanism.CredentialInterface">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>127</id>
<description/>
<package>jakarta.resource.spi</package>
<class-interface>AuthenticationMechanism.CredentialInterface</class-interface>
<method name="values" return-type="jakarta.resource.spi.AuthenticationMechanism.AuthenticationMechanism.CredentialInterface[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>128</id>
<description>
                            Creates a new java.util.Timer instance.
                             The  Timer instance could be used to perform periodic   Work executions or other tasks.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>BootstrapContext</class-interface>
<method name="createTimer" return-type="java.util.Timer"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>129</id>
<description>indicates that a   Timer instance is not available. The   request may be retried later.</description>
<package>jakarta.resource.spi</package>
<class-interface>BootstrapContext</class-interface>
<method name="createTimer" return-type="java.util.Timer">
<throw>jakarta.resource.spi.UnavailableException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>130</id>
<description>
                            Provides a handle to a TransactionSynchronization instance.
                             The  TransactionSynchronizationRegistry instance could be used by a   resource adapter to register synchronization objects, get transaction state and  status etc. This interface is implemented by the application server by a   stateless service object. The same object can be used by any number of   resource adapter objects with thread safety.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>BootstrapContext</class-interface>
<method name="getTransactionSynchronizationRegistry" return-type="TransactionSynchronizationRegistry"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>131</id>
<description>
                            Provides a handle to a WorkManager instance.
                             The  WorkManager instance could be used by a resource adapter to  do its work by submitting Work instances for execution.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>BootstrapContext</class-interface>
<method name="getWorkManager" return-type="jakarta.resource.spi.work.WorkManager"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>132</id>
<description>
                            Provides a handle to a XATerminator instance.
                             The  XATerminator instance could be used by a resource adapter   to flow-in transaction completion and crash recovery calls from an EIS.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>BootstrapContext</class-interface>
<method name="getXATerminator" return-type="jakarta.resource.spi.XATerminator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>133</id>
<description>
                            A resource adapter can check an application server's support   for a particular WorkContext type through this method.
                               This mechanism enables a resource adapter developer to  dynamically change the WorkContexts submitted with a Work instance   based on the support provided by the application server.   The application server must employ an exact type equality check (that is  java.lang.Class.equals(java.lang.Class) check) in  this method, to check if it supports the WorkContext type provided  by the resource adapter. This method must be idempotent, that is all   calls to this method by a resource adapter for a particular   WorkContext type must return the same boolean value   throughout the lifecycle of that resource adapter instance.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>BootstrapContext</class-interface>
<method name="isContextSupported" return-type="boolean">
<parameters>
<parameter>java.lang.Class</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>134</id>
<description>
                            Constructs a new instance with null as its detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>CommException</class-interface>
<method name="CommException" return-type="CommException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>135</id>
<description>
                            Constructs a new instance with the specified detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>CommException</class-interface>
<method name="CommException" return-type="CommException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>136</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>CommException</class-interface>
<method name="CommException" return-type="CommException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>137</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>CommException</class-interface>
<method name="CommException" return-type="CommException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>138</id>
<description>
                            Constructs a new throwable with the specified detail message and  an error code.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>CommException</class-interface>
<method name="CommException" return-type="CommException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>139</id>
<description>
                            Indicates that the configuration property is confidential and  recommends application server's configuration tools to   use special visual aids for editing them.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConfigProperty</class-interface>
<method name="confidential" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>140</id>
<description>
                            Inferred by the container for field based annotations if possible.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConfigProperty</class-interface>
<method name="defaultValue" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>141</id>
<description>
                            Describes the configuration property.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConfigProperty</class-interface>
<method name="description" return-type="java.lang.String[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>142</id>
<description>
                            Indicates that the configuration tools must ignore considering this  Property during auto-discovery of Configuration properties.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConfigProperty</class-interface>
<method name="ignore" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>143</id>
<description>
                            Indicates that the configuration property supports  dynamic updates to its value during the lifetime of  the JavaBean
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConfigProperty</class-interface>
<method name="supportsDynamicUpdates" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>144</id>
<description>
                            Inferred by the container if unspecified.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConfigProperty</class-interface>
<method name="type" return-type="java.lang.Class"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>145</id>
<description>
                            Specifies the Connection interface supported by the resource adapter.
                              Example: jakarta.resource.cci.Connection or com.wombat.Connection
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionDefinition</class-interface>
<method name="connection" return-type="java.lang.Class"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>146</id>
<description>
                            Specifies the ConnectionFactory interface supported by the resource  adapter.
                             Example: jakarta.resource.cci.ConnectionFactory or  com.wombat.ConnectionFactory
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionDefinition</class-interface>
<method name="connectionFactory" return-type="java.lang.Class"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>147</id>
<description>
                            Specifies the Class provided by the resource adapter that implements the  resource adapter specific ConnectionFactory interface.
                             Example:  com.wombat.ConnectionFactoryImpl
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionDefinition</class-interface>
<method name="connectionFactoryImpl" return-type="java.lang.Class"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>148</id>
<description>
                            Specifies the class provided by the resource adapter that implements the  resource adapter specific Connection interface.
                             Example:  com.wombat.ConnectionImpl
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionDefinition</class-interface>
<method name="connectionImpl" return-type="java.lang.Class"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>149</id>
<description>
                            
                            An array of ConnectionDefinition ConnectionDefinitions associated  with the ManagedConectionFactory JavaBean.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionDefinitions</class-interface>
<method name="value" return-type="jakarta.resource.spi.ConnectionDefinition[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>150</id>
<description>
                            Construct a ConnectionEvent object.
                             Exception defaults to null.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionEvent</class-interface>
<method name="ConnectionEvent" return-type="ConnectionEvent">
<parameters>
<parameter>jakarta.resource.spi.ManagedConnection</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>151</id>
<description>
                            Construct a ConnectionEvent object.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionEvent</class-interface>
<method name="ConnectionEvent" return-type="ConnectionEvent">
<parameters>
<parameter>jakarta.resource.spi.ManagedConnection</parameter>
<parameter>int</parameter>
<parameter>java.lang.Exception</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>152</id>
<description>
                            Get the connection handle associated with the Managed  Connection instance.
                             Used for CONNECTION_CLOSED event.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionEvent</class-interface>
<method name="getConnectionHandle" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>153</id>
<description>
                            Get the exception.
                             May be null.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionEvent</class-interface>
<method name="getException" return-type="java.lang.Exception"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>154</id>
<description>
                            Get the type of event
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionEvent</class-interface>
<method name="getId" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>155</id>
<description>
                            Set the connection handle.
                             Used for CONNECTION_CLOSED event
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionEvent</class-interface>
<method name="setConnectionHandle" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>156</id>
<description>
                            Notifies that an application component has closed the connection.
                                A ManagedConnection instance notifies its registered set of    listeners by calling ConnectionEventListener.connectionClosed method   when an application component closes a connection handle. The    application server uses this connection close event to put the   ManagedConnection instance back in to the connection pool.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionEventListener</class-interface>
<method name="connectionClosed" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.ConnectionEvent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>157</id>
<description>
                            Notifies a connection related error.
                                 The ManagedConnection instance calls the method   ConnectionEventListener.connectionErrorOccurred to notify    its registered listeners of the occurrence of a physical    connection-related error. The event notification happens    just before a resource adapter throws an exception to the    application component using the connection handle.    The connectionErrorOccurred method indicates that the    associated ManagedConnection instance is now invalid and    unusable. The application server handles the connection    error event notification by initiating application    server-specific cleanup (for example, removing ManagedConnection    instance from the connection pool) and then calling   ManagedConnection.destroy method to destroy the physical    connection.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionEventListener</class-interface>
<method name="connectionErrorOccurred" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.ConnectionEvent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>158</id>
<description>
                            Notifies that a Resource Manager Local Transaction was committed    on the ManagedConnection instance.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionEventListener</class-interface>
<method name="localTransactionCommitted" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.ConnectionEvent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>159</id>
<description>
                            Notifies that a Resource Manager Local Transaction was rolled back    on the ManagedConnection instance.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionEventListener</class-interface>
<method name="localTransactionRolledback" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.ConnectionEvent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>160</id>
<description>
                            Notifies that a Resource Manager Local Transaction was started on   the ManagedConnection instance.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionEventListener</class-interface>
<method name="localTransactionStarted" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.ConnectionEvent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>161</id>
<description>
                            The method allocateConnection gets called by the resource adapter's   connection factory instance.
                             This lets connection factory instance    (provided by the resource adapter) pass a connection request to    the ConnectionManager instance.      The connectionRequestInfo parameter represents information specific   to the resource adapter for handling of the connection request.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionManager</class-interface>
<method name="allocateConnection" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.resource.spi.ManagedConnectionFactory</parameter>
<parameter>jakarta.resource.spi.ConnectionRequestInfo</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>162</id>
<description>Generic exception</description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionManager</class-interface>
<method name="allocateConnection" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.resource.spi.ManagedConnectionFactory</parameter>
<parameter>jakarta.resource.spi.ConnectionRequestInfo</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>163</id>
<description>
                            Checks whether this instance is equal to another.
                             Since   connectionRequestInfo is defined specific to a resource   adapter, the resource adapter is required to implement   this method. The conditions for equality are specific   to the resource adapter.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionRequestInfo</class-interface>
<method name="equals" return-type="boolean">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>164</id>
<description>
                            Returns the hashCode of the ConnectionRequestInfo.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ConnectionRequestInfo</class-interface>
<method name="hashCode" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>165</id>
<description>
                            Specifies the authentication mechanisms supported by the resource  adapter.
                            
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>Connector</class-interface>
<method name="authMechanisms" return-type="jakarta.resource.spi.AuthenticationMechanism[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>166</id>
<description>
                            Describes the resource adapter module.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>Connector</class-interface>
<method name="description" return-type="java.lang.String[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>167</id>
<description>
                            An optional short name, providing information about the  resource adapter module,  that is intended to be displayed   by tools.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>Connector</class-interface>
<method name="displayName" return-type="java.lang.String[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>168</id>
<description>
                            Contains information about the type of EIS.
                             For example, the type of an  EIS can be product name of the EIS independent of any version info.This  helps in identifying EIS instances that can be used with this resource  adapter.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>Connector</class-interface>
<method name="eisType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>169</id>
<description>
                            Specifies the file name for large GIF or JPEG icon images that are   used to represent the resource adapter in a GUI tool.
                               Each smallIcon must be associated with a largeIcon element and   the application server must use the ordinal value in their   respective arrays to find the related pairs of icons.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>Connector</class-interface>
<method name="largeIcon" return-type="java.lang.String[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>170</id>
<description>
                            Specifies licensing requirements for the resource adapter module and an  optional description of the licensing terms .
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>Connector</class-interface>
<method name="licenseDescription" return-type="java.lang.String[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>171</id>
<description>
                            Specifies whether a license is required to deploy and use this resource  adapter
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>Connector</class-interface>
<method name="licenseRequired" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>172</id>
<description>
                            Specifies whether a license is required to deploy and use this resource  adapter
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>Connector</class-interface>
<method name="reauthenticationSupport" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>173</id>
<description>
                            
                            Specifies a list of fully qualified classes that implements the  WorkContext WorkContext interface that a resource adapter  requires the application server to support.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>Connector</class-interface>
<method name="requiredWorkContexts" return-type="java.lang.Class[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>174</id>
<description>
                            Specifies the extended security permissions required to be provided for  the operation of the resource adapter module
                            
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>Connector</class-interface>
<method name="securityPermissions" return-type="jakarta.resource.spi.SecurityPermission[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>175</id>
<description>
                            Specifies the file name for small GIF or JPEG icon images that are   used to represent the resource adapter in a GUI tool.
                                Each smallIcon must be associated with a largeIcon element and the   application server must use the ordinal value in their respective   arrays to find the related pairs of icons.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>Connector</class-interface>
<method name="smallIcon" return-type="java.lang.String[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>176</id>
<description>
                            Specifies the level of transaction support provided by the resource  adapter.
                            
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>Connector</class-interface>
<method name="transactionSupport" return-type="jakarta.resource.spi.TransactionSupport.TransactionSupport.TransactionSupportLevel"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>177</id>
<description>
                            Specifies the name of the resource adapter provider vendor.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>Connector</class-interface>
<method name="vendorName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>178</id>
<description>
                            Specifies the version of the resource adapter implementation.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>Connector</class-interface>
<method name="version" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>179</id>
<description>
                            This method is called by an application server (that is capable of lazy  connection association optimization) in order to dissociate a  ManagedConnection instance from all of its connection  handles.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>DissociatableManagedConnection</class-interface>
<method name="dissociateConnections" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>180</id>
<description>generic exception if operation fails.</description>
<package>jakarta.resource.spi</package>
<class-interface>DissociatableManagedConnection</class-interface>
<method name="dissociateConnections" return-type="void">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>181</id>
<description>
                            Constructs a new instance with null as its detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>EISSystemException</class-interface>
<method name="EISSystemException" return-type="EISSystemException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>182</id>
<description>
                            Constructs a new instance with the specified detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>EISSystemException</class-interface>
<method name="EISSystemException" return-type="EISSystemException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>183</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>EISSystemException</class-interface>
<method name="EISSystemException" return-type="EISSystemException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>184</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>EISSystemException</class-interface>
<method name="EISSystemException" return-type="EISSystemException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>185</id>
<description>
                            Constructs a new throwable with the specified detail message and  an error code.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>EISSystemException</class-interface>
<method name="EISSystemException" return-type="EISSystemException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>186</id>
<description>
                            Constructs a new instance with null as its detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>IllegalStateException</class-interface>
<method name="IllegalStateException" return-type="IllegalStateException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>187</id>
<description>
                            Constructs a new instance with the specified detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>IllegalStateException</class-interface>
<method name="IllegalStateException" return-type="IllegalStateException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>188</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>IllegalStateException</class-interface>
<method name="IllegalStateException" return-type="IllegalStateException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>189</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>IllegalStateException</class-interface>
<method name="IllegalStateException" return-type="IllegalStateException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>190</id>
<description>
                            Constructs a new throwable with the specified detail message and  an error code.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>IllegalStateException</class-interface>
<method name="IllegalStateException" return-type="IllegalStateException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>191</id>
<description>
                            Get the list of invalid properties.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>InvalidPropertyException</class-interface>
<method name="getInvalidPropertyDescriptors" return-type="java.beans.PropertyDescriptor[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>192</id>
<description>
                            Create a InvalidPropertyException.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>InvalidPropertyException</class-interface>
<method name="InvalidPropertyException" return-type="InvalidPropertyException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>193</id>
<description>
                            Create a InvalidPropertyException.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>InvalidPropertyException</class-interface>
<method name="InvalidPropertyException" return-type="InvalidPropertyException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>194</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>InvalidPropertyException</class-interface>
<method name="InvalidPropertyException" return-type="InvalidPropertyException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>195</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>InvalidPropertyException</class-interface>
<method name="InvalidPropertyException" return-type="InvalidPropertyException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>196</id>
<description>
                            Constructs a new throwable with the specified detail message and  an error code.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>InvalidPropertyException</class-interface>
<method name="InvalidPropertyException" return-type="InvalidPropertyException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>197</id>
<description>
                            Set a list of invalid properties.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>InvalidPropertyException</class-interface>
<method name="setInvalidPropertyDescriptors" return-type="void">
<parameters>
<parameter>java.beans.PropertyDescriptor[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>198</id>
<description>
                            This method is called by a resource adapter (that is capable of  lazy connection association optimization) in order to lazily associate  a connection object with a ManagedConnection instance.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>LazyAssociatableConnectionManager</class-interface>
<method name="associateConnection" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>jakarta.resource.spi.ManagedConnectionFactory</parameter>
<parameter>jakarta.resource.spi.ConnectionRequestInfo</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>199</id>
<description>Generic exception.</description>
<package>jakarta.resource.spi</package>
<class-interface>LazyAssociatableConnectionManager</class-interface>
<method name="associateConnection" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>jakarta.resource.spi.ManagedConnectionFactory</parameter>
<parameter>jakarta.resource.spi.ConnectionRequestInfo</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>200</id>
<description>
                            This method is called by the resource adapter (that is capable of  lazy connection association optimization) in order to notify the  application server that a disassociated connection handle is closed.
                              The application server can then perform any cleanup operations   related to the disassociated connection handle in its connection pool.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>LazyAssociatableConnectionManager</class-interface>
<method name="inactiveConnectionClosed" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>jakarta.resource.spi.ManagedConnectionFactory</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>201</id>
<description>
                            This method is called by a resource adapter (that is capable of  lazy transaction enlistment optimization) in order to lazily enlist  a connection object with a XA transaction.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>LazyEnlistableConnectionManager</class-interface>
<method name="lazyEnlist" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.ManagedConnection</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>202</id>
<description>Generic exception.</description>
<package>jakarta.resource.spi</package>
<class-interface>LazyEnlistableConnectionManager</class-interface>
<method name="lazyEnlist" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.ManagedConnection</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>203</id>
<description>
                            Begin a local transaction
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>LocalTransaction</class-interface>
<method name="begin" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>204</id>
<description>generic exception if operation fails</description>
<package>jakarta.resource.spi</package>
<class-interface>LocalTransaction</class-interface>
<method name="begin" return-type="void">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>205</id>
<description>
                            Commit a local transaction
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>LocalTransaction</class-interface>
<method name="commit" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>206</id>
<description>generic exception if operation fails</description>
<package>jakarta.resource.spi</package>
<class-interface>LocalTransaction</class-interface>
<method name="commit" return-type="void">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>207</id>
<description>
                            Rollback a local transaction
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>LocalTransaction</class-interface>
<method name="rollback" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>208</id>
<description>generic exception if operation fails</description>
<package>jakarta.resource.spi</package>
<class-interface>LocalTransaction</class-interface>
<method name="rollback" return-type="void">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>209</id>
<description>
                            Constructs a new instance with null as its detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>LocalTransactionException</class-interface>
<method name="LocalTransactionException" return-type="LocalTransactionException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>210</id>
<description>
                            Constructs a new instance with the specified detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>LocalTransactionException</class-interface>
<method name="LocalTransactionException" return-type="LocalTransactionException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>211</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>LocalTransactionException</class-interface>
<method name="LocalTransactionException" return-type="LocalTransactionException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>212</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>LocalTransactionException</class-interface>
<method name="LocalTransactionException" return-type="LocalTransactionException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>213</id>
<description>
                            Constructs a new throwable with the specified detail message and  an error code.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>LocalTransactionException</class-interface>
<method name="LocalTransactionException" return-type="LocalTransactionException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>214</id>
<description>
                            Adds a connection event listener to the ManagedConnection    instance.
                                The registered ConnectionEventListener instances are notified of   connection close and error events, also of local transaction related   events on the Managed Connection.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="addConnectionEventListener" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.ConnectionEventListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>215</id>
<description>
                            Used typically by the container to change the association of an    application-level connection handle with a ManagedConneciton    instance.
                             The container should find the right ManagedConnection    instance and call the associateConnection method.   In order to set a Connection Handle as the active connection    handle, the container may also use the associateConnection    method to set the same ManagedConnection associated    with the Connection handle.    The resource adapter is required to implement the associateConnection   method. The method implementation for a ManagedConnection should    dissociate the connection handle (passed as a parameter) from its    currently associated ManagedConnection and associate the new    connection handle with itself.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="associateConnection" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>216</id>
<description>Failed to associate the connection                                  handle with this ManagedConnection                                  instance</description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="associateConnection" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>217</id>
<description>
                            Application server calls this method to force any cleanup on the    ManagedConnection instance.
                                  The method ManagedConnection.cleanup initiates a cleanup of the   any client-specific state as maintained by a ManagedConnection instance.   The cleanup should invalidate all connection handles that had been    created using this ManagedConnection instance. Any attempt by an application    component to use the connection handle after cleanup of the underlying   ManagedConnection should result in an exception.    The cleanup of ManagedConnection is always driven by an application   server. An application server should not invoke ManagedConnection.cleanup   when there is an uncompleted transaction (associated with a    ManagedConnection instance) in progress.     The invocation of ManagedConnection.cleanup method on an already    cleaned-up connection should not throw an exception.    The cleanup of ManagedConnection instance resets its client specific   state and prepares the connection to be put back in to a connection   pool. The cleanup method should not cause resource adapter to close   the physical pipe and reclaim system resources associated with the   physical connection.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="cleanup" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>218</id>
<description>generic exception if operation fails</description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="cleanup" return-type="void">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>219</id>
<description>
                            Destroys the physical connection to the underlying resource manager.
                                To manage the size of the connection pool, an application server can    explictly call ManagedConnection.destroy to destroy a     physical connection. A resource adapter should destroy all allocated    system resources for this ManagedConnection instance when the method    destroy is called.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="destroy" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>220</id>
<description>generic exception if operation failed</description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="destroy" return-type="void">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>221</id>
<description>
                            Creates a new connection handle for the underlying physical connection    represented by the ManagedConnection instance.
                             This connection handle   is used by the application code to refer to the underlying physical    connection. This connection handle is associated with its    ManagedConnection instance in a resource adapter implementation    specific way.    The ManagedConnection uses the Subject and additional ConnectionRequest   Info (which is specific to resource adapter and opaque to application   server) to set the state of the physical connection.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="getConnection" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.security.auth.Subject</parameter>
<parameter>jakarta.resource.spi.ConnectionRequestInfo</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>222</id>
<description>generic exception if operation fails</description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="getConnection" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.security.auth.Subject</parameter>
<parameter>jakarta.resource.spi.ConnectionRequestInfo</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>223</id>
<description>
                            Returns an jakarta.resource.spi.LocalTransaction instance.
                                The LocalTransaction interface is used by the container to manage   local transactions for a RM instance.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="getLocalTransaction" return-type="jakarta.resource.spi.LocalTransaction"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>224</id>
<description>generic exception if operation fails</description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="getLocalTransaction" return-type="jakarta.resource.spi.LocalTransaction">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>225</id>
<description>
                            Gets the log writer for this ManagedConnection instance.
                                The log writer is a character output stream to which all logging and   tracing messages for this ManagedConnection instance will be printed.   ConnectionManager manages the association of output stream with the   ManagedConnection instance based on the connection pooling    requirements.    The Log writer associated with a ManagedConnection instance can be   one set as default from the ManagedConnectionFactory (that created   this connection) or one set specifically for this instance by the    application server.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="getLogWriter" return-type="java.io.PrintWriter"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>226</id>
<description>generic exception if operation fails</description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="getLogWriter" return-type="java.io.PrintWriter">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>227</id>
<description>
                            Gets the metadata information for this connection's underlying    EIS resource manager instance.
                             The ManagedConnectionMetaData    interface provides information about the underlying EIS instance    associated with the ManagedConenction instance.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="getMetaData" return-type="jakarta.resource.spi.ManagedConnectionMetaData"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>228</id>
<description>generic exception if operation fails</description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="getMetaData" return-type="jakarta.resource.spi.ManagedConnectionMetaData">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>229</id>
<description>
                            Returns an javax.transaction.xa.XAresource instance.
                                An application server enlists this XAResource instance with the   Transaction Manager if the ManagedConnection instance is being used   in a JTA transaction that is being coordinated by the Transaction    Manager.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="getXAResource" return-type="javax.transaction.xa.XAResource"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>230</id>
<description>generic exception if operation fails</description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="getXAResource" return-type="javax.transaction.xa.XAResource">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>231</id>
<description>
                            Removes an already registered connection event listener from the    ManagedConnection instance.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="removeConnectionEventListener" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.ConnectionEventListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>232</id>
<description>
                            Sets the log writer for this ManagedConnection instance.
                                The log writer is a character output stream to which all logging and   tracing messages for this ManagedConnection instance will be printed.   Application Server manages the association of output stream with the   ManagedConnection instance based on the connection pooling    requirements.      When a ManagedConnection object is initially created, the default   log writer associated with this instance is obtained from the    ManagedConnectionFactory. An application server can set a log writer   specific to this ManagedConnection to log/trace this instance using   setLogWriter method.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="setLogWriter" return-type="void">
<parameters>
<parameter>java.io.PrintWriter</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>233</id>
<description>generic exception if operation fails</description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnection</class-interface>
<method name="setLogWriter" return-type="void">
<parameters>
<parameter>java.io.PrintWriter</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>234</id>
<description>
                            Creates a Connection Factory instance.
                             The Connection Factory   instance gets initialized with the passed ConnectionManager. In   the managed scenario, ConnectionManager is provided by the    application server.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionFactory</class-interface>
<method name="createConnectionFactory" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.resource.spi.ConnectionManager</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>235</id>
<description>Generic exception</description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionFactory</class-interface>
<method name="createConnectionFactory" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.resource.spi.ConnectionManager</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>236</id>
<description>
                            Creates a Connection Factory instance.
                             The Connection Factory    instance gets initialized with a default ConnectionManager provided   by the resource adapter.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionFactory</class-interface>
<method name="createConnectionFactory" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>237</id>
<description>Generic exception</description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionFactory</class-interface>
<method name="createConnectionFactory" return-type="java.lang.Object">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>238</id>
<description>
                            Creates a new physical connection to the underlying EIS    resource manager.
                                ManagedConnectionFactory uses the security information (passed as   Subject) and additional ConnectionRequestInfo (which is specific to   ResourceAdapter and opaque to application server) to create this new   connection.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionFactory</class-interface>
<method name="createManagedConnection" return-type="jakarta.resource.spi.ManagedConnection">
<parameters>
<parameter>jakarta.security.auth.Subject</parameter>
<parameter>jakarta.resource.spi.ConnectionRequestInfo</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>239</id>
<description>generic exception</description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionFactory</class-interface>
<method name="createManagedConnection" return-type="jakarta.resource.spi.ManagedConnection">
<parameters>
<parameter>jakarta.security.auth.Subject</parameter>
<parameter>jakarta.resource.spi.ConnectionRequestInfo</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>240</id>
<description>
                            Check if this ManagedConnectionFactory is equal to another  ManagedConnectionFactory.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionFactory</class-interface>
<method name="equals" return-type="boolean">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>241</id>
<description>
                            Get the log writer for this ManagedConnectionFactory instance.
                                The log writer is a character output stream to which all logging and   tracing messages for this ManagedConnectionFactory instance will be    printed    ApplicationServer manages the association of output stream with the   ManagedConnectionFactory. When a ManagedConnectionFactory object is    created the log writer is initially null, in other words, logging is    disabled.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionFactory</class-interface>
<method name="getLogWriter" return-type="java.io.PrintWriter"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>242</id>
<description>generic exception</description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionFactory</class-interface>
<method name="getLogWriter" return-type="java.io.PrintWriter">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>243</id>
<description>
                            Returns the hash code for the ManagedConnectionFactory
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionFactory</class-interface>
<method name="hashCode" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>244</id>
<description>
                            Returns a matched connection from the candidate set of connections.
                                      ManagedConnectionFactory uses the security info (as in Subject)   and information provided through ConnectionRequestInfo and additional   Resource Adapter specific criteria to do matching. Note that criteria   used for matching is specific to a resource adapter and is not   prescribed by the Connector specification.    This method returns a ManagedConnection instance that is the best    match for handling the connection allocation request.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionFactory</class-interface>
<method name="matchManagedConnections" return-type="jakarta.resource.spi.ManagedConnection">
<parameters>
<parameter>java.util.Set</parameter>
<parameter>jakarta.security.auth.Subject</parameter>
<parameter>jakarta.resource.spi.ConnectionRequestInfo</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>245</id>
<description>generic exception</description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionFactory</class-interface>
<method name="matchManagedConnections" return-type="jakarta.resource.spi.ManagedConnection">
<parameters>
<parameter>java.util.Set</parameter>
<parameter>jakarta.security.auth.Subject</parameter>
<parameter>jakarta.resource.spi.ConnectionRequestInfo</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>246</id>
<description>
                            Set the log writer for this ManagedConnectionFactory instance.
                                The log writer is a character output stream to which all logging and   tracing messages for this ManagedConnectionfactory instance will be    printed.   ApplicationServer manages the association of output stream with the   ManagedConnectionFactory. When a ManagedConnectionFactory object is    created the log writer is initially null, in other words, logging is    disabled. Once a log writer is associated with a   ManagedConnectionFactory, logging and tracing for    ManagedConnectionFactory instance is enabled.    The ManagedConnection instances created by ManagedConnectionFactory   "inherits" the log writer, which can be overridden by ApplicationServer   using ManagedConnection.setLogWriter to set ManagedConnection specific   logging and tracing.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionFactory</class-interface>
<method name="setLogWriter" return-type="void">
<parameters>
<parameter>java.io.PrintWriter</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>247</id>
<description>generic exception</description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionFactory</class-interface>
<method name="setLogWriter" return-type="void">
<parameters>
<parameter>java.io.PrintWriter</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>248</id>
<description>
                            Returns Product name of the underlying EIS instance connected    through the ManagedConnection.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionMetaData</class-interface>
<method name="getEISProductName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>249</id>
<description/>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionMetaData</class-interface>
<method name="getEISProductName" return-type="java.lang.String">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>250</id>
<description>
                            Returns product version of the underlying EIS instance connected    through the ManagedConnection.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionMetaData</class-interface>
<method name="getEISProductVersion" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>251</id>
<description/>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionMetaData</class-interface>
<method name="getEISProductVersion" return-type="java.lang.String">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>252</id>
<description>
                            Returns maximum limit on number of active concurrent connections    that an EIS instance can support across client processes.
                             If an EIS    instance does not know about (or does not have) any such limit, it    returns a 0.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionMetaData</class-interface>
<method name="getMaxConnections" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>253</id>
<description/>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionMetaData</class-interface>
<method name="getMaxConnections" return-type="int">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>254</id>
<description>
                            Returns name of the user associated with the ManagedConnection   instance.
                             The name corresponds to the resource principal under whose   whose security context, a connection to the EIS instance has been   established.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionMetaData</class-interface>
<method name="getUserName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>255</id>
<description/>
<package>jakarta.resource.spi</package>
<class-interface>ManagedConnectionMetaData</class-interface>
<method name="getUserName" return-type="java.lang.String">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>256</id>
<description>
                            This is called during the activation of a message endpoint.
                             This causes  the resource adapter instance to do the necessary setup (ie., setup  message delivery for the message endpoint with a message provider).  Note that message delivery to the message endpoint might start even   before this method returns.   Endpoint activation is deemed successful only when this method   completes successfully without throwing any exceptions.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAdapter</class-interface>
<method name="endpointActivation" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.endpoint.MessageEndpointFactory</parameter>
<parameter>jakarta.resource.spi.ActivationSpec</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>257</id>
<description/>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAdapter</class-interface>
<method name="endpointActivation" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.endpoint.MessageEndpointFactory</parameter>
<parameter>jakarta.resource.spi.ActivationSpec</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>258</id>
<description>
                            This is called when a message endpoint is deactivated.
                             The instances  passed as arguments to this method call should be identical to those  passed in for the corresponding endpointActivation call.  This causes the resource adapter to stop delivering messages to the  message endpoint.    Any exception thrown by this method is ignored. After  this method call, the endpoint is deemed inactive.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAdapter</class-interface>
<method name="endpointDeactivation" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.endpoint.MessageEndpointFactory</parameter>
<parameter>jakarta.resource.spi.ActivationSpec</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>259</id>
<description>
                            This method is called by the application server during crash recovery.
                              This method takes in an array of ActivationSpec JavaBeans   and returns an array of XAResource objects each of which   represents a unique resource manager.   The resource adapter may return null if it does not implement the   XAResource interface. Otherwise, it must return an array   of XAResource objects, each of which represents a unique   resource manager that was used by the endpoint applications.     The application server uses the XAResource objects to   query each resource manager for a list of in-doubt transactions.  It then completes each pending transaction by sending the commit   decision to the participating resource managers.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAdapter</class-interface>
<method name="getXAResources" return-type="javax.transaction.xa.XAResource[]">
<parameters>
<parameter>jakarta.resource.spi.ActivationSpec[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>260</id>
<description>generic exception if operation fails due to an  error condition.</description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAdapter</class-interface>
<method name="getXAResources" return-type="javax.transaction.xa.XAResource[]">
<parameters>
<parameter>jakarta.resource.spi.ActivationSpec[]</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>261</id>
<description>
                            This is called when a resource adapter instance is bootstrapped.
                             This  may be during resource adapter deployment or application server startup.  This is a startup notification from the application server, and this   method is called by an application server thread. The application server  thread executes in an unspecified context.   During this method call a ResourceAdapter JavaBean is  responsible for initializing the resource adapter  instance. Any exception thrown during this method  call causes the application server to abort the bootstrap procedure   for this specific resource adapter instance.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAdapter</class-interface>
<method name="start" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.BootstrapContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>262</id>
<description>indicates bootstrap failure.  The resource adapter instance is unusable and must be discarded.</description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAdapter</class-interface>
<method name="start" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.BootstrapContext</parameter>
</parameters>
<throw>jakarta.resource.spi.ResourceAdapterInternalException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>263</id>
<description>
                            This is called when a resource adapter instance is undeployed or  during application server shutdown.
                             This is a shutdown notification   from the application server, and this method is called by an   application server thread.  The application server  thread executes in an unspecified context.   During this method call, a ResourceAdapter   JavaBean is responsible for performing an orderly shutdown of the  resource adapter instance. Any exception thrown by this   method call does not alter the   processing of the application server shutdown or resource   adapter undeployment that caused this method call. The application   server may log the exception information for error reporting purposes.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAdapter</class-interface>
<method name="stop" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>264</id>
<description>
                            Get the associated ResourceAdapter object.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAdapterAssociation</class-interface>
<method name="getResourceAdapter" return-type="jakarta.resource.spi.ResourceAdapter"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>265</id>
<description>
                            Associate this object with a ResourceAdapter object.
                               Note, this method must be called exactly once. That is, the   association must not change during the lifetime of this object.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAdapterAssociation</class-interface>
<method name="setResourceAdapter" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.ResourceAdapter</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>266</id>
<description>generic exception.</description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAdapterAssociation</class-interface>
<method name="setResourceAdapter" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.ResourceAdapter</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>267</id>
<description>
                            Constructs a new instance with null as its detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAdapterInternalException</class-interface>
<method name="ResourceAdapterInternalException" return-type="ResourceAdapterInternalException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>268</id>
<description>
                            Constructs a new instance with the specified detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAdapterInternalException</class-interface>
<method name="ResourceAdapterInternalException" return-type="ResourceAdapterInternalException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>269</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAdapterInternalException</class-interface>
<method name="ResourceAdapterInternalException" return-type="ResourceAdapterInternalException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>270</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAdapterInternalException</class-interface>
<method name="ResourceAdapterInternalException" return-type="ResourceAdapterInternalException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>271</id>
<description>
                            Constructs a new throwable with the specified detail message and  an error code.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAdapterInternalException</class-interface>
<method name="ResourceAdapterInternalException" return-type="ResourceAdapterInternalException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>272</id>
<description>
                            Constructs a new instance with null as its detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAllocationException</class-interface>
<method name="ResourceAllocationException" return-type="ResourceAllocationException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>273</id>
<description>
                            Constructs a new instance with the specified detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAllocationException</class-interface>
<method name="ResourceAllocationException" return-type="ResourceAllocationException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>274</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAllocationException</class-interface>
<method name="ResourceAllocationException" return-type="ResourceAllocationException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>275</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAllocationException</class-interface>
<method name="ResourceAllocationException" return-type="ResourceAllocationException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>276</id>
<description>
                            Constructs a new throwable with the specified detail message and  an error code.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ResourceAllocationException</class-interface>
<method name="ResourceAllocationException" return-type="ResourceAllocationException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>277</id>
<description>
                            Constructs a new instance with null as its detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>RetryableUnavailableException</class-interface>
<method name="RetryableUnavailableException" return-type="RetryableUnavailableException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>278</id>
<description>
                            Constructs a new instance with the specified detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>RetryableUnavailableException</class-interface>
<method name="RetryableUnavailableException" return-type="RetryableUnavailableException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>279</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>RetryableUnavailableException</class-interface>
<method name="RetryableUnavailableException" return-type="RetryableUnavailableException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>280</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>RetryableUnavailableException</class-interface>
<method name="RetryableUnavailableException" return-type="RetryableUnavailableException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>281</id>
<description>
                            Constructs a new throwable with the specified detail message and  an error code.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>RetryableUnavailableException</class-interface>
<method name="RetryableUnavailableException" return-type="RetryableUnavailableException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>282</id>
<description>
                            Constructs a new instance with null as its detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>SecurityException</class-interface>
<method name="SecurityException" return-type="SecurityException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>283</id>
<description>
                            Constructs a new instance with the specified detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>SecurityException</class-interface>
<method name="SecurityException" return-type="SecurityException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>284</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>SecurityException</class-interface>
<method name="SecurityException" return-type="SecurityException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>285</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>SecurityException</class-interface>
<method name="SecurityException" return-type="SecurityException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>286</id>
<description>
                            Constructs a new throwable with the specified detail message and  an error code.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>SecurityException</class-interface>
<method name="SecurityException" return-type="SecurityException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>287</id>
<description>
                            Specifies an optional description to mention any specific reason that a  resource requires a given security permission.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>SecurityPermission</class-interface>
<method name="description" return-type="java.lang.String[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>288</id>
<description>
                            Specifies a security permission based on the Security policy file syntax.
                              These security permissions are different from those required by the  default permission set as specified in the connector specification.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>SecurityPermission</class-interface>
<method name="permissionSpec" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>289</id>
<description>
                            Constructs a new instance with null as its detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>SharingViolationException</class-interface>
<method name="SharingViolationException" return-type="SharingViolationException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>290</id>
<description>
                            Constructs a new instance with the specified detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>SharingViolationException</class-interface>
<method name="SharingViolationException" return-type="SharingViolationException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>291</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>SharingViolationException</class-interface>
<method name="SharingViolationException" return-type="SharingViolationException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>292</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>SharingViolationException</class-interface>
<method name="SharingViolationException" return-type="SharingViolationException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>293</id>
<description>
                            Constructs a new throwable with the specified detail message and  error code.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>SharingViolationException</class-interface>
<method name="SharingViolationException" return-type="SharingViolationException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>294</id>
<description>
                            Get the level of transaction support, supported by the   ManagedConnectionFactory.
                             A resource adapter must always  return a level of transaction support whose ordinal value in  TransactionSupportLevel enum is equal to or lesser than  the resource adapter's transaction support classification.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>TransactionSupport</class-interface>
<method name="getTransactionSupport" return-type="jakarta.resource.spi.TransactionSupport.TransactionSupport.TransactionSupportLevel"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>295</id>
<description/>
<package>jakarta.resource.spi</package>
<class-interface>TransactionSupport.TransactionSupportLevel</class-interface>
<method name="valueOf" return-type="jakarta.resource.spi.TransactionSupport.TransactionSupport.TransactionSupportLevel">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>296</id>
<description/>
<package>jakarta.resource.spi</package>
<class-interface>TransactionSupport.TransactionSupportLevel</class-interface>
<method name="values" return-type="jakarta.resource.spi.TransactionSupport.TransactionSupport.TransactionSupportLevel[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>297</id>
<description>
                            Constructs a new instance with null as its detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>UnavailableException</class-interface>
<method name="UnavailableException" return-type="UnavailableException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>298</id>
<description>
                            Constructs a new instance with the specified detail message.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>UnavailableException</class-interface>
<method name="UnavailableException" return-type="UnavailableException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>299</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>UnavailableException</class-interface>
<method name="UnavailableException" return-type="UnavailableException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>300</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>UnavailableException</class-interface>
<method name="UnavailableException" return-type="UnavailableException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>301</id>
<description>
                            Constructs a new throwable with the specified detail message and  an error code.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>UnavailableException</class-interface>
<method name="UnavailableException" return-type="UnavailableException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>302</id>
<description>
                            This method returns a set of invalid ManagedConnection   objects chosen from a specified set of ManagedConnection  objects.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>ValidatingManagedConnectionFactory</class-interface>
<method name="getInvalidConnections" return-type="java.util.Set">
<parameters>
<parameter>java.util.Set</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>303</id>
<description>generic exception.</description>
<package>jakarta.resource.spi</package>
<class-interface>ValidatingManagedConnectionFactory</class-interface>
<method name="getInvalidConnections" return-type="java.util.Set">
<parameters>
<parameter>java.util.Set</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>304</id>
<description>
                            Commits the global transaction specified by xid.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>XATerminator</class-interface>
<method name="commit" return-type="void">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>305</id>
<description>An error has occurred. Possible XAExceptions  are XA_HEURHAZ, XA_HEURCOM, XA_HEURRB, XA_HEURMIX, XAER_RMERR,  XAER_RMFAIL, XAER_NOTA, XAER_INVAL, or XAER_PROTO.   If the resource manager did not commit the transaction and the   parameter onePhase is set to true, the resource manager may throw   one of the XA_RB* exceptions. Upon return, the resource manager has   rolled back the branch's work and has released all held resources.</description>
<package>jakarta.resource.spi</package>
<class-interface>XATerminator</class-interface>
<method name="commit" return-type="void">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
<parameter>boolean</parameter>
</parameters>
<throw>javax.transaction.xa.XAException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>306</id>
<description>
                            Tells the resource manager to forget about a heuristically  completed transaction branch.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>XATerminator</class-interface>
<method name="forget" return-type="void">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>307</id>
<description>An error has occurred. Possible exception  values are XAER_RMERR, XAER_RMFAIL, XAER_NOTA, XAER_INVAL, or  XAER_PROTO.</description>
<package>jakarta.resource.spi</package>
<class-interface>XATerminator</class-interface>
<method name="forget" return-type="void">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
</parameters>
<throw>javax.transaction.xa.XAException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>308</id>
<description>
                            Ask the resource manager to prepare for a transaction commit  of the transaction specified in xid.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>XATerminator</class-interface>
<method name="prepare" return-type="int">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>309</id>
<description>An error has occurred. Possible exception  values are: XA_RB*, XAER_RMERR, XAER_RMFAIL, XAER_NOTA, XAER_INVAL,  or XAER_PROTO.</description>
<package>jakarta.resource.spi</package>
<class-interface>XATerminator</class-interface>
<method name="prepare" return-type="int">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
</parameters>
<throw>javax.transaction.xa.XAException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>310</id>
<description>
                            Obtains a list of prepared transaction branches from a resource  manager.
                             The transaction manager calls this method during recovery  to obtain the list of transaction branches that are currently in  prepared or heuristically completed states.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>XATerminator</class-interface>
<method name="recover" return-type="javax.transaction.xa.Xid[]">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>311</id>
<description>An error has occurred. Possible values are  XAER_RMERR, XAER_RMFAIL, XAER_INVAL, and XAER_PROTO.</description>
<package>jakarta.resource.spi</package>
<class-interface>XATerminator</class-interface>
<method name="recover" return-type="javax.transaction.xa.Xid[]">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>javax.transaction.xa.XAException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>312</id>
<description>
                            Informs the resource manager to roll back work done on behalf  of a transaction branch.
                        </description>
<package>jakarta.resource.spi</package>
<class-interface>XATerminator</class-interface>
<method name="rollback" return-type="void">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>313</id>
<description>An error has occurred. Possible XAExceptions are  XA_HEURHAZ, XA_HEURCOM, XA_HEURRB, XA_HEURMIX, XAER_RMERR, XAER_RMFAIL,  XAER_NOTA, XAER_INVAL, or XAER_PROTO.   If the transaction branch is already marked rollback-only the  resource manager may throw one of the XA_RB* exceptions. Upon return,  the resource manager has rolled back the branch's work and has released  all held resources.</description>
<package>jakarta.resource.spi</package>
<class-interface>XATerminator</class-interface>
<method name="rollback" return-type="void">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
</parameters>
<throw>javax.transaction.xa.XAException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>314</id>
<description>
                            This is called by a resource adapter after a message is delivered.
                        </description>
<package>jakarta.resource.spi.endpoint</package>
<class-interface>MessageEndpoint</class-interface>
<method name="afterDelivery" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>315</id>
<description>generic exception.</description>
<package>jakarta.resource.spi.endpoint</package>
<class-interface>MessageEndpoint</class-interface>
<method name="afterDelivery" return-type="void">
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>316</id>
<description>
                            This is called by a resource adapter before a message is delivered.
                        </description>
<package>jakarta.resource.spi.endpoint</package>
<class-interface>MessageEndpoint</class-interface>
<method name="beforeDelivery" return-type="void">
<parameters>
<parameter>java.lang.reflect.Method</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>317</id>
<description>indicates that the specified method  does not exist on the target endpoint.</description>
<package>jakarta.resource.spi.endpoint</package>
<class-interface>MessageEndpoint</class-interface>
<method name="beforeDelivery" return-type="void">
<parameters>
<parameter>java.lang.reflect.Method</parameter>
</parameters>
<throw>java.lang.NoSuchMethodException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>318</id>
<description>generic exception.</description>
<package>jakarta.resource.spi.endpoint</package>
<class-interface>MessageEndpoint</class-interface>
<method name="beforeDelivery" return-type="void">
<parameters>
<parameter>java.lang.reflect.Method</parameter>
</parameters>
<throw>jakarta.resource.ResourceException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>319</id>
<description>
                            This method may be called by the resource adapter to indicate that it  no longer needs a proxy endpoint instance.
                             This hint may be used by  the application server for endpoint pooling decisions.
                        </description>
<package>jakarta.resource.spi.endpoint</package>
<class-interface>MessageEndpoint</class-interface>
<method name="release" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>320</id>
<description>
                            This is used to create a message endpoint.
                             The message endpoint is  expected to implement the correct message listener type.
                        </description>
<package>jakarta.resource.spi.endpoint</package>
<class-interface>MessageEndpointFactory</class-interface>
<method name="createEndpoint" return-type="jakarta.resource.spi.endpoint.MessageEndpoint">
<parameters>
<parameter>javax.transaction.xa.XAResource</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>321</id>
<description>indicates a transient failure  in creating a message endpoint. Subsequent attempts to create a message  endpoint might succeed.</description>
<package>jakarta.resource.spi.endpoint</package>
<class-interface>MessageEndpointFactory</class-interface>
<method name="createEndpoint" return-type="jakarta.resource.spi.endpoint.MessageEndpoint">
<parameters>
<parameter>javax.transaction.xa.XAResource</parameter>
</parameters>
<throw>jakarta.resource.spi.UnavailableException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>322</id>
<description>
                            This is used to create a message endpoint.
                             The message endpoint is  expected to implement the correct message listener type.
                        </description>
<package>jakarta.resource.spi.endpoint</package>
<class-interface>MessageEndpointFactory</class-interface>
<method name="createEndpoint" return-type="jakarta.resource.spi.endpoint.MessageEndpoint">
<parameters>
<parameter>javax.transaction.xa.XAResource</parameter>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>323</id>
<description>indicates a transient failure  in creating a message endpoint. Subsequent attempts to create a message  endpoint might succeed.</description>
<package>jakarta.resource.spi.endpoint</package>
<class-interface>MessageEndpointFactory</class-interface>
<method name="createEndpoint" return-type="jakarta.resource.spi.endpoint.MessageEndpoint">
<parameters>
<parameter>javax.transaction.xa.XAResource</parameter>
<parameter>long</parameter>
</parameters>
<throw>jakarta.resource.spi.UnavailableException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>324</id>
<description>
                            This is used to find out whether message deliveries to a target method  on a message listener interface that is implemented by a message   endpoint will be transacted or not.
                                The message endpoint may indicate its transacted delivery preferences   (at a per method level) through its deployment descriptor. The message   delivery preferences must not change during the lifetime of a   message endpoint.
                        </description>
<package>jakarta.resource.spi.endpoint</package>
<class-interface>MessageEndpointFactory</class-interface>
<method name="isDeliveryTransacted" return-type="boolean">
<parameters>
<parameter>java.lang.reflect.Method</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>325</id>
<description>indicates that the specified method  does not exist on the target endpoint.</description>
<package>jakarta.resource.spi.endpoint</package>
<class-interface>MessageEndpointFactory</class-interface>
<method name="isDeliveryTransacted" return-type="boolean">
<parameters>
<parameter>java.lang.reflect.Method</parameter>
</parameters>
<throw>java.lang.NoSuchMethodException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>326</id>
<description>
                            Tests if this GenericCredential instance refers to the same entity    as the supplied object.
                              The two credentials must be acquired over   the same mechanisms and must refer to the same principal.      Returns true if the two GenericCredentials refer to the same entity;   false otherwise.
                        </description>
<package>jakarta.resource.spi.security</package>
<class-interface>GenericCredential</class-interface>
<method name="equals" return-type="boolean">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>327</id>
<description>
                            Gets security data for a specific security mechanism represented   by the GenericCredential.
                             An example is authentication data required   for establishing a secure association with an EIS instance on   behalf of the associated resource principal.     The getCredentialData method returns the credential    representation as an array of bytes. Note that the connector    architecture does not define any standard format for the returned    credential data.
                        </description>
<package>jakarta.resource.spi.security</package>
<class-interface>GenericCredential</class-interface>
<method name="getCredentialData" return-type="byte[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>328</id>
<description>Failed operation due to security related                       error condition</description>
<package>jakarta.resource.spi.security</package>
<class-interface>GenericCredential</class-interface>
<method name="getCredentialData" return-type="byte[]">
<throw>jakarta.resource.spi.SecurityException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>329</id>
<description>
                            Returns the mechanism type for the GenericCredential instance.
                                The mechanism type definition for GenericCredential should be    consistent with the Object Identifier (OID) based representation   specified in the GSS specification. In the GenericCredential   interface, the mechanism type is returned as a stringified    representation of the OID specification.
                        </description>
<package>jakarta.resource.spi.security</package>
<class-interface>GenericCredential</class-interface>
<method name="getMechType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>330</id>
<description>
                            Returns the name of the resource principal associated    with a GenericCredential instance.
                        </description>
<package>jakarta.resource.spi.security</package>
<class-interface>GenericCredential</class-interface>
<method name="getName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>331</id>
<description>
                            Returns the hash code for this GenericCredential
                        </description>
<package>jakarta.resource.spi.security</package>
<class-interface>GenericCredential</class-interface>
<method name="hashCode" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>332</id>
<description>
                            Compares this PasswordCredential with the specified object for    equality.
                             The two PasswordCredential instances are the same if   they are equal in username and password.
                        </description>
<package>jakarta.resource.spi.security</package>
<class-interface>PasswordCredential</class-interface>
<method name="equals" return-type="boolean">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>333</id>
<description>
                            Gets the target ManagedConnectionFactory for which the user name and    password has been set by the application server.
                             A ManagedConnection-   Factory uses this field to find out whether PasswordCredential should   be used by it for sign-on to the target EIS instance.
                        </description>
<package>jakarta.resource.spi.security</package>
<class-interface>PasswordCredential</class-interface>
<method name="getManagedConnectionFactory" return-type="jakarta.resource.spi.ManagedConnectionFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>334</id>
<description>
                            Returns the user password.
                                Note that this method returns a reference to the password. It is  the caller's responsibility to zero out the password information after  it is no longer needed.
                        </description>
<package>jakarta.resource.spi.security</package>
<class-interface>PasswordCredential</class-interface>
<method name="getPassword" return-type="char[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>335</id>
<description>
                            Returns the user name.
                        </description>
<package>jakarta.resource.spi.security</package>
<class-interface>PasswordCredential</class-interface>
<method name="getUserName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>336</id>
<description>
                            Returns the hash code for this PasswordCredential
                        </description>
<package>jakarta.resource.spi.security</package>
<class-interface>PasswordCredential</class-interface>
<method name="hashCode" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>337</id>
<description>
                            Creates a new PasswordCredential object from the given  user name and password.
                                Note that the given user password is cloned before it is stored in  the new PasswordCredential object.
                        </description>
<package>jakarta.resource.spi.security</package>
<class-interface>PasswordCredential</class-interface>
<method name="PasswordCredential" return-type="PasswordCredential">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>char[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>338</id>
<description>
                            Sets the target ManagedConenctionFactory instance for which the user     name and password has been set by the application server.
                        </description>
<package>jakarta.resource.spi.security</package>
<class-interface>PasswordCredential</class-interface>
<method name="setManagedConnectionFactory" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.ManagedConnectionFactory</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>339</id>
<description/>
<package>jakarta.resource.spi.work</package>
<class-interface>ExecutionContext</class-interface>
<method name="ExecutionContext" return-type="ExecutionContext"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>340</id>
<description>
                            Get the transaction timeout value for a imported transaction.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>ExecutionContext</class-interface>
<method name="getTransactionTimeout" return-type="long"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>341</id>
<description/>
<package>jakarta.resource.spi.work</package>
<class-interface>ExecutionContext</class-interface>
<method name="getXid" return-type="javax.transaction.xa.Xid"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>342</id>
<description>
                            Set the transaction timeout value for a imported transaction.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>ExecutionContext</class-interface>
<method name="setTransactionTimeout" return-type="void">
<parameters>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>343</id>
<description>thrown to indicate an illegal timeout   value.</description>
<package>jakarta.resource.spi.work</package>
<class-interface>ExecutionContext</class-interface>
<method name="setTransactionTimeout" return-type="void">
<parameters>
<parameter>long</parameter>
</parameters>
<throw>jakarta.resource.NotSupportedException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>344</id>
<description>
                            set a transaction context.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>ExecutionContext</class-interface>
<method name="setXid" return-type="void">
<parameters>
<parameter>javax.transaction.xa.Xid</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>345</id>
<description>
                            
                            
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>HintsContext</class-interface>
<method name="getDescription" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>346</id>
<description/>
<package>jakarta.resource.spi.work</package>
<class-interface>HintsContext</class-interface>
<method name="getHints" return-type="java.util.Map"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>347</id>
<description>
                            
                            
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>HintsContext</class-interface>
<method name="getName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>348</id>
<description/>
<package>jakarta.resource.spi.work</package>
<class-interface>HintsContext</class-interface>
<method name="HintsContext" return-type="HintsContext"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>349</id>
<description>
                            Set a brief description of the role played by the instance of  HintsContext and any other related debugging information.
                                This could be used by the resource adapter and the WorkManager for  logging and debugging purposes.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>HintsContext</class-interface>
<method name="setDescription" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>350</id>
<description>
                            Set a Hint and a related value.
                             The hintName must be non-Null. Standard  HintNames are defined in the Connector specification. Use of  "jakarta.resource." prefixed hintNames are reserved for use by the  Connector specification.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>HintsContext</class-interface>
<method name="setHint" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.io.Serializable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>351</id>
<description>
                            Set the associated name of the HintsContext.
                             This could be used by  the resource adapter and the WorkManager for logging and debugging  purposes.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>HintsContext</class-interface>
<method name="setName" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>352</id>
<description>
                            Constructs a new instance with null as its detail message.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>RetryableWorkRejectedException</class-interface>
<method name="RetryableWorkRejectedException" return-type="RetryableWorkRejectedException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>353</id>
<description>
                            Constructs a new instance with the specified detail message.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>RetryableWorkRejectedException</class-interface>
<method name="RetryableWorkRejectedException" return-type="RetryableWorkRejectedException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>354</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>RetryableWorkRejectedException</class-interface>
<method name="RetryableWorkRejectedException" return-type="RetryableWorkRejectedException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>355</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>RetryableWorkRejectedException</class-interface>
<method name="RetryableWorkRejectedException" return-type="RetryableWorkRejectedException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>356</id>
<description>
                            Constructs a new throwable with the specified detail message and  an error code.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>RetryableWorkRejectedException</class-interface>
<method name="RetryableWorkRejectedException" return-type="RetryableWorkRejectedException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>357</id>
<description>
                            
                            
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>SecurityContext</class-interface>
<method name="getDescription" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>358</id>
<description>
                            
                            
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>SecurityContext</class-interface>
<method name="getName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>359</id>
<description/>
<package>jakarta.resource.spi.work</package>
<class-interface>SecurityContext</class-interface>
<method name="SecurityContext" return-type="SecurityContext"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>360</id>
<description>
                            The container calls this method to set up the security Context for the  Work instance.
                                  The handler argument must not be null, and the argument handler and the  CallbackHandler passed to this method must support the  following Callbacks defined in JSR 196: Java Authentication  SPI for Containers specification:      CallerPrincipalCallback  GroupPrincipalCallback  PasswordValidationCallback    The following Callbacks may be supported by the container.    CertStoreCallback    PrivateKeyCallback    SecretKeyCallback    TrustStoreCallback          A resource adapter might use the CallerPrincipalCallback "to  set the container's representation of the caller principal. The  CallbackHandler must establish the argument Principal as the caller  principal associated with the invocation being processed by the  container. When the argument Principal is null, the handler will  establish the container's representation of the unauthenticated caller  principal."      A resource adapter might use the GroupPrincipalCallback "to  establish the container's representation of the corresponding group  principals within the Subject. When a null value is passed to the groups  argument, the handler will establish the container's representation of no  group principals within the Subject. Otherwise, the handler's processing  of this callback is additive, yielding the union (without duplicates) of  the principals existing within the Subject, and those created with the  names occurring within the argument array. The CallbackHandler will  define the type of the created principals."      A resource adapter might use the PasswordValidationCallback  "to employ the password validation facilities of its containing runtime."      The executionSubject argument must be non-null and it must not be  read-only. It is expected that this method will populate this  executionSubject with principals and credentials that would be flown into  the application server.      The serviceSubject argument must be non-null and it must not be  read-only. It represents the application server and it may be used by the  Work implementation to retrieve Principals and credentials necessary to  establish a connection to the EIS (in the cause of mutual-auth like  scenarios). If the Subject is not null, the Work implementation may  collect the server credentials, as necessary, by using the callback  handler passed to them .        When this method is called, the method implementation    identifies the security context that needs to be flown-in to the  application server to serve as the execution context of the Work  instance.  populates the executionSubject with the EIS Principals and  Credentials that it wants to serve as the security context for the Work  instance to be executed in.  adds instances of the necessary Callbacks , usually a subset of the  ones listed above, to an array and invokes the handle() method in the  container's CallbackHandler implementation passing in the array of  Callback instances.  on successful return from the CallbackHandler.handle() method the  setSecurityContext returns after ensuring that the executionSubject is  populated with the valid Principals and Credentials that represent the  execution context of the Work instance    
                            
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>SecurityContext</class-interface>
<method name="setupSecurityContext" return-type="void">
<parameters>
<parameter>javax.security.auth.callback.CallbackHandler</parameter>
<parameter>jakarta.security.auth.Subject</parameter>
<parameter>jakarta.security.auth.Subject</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>361</id>
<description>
                            
                            
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>TransactionContext</class-interface>
<method name="getDescription" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>362</id>
<description>
                            
                            
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>TransactionContext</class-interface>
<method name="getName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>363</id>
<description/>
<package>jakarta.resource.spi.work</package>
<class-interface>TransactionContext</class-interface>
<method name="TransactionContext" return-type="TransactionContext"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>364</id>
<description>
                            The WorkManager might call this method to hint the  active Work instance to complete execution as soon as   possible.
                             This would be called on a separate thread other than the  one currently executing the Work instance.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>Work</class-interface>
<method name="release" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>365</id>
<description>
                            Invoked when a Work instance has been accepted.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkAdapter</class-interface>
<method name="workAccepted" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.work.WorkEvent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>366</id>
<description/>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkAdapter</class-interface>
<method name="WorkAdapter" return-type="WorkAdapter"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>367</id>
<description>
                            Invoked when a Work instance has completed execution.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkAdapter</class-interface>
<method name="workCompleted" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.work.WorkEvent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>368</id>
<description>
                            Invoked when a Work instance has been rejected.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkAdapter</class-interface>
<method name="workRejected" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.work.WorkEvent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>369</id>
<description>
                            Invoked when a Work instance has started execution.
                              This only means that a thread has been allocated.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkAdapter</class-interface>
<method name="workStarted" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.work.WorkEvent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>370</id>
<description>
                            Constructs a new instance with null as its detail message.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkCompletedException</class-interface>
<method name="WorkCompletedException" return-type="WorkCompletedException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>371</id>
<description>
                            Constructs a new instance with the specified detail message.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkCompletedException</class-interface>
<method name="WorkCompletedException" return-type="WorkCompletedException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>372</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkCompletedException</class-interface>
<method name="WorkCompletedException" return-type="WorkCompletedException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>373</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkCompletedException</class-interface>
<method name="WorkCompletedException" return-type="WorkCompletedException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>374</id>
<description>
                            Constructs a new throwable with the specified detail message and  an error code.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkCompletedException</class-interface>
<method name="WorkCompletedException" return-type="WorkCompletedException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>375</id>
<description>
                            Get the brief description of the role played by the  WorkContext and any other related debugging information.
                              This could be used by the WorkManager and the resource adapter for  debugging purposes.  
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkContext</class-interface>
<method name="getDescription" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>376</id>
<description>
                            Get the associated name of the WorkContext.
                             This could be  used by the WorkManager and the resource adapter for debugging purposes.  
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkContext</class-interface>
<method name="getName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>377</id>
<description/>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkContextErrorCodes</class-interface>
<method name="WorkContextErrorCodes" return-type="WorkContextErrorCodes"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>378</id>
<description>
                            Invoked when the WorkContext instance was successfully set  as the execution context for the Work instance.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkContextLifecycleListener</class-interface>
<method name="contextSetupComplete" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>379</id>
<description>
                            Invoked when the WorkContext instance was set as the  execution context for the Work instance it was associated  with.
                            
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkContextLifecycleListener</class-interface>
<method name="contextSetupFailed" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>380</id>
<description>
                            Gets an list of WorkContexts that needs to be used by the  WorkManager to set up the execution context while executing  a Work instance.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkContextProvider</class-interface>
<method name="getWorkContexts" return-type="java.util.List"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>381</id>
<description>
                            Return the WorkException.
                             The actual   WorkException subtype returned depends on the type of the  event.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkEvent</class-interface>
<method name="getException" return-type="jakarta.resource.spi.work.WorkException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>382</id>
<description>
                            Return the start interval duration.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkEvent</class-interface>
<method name="getStartDuration" return-type="long"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>383</id>
<description>
                            Return the type of this event.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkEvent</class-interface>
<method name="getType" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>384</id>
<description>
                            Return the Work instance which is the cause of the event.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkEvent</class-interface>
<method name="getWork" return-type="jakarta.resource.spi.work.Work"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>385</id>
<description>
                            Constructor.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkEvent</class-interface>
<method name="WorkEvent" return-type="WorkEvent">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>int</parameter>
<parameter>jakarta.resource.spi.work.Work</parameter>
<parameter>jakarta.resource.spi.work.WorkException</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>386</id>
<description>
                            Constructor.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkEvent</class-interface>
<method name="WorkEvent" return-type="WorkEvent">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>int</parameter>
<parameter>jakarta.resource.spi.work.Work</parameter>
<parameter>jakarta.resource.spi.work.WorkException</parameter>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>387</id>
<description>
                            Constructs a new instance with null as its detail message.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkException</class-interface>
<method name="WorkException" return-type="WorkException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>388</id>
<description>
                            Constructs a new instance with the specified detail message.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkException</class-interface>
<method name="WorkException" return-type="WorkException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>389</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkException</class-interface>
<method name="WorkException" return-type="WorkException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>390</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkException</class-interface>
<method name="WorkException" return-type="WorkException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>391</id>
<description>
                            Constructs a new throwable with the specified detail message and  an error code.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkException</class-interface>
<method name="WorkException" return-type="WorkException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>392</id>
<description>
                            Invoked when a Work instance has been accepted.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkListener</class-interface>
<method name="workAccepted" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.work.WorkEvent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>393</id>
<description>
                            Invoked when a Work instance has completed execution.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkListener</class-interface>
<method name="workCompleted" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.work.WorkEvent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>394</id>
<description>
                            Invoked when a Work instance has been rejected.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkListener</class-interface>
<method name="workRejected" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.work.WorkEvent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>395</id>
<description>
                            Invoked when a Work instance has started execution.
                              This only means that a thread has been allocated.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkListener</class-interface>
<method name="workStarted" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.work.WorkEvent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>396</id>
<description>
                            Accepts a Work instance for processing.
                             This call  blocks until the Work instance completes execution.  There is no guarantee on when the accepted Work   instance would start execution ie., there is no time constraint   to start execution. (that is, startTimeout=INDEFINITE)
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkManager</class-interface>
<method name="doWork" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.work.Work</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>397</id>
<description/>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkManager</class-interface>
<method name="doWork" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.work.Work</parameter>
</parameters>
<throw>jakarta.resource.spi.work.WorkException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>398</id>
<description>
                            Accepts a Work instance for processing.
                             This call  blocks until the Work instance completes execution.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkManager</class-interface>
<method name="doWork" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.work.Work</parameter>
<parameter>long</parameter>
<parameter>jakarta.resource.spi.work.ExecutionContext</parameter>
<parameter>jakarta.resource.spi.work.WorkListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>399</id>
<description/>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkManager</class-interface>
<method name="doWork" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.work.Work</parameter>
<parameter>long</parameter>
<parameter>jakarta.resource.spi.work.ExecutionContext</parameter>
<parameter>jakarta.resource.spi.work.WorkListener</parameter>
</parameters>
<throw>jakarta.resource.spi.work.WorkException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>400</id>
<description>
                            Accepts a Work instance for processing.
                             This call  does not block and returns immediately once a Work  instance has been accepted for processing. There is no guarantee  on when the submitted Work instance would start  execution ie., there is no time constraint to start execution.  (that is, startTimeout=INDEFINITE).
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkManager</class-interface>
<method name="scheduleWork" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.work.Work</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>401</id>
<description/>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkManager</class-interface>
<method name="scheduleWork" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.work.Work</parameter>
</parameters>
<throw>jakarta.resource.spi.work.WorkException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>402</id>
<description>
                            Accepts a Work instance for processing.
                             This call  does not block and returns immediately once a Work  instance has been accepted for processing.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkManager</class-interface>
<method name="scheduleWork" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.work.Work</parameter>
<parameter>long</parameter>
<parameter>jakarta.resource.spi.work.ExecutionContext</parameter>
<parameter>jakarta.resource.spi.work.WorkListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>403</id>
<description/>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkManager</class-interface>
<method name="scheduleWork" return-type="void">
<parameters>
<parameter>jakarta.resource.spi.work.Work</parameter>
<parameter>long</parameter>
<parameter>jakarta.resource.spi.work.ExecutionContext</parameter>
<parameter>jakarta.resource.spi.work.WorkListener</parameter>
</parameters>
<throw>jakarta.resource.spi.work.WorkException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>404</id>
<description>
                            Accepts a Work instance for processing.
                             This call  blocks until the Work instance starts execution  but not until its completion. There is no guarantee on when  the accepted Work instance would start  execution ie., there is no time constraint to start execution.  (that is, startTimeout=INDEFINITE)
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkManager</class-interface>
<method name="startWork" return-type="long">
<parameters>
<parameter>jakarta.resource.spi.work.Work</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>405</id>
<description/>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkManager</class-interface>
<method name="startWork" return-type="long">
<parameters>
<parameter>jakarta.resource.spi.work.Work</parameter>
</parameters>
<throw>jakarta.resource.spi.work.WorkException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>406</id>
<description>
                            Accepts a Work instance for processing.
                             This call  blocks until the Work instance starts execution  but not until its completion. There is no guarantee on when  the accepted Work instance would start  execution ie., there is no time constraint to start execution.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkManager</class-interface>
<method name="startWork" return-type="long">
<parameters>
<parameter>jakarta.resource.spi.work.Work</parameter>
<parameter>long</parameter>
<parameter>jakarta.resource.spi.work.ExecutionContext</parameter>
<parameter>jakarta.resource.spi.work.WorkListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>407</id>
<description/>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkManager</class-interface>
<method name="startWork" return-type="long">
<parameters>
<parameter>jakarta.resource.spi.work.Work</parameter>
<parameter>long</parameter>
<parameter>jakarta.resource.spi.work.ExecutionContext</parameter>
<parameter>jakarta.resource.spi.work.WorkListener</parameter>
</parameters>
<throw>jakarta.resource.spi.work.WorkException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>408</id>
<description>
                            Constructs a new instance with null as its detail message.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkRejectedException</class-interface>
<method name="WorkRejectedException" return-type="WorkRejectedException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>409</id>
<description>
                            Constructs a new instance with the specified detail message.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkRejectedException</class-interface>
<method name="WorkRejectedException" return-type="WorkRejectedException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>410</id>
<description>
                            Constructs a new throwable with the specified cause.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkRejectedException</class-interface>
<method name="WorkRejectedException" return-type="WorkRejectedException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>411</id>
<description>
                            Constructs a new throwable with the specified detail message and cause.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkRejectedException</class-interface>
<method name="WorkRejectedException" return-type="WorkRejectedException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>412</id>
<description>
                            Constructs a new throwable with the specified detail message and  an error code.
                        </description>
<package>jakarta.resource.spi.work</package>
<class-interface>WorkRejectedException</class-interface>
<method name="WorkRejectedException" return-type="WorkRejectedException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
</assertions>
</javadoc>

<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<javadoc>
    <package name="javax.xml.messaging">
        <classes>
            <class modifiers="public" name="URLEndpoint">
                <extends name="Endpoint" package="javax.xml.messaging"/>
                <superclasses>
                    <superclass name="Object" package="java.lang"/>
                </superclasses>
                <comment>
                    <lead>A special case of the &lt;code&gt;Endpoint&lt;/code&gt; class used for simple  applications that want to communicate directly with another  SOAP-based application in a point-to-point fashion instead of   going through a messaging provider.</lead>
                    <detail>  &lt;P&gt;  A &lt;code&gt;URLEndpoint&lt;/code&gt; object contains a URL, which is used to make  connections to the remote party.  A standalone client can pass a &lt;code&gt;URLEndpoint&lt;/code&gt; object   to the &lt;code&gt;SOAPConnection&lt;/code&gt; method &lt;code&gt;call&lt;/code&gt;  to send a message synchronously.</detail>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a new &lt;code&gt;URLEndpoint&lt;/code&gt; object using the given URL.</lead>
                        </comment>
                        <parameters>
                            <parameter name="url" package="java.lang" type="String">
                                <comment>a &lt;code&gt;String&lt;/code&gt; giving the URL to use in constructing          the new &lt;code&gt;URLEndpoint&lt;/code&gt; object</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public" name="getURL">
                        <comment>
                            <lead>Gets the URL associated with this &lt;code&gt;URLEndpoint&lt;/code&gt; object.</lead>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>a &lt;code&gt;String&lt;/code&gt; giving the URL associated with this           &lt;code&gt;URLEndpoint&lt;/code&gt; object</comment>
                        </returns>
                    </method>
                </methods>
            </class>
            <class modifiers="public abstract" name="ProviderConnectionFactory">
                <extends name="Object" package="java.lang"/>
                <comment>
                    <lead>A factory for creating connections to a particular messaging provider.</lead>
                    <detail>  A &lt;code&gt;ProviderConnectionFactory&lt;/code&gt; object can be obtained in two  different ways.  &lt;ul&gt;  &lt;li&gt;Call the &lt;code&gt;ProviderConnectionFactory.newInstance&lt;/code&gt;  method to get an instance of the default &lt;code&gt;ProviderConnectionFactory&lt;/code&gt;  object.&lt;br&gt;   This instance can be used to create a &lt;code&gt;ProviderConnection&lt;/code&gt;  object that connects to the default provider implementation.  &lt;PRE&gt;       ProviderConnectionFactory pcf = ProviderConnectionFactory.newInstance();       ProviderConnection con = pcf.createConnection();  &lt;/PRE&gt;  &lt;P&gt;  &lt;li&gt;Retrieve a &lt;code&gt;ProviderConnectionFactory&lt;/code&gt; object  that has been registered with a naming service based on Java Naming and   Directory Interface&lt;sup&gt;&lt;font size=-2&gt;TM&lt;/font&gt;&lt;/sup&gt; (JNDI) technology.&lt;br&gt;  In this case, the &lt;code&gt;ProviderConnectionFactory&lt;/code&gt; object is an   administered object that was created by a container (a servlet or Enterprise  JavaBeans&lt;sup&gt;&lt;font size=-2&gt;TM&lt;/font&gt;&lt;/sup&gt; container). The  &lt;code&gt;ProviderConnectionFactory&lt;/code&gt; object was configured in an implementation-  specific way, and the connections it creates will be to the specified  messaging provider. &lt;br&gt;  &lt;P&gt;  Registering a &lt;code&gt;ProviderConnectionFactory&lt;/code&gt; object with a JNDI naming service  associates it with a logical name. When an application wants to establish a  connection with the provider associated with that  &lt;code&gt;ProviderConnectionFactory&lt;/code&gt; object, it does a lookup, providing the  logical name.  The application can then use the   &lt;code&gt;ProviderConnectionFactory&lt;/code&gt;  object that is returned to create a connection to the messaging provider.  The first two lines of the  following code fragment use JNDI methods to   retrieve a &lt;code&gt;ProviderConnectionFactory&lt;/code&gt; object. The third line uses the  returned object to create a connection to the JAXM provider that was   registered with &quot;ProviderXYZ&quot; as its logical name.  &lt;PRE&gt;       Context ctx = new InitialContext();       ProviderConnectionFactory pcf = (ProviderConnectionFactory)ctx.lookup(                                                                  &quot;ProviderXYZ&quot;);       ProviderConnection con = pcf.createConnection();  &lt;/PRE&gt;  &lt;/ul&gt;</detail>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment/>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public abstract" name="createConnection">
                        <comment>
                            <lead>Creates a &lt;code&gt;ProviderConnection&lt;/code&gt; object to the messaging provider that  is associated with this &lt;code&gt;ProviderConnectionFactory&lt;/code&gt;  object.</lead>
                        </comment>
                        <returns package="javax.xml.messaging" type="ProviderConnection">
                            <comment>a &lt;code&gt;ProviderConnection&lt;/code&gt; object that represents           a connection to the provider associated with this           &lt;code&gt;ProviderConnectionFactory&lt;/code&gt; object</comment>
                        </returns>
                        <throws>
                            <throw name="javax.xml.messaging.JAXMException">if there is an error in creating the             connection</throw>
                        </throws>
                    </method>
                    <method modifiers="public static" name="newInstance">
                        <comment>
                            <lead>Creates a default &lt;code&gt;ProviderConnectionFactory&lt;/code&gt; object.</lead>
                        </comment>
                        <returns package="javax.xml.messaging" type="ProviderConnectionFactory">
                            <comment>a new instance of a &lt;code&gt;ProviderConnectionFactory&lt;/code&gt;</comment>
                        </returns>
                        <throws>
                            <throw name="javax.xml.messaging.JAXMException">if there was an error creating the             default &lt;code&gt;ProviderConnectionFactory&lt;/code&gt;</throw>
                        </throws>
                    </method>
                </methods>
            </class>
            <class modifiers="public abstract" name="JAXMServlet">
                <extends name="HttpServlet"/>
                <superclasses>
                    <superclass name="Object" package="java.lang"/>
                </superclasses>
                <comment>
                    <lead>The superclass for components that  live in a servlet container that receives JAXM messages.</lead>
                    <detail>  A &lt;code&gt;JAXMServlet&lt;/code&gt; object is notified of a message&apos;s arrival  using the HTTP-SOAP binding.   &lt;P&gt;  The &lt;code&gt;JAXMServlet&lt;/code&gt; class is a support/utility class and is  provided purely as a convenience.  It is not a mandatory component, and   there is no requirement that it be implemented or extended.  &lt;P&gt;  Note that when a component that receives messages extends  &lt;code&gt;JAXMServlet&lt;/code&gt;, it also needs to implement either a  &lt;code&gt;ReqRespListener&lt;/code&gt; object or a   &lt;code&gt;OnewayListener&lt;/code&gt; object,  depending on whether the component is written for a request-response  style of interaction or for a one-way (asynchronous) style of interaction.</detail>
                </comment>
                <fields>
                    <field modifiers="protected" name="msgFactory" package="jakarta.xml.soap" type="MessageFactory">
                        <comment>
                            <lead>The &lt;code&gt;MessageFactory&lt;/code&gt; object that will be used internally  to create the &lt;code&gt;SOAPMessage&lt;/code&gt; object to be passed to the  method &lt;code&gt;onMessage&lt;/code&gt;.</lead>
                            <detail> This new message will contain the data  from the message that was posted to the servlet.  Using the   &lt;code&gt;MessageFactory&lt;/code&gt; object that is the value for this field   to create the new message ensures that the correct profile is used.</detail>
                        </comment>
                    </field>
                </fields>
                <constructors>
                    <constructor modifiers="public">
                        <comment/>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public" name="init">
                        <comment>
                            <lead>Initializes this &lt;code&gt;JAXMServlet&lt;/code&gt; object using the given   &lt;code&gt;ServletConfig&lt;/code&gt; object and initializing the  &lt;code&gt;msgFactory&lt;/code&gt; field with a default  &lt;code&gt;MessageFactory&lt;/code&gt; object.</lead>
                        </comment>
                        <parameters>
                            <parameter name="servletConfig" type="ServletConfig">
                                <comment>the &lt;code&gt;ServletConfig&lt;/code&gt; object to be         used in initializing this &lt;code&gt;JAXMServlet&lt;/code&gt; object</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="ServletException"/>
                        </throws>
                    </method>
                    <method modifiers="public" name="setMessageFactory">
                        <comment>
                            <lead>Sets this &lt;code&gt;JAXMServlet&lt;/code&gt; object&apos;s &lt;code&gt;msgFactory&lt;/code&gt;  field with the given &lt;code&gt;MessageFactory&lt;/code&gt; object.</lead>
                            <detail>  A &lt;code&gt;MessageFactory&lt;/code&gt; object for a particular profile needs to  be set before a message is received in order for the message to be   successfully internalized.</detail>
                        </comment>
                        <parameters>
                            <parameter name="msgFactory" package="jakarta.xml.soap" type="MessageFactory">
                                <comment>the &lt;code&gt;MessageFactory&lt;/code&gt; object that will         be used to create the &lt;code&gt;SOAPMessage&lt;/code&gt; object that         will be used to internalize the message that was posted to          the servlet</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="protected static" name="getHeaders">
                        <comment>
                            <lead>Returns a &lt;code&gt;MimeHeaders&lt;/code&gt; object that contains the headers  in the given &lt;code&gt;HttpServletRequest&lt;/code&gt; object.</lead>
                        </comment>
                        <parameters>
                            <parameter name="req" type="HttpServletRequest">
                                <comment>the &lt;code&gt;HttpServletRequest&lt;/code&gt; object that a         messaging provider sent to the servlet</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="MimeHeaders">
                            <comment>a new &lt;code&gt;MimeHeaders&lt;/code&gt; object containing the headers          in the message sent to the servlet</comment>
                        </returns>
                    </method>
                    <method modifiers="protected static" name="putHeaders">
                        <comment>
                            <lead>Sets the given &lt;code&gt;HttpServletResponse&lt;/code&gt; object with the  headers in the given &lt;code&gt;MimeHeaders&lt;/code&gt; object.</lead>
                            <see class="JAXMServlet" member="getHeaders" package="javax.xml.messaging"/>
                        </comment>
                        <parameters>
                            <parameter name="headers" package="jakarta.xml.soap" type="MimeHeaders">
                                <comment>the &lt;code&gt;MimeHeaders&lt;/code&gt; object containing the         the headers in the message sent to the servlet</comment>
                            </parameter>
                            <parameter name="res" type="HttpServletResponse">
                                <comment>the &lt;code&gt;HttpServletResponse&lt;/code&gt; object to which the         headers are to be written</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="doPost">
                        <comment>
                            <lead>Internalizes the given &lt;code&gt;HttpServletRequest&lt;/code&gt; object  and writes the reply to the given &lt;code&gt;HttpServletResponse&lt;/code&gt;  object.</lead>
                            <detail>  &lt;P&gt;  Note that the value for the &lt;code&gt;msgFactory&lt;/code&gt; field will be used to  internalize the message. This ensures that the message  factory for the correct profile is used.</detail>
                        </comment>
                        <parameters>
                            <parameter name="req" type="HttpServletRequest">
                                <comment>the &lt;code&gt;HttpServletRequest&lt;/code&gt; object containing the         message that was sent to the servlet</comment>
                            </parameter>
                            <parameter name="resp" type="HttpServletResponse">
                                <comment>the &lt;code&gt;HttpServletResponse&lt;/code&gt; object to which the         response to the message will be written</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="ServletException">if there is a servlet error</throw>
                            <throw name="java.io.IOException">if there is an input or output error</throw>
                        </throws>
                    </method>
                </methods>
            </class>
            <class modifiers="public" name="JAXMException">
                <extends name="SOAPException" package="jakarta.xml.soap"/>
                <superclasses>
                    <superclass name="Exception" package="java.lang"/>
                    <superclass name="Throwable" package="java.lang"/>
                    <superclass name="Object" package="java.lang"/>
                </superclasses>
                <comment>
                    <lead>An exception that signals that a JAXM exception has occurred.</lead>
                    <detail> A  &lt;code&gt;JAXMException&lt;/code&gt; object may contain a &lt;code&gt;String&lt;/code&gt;  that gives the reason for the exception, an embedded  &lt;code&gt;Throwable&lt;/code&gt; object, or both. This class provides methods  for retrieving reason messages and for retrieving the embedded  &lt;code&gt;Throwable&lt;/code&gt; object.   &lt;P&gt; Typical reasons for throwing a &lt;code&gt;JAXMException&lt;/code&gt;  object are problems such as not being able to send a message and  not being able to get a connection with the provider.  Reasons for  embedding a &lt;code&gt;Throwable&lt;/code&gt; object include problems such as  an input/output errors or a parsing problem, such as an error  parsing a header.</detail>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a &lt;code&gt;JAXMException&lt;/code&gt; object with no  reason or embedded &lt;code&gt;Throwable&lt;/code&gt; object.</lead>
                        </comment>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a &lt;code&gt;JAXMException&lt;/code&gt; object with the given  &lt;code&gt;String&lt;/code&gt; as the reason for the exception being thrown.</lead>
                        </comment>
                        <parameters>
                            <parameter name="reason" package="java.lang" type="String">
                                <comment>a &lt;code&gt;String&lt;/code&gt; giving a description of what          caused this exception</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a &lt;code&gt;JAXMException&lt;/code&gt; object with the given  &lt;code&gt;String&lt;/code&gt; as the reason for the exception being thrown  and the given &lt;code&gt;Throwable&lt;/code&gt; object as an embedded  exception.</lead>
                        </comment>
                        <parameters>
                            <parameter name="reason" package="java.lang" type="String">
                                <comment>a &lt;code&gt;String&lt;/code&gt; giving a description of what          caused this exception</comment>
                            </parameter>
                            <parameter name="cause" package="java.lang" type="Throwable">
                                <comment>a &lt;code&gt;Throwable&lt;/code&gt; object that is to         be embedded in this &lt;code&gt;JAXMException&lt;/code&gt; object</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a &lt;code&gt;JAXMException&lt;/code&gt; object initialized  with the given &lt;code&gt;Throwable&lt;/code&gt; object.</lead>
                        </comment>
                        <parameters>
                            <parameter name="cause" package="java.lang" type="Throwable">
                                <comment>a &lt;code&gt;Throwable&lt;/code&gt; object that is to         be embedded in this &lt;code&gt;JAXMException&lt;/code&gt; object</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                </constructors>
            </class>
            <class modifiers="public" name="Endpoint">
                <extends name="Object" package="java.lang"/>
                <comment>
                    <lead>An opaque representation of an application endpoint.</lead>
                    <see class="URLEndpoint" package="javax.xml.messaging"/>
                    <detail> Typically, an  &lt;code&gt;Endpoint&lt;/code&gt; object represents a business entity, but it  may represent a party of any sort. Conceptually, an   &lt;code&gt;Endpoint&lt;/code&gt; object is the mapping of a logical name  (example, a URI) to a physical location, such as a URL.  &lt;P&gt;  For messaging using a provider that supports profiles, an application  does not need to specify an endpoint when it sends a message because   destination information will be contained in the profile-specific header.  However, for point-to-point plain SOAP messaging, an application must supply  an &lt;code&gt;Endpoint&lt;/code&gt; object to  the &lt;code&gt;SOAPConnection&lt;/code&gt; method &lt;code&gt;call&lt;/code&gt;  to indicate the intended destination for the message.   The subclass  can be used when an application  wants to send a message directly to a remote party without using a  messaging provider.  &lt;P&gt;  The default identification for an &lt;code&gt;Endpoint&lt;/code&gt; object  is a URI. This defines what JAXM messaging  providers need to support at minimum for identification of  destinations. A messaging provider  needs to be configured using a deployment-specific mechanism with  mappings from an endpoint to the physical details of that endpoint.   &lt;P&gt;  &lt;code&gt;Endpoint&lt;/code&gt; objects can be created using the constructor, or  they can be looked up in a naming  service. The latter is more flexible because logical identifiers  or even other naming schemes (such as DUNS numbers)  can be bound and rebound to specific URIs.</detail>
                </comment>
                <fields>
                    <field modifiers="protected" name="id" package="java.lang" type="String">
                        <comment>
                            <lead>A string that identifies the party that this &lt;code&gt;Endpoint&lt;/code&gt;  object represents; a URI is the default.</lead>
                        </comment>
                    </field>
                </fields>
                <constructors>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs an &lt;code&gt;Endpoint&lt;/code&gt; object using the given  string identifier.</lead>
                        </comment>
                        <parameters>
                            <parameter name="uri" package="java.lang" type="String">
                                <comment>a string that identifies the party that this         &lt;code&gt;Endpoint&lt;/code&gt; object represents; the default         is a URI</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public" name="toString">
                        <comment>
                            <lead>Retrieves a string representation of this &lt;code&gt;Endpoint&lt;/code&gt;  object.</lead>
                            <detail>  This string is likely to be provider-specific, and  programmers are discouraged from parsing and programmatically  interpreting the contents of this string.</detail>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>a &lt;code&gt;String&lt;/code&gt; with a provider-specific representation          of this &lt;code&gt;Endpoint&lt;/code&gt; object</comment>
                        </returns>
                    </method>
                </methods>
            </class>
        </classes>
        <interfaces>
            <interface modifiers="public " name="ReqRespListener">
                <comment>
                    <lead>A marker interface for components that are   intended to be consumers of request-response messages.</lead>
                    <detail>  In the request-response style of messaging, sending a request and receiving  the response are both done in a single operation. This means that the   client sending the request cannot do anything else until after it has  received the response.  &lt;P&gt;  From the standpoint of the  sender, a message is sent via the &lt;code&gt;SOAPConnection&lt;/code&gt; method  &lt;code&gt;call&lt;/code&gt; in a point-to-point fashion.  The method &lt;code&gt;call&lt;/code&gt;  blocks, waiting until it gets a  response message that it can return.    The sender may be a standalone client, or it may be deployed in a container.  &lt;P&gt;  The receiver, typically a service operating in a servlet, implements the   &lt;code&gt;ReqRespListener&lt;/code&gt; method &lt;code&gt;onMessage&lt;/code&gt; to specify  how to respond to the requests it receives. &lt;P&gt;  It is possible that a standalone client might use the method &lt;code&gt;call&lt;/code&gt;  to send a message that does not require a response.  For such cases,  the receiver must implement the method &lt;code&gt;onMessage&lt;/code&gt; such that   it returns a message whose only purpose is to unblock the   &lt;code&gt;call&lt;/code&gt; method.</detail>
                    <see class="JAXMServlet" package="javax.xml.messaging"/>
                    <see class="OnewayListener" package="javax.xml.messaging"/>
                    <see class="SOAPConnection" member="call" package="jakarta.xml.soap"/>
                </comment>
                <methods>
                    <method modifiers="public" name="onMessage">
                        <comment>
                            <lead>Passes the given &lt;code&gt;SOAPMessage&lt;/code&gt; object to this  &lt;code&gt;ReqRespListener&lt;/code&gt; object and returns the response.</lead>
                            <detail>    This method is invoked behind the scenes, typically by the  container (servlet or EJB container) after the messaging provider  delivers the message to the container.    It is expected that EJB Containers will deliver JAXM messages  to EJB components using message driven Beans that implement the  &lt;code&gt;javax.xml.messaging.ReqRespListener&lt;/code&gt; interface.</detail>
                        </comment>
                        <parameters>
                            <parameter name="message" package="jakarta.xml.soap" type="SOAPMessage">
                                <comment>the &lt;code&gt;SOAPMessage&lt;/code&gt; object to be passed to this                 &lt;code&gt;ReqRespListener&lt;/code&gt; object</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPMessage">
                            <comment>the response. If this is &lt;code&gt;null&lt;/code&gt;, then the          original message is treated as a &quot;oneway&quot; message.</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="ProviderMetaData">
                <comment>
                    <lead>Information about the messaging provider to which a client has  a connection.</lead>
                    <detail>  &lt;P&gt;  After obtaining a connection to its messaging provider, a client  can get information about that provider.  The following code fragment  demonstrates how the &lt;code&gt;ProviderConnection&lt;/code&gt; object &lt;code&gt;con&lt;/code&gt;  can be used to retrieve its &lt;code&gt;ProviderMetaData&lt;/code&gt; object   and then to get the name and version number of the messaging provider.  &lt;PRE&gt;    ProviderMetaData pmd = con.getMetaData();    String name = pmd.getName();    int majorVersion = pmd.getProviderMajorVersion();    int minorVersion = pmd.getProviderMinorVersion();  &lt;/PRE&gt;   The &lt;code&gt;ProviderMetaData&lt;/code&gt; interface also makes it possible  to find out which profiles a JAXM provider supports.  The following line of code uses the method   &lt;code&gt;getSupportedProfiles&lt;/code&gt; to   retrieve an array of &lt;code&gt;String&lt;/code&gt; objects naming the profile(s)  that the JAXM provider supports.  &lt;PRE&gt;    String [] profiles = pmd.getSupportedProfiles();  &lt;/PRE&gt;    When a JAXM implementation supports a profile, it supports the functionality   supplied by a particular messaging specification. A profile is built on top   of the SOAP 1.1 and SOAP with Attachments specifications and adds more  capabilities.  For example, a JAXM provider may support  an ebXML profile, which means that it supports headers that specify  functionality defined in the ebXML specification &quot;Message Service Specification:  ebXML Routing, Transport, &amp; Packaging, Version 1.0&quot;.  &lt;P&gt;  Support for  profiles, which typically add enhanced security  and quality of service features, is required for the implementation of  end-to-end asynchronous messaging.</detail>
                </comment>
                <methods>
                    <method modifiers="public" name="getName">
                        <comment>
                            <lead>Retrieves a &lt;code&gt;String&lt;/code&gt; containing the name of the  messaging provider to which the &lt;code&gt;ProviderConnection&lt;/code&gt; object   described by this &lt;code&gt;ProviderMetaData&lt;/code&gt; object is  connected.</lead>
                            <detail> This string is provider implementation-dependent. It  can either describe a particular instance of the provider or  just give the name of the provider.</detail>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>the messaging provider&apos;s name as a &lt;code&gt;String&lt;/code&gt;</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getMajorVersion">
                        <comment>
                            <lead>Retrieves an &lt;code&gt;int&lt;/code&gt; indicating the major version number   of the messaging provider to which the &lt;code&gt;ProviderConnection&lt;/code&gt; object   described by this &lt;code&gt;ProviderMetaData&lt;/code&gt; object is  connected.</lead>
                        </comment>
                        <returns type="int">
                            <comment>the messaging provider&apos;s major version number as an           &lt;code&gt;int&lt;/code&gt;</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getMinorVersion">
                        <comment>
                            <lead>Retrieves an &lt;code&gt;int&lt;/code&gt; indicating the minor version number   of the messaging provider to which the &lt;code&gt;ProviderConnection&lt;/code&gt; object   described by this &lt;code&gt;ProviderMetaData&lt;/code&gt; object is  connected.</lead>
                        </comment>
                        <returns type="int">
                            <comment>the messaging provider&apos;s minor version number as an           &lt;code&gt;int&lt;/code&gt;</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getSupportedProfiles">
                        <comment>
                            <lead>Retrieves a list of the messaging profiles that are supported  by the messaging provider to which the &lt;code&gt;ProviderConnection&lt;/code&gt; object  described by this &lt;code&gt;ProviderMetaData&lt;/code&gt; object is  connected.</lead>
                        </comment>
                        <returns dimension="[]" package="java.lang" type="String">
                            <comment>a &lt;code&gt;String&lt;/code&gt; array in which each element is a          messaging profile supported by the messaging provider</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="ProviderConnection">
                <comment>
                    <lead>A client&apos;s active connection to its messaging provider.</lead>
                    <see class="SOAPConnection" package="jakarta.xml.soap"/>
                    <see class="URLEndpoint" package="javax.xml.messaging"/>
                    <detail>  &lt;P&gt;  A &lt;code&gt;ProviderConnection&lt;/code&gt; object is created using a  &lt;code&gt;ProviderConnectionFactory&lt;/code&gt; object, which is configured so that  the connections it creates will be to a particular messaging provider.  To create a connection, a client first needs to obtain an instance of  the &lt;code&gt;ProviderConnectionFactory&lt;/code&gt; class that creates connections to  the desired messaging provider. The client then calls the  &lt;code&gt;createConnection&lt;/code&gt; method on it.  &lt;P&gt;  The information necessary to set up a &lt;code&gt;ProviderConnectionFactory&lt;/code&gt;  object that creates connections to a particular messaging provider is   supplied at deployment time.  Typically an instance of  &lt;code&gt;ProviderConnectionFactory&lt;/code&gt; will be bound to a logical  name in a naming service. Later the client can do a lookup on the  logical name to retrieve an instance of the  &lt;code&gt;ProviderConnectionFactory&lt;/code&gt; class that produces  connections to its messaging provider.  &lt;P&gt;  The following code fragment is an example of a client doing a lookup of  a &lt;code&gt;ProviderConnectionFactory&lt;/code&gt; object and then using it to create  a connection.  The first two lines in this example use the   Java&lt;sup&gt;&lt;font size =-2&gt;TM&lt;/font&gt;&lt;/sup&gt; Naming and Directory  Interface (JNDI) to create a context, which is then used to do  the lookup.  The argument provided to the &lt;code&gt;lookup&lt;/code&gt; method  is the logical name that was previously associated with the  desired messaging provider. The &lt;code&gt;lookup&lt;/code&gt; method returns  a Java &lt;code&gt;Object&lt;/code&gt;, which needs to be cast to a  &lt;code&gt;ProviderConnectionFactory&lt;/code&gt; object before it can be used to create  a connection.  In the following code fragment, the resulting   &lt;code&gt;ProviderConnection&lt;/code&gt; object is a connection to the messaging provider  that is associated with the logical name &quot;ProviderXYZ&quot;.  &lt;PRE&gt;     Context ctx = new InitialContext();     ProviderConnectionFactory pcf = (ProviderConnectionFactory)ctx.lookup(&quot;ProviderXYZ&quot;);     ProviderConnection con = pcf.createConnection();  &lt;/PRE&gt;   &lt;P&gt;  After the client has obtained a connection to its messaging provider,  it can use that connection to create one or more   &lt;code&gt;MessageFactory&lt;/code&gt; objects, which can then be used to create  &lt;code&gt;SOAPMessage&lt;/code&gt; objects.  Messages are delivered to an endpoint using the &lt;code&gt;ProviderConnection&lt;/code&gt;  method &lt;code&gt;send&lt;/code&gt;.    &lt;P&gt;  The messaging provider maintains a list of &lt;code&gt;Endpoint&lt;/code&gt; objects,  which is established at deployment time as part of configuring   the messaging provider. When a client uses a messaging provider to send  messages, it can   send messages only to those parties represented by &lt;code&gt;Endpoint&lt;/code&gt;   objects in its messaging provider&apos;s list. This is true because the  messaging provider maps the URI for each &lt;code&gt;Endpoint&lt;/code&gt; object to  a URL.    &lt;P&gt;  Note that it is possible for a client to send a message without  using a messaging provider.  In this case, the client uses a  &lt;code&gt;SOAPConnection&lt;/code&gt; object   to send point-to-point messages via the method &lt;code&gt;call&lt;/code&gt;.  This method takes an &lt;code&gt;Endpoint&lt;/code&gt; object (actually a  &lt;code&gt;URLEndpoint&lt;/code&gt; object) that specifies the URL where the message  is to be sent.  See  and   for more information.  &lt;P&gt;  Typically, because clients have one messaging provider, they will do all   their messaging with a single &lt;code&gt;ProviderConnection&lt;/code&gt; object. It is   possible, however, for a sophisticated application to use multiple  connections.    &lt;P&gt;  Generally, a container is configured with a listener component at  deployment time using an implementation-specific mechanism.   A client running in such a container uses a &lt;code&gt;OnewayListener&lt;/code&gt;  object to receive messages asynchronously. In this scenario, messages are  sent via the &lt;code&gt;ProviderConnection&lt;/code&gt; method &lt;code&gt;send&lt;/code&gt;.  A client running in a container that wants to receive synchronous messages  uses a &lt;code&gt;ReqRespListener&lt;/code&gt; object. A &lt;code&gt;ReqRespListener&lt;/code&gt;  object receives messages sent via the &lt;code&gt;SOAPConnection&lt;/code&gt; method  &lt;code&gt;call&lt;/code&gt;.  &lt;P&gt;  Due to the authentication and communication setup done when a   &lt;code&gt;ProviderConnection&lt;/code&gt; object is created, it is a relatively heavy-weight   object. Therefore, a client should close its connection as soon as it is  done using it.  &lt;P&gt;  JAXM objects created using one &lt;code&gt;ProviderConnection&lt;/code&gt; object cannot be   used with a different &lt;code&gt;ProviderConnection&lt;/code&gt; object.</detail>
                </comment>
                <methods>
                    <method modifiers="public" name="getMetaData">
                        <comment>
                            <lead>Retrieves the &lt;code&gt;ProviderMetaData&lt;/code&gt; object that contains  information about the messaging provider to which this  &lt;code&gt;ProviderConnection&lt;/code&gt; object is connected.</lead>
                            <see class="ProviderMetaData" package="javax.xml.messaging"/>
                        </comment>
                        <returns package="javax.xml.messaging" type="ProviderMetaData">
                            <comment>the &lt;code&gt;ProviderMetaData&lt;/code&gt; object with information          about the messaging provider</comment>
                        </returns>
                        <throws>
                            <throw name="javax.xml.messaging.JAXMException">if there is a problem getting the              &lt;code&gt;ProviderMetaData&lt;/code&gt; object</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="close">
                        <comment>
                            <lead>Closes this &lt;code&gt;ProviderConnection&lt;/code&gt; object, freeing its resources  and making it immediately available for garbage collection.</lead>
                            <detail>  Since a provider typically allocates significant resources outside  the JVM on behalf of a connection, clients should close connections  when they are not needed. Relying on garbage collection to eventually  reclaim these resources may not be timely enough.</detail>
                        </comment>
                        <returns type="void"/>
                        <throws>
                            <throw name="javax.xml.messaging.JAXMException">if a JAXM error occurs while closing                           the connection.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="createMessageFactory">
                        <comment>
                            <lead>Creates a &lt;code&gt;MessageFactory&lt;/code&gt; object that will produce  &lt;code&gt;SOAPMessage&lt;/code&gt; objects for the given profile.</lead>
                            <detail> The  &lt;code&gt;MessageFactory&lt;/code&gt; object that is returned can create  instances of &lt;code&gt;SOAPMessage&lt;/code&gt; subclasses as appropriate for  the given profile.</detail>
                        </comment>
                        <parameters>
                            <parameter name="profile" package="java.lang" type="String">
                                <comment>a string that represents a particular JAXM                 profile in use. An example of a JAXM profile is:                 &quot;ebxml&quot;.</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="MessageFactory">
                            <comment>a new &lt;code&gt;MessageFactory&lt;/code&gt; object that will create          &lt;code&gt;SOAPMessage&lt;/code&gt; objects for the given profile</comment>
                        </returns>
                        <throws>
                            <throw name="javax.xml.messaging.JAXMException">if the JAXM infrastructure encounters                           an error, for example, if the endpoint                           that is being used is not compatible                           with the specified profile</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="send">
                        <comment>
                            <lead>Sends the given &lt;code&gt;SOAPMessage&lt;/code&gt; object and returns immediately   after handing the message over to the  messaging provider.</lead>
                            <detail> No assumptions can be made regarding the ultimate  success or failure of message delivery at the time this method returns.</detail>
                        </comment>
                        <parameters>
                            <parameter name="message" package="jakarta.xml.soap" type="SOAPMessage">
                                <comment>the &lt;code&gt;SOAPMessage&lt;/code&gt; object that is to be         sent asynchronously over this &lt;code&gt;ProviderConnection&lt;/code&gt; object</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="javax.xml.messaging.JAXMException">if a JAXM transmission error occurs</throw>
                        </throws>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="OnewayListener">
                <comment>
                    <lead>A marker interface for components (for example, servlets) that are   intended to be consumers of one-way (asynchronous) JAXM messages.</lead>
                    <detail>    The receiver of a one-way message is sent the message in one operation,  and it sends the response in another separate operation. The time  interval between the receipt of a one-way message and the sending  of the response may be measured in fractions of seconds or days.  &lt;P&gt;  The implementation of the &lt;code&gt;onMessage&lt;/code&gt; method defines  how the receiver responds to the &lt;code&gt;SOAPMessage&lt;/code&gt; object  that was passed to the &lt;code&gt;onMessage&lt;/code&gt; method.</detail>
                    <see class="JAXMServlet" package="javax.xml.messaging"/>
                    <see class="ReqRespListener" package="javax.xml.messaging"/>
                </comment>
                <methods>
                    <method modifiers="public" name="onMessage">
                        <comment>
                            <lead>Passes the given &lt;code&gt;SOAPMessage&lt;/code&gt; object to this  &lt;code&gt;OnewayListener&lt;/code&gt; object.</lead>
                            <detail>    This method is invoked behind the scenes, typically by the  container (servlet or EJB container) after the messaging provider  delivers the message to the container.    It is expected that EJB Containers will deliver JAXM messages  to EJB components using message driven Beans that implement the  &lt;code&gt;javax.xml.messaging.OnewayListener&lt;/code&gt; interface.</detail>
                        </comment>
                        <parameters>
                            <parameter name="message" package="jakarta.xml.soap" type="SOAPMessage">
                                <comment>the &lt;code&gt;SOAPMessage&lt;/code&gt; object to be passed to this                 &lt;code&gt;OnewayListener&lt;/code&gt; object</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                </methods>
            </interface>
        </interfaces>
    </package>
</javadoc>

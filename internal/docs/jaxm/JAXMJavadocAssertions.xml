<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE javadoc SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/javadoc_assertions.dtd">
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<javadoc>
<next-available-id>35</next-available-id>
<previous-id>1</previous-id>
<technology>JAXM</technology>
<id>JAXM 1.1</id>
<name>Java API for XML Messaging</name>
<version>Final Draft</version>
<assertions>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:1</id>
<description>
                            Constructs a new &lt;code&gt;URLEndpoint&lt;/code&gt; object using the given URL.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>URLEndpoint</class-interface>
<method name="URLEndpoint" return-type="URLEndpoint">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:2</id>
<description>
                            Gets the URL associated with this &lt;code&gt;URLEndpoint&lt;/code&gt; object.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>URLEndpoint</class-interface>
<method name="getURL" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:3</id>
<description/>
<package>javax.xml.messaging</package>
<class-interface>ProviderConnectionFactory</class-interface>
<method name="ProviderConnectionFactory" return-type="ProviderConnectionFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:4</id>
<description>
                            Creates a &lt;code&gt;ProviderConnection&lt;/code&gt; object to the messaging provider that  is associated with this &lt;code&gt;ProviderConnectionFactory&lt;/code&gt;  object.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>ProviderConnectionFactory</class-interface>
<method name="createConnection" return-type="javax.xml.messaging.ProviderConnection"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:5</id>
<description>if there is an error in creating the             connection</description>
<package>javax.xml.messaging</package>
<class-interface>ProviderConnectionFactory</class-interface>
<method name="createConnection" return-type="javax.xml.messaging.ProviderConnection">
<throw>javax.xml.messaging.JAXMException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:6</id>
<description>
                            Creates a default &lt;code&gt;ProviderConnectionFactory&lt;/code&gt; object.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>ProviderConnectionFactory</class-interface>
<method name="newInstance" return-type="javax.xml.messaging.ProviderConnectionFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:7</id>
<description>if there was an error creating the             default &lt;code&gt;ProviderConnectionFactory&lt;/code&gt;</description>
<package>javax.xml.messaging</package>
<class-interface>ProviderConnectionFactory</class-interface>
<method name="newInstance" return-type="javax.xml.messaging.ProviderConnectionFactory">
<throw>javax.xml.messaging.JAXMException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:8</id>
<description/>
<package>javax.xml.messaging</package>
<class-interface>JAXMServlet</class-interface>
<method name="JAXMServlet" return-type="JAXMServlet"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:9</id>
<description>
                            Initializes this &lt;code&gt;JAXMServlet&lt;/code&gt; object using the given   &lt;code&gt;ServletConfig&lt;/code&gt; object and initializing the  &lt;code&gt;msgFactory&lt;/code&gt; field with a default  &lt;code&gt;MessageFactory&lt;/code&gt; object.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>JAXMServlet</class-interface>
<method name="init" return-type="void">
<parameters>
<parameter>ServletConfig</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:10</id>
<description/>
<package>javax.xml.messaging</package>
<class-interface>JAXMServlet</class-interface>
<method name="init" return-type="void">
<parameters>
<parameter>ServletConfig</parameter>
</parameters>
<throw>ServletException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:11</id>
<description>
                            Sets this &lt;code&gt;JAXMServlet&lt;/code&gt; object's &lt;code&gt;msgFactory&lt;/code&gt;  field with the given &lt;code&gt;MessageFactory&lt;/code&gt; object.
                              A &lt;code&gt;MessageFactory&lt;/code&gt; object for a particular profile needs to  be set before a message is received in order for the message to be   successfully internalized.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>JAXMServlet</class-interface>
<method name="setMessageFactory" return-type="void">
<parameters>
<parameter>javax.xml.soap.MessageFactory</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:12</id>
<description>
                            Internalizes the given &lt;code&gt;HttpServletRequest&lt;/code&gt; object  and writes the reply to the given &lt;code&gt;HttpServletResponse&lt;/code&gt;  object.
                              &lt;P&gt;  Note that the value for the &lt;code&gt;msgFactory&lt;/code&gt; field will be used to  internalize the message. This ensures that the message  factory for the correct profile is used.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>JAXMServlet</class-interface>
<method name="doPost" return-type="void">
<parameters>
<parameter>HttpServletRequest</parameter>
<parameter>HttpServletResponse</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:13</id>
<description>if there is a servlet error</description>
<package>javax.xml.messaging</package>
<class-interface>JAXMServlet</class-interface>
<method name="doPost" return-type="void">
<parameters>
<parameter>HttpServletRequest</parameter>
<parameter>HttpServletResponse</parameter>
</parameters>
<throw>ServletException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:14</id>
<description>if there is an input or output error</description>
<package>javax.xml.messaging</package>
<class-interface>JAXMServlet</class-interface>
<method name="doPost" return-type="void">
<parameters>
<parameter>HttpServletRequest</parameter>
<parameter>HttpServletResponse</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:15</id>
<description>
                            Constructs a &lt;code&gt;JAXMException&lt;/code&gt; object with no  reason or embedded &lt;code&gt;Throwable&lt;/code&gt; object.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>JAXMException</class-interface>
<method name="JAXMException" return-type="JAXMException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:16</id>
<description>
                            Constructs a &lt;code&gt;JAXMException&lt;/code&gt; object with the given  &lt;code&gt;String&lt;/code&gt; as the reason for the exception being thrown.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>JAXMException</class-interface>
<method name="JAXMException" return-type="JAXMException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:17</id>
<description>
                            Constructs a &lt;code&gt;JAXMException&lt;/code&gt; object with the given  &lt;code&gt;String&lt;/code&gt; as the reason for the exception being thrown  and the given &lt;code&gt;Throwable&lt;/code&gt; object as an embedded  exception.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>JAXMException</class-interface>
<method name="JAXMException" return-type="JAXMException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:18</id>
<description>
                            Constructs a &lt;code&gt;JAXMException&lt;/code&gt; object initialized  with the given &lt;code&gt;Throwable&lt;/code&gt; object.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>JAXMException</class-interface>
<method name="JAXMException" return-type="JAXMException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:19</id>
<description>
                            Constructs an &lt;code&gt;Endpoint&lt;/code&gt; object using the given  string identifier.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>Endpoint</class-interface>
<method name="Endpoint" return-type="Endpoint">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:20</id>
<description>
                            Retrieves a string representation of this &lt;code&gt;Endpoint&lt;/code&gt;  object.
                              This string is likely to be provider-specific, and  programmers are discouraged from parsing and programmatically  interpreting the contents of this string.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>Endpoint</class-interface>
<method name="toString" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:21</id>
<description>
                            Passes the given &lt;code&gt;SOAPMessage&lt;/code&gt; object to this  &lt;code&gt;ReqRespListener&lt;/code&gt; object and returns the response.
                                This method is invoked behind the scenes, typically by the  container (servlet or EJB container) after the messaging provider  delivers the message to the container.    It is expected that EJB Containers will deliver JAXM messages  to EJB components using message driven Beans that implement the  &lt;code&gt;javax.xml.messaging.ReqRespListener&lt;/code&gt; interface.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>ReqRespListener</class-interface>
<method name="onMessage" return-type="javax.xml.soap.SOAPMessage">
<parameters>
<parameter>javax.xml.soap.SOAPMessage</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:22</id>
<description>
                            Retrieves a &lt;code&gt;String&lt;/code&gt; containing the name of the  messaging provider to which the &lt;code&gt;ProviderConnection&lt;/code&gt; object   described by this &lt;code&gt;ProviderMetaData&lt;/code&gt; object is  connected.
                             This string is provider implementation-dependent. It  can either describe a particular instance of the provider or  just give the name of the provider.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>ProviderMetaData</class-interface>
<method name="getName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:23</id>
<description>
                            Retrieves an &lt;code&gt;int&lt;/code&gt; indicating the major version number   of the messaging provider to which the &lt;code&gt;ProviderConnection&lt;/code&gt; object   described by this &lt;code&gt;ProviderMetaData&lt;/code&gt; object is  connected.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>ProviderMetaData</class-interface>
<method name="getMajorVersion" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:24</id>
<description>
                            Retrieves an &lt;code&gt;int&lt;/code&gt; indicating the minor version number   of the messaging provider to which the &lt;code&gt;ProviderConnection&lt;/code&gt; object   described by this &lt;code&gt;ProviderMetaData&lt;/code&gt; object is  connected.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>ProviderMetaData</class-interface>
<method name="getMinorVersion" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:25</id>
<description>
                            Retrieves a list of the messaging profiles that are supported  by the messaging provider to which the &lt;code&gt;ProviderConnection&lt;/code&gt; object  described by this &lt;code&gt;ProviderMetaData&lt;/code&gt; object is  connected.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>ProviderMetaData</class-interface>
<method name="getSupportedProfiles" return-type="java.lang.String[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:26</id>
<description>
                            Retrieves the &lt;code&gt;ProviderMetaData&lt;/code&gt; object that contains  information about the messaging provider to which this  &lt;code&gt;ProviderConnection&lt;/code&gt; object is connected.
                            
                        </description>
<package>javax.xml.messaging</package>
<class-interface>ProviderConnection</class-interface>
<method name="getMetaData" return-type="javax.xml.messaging.ProviderMetaData"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:27</id>
<description>if there is a problem getting the              &lt;code&gt;ProviderMetaData&lt;/code&gt; object</description>
<package>javax.xml.messaging</package>
<class-interface>ProviderConnection</class-interface>
<method name="getMetaData" return-type="javax.xml.messaging.ProviderMetaData">
<throw>javax.xml.messaging.JAXMException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:28</id>
<description>
                            Closes this &lt;code&gt;ProviderConnection&lt;/code&gt; object, freeing its resources  and making it immediately available for garbage collection.
                              Since a provider typically allocates significant resources outside  the JVM on behalf of a connection, clients should close connections  when they are not needed. Relying on garbage collection to eventually  reclaim these resources may not be timely enough.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>ProviderConnection</class-interface>
<method name="close" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:29</id>
<description>if a JAXM error occurs while closing                           the connection.</description>
<package>javax.xml.messaging</package>
<class-interface>ProviderConnection</class-interface>
<method name="close" return-type="void">
<throw>javax.xml.messaging.JAXMException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:30</id>
<description>
                            Creates a &lt;code&gt;MessageFactory&lt;/code&gt; object that will produce  &lt;code&gt;SOAPMessage&lt;/code&gt; objects for the given profile.
                             The  &lt;code&gt;MessageFactory&lt;/code&gt; object that is returned can create  instances of &lt;code&gt;SOAPMessage&lt;/code&gt; subclasses as appropriate for  the given profile.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>ProviderConnection</class-interface>
<method name="createMessageFactory" return-type="javax.xml.soap.MessageFactory">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:31</id>
<description>if the JAXM infrastructure encounters                           an error, for example, if the endpoint                           that is being used is not compatible                           with the specified profile</description>
<package>javax.xml.messaging</package>
<class-interface>ProviderConnection</class-interface>
<method name="createMessageFactory" return-type="javax.xml.soap.MessageFactory">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.messaging.JAXMException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:32</id>
<description>
                            Sends the given &lt;code&gt;SOAPMessage&lt;/code&gt; object and returns immediately   after handing the message over to the  messaging provider.
                             No assumptions can be made regarding the ultimate  success or failure of message delivery at the time this method returns.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>ProviderConnection</class-interface>
<method name="send" return-type="void">
<parameters>
<parameter>javax.xml.soap.SOAPMessage</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:33</id>
<description>if a JAXM transmission error occurs</description>
<package>javax.xml.messaging</package>
<class-interface>ProviderConnection</class-interface>
<method name="send" return-type="void">
<parameters>
<parameter>javax.xml.soap.SOAPMessage</parameter>
</parameters>
<throw>javax.xml.messaging.JAXMException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>JAXM:JAVADOC:34</id>
<description>
                            Passes the given &lt;code&gt;SOAPMessage&lt;/code&gt; object to this  &lt;code&gt;OnewayListener&lt;/code&gt; object.
                                This method is invoked behind the scenes, typically by the  container (servlet or EJB container) after the messaging provider  delivers the message to the container.    It is expected that EJB Containers will deliver JAXM messages  to EJB components using message driven Beans that implement the  &lt;code&gt;javax.xml.messaging.OnewayListener&lt;/code&gt; interface.
                        </description>
<package>javax.xml.messaging</package>
<class-interface>OnewayListener</class-interface>
<method name="onMessage" return-type="void">
<parameters>
<parameter>javax.xml.soap.SOAPMessage</parameter>
</parameters>
</method>
</assertion>
</assertions>
</javadoc>

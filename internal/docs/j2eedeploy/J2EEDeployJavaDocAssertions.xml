<?xml version = "1.0" encoding = "US-ASCII"?>
<!DOCTYPE javadoc SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/javadoc_assertions.dtd">
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<?xml-stylesheet href = 'file:///files/tools/docs/xsl/assertions/javadoc_assertions.xsl' type = 'text/xsl'?>
<javadoc>
	<next-available-id>120</next-available-id>
	<previous-id>1</previous-id>
	<technology>JavaEEDeploy</technology>
	<id>JavaEEDeploy</id>
	<name>Java EE Application Deployment API</name>
	<version>1.2</version>
	<assertions>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>1</id>
			<description>                            Retrieve the Singleton factory manager
                        
			</description>
			<package>javax.enterprise.deploy.shared.factories</package>
			<class-interface>DeploymentFactoryManager</class-interface>
			<method name = "getInstance" return-type = "javax.enterprise.deploy.shared.factories.DeploymentFactoryManager"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>2</id>
			<description>                            Retrieve the lists of currently registered DeploymentFactories.
                        
			</description>
			<package>javax.enterprise.deploy.shared.factories</package>
			<class-interface>DeploymentFactoryManager</class-interface>
			<method name = "getDeploymentFactories" return-type = "javax.enterprise.deploy.spi.factories.DeploymentFactory[]"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>3</id>
			<description>                            Retrieves a DeploymentManager instance to use for deployment.
                              The caller provides a URI and optional username and password,  and all registered DeploymentFactories will be checked.  The  first one to understand the URI provided will attempt to  initiate a server connection and return a ready DeploymentManager  instance.
                        
			</description>
			<package>javax.enterprise.deploy.shared.factories</package>
			<class-interface>DeploymentFactoryManager</class-interface>
			<method name = "getDeploymentManager" return-type = "javax.enterprise.deploy.spi.DeploymentManager">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>4</id>
			<description>Occurs when the factory appropriate to the specified URI          was unable to initialize a DeploymentManager instance          (server down, unable to authenticate, etc.).</description>
			<package>javax.enterprise.deploy.shared.factories</package>
			<class-interface>DeploymentFactoryManager</class-interface>
			<method name = "getDeploymentManager" return-type = "javax.enterprise.deploy.spi.DeploymentManager">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>javax.enterprise.deploy.spi.exceptions.DeploymentManagerCreationException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>5</id>
			<description>                            Registers a DeploymentFactory so it will be able to handle  requests.
                        
			</description>
			<package>javax.enterprise.deploy.shared.factories</package>
			<class-interface>DeploymentFactoryManager</class-interface>
			<method name = "registerDeploymentFactory" return-type = "void">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.factories.DeploymentFactory</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>6</id>
			<description>                            Return a &lt;tt>disconnected&lt;/tt> DeploymentManager instance.
                        
			</description>
			<package>javax.enterprise.deploy.shared.factories</package>
			<class-interface>DeploymentFactoryManager</class-interface>
			<method name = "getDisconnectedDeploymentManager" return-type = "javax.enterprise.deploy.spi.DeploymentManager">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>7</id>
			<description/>
			<package>javax.enterprise.deploy.shared.factories</package>
			<class-interface>DeploymentFactoryManager</class-interface>
			<method name = "getDisconnectedDeploymentManager" return-type = "javax.enterprise.deploy.spi.DeploymentManager">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>javax.enterprise.deploy.spi.exceptions.DeploymentManagerCreationException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>8</id>
			<description>                            Retrieve the name of the target server.
                              this module was deployed to.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>TargetModuleID</class-interface>
			<method name = "getTarget" return-type = "javax.enterprise.deploy.spi.Target"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>9</id>
			<description>                            Retrieve the id assigned to represent  the deployed module.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>TargetModuleID</class-interface>
			<method name = "getModuleID" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>10</id>
			<description>                            Retrieve the identifier representing  the deployed module.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>TargetModuleID</class-interface>
			<method name = "toString" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>11</id>
			<description>                            Retrieve the identifier of the parent  object of this deployed module.
                             If there  is no parent then this is the root object  deployed.  The root could represent an EAR   file or it could be a stand alone module   that was deployed.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>TargetModuleID</class-interface>
			<method name = "getParentTargetModuleID" return-type = "javax.enterprise.deploy.spi.TargetModuleID"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>12</id>
			<description>                            Retrieve a list of identifiers of the children  of this deployed module.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>TargetModuleID</class-interface>
			<method name = "getChildTargetModuleID" return-type = "javax.enterprise.deploy.spi.TargetModuleID[]"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>13</id>
			<description/>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>TargetModuleID</class-interface>
			<method name = "getWebURL" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>14</id>
			<description>                            Retrieve the name of the target server.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>Target</class-interface>
			<method name = "getName" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>15</id>
			<description>                            Retrieve other descriptive information  about the target.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>Target</class-interface>
			<method name = "getDescription" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>16</id>
			<description>                            Retrieve the list of deployment targets supported by   this DeploymentManager.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "getTargets" return-type = "javax.enterprise.deploy.spi.Target[]"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>17</id>
			<description>is thrown when the method is                     called when running in disconnected mode.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "getTargets" return-type = "javax.enterprise.deploy.spi.Target[]">
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>18</id>
			<description>                            Retrieve the list of J2EE application modules distributed   to the identified targets and that are currently running   on the associated server or servers.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "getRunningModules" return-type = "javax.enterprise.deploy.spi.TargetModuleID[]">
				<parameters>
					<parameter>ModuleType</parameter>
					<parameter>javax.enterprise.deploy.spi.Target[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>19</id>
			<description>An invalid Target designator                    encountered.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "getRunningModules" return-type = "javax.enterprise.deploy.spi.TargetModuleID[]">
				<parameters>
					<parameter>ModuleType</parameter>
					<parameter>javax.enterprise.deploy.spi.Target[]</parameter>
				</parameters>
				<throw>javax.enterprise.deploy.spi.exceptions.TargetException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>20</id>
			<description>is thrown when the method is                     called when running in disconnected mode.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "getRunningModules" return-type = "javax.enterprise.deploy.spi.TargetModuleID[]">
				<parameters>
					<parameter>ModuleType</parameter>
					<parameter>javax.enterprise.deploy.spi.Target[]</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>21</id>
			<description>                            Retrieve the list of J2EE application modules distributed   to the identified targets and that are currently not  running on the associated server or servers.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "getNonRunningModules" return-type = "javax.enterprise.deploy.spi.TargetModuleID[]">
				<parameters>
					<parameter>ModuleType</parameter>
					<parameter>javax.enterprise.deploy.spi.Target[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>22</id>
			<description>An invalid Target designator                    encountered.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "getNonRunningModules" return-type = "javax.enterprise.deploy.spi.TargetModuleID[]">
				<parameters>
					<parameter>ModuleType</parameter>
					<parameter>javax.enterprise.deploy.spi.Target[]</parameter>
				</parameters>
				<throw>javax.enterprise.deploy.spi.exceptions.TargetException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>23</id>
			<description>is thrown when the method is                     called when running in disconnected mode.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "getNonRunningModules" return-type = "javax.enterprise.deploy.spi.TargetModuleID[]">
				<parameters>
					<parameter>ModuleType</parameter>
					<parameter>javax.enterprise.deploy.spi.Target[]</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>24</id>
			<description>                            Retrieve the list of all J2EE application modules running   or not running on the identified targets.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "getAvailableModules" return-type = "javax.enterprise.deploy.spi.TargetModuleID[]">
				<parameters>
					<parameter>ModuleType</parameter>
					<parameter>javax.enterprise.deploy.spi.Target[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>25</id>
			<description>An invalid Target designator                    encountered.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "getAvailableModules" return-type = "javax.enterprise.deploy.spi.TargetModuleID[]">
				<parameters>
					<parameter>ModuleType</parameter>
					<parameter>javax.enterprise.deploy.spi.Target[]</parameter>
				</parameters>
				<throw>javax.enterprise.deploy.spi.exceptions.TargetException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>26</id>
			<description>is thrown when the method is                     called when running in disconnected mode.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "getAvailableModules" return-type = "javax.enterprise.deploy.spi.TargetModuleID[]">
				<parameters>
					<parameter>ModuleType</parameter>
					<parameter>javax.enterprise.deploy.spi.Target[]</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>27</id>
			<description>                            Retrieve the object that provides server-specific deployment  configuration information for the J2EE deployable component.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "createConfiguration" return-type = "javax.enterprise.deploy.spi.DeploymentConfiguration">
				<parameters>
					<parameter>javax.enterprise.deploy.model.DeployableObject</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>28</id>
			<description>The DeployableObject is an                       unknown or unsupport component for this                       configuration tool.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "createConfiguration" return-type = "javax.enterprise.deploy.spi.DeploymentConfiguration">
				<parameters>
					<parameter>javax.enterprise.deploy.model.DeployableObject</parameter>
				</parameters>
				<throw>javax.enterprise.deploy.spi.exceptions.InvalidModuleException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>29</id>
			<description>                            The distribute method performs three tasks; it validates the  deployment configuration data, generates all container specific   classes and interfaces, and moves the fully baked archive to   the designated deployment targets.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "distribute" return-type = "javax.enterprise.deploy.spi.status.ProgressObject">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.Target[]</parameter>
					<parameter>java.io.File</parameter>
					<parameter>java.io.File</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>30</id>
			<description>is thrown when the method is                     called when running in disconnected mode.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "distribute" return-type = "javax.enterprise.deploy.spi.status.ProgressObject">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.Target[]</parameter>
					<parameter>java.io.File</parameter>
					<parameter>java.io.File</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>31</id>
			<description>                            The distribute method performs three tasks; it validates the  deployment configuration data, generates all container specific   classes and interfaces, and moves the fully baked archive to   the designated deployment targets.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "distribute" return-type = "javax.enterprise.deploy.spi.status.ProgressObject">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.Target[]</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>java.io.InputStream</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>32</id>
			<description>is thrown when the method is                     called when running in disconnected mode.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "distribute" return-type = "javax.enterprise.deploy.spi.status.ProgressObject">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.Target[]</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>java.io.InputStream</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>33</id>
			<description>                            Start the application running.
                                 &lt;p> Only the TargetModuleIDs which represent a root module  are valid for being started. A root TargetModuleID has no parent.  A TargetModuleID with a parent can not be individually started.   A root TargetModuleID module and all its child modules will be   started.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "start" return-type = "javax.enterprise.deploy.spi.status.ProgressObject">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.TargetModuleID[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>34</id>
			<description>is thrown when the method is                     called when running in disconnected mode.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "start" return-type = "javax.enterprise.deploy.spi.status.ProgressObject">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.TargetModuleID[]</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>35</id>
			<description>                            Stop the application running.
                                 &lt;p> Only the TargetModuleIDs which represent a root module  are valid for being stopped. A root TargetModuleID has no parent.  A TargetModuleID with a parent can not be individually stopped.   A root TargetModuleID module and all its child modules will be   stopped.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "stop" return-type = "javax.enterprise.deploy.spi.status.ProgressObject">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.TargetModuleID[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>36</id>
			<description>is thrown when the method is                     called when running in disconnected mode.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "stop" return-type = "javax.enterprise.deploy.spi.status.ProgressObject">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.TargetModuleID[]</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>37</id>
			<description>                            Remove the application from the target server.
                                 &lt;p> Only the TargetModuleIDs which represent a root module  are valid for undeployment. A root TargetModuleID has no parent.  A TargetModuleID with a parent can not be undeployed. A root  TargetModuleID module and all its child modules will be undeployed.  The root TargetModuleID module and all its child modules must  stopped before they can be undeployed.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "undeploy" return-type = "javax.enterprise.deploy.spi.status.ProgressObject">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.TargetModuleID[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>38</id>
			<description>is thrown when the method is                     called when running in disconnected mode.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "undeploy" return-type = "javax.enterprise.deploy.spi.status.ProgressObject">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.TargetModuleID[]</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>39</id>
			<description>                            This method designates whether this platform vendor provides  application redeployment functionality.
                             A value of true means  it is supported.  False means it is not.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "isRedeploySupported" return-type = "boolean"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" status = "active" testable = "true">
			<id>40</id>
			<description>                            (optional)  The redeploy method provides a means for updating currently  deployed J2EE applications.
                              This is an optional method for  vendor implementation.   Redeploy replaces a currently deployed application with an  updated version.  The runtime configuration information for   the updated application must remain identical to the application   it is updating.     When an application update is redeployed, all existing client  connections to the original running application must not be disrupted;   new clients will connect to the application update.   This operation is valid for TargetModuleIDs that represent a  root module. A root TargetModuleID has no parent. A root  TargetModuleID module and all its child modules will be redeployed.  A child TargetModuleID module cannot be individually redeployed.  The redeploy operation is complete only when this action for   all the modules has completed.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "redeploy" return-type = "javax.enterprise.deploy.spi.status.ProgressObject">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.TargetModuleID[]</parameter>
					<parameter>java.io.File</parameter>
					<parameter>java.io.File</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "false" impl-spec = "false" status = "active" testable = "false">
			<id>41</id>
			<description>this optional command          is not supported by this implementation.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "redeploy" return-type = "javax.enterprise.deploy.spi.status.ProgressObject">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.TargetModuleID[]</parameter>
					<parameter>java.io.File</parameter>
					<parameter>java.io.File</parameter>
				</parameters>
				<throw>java.lang.UnsupportedOperationException</throw>
			</method>
		</assertion>
		<assertion required = "false" impl-spec = "false" status = "active" testable = "false">
			<id>42</id>
			<description>is thrown when the method is                     called when running in disconnected mode.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "redeploy" return-type = "javax.enterprise.deploy.spi.status.ProgressObject">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.TargetModuleID[]</parameter>
					<parameter>java.io.File</parameter>
					<parameter>java.io.File</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required = "false" impl-spec = "false" status = "active" testable = "true">
			<id>43</id>
			<description>                            (optional)  The redeploy method provides a means for updating currently  deployed J2EE applications.
                              This is an optional method for  vendor implementation.   Redeploy replaces a currently deployed application with an  updated version.  The runtime configuration information for   the updated application must remain identical to the application   it is updating.   When an application update is redeployed, all existing client  connections to the original running application must not be disrupted;   new clients will connect to the application update.   This operation is valid for TargetModuleIDs that represent a  root module. A root TargetModuleID has no parent. A root  TargetModuleID module and all its child modules will be redeployed.  A child TargetModuleID module cannot be individually redeployed.  The redeploy operation is complete only when this action for   all the modules has completed.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "redeploy" return-type = "javax.enterprise.deploy.spi.status.ProgressObject">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.TargetModuleID[]</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>java.io.InputStream</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "false" impl-spec = "false" status = "active" testable = "false">
			<id>44</id>
			<description>this optional command          is not supported by this implementation.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "redeploy" return-type = "javax.enterprise.deploy.spi.status.ProgressObject">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.TargetModuleID[]</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>java.io.InputStream</parameter>
				</parameters>
				<throw>java.lang.UnsupportedOperationException</throw>
			</method>
		</assertion>
		<assertion required = "false" impl-spec = "false" status = "active" testable = "false">
			<id>45</id>
			<description>is thrown when the method is                     called when running in disconnected mode.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "redeploy" return-type = "javax.enterprise.deploy.spi.status.ProgressObject">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.TargetModuleID[]</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>java.io.InputStream</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>46</id>
			<description>                            The release method is the mechanism by which the tool signals   to the DeploymentManager that the tool does not need it to  continue running connected to the platform.
                                The tool may be signaling it wants to run in a disconnected   mode or it is planning to shutdown.    When release is called the DeploymentManager may close any  J2EE resource connections it had for deployment configuration  and perform other related resource cleanup.  It should not  accept any new operation requests (i.e., distribute, start  stop, undeploy, redeploy.  It should finish any operations   that are currently in process.  Each ProgressObject associated  with a running operation should be marked as released (see  the ProgressObject).
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "release" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>47</id>
			<description>                            Returns the default locale supported by this implementation of  javax.enterprise.deploy.spi subpackages.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "getDefaultLocale" return-type = "java.util.Locale"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>48</id>
			<description>                            Returns the active locale this implementation of  javax.enterprise.deploy.spi subpackages is running.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "getCurrentLocale" return-type = "java.util.Locale"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>49</id>
			<description>                            Set the active locale for this implementation of  javax.enterprise.deploy.spi subpackages to run.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "setLocale" return-type = "void">
				<parameters>
					<parameter>java.util.Locale</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>50</id>
			<description>the provide locale is       not supported.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "setLocale" return-type = "void">
				<parameters>
					<parameter>java.util.Locale</parameter>
				</parameters>
				<throw>java.lang.UnsupportedOperationException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>51</id>
			<description>                            Returns an array of supported locales for this implementation.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "getSupportedLocales" return-type = "java.util.Locale[]"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>52</id>
			<description>                            Reports if this implementation supports the designated locale.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "isLocaleSupported" return-type = "boolean">
				<parameters>
					<parameter>java.util.Locale</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>53</id>
			<description>                            Returns the J2EE platform version number for which the  configuration beans are provided.
                              The beans must have   been compiled with the J2SE version required by the J2EE   platform.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "getDConfigBeanVersion" return-type = "DConfigBeanVersionType"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>54</id>
			<description>                            Returns 'true' if the configuration beans support the J2EE platform  version specified.
                              It returns 'false' if the version is  not supported.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "isDConfigBeanVersionSupported" return-type = "boolean">
				<parameters>
					<parameter>DConfigBeanVersionType</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>55</id>
			<description>                            Set the configuration beans to be used to the J2EE platform   version specificed.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "setDConfigBeanVersion" return-type = "void">
				<parameters>
					<parameter>DConfigBeanVersionType</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>56</id>
			<description>when the         requested bean version is not supported.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentManager</class-interface>
			<method name = "setDConfigBeanVersion" return-type = "void">
				<parameters>
					<parameter>DConfigBeanVersionType</parameter>
				</parameters>
				<throw>javax.enterprise.deploy.spi.exceptions.DConfigBeanVersionUnsupportedException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>57</id>
			<description>                            Returns an object that provides access to  the deployment descriptor data and classes  of a J2EE module.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentConfiguration</class-interface>
			<method name = "getDeployableObject" return-type = "javax.enterprise.deploy.model.DeployableObject"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>58</id>
			<description>                            Returns the top level configuration bean, DConfigBeanRoot,  associated with the deployment descriptor represented by  the designated DDBeanRoot bean.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentConfiguration</class-interface>
			<method name = "getDConfigBeanRoot" return-type = "javax.enterprise.deploy.spi.DConfigBeanRoot">
				<parameters>
					<parameter>javax.enterprise.deploy.model.DDBeanRoot</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>59</id>
			<description>reports errors in generating             a configuration bean</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentConfiguration</class-interface>
			<method name = "getDConfigBeanRoot" return-type = "javax.enterprise.deploy.spi.DConfigBeanRoot">
				<parameters>
					<parameter>javax.enterprise.deploy.model.DDBeanRoot</parameter>
				</parameters>
				<throw>javax.enterprise.deploy.spi.exceptions.ConfigurationException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>60</id>
			<description>                            Remove the root DConfigBean and all its children.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentConfiguration</class-interface>
			<method name = "removeDConfigBean" return-type = "void">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.DConfigBeanRoot</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>61</id>
			<description>the bean provides is       not in this beans child list.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentConfiguration</class-interface>
			<method name = "removeDConfigBean" return-type = "void">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.DConfigBeanRoot</parameter>
				</parameters>
				<throw>javax.enterprise.deploy.spi.exceptions.BeanNotFoundException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>62</id>
			<description>                            Restore from disk to instantated objects all the DConfigBeans   associated with a specific deployment descriptor.
                             The beans  may be fully or partially configured.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentConfiguration</class-interface>
			<method name = "restoreDConfigBean" return-type = "javax.enterprise.deploy.spi.DConfigBeanRoot">
				<parameters>
					<parameter>java.io.InputStream</parameter>
					<parameter>javax.enterprise.deploy.model.DDBeanRoot</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>63</id>
			<description>reports errors in generating             a configuration bean</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentConfiguration</class-interface>
			<method name = "restoreDConfigBean" return-type = "javax.enterprise.deploy.spi.DConfigBeanRoot">
				<parameters>
					<parameter>java.io.InputStream</parameter>
					<parameter>javax.enterprise.deploy.model.DDBeanRoot</parameter>
				</parameters>
				<throw>javax.enterprise.deploy.spi.exceptions.ConfigurationException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>64</id>
			<description>                            Save to disk all the configuration beans associated with   a particular deployment descriptor file.
                              The saved data    may be fully or partially configured DConfigBeans. The   output file format is recommended to be XML.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentConfiguration</class-interface>
			<method name = "saveDConfigBean" return-type = "void">
				<parameters>
					<parameter>java.io.OutputStream</parameter>
					<parameter>javax.enterprise.deploy.spi.DConfigBeanRoot</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>65</id>
			<description>reports errors in generating             a configuration bean</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentConfiguration</class-interface>
			<method name = "saveDConfigBean" return-type = "void">
				<parameters>
					<parameter>java.io.OutputStream</parameter>
					<parameter>javax.enterprise.deploy.spi.DConfigBeanRoot</parameter>
				</parameters>
				<throw>javax.enterprise.deploy.spi.exceptions.ConfigurationException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>66</id>
			<description>                            Restore from disk to a full set of configuration beans previously  stored.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentConfiguration</class-interface>
			<method name = "restore" return-type = "void">
				<parameters>
					<parameter>java.io.InputStream</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>67</id>
			<description>reports errors in generating             a configuration bean</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentConfiguration</class-interface>
			<method name = "restore" return-type = "void">
				<parameters>
					<parameter>java.io.InputStream</parameter>
				</parameters>
				<throw>javax.enterprise.deploy.spi.exceptions.ConfigurationException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>68</id>
			<description>                            Save to disk the current set configuration beans created for  this deployable module.
                               It is recommended the file format be XML.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentConfiguration</class-interface>
			<method name = "save" return-type = "void">
				<parameters>
					<parameter>java.io.OutputStream</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>69</id>
			<description/>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DeploymentConfiguration</class-interface>
			<method name = "save" return-type = "void">
				<parameters>
					<parameter>java.io.OutputStream</parameter>
				</parameters>
				<throw>javax.enterprise.deploy.spi.exceptions.ConfigurationException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>70</id>
			<description>                            Return the JavaBean containing the deployment  descriptor XML text associated with this DConfigBean.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DConfigBean</class-interface>
			<method name = "getDDBean" return-type = "javax.enterprise.deploy.model.DDBean"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>71</id>
			<description>                            Return a list of XPaths designating the deployment descriptor  information this DConfigBean requires.
                               A given server vendor will need to specify some server-specific  information.  Each String returned by this method is an XPath  describing a certain portion of the standard deployment descriptor  for which there is corresponding server-specific configuration.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DConfigBean</class-interface>
			<method name = "getXpaths" return-type = "java.lang.String[]"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>72</id>
			<description>                            Return the JavaBean containing the server-specific deployment   configuration information based upon the XML data provided   by the DDBean.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DConfigBean</class-interface>
			<method name = "getDConfigBean" return-type = "javax.enterprise.deploy.spi.DConfigBean">
				<parameters>
					<parameter>javax.enterprise.deploy.model.DDBean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>73</id>
			<description>reports errors in generating            a configuration bean. This DDBean is considered            undeployable to this server until this exception            is resolved.              A suitably descriptive message is required so the user             can diagnose the error.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DConfigBean</class-interface>
			<method name = "getDConfigBean" return-type = "javax.enterprise.deploy.spi.DConfigBean">
				<parameters>
					<parameter>javax.enterprise.deploy.model.DDBean</parameter>
				</parameters>
				<throw>javax.enterprise.deploy.spi.exceptions.ConfigurationException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>74</id>
			<description>                            Remove a child DConfigBean from this bean.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DConfigBean</class-interface>
			<method name = "removeDConfigBean" return-type = "void">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.DConfigBean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>75</id>
			<description>the bean provided           is not in the child list of this bean.</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DConfigBean</class-interface>
			<method name = "removeDConfigBean" return-type = "void">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.DConfigBean</parameter>
				</parameters>
				<throw>javax.enterprise.deploy.spi.exceptions.BeanNotFoundException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>76</id>
			<description>                            A notification that the DDBean provided in the  event has changed and this bean or its child beans need   to reevaluate themselves.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DConfigBean</class-interface>
			<method name = "notifyDDChange" return-type = "void">
				<parameters>
					<parameter>javax.enterprise.deploy.model.XpathEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>77</id>
			<description>                            Register a property listener for this bean.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DConfigBean</class-interface>
			<method name = "addPropertyChangeListener" return-type = "void">
				<parameters>
					<parameter>java.beans.PropertyChangeListener</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>78</id>
			<description>                            Unregister a property listener for this bean.
                        
			</description>
			<package>javax.enterprise.deploy.spi</package>
			<class-interface>DConfigBean</class-interface>
			<method name = "removePropertyChangeListener" return-type = "void">
				<parameters>
					<parameter>java.beans.PropertyChangeListener</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>79</id>
			<description>                            Creates an new TargetException object.
                        
			</description>
			<package>javax.enterprise.deploy.spi.exceptions</package>
			<class-interface>TargetException</class-interface>
			<method name = "TargetException" return-type = "TargetException">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>80</id>
			<description>                            Creates an new OperationUnsupportedException object.
                        
			</description>
			<package>javax.enterprise.deploy.spi.exceptions</package>
			<class-interface>OperationUnsupportedException</class-interface>
			<method name = "OperationUnsupportedException" return-type = "OperationUnsupportedException">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>81</id>
			<description>                            Creates an new InvalidModuleException object.
                        
			</description>
			<package>javax.enterprise.deploy.spi.exceptions</package>
			<class-interface>InvalidModuleException</class-interface>
			<method name = "InvalidModuleException" return-type = "InvalidModuleException">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>82</id>
			<description>                            Creates an new DeploymentManagerCreationException object.
                        
			</description>
			<package>javax.enterprise.deploy.spi.exceptions</package>
			<class-interface>DeploymentManagerCreationException</class-interface>
			<method name = "DeploymentManagerCreationException" return-type = "DeploymentManagerCreationException">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>83</id>
			<description>                            Creates an new DConfigBeanVersionUnsupportedException object.
                        
			</description>
			<package>javax.enterprise.deploy.spi.exceptions</package>
			<class-interface>DConfigBeanVersionUnsupportedException</class-interface>
			<method name = "DConfigBeanVersionUnsupportedException" return-type = "DConfigBeanVersionUnsupportedException">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>84</id>
			<description>                            Creates new &lt;code>ConfigurationException&lt;/code> without detail message.
                        
			</description>
			<package>javax.enterprise.deploy.spi.exceptions</package>
			<class-interface>ConfigurationException</class-interface>
			<method name = "ConfigurationException" return-type = "ConfigurationException"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>85</id>
			<description>                            Constructs an &lt;code>ConfigurationException&lt;/code> with the specified detail message.
                        
			</description>
			<package>javax.enterprise.deploy.spi.exceptions</package>
			<class-interface>ConfigurationException</class-interface>
			<method name = "ConfigurationException" return-type = "ConfigurationException">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>86</id>
			<description>                            Creates new &lt;code>ClientExecuteException&lt;/code> without detail message.
                        
			</description>
			<package>javax.enterprise.deploy.spi.exceptions</package>
			<class-interface>ClientExecuteException</class-interface>
			<method name = "ClientExecuteException" return-type = "ClientExecuteException"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>87</id>
			<description>                            Constructs an &lt;code>ClientExecuteException&lt;/code> with the  specified detail message.
                        
			</description>
			<package>javax.enterprise.deploy.spi.exceptions</package>
			<class-interface>ClientExecuteException</class-interface>
			<method name = "ClientExecuteException" return-type = "ClientExecuteException">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>88</id>
			<description>                            Creates an new BeanNotFoundException object.
                        
			</description>
			<package>javax.enterprise.deploy.spi.exceptions</package>
			<class-interface>BeanNotFoundException</class-interface>
			<method name = "BeanNotFoundException" return-type = "BeanNotFoundException">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>89</id>
			<description>                            Tests whether this factory can create a DeploymentManager  object based on the specificed URI.
                              This does not indicate  whether such an attempt will be successful, only whether the  factory can handle the uri.
                        
			</description>
			<package>javax.enterprise.deploy.spi.factories</package>
			<class-interface>DeploymentFactory</class-interface>
			<method name = "handlesURI" return-type = "boolean">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>90</id>
			<description>                            Return a &lt;tt>connected&lt;/tt> DeploymentManager instance.
                        
			</description>
			<package>javax.enterprise.deploy.spi.factories</package>
			<class-interface>DeploymentFactory</class-interface>
			<method name = "getDeploymentManager" return-type = "javax.enterprise.deploy.spi.DeploymentManager">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>91</id>
			<description>occurs when a          DeploymentManager could not be returned (server down,          unable to authenticate, etc).</description>
			<package>javax.enterprise.deploy.spi.factories</package>
			<class-interface>DeploymentFactory</class-interface>
			<method name = "getDeploymentManager" return-type = "javax.enterprise.deploy.spi.DeploymentManager">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>javax.enterprise.deploy.spi.exceptions.DeploymentManagerCreationException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>92</id>
			<description>                            Return a &lt;tt>disconnected&lt;/tt> DeploymentManager instance.
                        
			</description>
			<package>javax.enterprise.deploy.spi.factories</package>
			<class-interface>DeploymentFactory</class-interface>
			<method name = "getDisconnectedDeploymentManager" return-type = "javax.enterprise.deploy.spi.DeploymentManager">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>93</id>
			<description>occurs if the           DeploymentManager could not be created.</description>
			<package>javax.enterprise.deploy.spi.factories</package>
			<class-interface>DeploymentFactory</class-interface>
			<method name = "getDisconnectedDeploymentManager" return-type = "javax.enterprise.deploy.spi.DeploymentManager">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>javax.enterprise.deploy.spi.exceptions.DeploymentManagerCreationException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>94</id>
			<description>                            Provide a string with the name of this vendor's DeploymentManager.
                        
			</description>
			<package>javax.enterprise.deploy.spi.factories</package>
			<class-interface>DeploymentFactory</class-interface>
			<method name = "getDisplayName" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>95</id>
			<description>                            Provide a string identifying version of this vendor's   DeploymentManager.
                        
			</description>
			<package>javax.enterprise.deploy.spi.factories</package>
			<class-interface>DeploymentFactory</class-interface>
			<method name = "getProductVersion" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>96</id>
			<description>                            Creates a new object representing a deployment  progress event.
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>ProgressEvent</class-interface>
			<method name = "ProgressEvent" return-type = "ProgressEvent">
				<parameters>
					<parameter>java.lang.Object</parameter>
					<parameter>javax.enterprise.deploy.spi.TargetModuleID</parameter>
					<parameter>javax.enterprise.deploy.spi.status.DeploymentStatus</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>97</id>
			<description>                            Retrieve the TargetModuleID for this event
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>ProgressEvent</class-interface>
			<method name = "getTargetModuleID" return-type = "javax.enterprise.deploy.spi.TargetModuleID"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>98</id>
			<description>                            Retrieve the status information.
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>ProgressEvent</class-interface>
			<method name = "getDeploymentStatus" return-type = "javax.enterprise.deploy.spi.status.DeploymentStatus"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>99</id>
			<description>                            Retrieve the status of this activity.
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>ProgressObject</class-interface>
			<method name = "getDeploymentStatus" return-type = "javax.enterprise.deploy.spi.status.DeploymentStatus"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>100</id>
			<description>                            Retrieve the list of TargetModuleIDs successfully  processed or created by the associated DeploymentManager  operation.
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>ProgressObject</class-interface>
			<method name = "getResultTargetModuleIDs" return-type = "javax.enterprise.deploy.spi.TargetModuleID[]"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>101</id>
			<description>                            Return the ClientConfiguration object associated with the  TargetModuleID.
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>ProgressObject</class-interface>
			<method name = "getClientConfiguration" return-type = "javax.enterprise.deploy.spi.status.ClientConfiguration">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.TargetModuleID</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>102</id>
			<description>                            Tests whether the vendor supports a cancel   opertation for deployment activities.
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>ProgressObject</class-interface>
			<method name = "isCancelSupported" return-type = "boolean"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" status = "active" testable = "true">
			<id>103</id>
			<description>                            (optional)  A cancel request on an in-process operation   stops all further processing of the operation and returns  the environment to it original state before the operation  was executed.
                              An operation that has run to completion   cannot be cancelled.
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>ProgressObject</class-interface>
			<method name = "cancel" return-type = "void"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" status = "active" testable = "true">
			<id>104</id>
			<description>this optional command          is not supported by this implementation.</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>ProgressObject</class-interface>
			<method name = "cancel" return-type = "void">
				<throw>javax.enterprise.deploy.spi.exceptions.OperationUnsupportedException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>105</id>
			<description>                            Tests whether the vendor supports a stop  opertation for deployment activities.
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>ProgressObject</class-interface>
			<method name = "isStopSupported" return-type = "boolean"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" status = "active" testable = "false">
			<id>106</id>
			<description>                            (optional)  A stop request on an in-process operation allows the   operation on the current TargetModuleID to run to completion but   does not process any of the remaining unprocessed TargetModuleID   objects.
                              The processed TargetModuleIDs must be returned by the   method getResultTargetModuleIDs.
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>ProgressObject</class-interface>
			<method name = "stop" return-type = "void"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" status = "active" testable = "true">
			<id>107</id>
			<description>this optional command          is not supported by this implementation.</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>ProgressObject</class-interface>
			<method name = "stop" return-type = "void">
				<throw>javax.enterprise.deploy.spi.exceptions.OperationUnsupportedException</throw>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>108</id>
			<description>                            Add a listener to receive Progress events on deployment  actions.
                            
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>ProgressObject</class-interface>
			<method name = "addProgressListener" return-type = "void">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.status.ProgressListener</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>109</id>
			<description>                            Remove a ProgressObject listener.
                            
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>ProgressObject</class-interface>
			<method name = "removeProgressListener" return-type = "void">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.status.ProgressListener</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>110</id>
			<description>                            Invoked when a deployment progress event occurs.
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>ProgressListener</class-interface>
			<method name = "handleProgressEvent" return-type = "void">
				<parameters>
					<parameter>javax.enterprise.deploy.spi.status.ProgressEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>111</id>
			<description>                            Retrieve the StateType value.
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>DeploymentStatus</class-interface>
			<method name = "getState" return-type = "StateType"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>112</id>
			<description>                            Retrieve the deployment CommandType of this event.
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>DeploymentStatus</class-interface>
			<method name = "getCommand" return-type = "CommandType"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>113</id>
			<description>                            Retrieve the deployment ActionType for this event.
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>DeploymentStatus</class-interface>
			<method name = "getAction" return-type = "ActionType"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>114</id>
			<description>                            Retrieve any additional information about the  status of this event.
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>DeploymentStatus</class-interface>
			<method name = "getMessage" return-type = "java.lang.String"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>115</id>
			<description>                            A convience method to report if the operation is  in the completed state.
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>DeploymentStatus</class-interface>
			<method name = "isCompleted" return-type = "boolean"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>116</id>
			<description>                            A convience method to report if the operation is  in the failed state.
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>DeploymentStatus</class-interface>
			<method name = "isFailed" return-type = "boolean"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "true">
			<id>117</id>
			<description>                            A convience method to report if the operation is  in the running state.
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>DeploymentStatus</class-interface>
			<method name = "isRunning" return-type = "boolean"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>118</id>
			<description>                            This method performs an exec and starts the   application client running in another process.
                        
			</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>ClientConfiguration</class-interface>
			<method name = "execute" return-type = "void"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" status = "active" testable = "false">
			<id>119</id>
			<description>when the configuration          is incomplete.</description>
			<package>javax.enterprise.deploy.spi.status</package>
			<class-interface>ClientConfiguration</class-interface>
			<method name = "execute" return-type = "void">
				<throw>javax.enterprise.deploy.spi.exceptions.ClientExecuteException</throw>
			</method>
		</assertion>
	</assertions>
</javadoc>


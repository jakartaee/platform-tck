QuickStart Cookbook Instructions for JAXRS 2.0 TCK Test Suite

======================================================================================================
TCK Instructions to get, configure and run JAXRS 2.0 TCK Test Suite
======================================================================================================

(1) Grab the JAXRS 2.0 RI from Java Partner Engineering Website

    Locate JAXRS 2.0 RI bundle from Java Partner Engineering Website

    Example)
    --------
    mkdir /files/jaxrri
    cd /files/jaxrsri
    unzip bundle

    This will install the JAXRS 2.0 RI under /files/jaxrsri

(2) Grab the JAXRS 2.0 TCK Test Suite from Java Partner Engineering Website

    Locate JAXRS 2.0 TCK bundle off of Java Partner Engineering Website

(3) Create a directory to hold the cts or jaxrs subset bundle

    mkdir /files/jaxrstck
    cd /files/jaxrstck
    unzip the bundle into this directory

    This will install the JAXRS TCK Test Suite under /files/jaxrstck


(4) Edit your ts.jte file under /files/cts/jaxrstck/bin/ts.jte 

    set web.home=  # Set to location where application server with JAXRS 2.0 RI is installed
    set jaxrs_impl.classes=  # Set to location where JAXRS 2.0 RI dependency jars/classes exist
    set jaxrs.classes=  # Set to location where JAXRS 2.0 RI (API) jars/classes exist
    set jaxrs_impl_lib=  # Used for repackaging test JAX-RS application classes by vendor
    set servlet_adaptor=  # Servlet adaptor class provided by vendor, used to package resource in .war file
    set impl.vi=  # Name of JavaEE 7 implementation.
    set impl.vi.deploy.dir=  # When web server supports autodeployment, this points to the autodeployment directory
    webServerHost=  # hostname for the Vendor's Java EE Web Server
    webServerPort=  # port number of the Vendor's Java EE Web Server

    Example settings
    
    web.home=/files/glassfish4/glassfish
    jaxrs_impl.classes=jaxrs_impl.classes=${web.home}/modules/jersey-client.jar:${web.home}/modules/jersey-common.jar:${web.home}/modules/jersey-server.jar:${web.home}/modules/jersey-container-servlet.jar:${web.home}/modules/jersey-container-servlet-core.jar:${web.home}/modules/osgi-resource-locator.jar:${web.home}/modules/jakarta.inject.jar:${web.home}/modules/guava.jar:${web.home}/modules/hk2-api.jar:${web.home}/modules/hk2-locator.jar:${web.home}/modules/hk2-utils.jar:${web.home}/modules/cglib.jar:${web.home}/modules/asm-all-repackaged.jar:${web.home}/modules/bean-validator.jar:${web.home}/modules/endorsed/javax.annotation-api.jar:${web.home}/modules/javax.json.jar:${web.home}/modules/javax.servlet-api.jar
    jaxrs.classes=${web.home}/modules/javax.ws.rs-api.jar
    jaxrs_impl_lib=${web.home}/modules/jersey-container-servlet-core.jar
    servlet_adaptor=org/glassfish/jersey/servlet/ServletContainer.class
    impl.vi=glassfish
    impl.vi.deploy.dir=${web.home}/domains/domain1/autodeploy
    webServerHost=localhost
    webServerPort=8080

(5) Set the following environment variables and configure your appserver for TCK / CTS

    setenv TS_HOME /files/jaxrstck    # Set to top level unzipped bundle dir

    setenv ANT_HOME /files/apacheant
            # Set ANT_OPTS to pickup new endorsed API's and for
            # GlassFish V3 use full absolute path to endorsed dir.

    setenv ANT_OPTS -Djava.endorsed.dirs=/files/glassfish4/glassfish/modules/endorsed
            # ANT_OPTS setting is needed when using ant to
            # build the tests so it picks up the right API's

    set path = ( $TS_HOME/bin $ANT_HOME/bin $path ) # For convenience add TS_HOME/bin and ANT_HOME bin to path)
    cd $TS_HOME/bin                                 # Change to TS_HOME/bin to configure for CTS

(6) At this point the JAXRS 2.0 TCK is configured for running. We now need to start the JAXRS 2.0 RI and configure JAVA EE 7 running it; 
    i.e. set test application user names and passwords, and enable trace requests:

    ant config.vi

(7) We can run tests now. Goto a jaxrs test directory and type ant runclient to
    run a test. All the jms tests are under the jms subtree.

    cd $TS_HOME/src/com/sun/ts/tests/jaxrs

    Examples of running jms tests

    Example 1)
    Run a single jms test directory in standalone mode
    --------------------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests/jaxrs/ee/rs/get
    ant runclient

    Example 2)
    Run a subtree of jms test directories in standalone mode
    ---------------------------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests/jaxrs/ee/rs
    ant runclient

    Example 3)
    Run the entire tree of jms tests in standalone mode
    ----------------------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests/jaxrs
    ant runclient

    Example 4)
    Run a single test within a jms test directory in standalone mode
    ----------------------------------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests/jaxrs/ee/rs/get
    ant -Dtest.client=JAXRSClient.java -Dtest=getTest1 runclient

    You get the testname by listing the tests in source file like so:

    ant list.tests

(8) Turn on additional test debugging/tracing option

    The following property is used to control this as specified in TS_HOME/bin/ts.jte:

# @harness.log.traceflag  used to turn on/off verbose debugging output
#                         for the tests.

    Set this to true for any additional verbose test output that the test may print out
    via TestUtil.logTrace calls. The default setting is false.

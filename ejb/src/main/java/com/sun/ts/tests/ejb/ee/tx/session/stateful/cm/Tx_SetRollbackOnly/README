#
# Copyright (c) 1995, 2018 Oracle and/or its affiliates. All rights reserved.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v. 2.0, which is available at
# http://www.eclipse.org/legal/epl-2.0.
#
# This Source Code may also be made available under the following Secondary
# Licenses when the conditions for such availability set forth in the
# Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
# version 2 with the GNU Classpath Exception, which is available at
# https://www.gnu.org/software/classpath/license.html.
#
# SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
#

README file for Tx_SetRollbackOnly
----------------------------------

Handling of setRollbackOnly by a business method
of an EJB with Container Managed transactions.

Specification assertion(s) under test: 
	17.3.5.2 EJBContext.setRollbackOnly() method
	17.3.5.3 EJBContext.getRollbackOnly() method
	17.6.2.8 Handling of setRollbackOnly() method

The assertion(s):
	17.3.5.2 An enterprise bean using container managed
	transactions can use the setRollbackOnly() method of its EJBContext
	object to mark the transaction such that the transaction can
	never commit.

	17.3.5.3 An enterprise bean using container managaged
	transactions can use the getRollbackOnly() method of its EJB Context
	object to test if the current transaction has been marked for
	rollback.

	17.6.2.8 If an enterprise bean instance invokes the
	setRollbackOnly() method of the EJBContext interface, the Container
	has two responsibilities:

	The Container must ensure that the transaction will never
	commit.  Typically, the Container instructs the transaction manager to
	mark the transaction for rollback.

	If the Container initiated the transaction (global or local)
	immediately before dispatching the business method to the instance (as
	opposed to the transaction being inherited from the caller), the
	Container must note that the instance has invoked the
	setRollbackOnly() method.  When the business method invocation
	completed, the Container must rollback rather than commit the
	transaction.  If the business method has returned normally or with an
	application exception, the Container must pass the method result of
	the application exception to the client after the Container performed
	the rollback.

Test Case(s):
Check that the Container and the Client do what is required of them in
the following conditions:
o	set/getRollbackOnly with Required EJB.
o	set/getRollbackOnly with RequiresNew EJB.
o	AppException from EJB with set/getRollbackOnly() and Required
	EJB.

Note: Supports, NotSupported, and Never bean flavors do not have a transaction
context within container managed transactions, and are thus excluded from
the test scenarios.  In fact, "IllegalStateException - no transaction
context" will get thrown.

The test itself is made up of:
1 Client
1 TestTean, this bean:
	o	drives the tests and is TX_BEAN_MANAGED 
	o	acts as a client to the JDBC transactional bean (TxBean).
1 TxBean, this bean:
	o	is the JDBC transactional bean and is called by TestBean.


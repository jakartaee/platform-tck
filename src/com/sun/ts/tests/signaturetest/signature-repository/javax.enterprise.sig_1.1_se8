#Signature file v4.1
#Version 1.1_se8

#
# Copyright (c) 2014, 2018, 2020 Oracle and/or its affiliates. All rights reserved.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v. 2.0, which is available at
# http://www.eclipse.org/legal/epl-2.0.
#
# This Source Code may also be made available under the following Secondary
# Licenses when the conditions for such availability set forth in the
# Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
# version 2 with the GNU Classpath Exception, which is available at
# https://www.gnu.org/software/classpath/license.html.
#
# SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
#



CLSS public abstract interface java.io.Serializable

CLSS public abstract interface java.lang.Comparable<%0 extends java.lang.Object>
meth public abstract int compareTo({java.lang.Comparable%0})

CLSS public abstract java.lang.Enum<%0 extends java.lang.Enum<{java.lang.Enum%0}>>
cons protected <init>(java.lang.String,int)
intf java.io.Serializable
intf java.lang.Comparable<{java.lang.Enum%0}>
meth protected final java.lang.Object clone() throws java.lang.CloneNotSupportedException
meth protected final void finalize()
meth public final boolean equals(java.lang.Object)
meth public final int compareTo({java.lang.Enum%0})
meth public final int hashCode()
meth public final int ordinal()
meth public final java.lang.Class<{java.lang.Enum%0}> getDeclaringClass()
meth public final java.lang.String name()
meth public java.lang.String toString()
meth public static <%0 extends java.lang.Enum<{%%0}>> {%%0} valueOf(java.lang.Class<{%%0}>,java.lang.String)
supr java.lang.Object
hfds name,ordinal

CLSS public java.lang.Exception
cons protected <init>(java.lang.String,java.lang.Throwable,boolean,boolean)
cons public <init>()
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
supr java.lang.Throwable
hfds serialVersionUID

CLSS public abstract interface java.lang.Iterable<%0 extends java.lang.Object>
meth public abstract java.util.Iterator<{java.lang.Iterable%0}> iterator()
meth public java.util.Spliterator<{java.lang.Iterable%0}> spliterator()
meth public void forEach(java.util.function.Consumer<? super {java.lang.Iterable%0}>)

CLSS public java.lang.Object
cons public <init>()
meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException
meth protected void finalize() throws java.lang.Throwable
meth public boolean equals(java.lang.Object)
meth public final java.lang.Class<?> getClass()
meth public final void notify()
meth public final void notifyAll()
meth public final void wait() throws java.lang.InterruptedException
meth public final void wait(long) throws java.lang.InterruptedException
meth public final void wait(long,int) throws java.lang.InterruptedException
meth public int hashCode()
meth public java.lang.String toString()

CLSS public java.lang.RuntimeException
cons protected <init>(java.lang.String,java.lang.Throwable,boolean,boolean)
cons public <init>()
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
supr java.lang.Exception
hfds serialVersionUID

CLSS public java.lang.Throwable
cons protected <init>(java.lang.String,java.lang.Throwable,boolean,boolean)
cons public <init>()
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
intf java.io.Serializable
meth public final java.lang.Throwable[] getSuppressed()
meth public final void addSuppressed(java.lang.Throwable)
meth public java.lang.StackTraceElement[] getStackTrace()
meth public java.lang.String getLocalizedMessage()
meth public java.lang.String getMessage()
meth public java.lang.String toString()
meth public java.lang.Throwable fillInStackTrace()
meth public java.lang.Throwable getCause()
meth public java.lang.Throwable initCause(java.lang.Throwable)
meth public void printStackTrace()
meth public void printStackTrace(java.io.PrintStream)
meth public void printStackTrace(java.io.PrintWriter)
meth public void setStackTrace(java.lang.StackTraceElement[])
supr java.lang.Object
hfds CAUSE_CAPTION,EMPTY_THROWABLE_ARRAY,NULL_CAUSE_MESSAGE,SELF_SUPPRESSION_MESSAGE,SUPPRESSED_CAPTION,SUPPRESSED_SENTINEL,UNASSIGNED_STACK,backtrace,cause,detailMessage,serialVersionUID,stackTrace,suppressedExceptions
hcls PrintStreamOrWriter,SentinelHolder,WrappedPrintStream,WrappedPrintWriter

CLSS public abstract interface java.lang.annotation.Annotation
meth public abstract boolean equals(java.lang.Object)
meth public abstract int hashCode()
meth public abstract java.lang.Class<? extends java.lang.annotation.Annotation> annotationType()
meth public abstract java.lang.String toString()

CLSS public abstract interface !annotation java.lang.annotation.Documented
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[ANNOTATION_TYPE])
intf java.lang.annotation.Annotation

CLSS public abstract interface !annotation java.lang.annotation.Inherited
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[ANNOTATION_TYPE])
intf java.lang.annotation.Annotation

CLSS public abstract interface !annotation java.lang.annotation.Retention
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[ANNOTATION_TYPE])
intf java.lang.annotation.Annotation
meth public abstract java.lang.annotation.RetentionPolicy value()

CLSS public abstract interface !annotation java.lang.annotation.Target
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[ANNOTATION_TYPE])
intf java.lang.annotation.Annotation
meth public abstract java.lang.annotation.ElementType[] value()

CLSS public abstract interface java.util.EventListener

CLSS public java.util.EventObject
cons public <init>(java.lang.Object)
fld protected java.lang.Object source
intf java.io.Serializable
meth public java.lang.Object getSource()
meth public java.lang.String toString()
supr java.lang.Object
hfds serialVersionUID

CLSS public java.util.concurrent.ExecutionException
cons protected <init>()
cons protected <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
supr java.lang.Exception
hfds serialVersionUID

CLSS public abstract interface java.util.concurrent.Executor
meth public abstract void execute(java.lang.Runnable)

CLSS public abstract interface java.util.concurrent.ExecutorService
intf java.util.concurrent.Executor
meth public abstract <%0 extends java.lang.Object> java.util.List<java.util.concurrent.Future<{%%0}>> invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<{%%0}>>) throws java.lang.InterruptedException
meth public abstract <%0 extends java.lang.Object> java.util.List<java.util.concurrent.Future<{%%0}>> invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<{%%0}>>,long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
meth public abstract <%0 extends java.lang.Object> java.util.concurrent.Future<{%%0}> submit(java.lang.Runnable,{%%0})
meth public abstract <%0 extends java.lang.Object> java.util.concurrent.Future<{%%0}> submit(java.util.concurrent.Callable<{%%0}>)
meth public abstract <%0 extends java.lang.Object> {%%0} invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<{%%0}>>) throws java.lang.InterruptedException,java.util.concurrent.ExecutionException
meth public abstract <%0 extends java.lang.Object> {%%0} invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<{%%0}>>,long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException,java.util.concurrent.ExecutionException,java.util.concurrent.TimeoutException
meth public abstract boolean awaitTermination(long,java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
meth public abstract boolean isShutdown()
meth public abstract boolean isTerminated()
meth public abstract java.util.List<java.lang.Runnable> shutdownNow()
meth public abstract java.util.concurrent.Future<?> submit(java.lang.Runnable)
meth public abstract void shutdown()

CLSS public abstract interface java.util.concurrent.ScheduledExecutorService
intf java.util.concurrent.ExecutorService
meth public abstract <%0 extends java.lang.Object> java.util.concurrent.ScheduledFuture<{%%0}> schedule(java.util.concurrent.Callable<{%%0}>,long,java.util.concurrent.TimeUnit)
meth public abstract java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)
meth public abstract java.util.concurrent.ScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)
meth public abstract java.util.concurrent.ScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)

CLSS public abstract interface java.util.concurrent.ThreadFactory
meth public abstract java.lang.Thread newThread(java.lang.Runnable)

CLSS public javax.enterprise.concurrent.AbortedException
cons public <init>()
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
intf java.io.Serializable
supr java.util.concurrent.ExecutionException
hfds serialVersionUID

CLSS public abstract interface javax.enterprise.concurrent.ContextService
meth public abstract !varargs java.lang.Object createContextualProxy(java.lang.Object,java.lang.Class<?>[])
meth public abstract !varargs java.lang.Object createContextualProxy(java.lang.Object,java.util.Map<java.lang.String,java.lang.String>,java.lang.Class<?>[])
meth public abstract <%0 extends java.lang.Object> {%%0} createContextualProxy({%%0},java.lang.Class<{%%0}>)
meth public abstract <%0 extends java.lang.Object> {%%0} createContextualProxy({%%0},java.util.Map<java.lang.String,java.lang.String>,java.lang.Class<{%%0}>)
meth public abstract java.util.Map<java.lang.String,java.lang.String> getExecutionProperties(java.lang.Object)

CLSS public abstract interface javax.enterprise.concurrent.LastExecution
meth public abstract java.lang.Object getResult()
meth public abstract java.lang.String getIdentityName()
meth public abstract java.util.Date getRunEnd()
meth public abstract java.util.Date getRunStart()
meth public abstract java.util.Date getScheduledStart()

CLSS public abstract interface javax.enterprise.concurrent.ManageableThread
meth public abstract boolean isShutdown()

CLSS public abstract interface javax.enterprise.concurrent.ManagedExecutorService
intf java.util.concurrent.ExecutorService

CLSS public javax.enterprise.concurrent.ManagedExecutors
meth public static <%0 extends java.lang.Object> java.util.concurrent.Callable<{%%0}> managedTask(java.util.concurrent.Callable<{%%0}>,java.util.Map<java.lang.String,java.lang.String>,javax.enterprise.concurrent.ManagedTaskListener)
meth public static <%0 extends java.lang.Object> java.util.concurrent.Callable<{%%0}> managedTask(java.util.concurrent.Callable<{%%0}>,javax.enterprise.concurrent.ManagedTaskListener)
meth public static boolean isCurrentThreadShutdown()
meth public static java.lang.Runnable managedTask(java.lang.Runnable,java.util.Map<java.lang.String,java.lang.String>,javax.enterprise.concurrent.ManagedTaskListener)
meth public static java.lang.Runnable managedTask(java.lang.Runnable,javax.enterprise.concurrent.ManagedTaskListener)
supr java.lang.Object
hfds NULL_TASK_ERROR_MSG
hcls Adapter,CallableAdapter,RunnableAdapter

CLSS public abstract interface javax.enterprise.concurrent.ManagedScheduledExecutorService
intf java.util.concurrent.ScheduledExecutorService
intf javax.enterprise.concurrent.ManagedExecutorService
meth public abstract <%0 extends java.lang.Object> java.util.concurrent.ScheduledFuture<{%%0}> schedule(java.util.concurrent.Callable<{%%0}>,javax.enterprise.concurrent.Trigger)
meth public abstract java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable,javax.enterprise.concurrent.Trigger)

CLSS public abstract interface javax.enterprise.concurrent.ManagedTask
fld public final static java.lang.String IDENTITY_NAME = "javax.enterprise.concurrent.IDENTITY_NAME"
fld public final static java.lang.String LONGRUNNING_HINT = "javax.enterprise.concurrent.LONGRUNNING_HINT"
fld public final static java.lang.String SUSPEND = "SUSPEND"
fld public final static java.lang.String TRANSACTION = "javax.enterprise.concurrent.TRANSACTION"
fld public final static java.lang.String USE_TRANSACTION_OF_EXECUTION_THREAD = "USE_TRANSACTION_OF_EXECUTION_THREAD"
meth public abstract java.util.Map<java.lang.String,java.lang.String> getExecutionProperties()
meth public abstract javax.enterprise.concurrent.ManagedTaskListener getManagedTaskListener()

CLSS public abstract interface javax.enterprise.concurrent.ManagedTaskListener
meth public abstract void taskAborted(java.util.concurrent.Future<?>,javax.enterprise.concurrent.ManagedExecutorService,java.lang.Object,java.lang.Throwable)
meth public abstract void taskDone(java.util.concurrent.Future<?>,javax.enterprise.concurrent.ManagedExecutorService,java.lang.Object,java.lang.Throwable)
meth public abstract void taskStarting(java.util.concurrent.Future<?>,javax.enterprise.concurrent.ManagedExecutorService,java.lang.Object)
meth public abstract void taskSubmitted(java.util.concurrent.Future<?>,javax.enterprise.concurrent.ManagedExecutorService,java.lang.Object)

CLSS public abstract interface javax.enterprise.concurrent.ManagedThreadFactory
intf java.util.concurrent.ThreadFactory

CLSS public javax.enterprise.concurrent.SkippedException
cons public <init>()
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
intf java.io.Serializable
supr java.util.concurrent.ExecutionException
hfds serialVersionUID

CLSS public abstract interface javax.enterprise.concurrent.Trigger
meth public abstract boolean skipRun(javax.enterprise.concurrent.LastExecution,java.util.Date)
meth public abstract java.util.Date getNextRunTime(javax.enterprise.concurrent.LastExecution,java.util.Date)

CLSS public abstract interface !annotation javax.enterprise.context.ApplicationScoped
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Inherited()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[TYPE, METHOD, FIELD])
 anno 0 javax.enterprise.context.NormalScope(boolean passivating=false)
intf java.lang.annotation.Annotation

CLSS public javax.enterprise.context.BusyConversationException
cons public <init>()
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
supr javax.enterprise.context.ContextException
hfds serialVersionUID

CLSS public javax.enterprise.context.ContextException
cons public <init>()
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
supr java.lang.RuntimeException
hfds serialVersionUID

CLSS public javax.enterprise.context.ContextNotActiveException
cons public <init>()
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
supr javax.enterprise.context.ContextException
hfds serialVersionUID

CLSS public abstract interface javax.enterprise.context.Conversation
meth public abstract boolean isTransient()
meth public abstract java.lang.String getId()
meth public abstract long getTimeout()
meth public abstract void begin()
meth public abstract void begin(java.lang.String)
meth public abstract void end()
meth public abstract void setTimeout(long)

CLSS public abstract interface !annotation javax.enterprise.context.ConversationScoped
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Inherited()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[TYPE, METHOD, FIELD])
 anno 0 javax.enterprise.context.NormalScope(boolean passivating=true)
intf java.lang.annotation.Annotation

CLSS public abstract interface !annotation javax.enterprise.context.Dependent
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Inherited()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[METHOD, TYPE, FIELD])
 anno 0 javax.inject.Scope()
intf java.lang.annotation.Annotation

CLSS public abstract interface !annotation javax.enterprise.context.Destroyed
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[TYPE, METHOD, PARAMETER, FIELD])
 anno 0 javax.inject.Qualifier()
intf java.lang.annotation.Annotation
meth public abstract java.lang.Class<? extends java.lang.annotation.Annotation> value()

CLSS public abstract interface !annotation javax.enterprise.context.Initialized
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[TYPE, METHOD, PARAMETER, FIELD])
 anno 0 javax.inject.Qualifier()
intf java.lang.annotation.Annotation
meth public abstract java.lang.Class<? extends java.lang.annotation.Annotation> value()

CLSS public javax.enterprise.context.NonexistentConversationException
cons public <init>()
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
supr javax.enterprise.context.ContextException
hfds serialVersionUID

CLSS public abstract interface !annotation javax.enterprise.context.NormalScope
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[ANNOTATION_TYPE])
intf java.lang.annotation.Annotation
meth public abstract !hasdefault boolean passivating()

CLSS public abstract interface !annotation javax.enterprise.context.RequestScoped
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Inherited()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[TYPE, METHOD, FIELD])
 anno 0 javax.enterprise.context.NormalScope(boolean passivating=false)
intf java.lang.annotation.Annotation

CLSS public abstract interface !annotation javax.enterprise.context.SessionScoped
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Inherited()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[TYPE, METHOD, FIELD])
 anno 0 javax.enterprise.context.NormalScope(boolean passivating=true)
intf java.lang.annotation.Annotation

CLSS public abstract interface javax.enterprise.context.spi.AlterableContext
intf javax.enterprise.context.spi.Context
meth public abstract void destroy(javax.enterprise.context.spi.Contextual<?>)

CLSS public abstract interface javax.enterprise.context.spi.Context
meth public abstract <%0 extends java.lang.Object> {%%0} get(javax.enterprise.context.spi.Contextual<{%%0}>)
meth public abstract <%0 extends java.lang.Object> {%%0} get(javax.enterprise.context.spi.Contextual<{%%0}>,javax.enterprise.context.spi.CreationalContext<{%%0}>)
meth public abstract boolean isActive()
meth public abstract java.lang.Class<? extends java.lang.annotation.Annotation> getScope()

CLSS public abstract interface javax.enterprise.context.spi.Contextual<%0 extends java.lang.Object>
meth public abstract void destroy({javax.enterprise.context.spi.Contextual%0},javax.enterprise.context.spi.CreationalContext<{javax.enterprise.context.spi.Contextual%0}>)
meth public abstract {javax.enterprise.context.spi.Contextual%0} create(javax.enterprise.context.spi.CreationalContext<{javax.enterprise.context.spi.Contextual%0}>)

CLSS public abstract interface javax.enterprise.context.spi.CreationalContext<%0 extends java.lang.Object>
meth public abstract void push({javax.enterprise.context.spi.CreationalContext%0})
meth public abstract void release()

CLSS public abstract interface javax.enterprise.deploy.model.DDBean
meth public abstract java.lang.String getAttributeValue(java.lang.String)
meth public abstract java.lang.String getId()
meth public abstract java.lang.String getText()
meth public abstract java.lang.String getXpath()
meth public abstract java.lang.String[] getAttributeNames()
meth public abstract java.lang.String[] getText(java.lang.String)
meth public abstract javax.enterprise.deploy.model.DDBeanRoot getRoot()
meth public abstract javax.enterprise.deploy.model.DDBean[] getChildBean(java.lang.String)
meth public abstract void addXpathListener(java.lang.String,javax.enterprise.deploy.model.XpathListener)
meth public abstract void removeXpathListener(java.lang.String,javax.enterprise.deploy.model.XpathListener)

CLSS public abstract interface javax.enterprise.deploy.model.DDBeanRoot
intf javax.enterprise.deploy.model.DDBean
meth public abstract java.lang.String getDDBeanRootVersion()
meth public abstract java.lang.String getFilename()
meth public abstract java.lang.String getModuleDTDVersion()
meth public abstract java.lang.String getXpath()
meth public abstract javax.enterprise.deploy.model.DeployableObject getDeployableObject()
meth public abstract javax.enterprise.deploy.shared.ModuleType getType()

CLSS public abstract interface javax.enterprise.deploy.model.DeployableObject
meth public abstract java.io.InputStream getEntry(java.lang.String)
meth public abstract java.lang.Class getClassFromScope(java.lang.String)
meth public abstract java.lang.String getModuleDTDVersion()
meth public abstract java.lang.String[] getText(java.lang.String)
meth public abstract java.util.Enumeration entries()
meth public abstract javax.enterprise.deploy.model.DDBeanRoot getDDBeanRoot()
meth public abstract javax.enterprise.deploy.model.DDBeanRoot getDDBeanRoot(java.lang.String) throws java.io.FileNotFoundException,javax.enterprise.deploy.model.exceptions.DDBeanCreateException
meth public abstract javax.enterprise.deploy.model.DDBean[] getChildBean(java.lang.String)
meth public abstract javax.enterprise.deploy.shared.ModuleType getType()

CLSS public abstract interface javax.enterprise.deploy.model.J2eeApplicationObject
intf javax.enterprise.deploy.model.DeployableObject
meth public abstract java.lang.String[] getModuleUris()
meth public abstract java.lang.String[] getModuleUris(javax.enterprise.deploy.shared.ModuleType)
meth public abstract java.lang.String[] getText(javax.enterprise.deploy.shared.ModuleType,java.lang.String)
meth public abstract javax.enterprise.deploy.model.DDBean[] getChildBean(javax.enterprise.deploy.shared.ModuleType,java.lang.String)
meth public abstract javax.enterprise.deploy.model.DeployableObject getDeployableObject(java.lang.String)
meth public abstract javax.enterprise.deploy.model.DeployableObject[] getDeployableObjects()
meth public abstract javax.enterprise.deploy.model.DeployableObject[] getDeployableObjects(javax.enterprise.deploy.shared.ModuleType)
meth public abstract void addXpathListener(javax.enterprise.deploy.shared.ModuleType,java.lang.String,javax.enterprise.deploy.model.XpathListener)
meth public abstract void removeXpathListener(javax.enterprise.deploy.shared.ModuleType,java.lang.String,javax.enterprise.deploy.model.XpathListener)

CLSS public final javax.enterprise.deploy.model.XpathEvent
cons public <init>(javax.enterprise.deploy.model.DDBean,java.lang.Object)
fld public final static java.lang.Object BEAN_ADDED
fld public final static java.lang.Object BEAN_CHANGED
fld public final static java.lang.Object BEAN_REMOVED
meth public boolean isAddEvent()
meth public boolean isChangeEvent()
meth public boolean isRemoveEvent()
meth public java.beans.PropertyChangeEvent getChangeEvent()
meth public javax.enterprise.deploy.model.DDBean getBean()
meth public void setChangeEvent(java.beans.PropertyChangeEvent)
supr java.lang.Object
hfds bean,changeEvent,typ

CLSS public abstract interface javax.enterprise.deploy.model.XpathListener
meth public abstract void fireXpathEvent(javax.enterprise.deploy.model.XpathEvent)

CLSS public javax.enterprise.deploy.model.exceptions.DDBeanCreateException
cons public <init>()
cons public <init>(java.lang.String)
supr java.lang.Exception

CLSS public javax.enterprise.deploy.shared.ActionType
cons protected <init>(int)
fld public final static javax.enterprise.deploy.shared.ActionType CANCEL
fld public final static javax.enterprise.deploy.shared.ActionType EXECUTE
fld public final static javax.enterprise.deploy.shared.ActionType STOP
meth protected int getOffset()
meth protected java.lang.String[] getStringTable()
meth protected javax.enterprise.deploy.shared.ActionType[] getEnumValueTable()
meth public int getValue()
meth public java.lang.String toString()
meth public static javax.enterprise.deploy.shared.ActionType getActionType(int)
supr java.lang.Object
hfds enumValueTable,stringTable,value

CLSS public javax.enterprise.deploy.shared.CommandType
cons protected <init>(int)
fld public final static javax.enterprise.deploy.shared.CommandType DISTRIBUTE
fld public final static javax.enterprise.deploy.shared.CommandType REDEPLOY
fld public final static javax.enterprise.deploy.shared.CommandType START
fld public final static javax.enterprise.deploy.shared.CommandType STOP
fld public final static javax.enterprise.deploy.shared.CommandType UNDEPLOY
meth protected int getOffset()
meth protected java.lang.String[] getStringTable()
meth protected javax.enterprise.deploy.shared.CommandType[] getEnumValueTable()
meth public int getValue()
meth public java.lang.String toString()
meth public static javax.enterprise.deploy.shared.CommandType getCommandType(int)
supr java.lang.Object
hfds enumValueTable,stringTable,value

CLSS public javax.enterprise.deploy.shared.DConfigBeanVersionType
cons protected <init>(int)
fld public final static javax.enterprise.deploy.shared.DConfigBeanVersionType V1_3
fld public final static javax.enterprise.deploy.shared.DConfigBeanVersionType V1_3_1
fld public final static javax.enterprise.deploy.shared.DConfigBeanVersionType V1_4
fld public final static javax.enterprise.deploy.shared.DConfigBeanVersionType V5
meth protected int getOffset()
meth protected java.lang.String[] getStringTable()
meth protected javax.enterprise.deploy.shared.DConfigBeanVersionType[] getEnumValueTable()
meth public int getValue()
meth public java.lang.String toString()
meth public static javax.enterprise.deploy.shared.DConfigBeanVersionType getDConfigBeanVersionType(int)
supr java.lang.Object
hfds enumValueTable,stringTable,value

CLSS public javax.enterprise.deploy.shared.ModuleType
cons protected <init>(int)
fld public final static javax.enterprise.deploy.shared.ModuleType CAR
fld public final static javax.enterprise.deploy.shared.ModuleType EAR
fld public final static javax.enterprise.deploy.shared.ModuleType EJB
fld public final static javax.enterprise.deploy.shared.ModuleType RAR
fld public final static javax.enterprise.deploy.shared.ModuleType WAR
meth protected int getOffset()
meth protected java.lang.String[] getStringTable()
meth protected javax.enterprise.deploy.shared.ModuleType[] getEnumValueTable()
meth public int getValue()
meth public java.lang.String getModuleExtension()
meth public java.lang.String toString()
meth public static javax.enterprise.deploy.shared.ModuleType getModuleType(int)
supr java.lang.Object
hfds enumValueTable,moduleExtension,stringTable,value

CLSS public javax.enterprise.deploy.shared.StateType
cons protected <init>(int)
fld public final static javax.enterprise.deploy.shared.StateType COMPLETED
fld public final static javax.enterprise.deploy.shared.StateType FAILED
fld public final static javax.enterprise.deploy.shared.StateType RELEASED
fld public final static javax.enterprise.deploy.shared.StateType RUNNING
meth protected int getOffset()
meth protected java.lang.String[] getStringTable()
meth protected javax.enterprise.deploy.shared.StateType[] getEnumValueTable()
meth public int getValue()
meth public java.lang.String toString()
meth public static javax.enterprise.deploy.shared.StateType getStateType(int)
supr java.lang.Object
hfds enumValueTable,stringTable,value

CLSS public final javax.enterprise.deploy.shared.factories.DeploymentFactoryManager
meth public javax.enterprise.deploy.spi.DeploymentManager getDeploymentManager(java.lang.String,java.lang.String,java.lang.String) throws javax.enterprise.deploy.spi.exceptions.DeploymentManagerCreationException
meth public javax.enterprise.deploy.spi.DeploymentManager getDisconnectedDeploymentManager(java.lang.String) throws javax.enterprise.deploy.spi.exceptions.DeploymentManagerCreationException
meth public javax.enterprise.deploy.spi.factories.DeploymentFactory[] getDeploymentFactories()
meth public static javax.enterprise.deploy.shared.factories.DeploymentFactoryManager getInstance()
meth public void registerDeploymentFactory(javax.enterprise.deploy.spi.factories.DeploymentFactory)
supr java.lang.Object
hfds deploymentFactories,deploymentFactoryManager

CLSS public abstract interface javax.enterprise.deploy.spi.DConfigBean
meth public abstract java.lang.String[] getXpaths()
meth public abstract javax.enterprise.deploy.model.DDBean getDDBean()
meth public abstract javax.enterprise.deploy.spi.DConfigBean getDConfigBean(javax.enterprise.deploy.model.DDBean) throws javax.enterprise.deploy.spi.exceptions.ConfigurationException
meth public abstract void addPropertyChangeListener(java.beans.PropertyChangeListener)
meth public abstract void notifyDDChange(javax.enterprise.deploy.model.XpathEvent)
meth public abstract void removeDConfigBean(javax.enterprise.deploy.spi.DConfigBean) throws javax.enterprise.deploy.spi.exceptions.BeanNotFoundException
meth public abstract void removePropertyChangeListener(java.beans.PropertyChangeListener)

CLSS public abstract interface javax.enterprise.deploy.spi.DConfigBeanRoot
intf javax.enterprise.deploy.spi.DConfigBean
meth public abstract javax.enterprise.deploy.spi.DConfigBean getDConfigBean(javax.enterprise.deploy.model.DDBeanRoot)

CLSS public abstract interface javax.enterprise.deploy.spi.DeploymentConfiguration
meth public abstract javax.enterprise.deploy.model.DeployableObject getDeployableObject()
meth public abstract javax.enterprise.deploy.spi.DConfigBeanRoot getDConfigBeanRoot(javax.enterprise.deploy.model.DDBeanRoot) throws javax.enterprise.deploy.spi.exceptions.ConfigurationException
meth public abstract javax.enterprise.deploy.spi.DConfigBeanRoot restoreDConfigBean(java.io.InputStream,javax.enterprise.deploy.model.DDBeanRoot) throws javax.enterprise.deploy.spi.exceptions.ConfigurationException
meth public abstract void removeDConfigBean(javax.enterprise.deploy.spi.DConfigBeanRoot) throws javax.enterprise.deploy.spi.exceptions.BeanNotFoundException
meth public abstract void restore(java.io.InputStream) throws javax.enterprise.deploy.spi.exceptions.ConfigurationException
meth public abstract void save(java.io.OutputStream) throws javax.enterprise.deploy.spi.exceptions.ConfigurationException
meth public abstract void saveDConfigBean(java.io.OutputStream,javax.enterprise.deploy.spi.DConfigBeanRoot) throws javax.enterprise.deploy.spi.exceptions.ConfigurationException

CLSS public abstract interface javax.enterprise.deploy.spi.DeploymentManager
meth public abstract boolean isDConfigBeanVersionSupported(javax.enterprise.deploy.shared.DConfigBeanVersionType)
meth public abstract boolean isLocaleSupported(java.util.Locale)
meth public abstract boolean isRedeploySupported()
meth public abstract java.util.Locale getCurrentLocale()
meth public abstract java.util.Locale getDefaultLocale()
meth public abstract java.util.Locale[] getSupportedLocales()
meth public abstract javax.enterprise.deploy.shared.DConfigBeanVersionType getDConfigBeanVersion()
meth public abstract javax.enterprise.deploy.spi.DeploymentConfiguration createConfiguration(javax.enterprise.deploy.model.DeployableObject) throws javax.enterprise.deploy.spi.exceptions.InvalidModuleException
meth public abstract javax.enterprise.deploy.spi.TargetModuleID[] getAvailableModules(javax.enterprise.deploy.shared.ModuleType,javax.enterprise.deploy.spi.Target[]) throws javax.enterprise.deploy.spi.exceptions.TargetException
meth public abstract javax.enterprise.deploy.spi.TargetModuleID[] getNonRunningModules(javax.enterprise.deploy.shared.ModuleType,javax.enterprise.deploy.spi.Target[]) throws javax.enterprise.deploy.spi.exceptions.TargetException
meth public abstract javax.enterprise.deploy.spi.TargetModuleID[] getRunningModules(javax.enterprise.deploy.shared.ModuleType,javax.enterprise.deploy.spi.Target[]) throws javax.enterprise.deploy.spi.exceptions.TargetException
meth public abstract javax.enterprise.deploy.spi.Target[] getTargets()
meth public abstract javax.enterprise.deploy.spi.status.ProgressObject distribute(javax.enterprise.deploy.spi.Target[],java.io.File,java.io.File)
meth public abstract javax.enterprise.deploy.spi.status.ProgressObject distribute(javax.enterprise.deploy.spi.Target[],java.io.InputStream,java.io.InputStream)
meth public abstract javax.enterprise.deploy.spi.status.ProgressObject distribute(javax.enterprise.deploy.spi.Target[],javax.enterprise.deploy.shared.ModuleType,java.io.InputStream,java.io.InputStream)
meth public abstract javax.enterprise.deploy.spi.status.ProgressObject redeploy(javax.enterprise.deploy.spi.TargetModuleID[],java.io.File,java.io.File)
meth public abstract javax.enterprise.deploy.spi.status.ProgressObject redeploy(javax.enterprise.deploy.spi.TargetModuleID[],java.io.InputStream,java.io.InputStream)
meth public abstract javax.enterprise.deploy.spi.status.ProgressObject start(javax.enterprise.deploy.spi.TargetModuleID[])
meth public abstract javax.enterprise.deploy.spi.status.ProgressObject stop(javax.enterprise.deploy.spi.TargetModuleID[])
meth public abstract javax.enterprise.deploy.spi.status.ProgressObject undeploy(javax.enterprise.deploy.spi.TargetModuleID[])
meth public abstract void release()
meth public abstract void setDConfigBeanVersion(javax.enterprise.deploy.shared.DConfigBeanVersionType) throws javax.enterprise.deploy.spi.exceptions.DConfigBeanVersionUnsupportedException
meth public abstract void setLocale(java.util.Locale)

CLSS public abstract interface javax.enterprise.deploy.spi.Target
meth public abstract java.lang.String getDescription()
meth public abstract java.lang.String getName()

CLSS public abstract interface javax.enterprise.deploy.spi.TargetModuleID
meth public abstract java.lang.String getModuleID()
meth public abstract java.lang.String getWebURL()
meth public abstract java.lang.String toString()
meth public abstract javax.enterprise.deploy.spi.Target getTarget()
meth public abstract javax.enterprise.deploy.spi.TargetModuleID getParentTargetModuleID()
meth public abstract javax.enterprise.deploy.spi.TargetModuleID[] getChildTargetModuleID()

CLSS public javax.enterprise.deploy.spi.exceptions.BeanNotFoundException
cons public <init>(java.lang.String)
supr java.lang.Exception

CLSS public javax.enterprise.deploy.spi.exceptions.ClientExecuteException
cons public <init>()
cons public <init>(java.lang.String)
supr java.lang.Exception

CLSS public javax.enterprise.deploy.spi.exceptions.ConfigurationException
cons public <init>()
cons public <init>(java.lang.String)
supr java.lang.Exception

CLSS public javax.enterprise.deploy.spi.exceptions.DConfigBeanVersionUnsupportedException
cons public <init>(java.lang.String)
supr java.lang.Exception

CLSS public javax.enterprise.deploy.spi.exceptions.DeploymentManagerCreationException
cons public <init>(java.lang.String)
supr java.lang.Exception

CLSS public javax.enterprise.deploy.spi.exceptions.InvalidModuleException
cons public <init>(java.lang.String)
supr java.lang.Exception

CLSS public javax.enterprise.deploy.spi.exceptions.OperationUnsupportedException
cons public <init>(java.lang.String)
supr java.lang.Exception

CLSS public javax.enterprise.deploy.spi.exceptions.TargetException
cons public <init>(java.lang.String)
supr java.lang.Exception

CLSS public abstract interface javax.enterprise.deploy.spi.factories.DeploymentFactory
meth public abstract boolean handlesURI(java.lang.String)
meth public abstract java.lang.String getDisplayName()
meth public abstract java.lang.String getProductVersion()
meth public abstract javax.enterprise.deploy.spi.DeploymentManager getDeploymentManager(java.lang.String,java.lang.String,java.lang.String) throws javax.enterprise.deploy.spi.exceptions.DeploymentManagerCreationException
meth public abstract javax.enterprise.deploy.spi.DeploymentManager getDisconnectedDeploymentManager(java.lang.String) throws javax.enterprise.deploy.spi.exceptions.DeploymentManagerCreationException

CLSS public abstract interface javax.enterprise.deploy.spi.status.ClientConfiguration
intf java.io.Serializable
meth public abstract void execute() throws javax.enterprise.deploy.spi.exceptions.ClientExecuteException

CLSS public abstract interface javax.enterprise.deploy.spi.status.DeploymentStatus
meth public abstract boolean isCompleted()
meth public abstract boolean isFailed()
meth public abstract boolean isRunning()
meth public abstract java.lang.String getMessage()
meth public abstract javax.enterprise.deploy.shared.ActionType getAction()
meth public abstract javax.enterprise.deploy.shared.CommandType getCommand()
meth public abstract javax.enterprise.deploy.shared.StateType getState()

CLSS public javax.enterprise.deploy.spi.status.ProgressEvent
cons public <init>(java.lang.Object,javax.enterprise.deploy.spi.TargetModuleID,javax.enterprise.deploy.spi.status.DeploymentStatus)
meth public javax.enterprise.deploy.spi.TargetModuleID getTargetModuleID()
meth public javax.enterprise.deploy.spi.status.DeploymentStatus getDeploymentStatus()
supr java.util.EventObject
hfds statuscode,targetModuleID

CLSS public abstract interface javax.enterprise.deploy.spi.status.ProgressListener
intf java.util.EventListener
meth public abstract void handleProgressEvent(javax.enterprise.deploy.spi.status.ProgressEvent)

CLSS public abstract interface javax.enterprise.deploy.spi.status.ProgressObject
meth public abstract boolean isCancelSupported()
meth public abstract boolean isStopSupported()
meth public abstract javax.enterprise.deploy.spi.TargetModuleID[] getResultTargetModuleIDs()
meth public abstract javax.enterprise.deploy.spi.status.ClientConfiguration getClientConfiguration(javax.enterprise.deploy.spi.TargetModuleID)
meth public abstract javax.enterprise.deploy.spi.status.DeploymentStatus getDeploymentStatus()
meth public abstract void addProgressListener(javax.enterprise.deploy.spi.status.ProgressListener)
meth public abstract void cancel() throws javax.enterprise.deploy.spi.exceptions.OperationUnsupportedException
meth public abstract void removeProgressListener(javax.enterprise.deploy.spi.status.ProgressListener)
meth public abstract void stop() throws javax.enterprise.deploy.spi.exceptions.OperationUnsupportedException

CLSS public abstract interface javax.enterprise.event.Event<%0 extends java.lang.Object>
meth public abstract !varargs <%0 extends {javax.enterprise.event.Event%0}> javax.enterprise.event.Event<{%%0}> select(java.lang.Class<{%%0}>,java.lang.annotation.Annotation[])
meth public abstract !varargs <%0 extends {javax.enterprise.event.Event%0}> javax.enterprise.event.Event<{%%0}> select(javax.enterprise.util.TypeLiteral<{%%0}>,java.lang.annotation.Annotation[])
meth public abstract !varargs javax.enterprise.event.Event<{javax.enterprise.event.Event%0}> select(java.lang.annotation.Annotation[])
meth public abstract void fire({javax.enterprise.event.Event%0})

CLSS public javax.enterprise.event.ObserverException
cons public <init>()
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
supr java.lang.RuntimeException
hfds serialVersionUID

CLSS public abstract interface !annotation javax.enterprise.event.Observes
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[PARAMETER])
intf java.lang.annotation.Annotation
meth public abstract !hasdefault javax.enterprise.event.Reception notifyObserver()
meth public abstract !hasdefault javax.enterprise.event.TransactionPhase during()

CLSS public final !enum javax.enterprise.event.Reception
fld public final static javax.enterprise.event.Reception ALWAYS
fld public final static javax.enterprise.event.Reception IF_EXISTS
meth public static javax.enterprise.event.Reception valueOf(java.lang.String)
meth public static javax.enterprise.event.Reception[] values()
supr java.lang.Enum<javax.enterprise.event.Reception>

CLSS public final !enum javax.enterprise.event.TransactionPhase
fld public final static javax.enterprise.event.TransactionPhase AFTER_COMPLETION
fld public final static javax.enterprise.event.TransactionPhase AFTER_FAILURE
fld public final static javax.enterprise.event.TransactionPhase AFTER_SUCCESS
fld public final static javax.enterprise.event.TransactionPhase BEFORE_COMPLETION
fld public final static javax.enterprise.event.TransactionPhase IN_PROGRESS
meth public static javax.enterprise.event.TransactionPhase valueOf(java.lang.String)
meth public static javax.enterprise.event.TransactionPhase[] values()
supr java.lang.Enum<javax.enterprise.event.TransactionPhase>

CLSS public abstract interface !annotation javax.enterprise.inject.Alternative
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[TYPE, METHOD, FIELD])
intf java.lang.annotation.Annotation

CLSS public javax.enterprise.inject.AmbiguousResolutionException
cons public <init>()
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
supr javax.enterprise.inject.ResolutionException
hfds serialVersionUID

CLSS public abstract interface !annotation javax.enterprise.inject.Any
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[TYPE, METHOD, FIELD, PARAMETER])
 anno 0 javax.inject.Qualifier()
intf java.lang.annotation.Annotation

CLSS public javax.enterprise.inject.CreationException
cons public <init>()
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
supr javax.enterprise.inject.InjectionException
hfds serialVersionUID

CLSS public abstract interface !annotation javax.enterprise.inject.Decorated
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[PARAMETER, FIELD])
 anno 0 javax.inject.Qualifier()
intf java.lang.annotation.Annotation

CLSS public abstract interface !annotation javax.enterprise.inject.Default
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[TYPE, METHOD, PARAMETER, FIELD])
 anno 0 javax.inject.Qualifier()
intf java.lang.annotation.Annotation

CLSS public abstract interface !annotation javax.enterprise.inject.Disposes
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[PARAMETER])
intf java.lang.annotation.Annotation

CLSS public javax.enterprise.inject.IllegalProductException
cons public <init>()
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
supr javax.enterprise.inject.InjectionException
hfds serialVersionUID

CLSS public javax.enterprise.inject.InjectionException
cons public <init>()
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
supr java.lang.RuntimeException
hfds serialVersionUID

CLSS public abstract interface javax.enterprise.inject.Instance<%0 extends java.lang.Object>
intf java.lang.Iterable<{javax.enterprise.inject.Instance%0}>
intf javax.inject.Provider<{javax.enterprise.inject.Instance%0}>
meth public abstract !varargs <%0 extends {javax.enterprise.inject.Instance%0}> javax.enterprise.inject.Instance<{%%0}> select(java.lang.Class<{%%0}>,java.lang.annotation.Annotation[])
meth public abstract !varargs <%0 extends {javax.enterprise.inject.Instance%0}> javax.enterprise.inject.Instance<{%%0}> select(javax.enterprise.util.TypeLiteral<{%%0}>,java.lang.annotation.Annotation[])
meth public abstract !varargs javax.enterprise.inject.Instance<{javax.enterprise.inject.Instance%0}> select(java.lang.annotation.Annotation[])
meth public abstract boolean isAmbiguous()
meth public abstract boolean isUnsatisfied()
meth public abstract void destroy({javax.enterprise.inject.Instance%0})

CLSS public abstract interface !annotation javax.enterprise.inject.Intercepted
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[PARAMETER, FIELD])
 anno 0 javax.inject.Qualifier()
intf java.lang.annotation.Annotation

CLSS public abstract interface !annotation javax.enterprise.inject.Model
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[TYPE, METHOD, FIELD])
 anno 0 javax.enterprise.context.RequestScoped()
 anno 0 javax.enterprise.inject.Stereotype()
 anno 0 javax.inject.Named(java.lang.String value="")
intf java.lang.annotation.Annotation

CLSS public abstract interface !annotation javax.enterprise.inject.New
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[FIELD, PARAMETER, METHOD, TYPE])
 anno 0 javax.inject.Qualifier()
intf java.lang.annotation.Annotation
meth public abstract !hasdefault java.lang.Class<?> value()

CLSS public abstract interface !annotation javax.enterprise.inject.Produces
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[METHOD, FIELD])
intf java.lang.annotation.Annotation

CLSS public javax.enterprise.inject.ResolutionException
cons public <init>()
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
supr javax.enterprise.inject.InjectionException
hfds serialVersionUID

CLSS public abstract interface !annotation javax.enterprise.inject.Specializes
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[TYPE, METHOD])
intf java.lang.annotation.Annotation

CLSS public abstract interface !annotation javax.enterprise.inject.Stereotype
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[ANNOTATION_TYPE])
intf java.lang.annotation.Annotation

CLSS public abstract interface !annotation javax.enterprise.inject.TransientReference
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[PARAMETER])
intf java.lang.annotation.Annotation

CLSS public abstract interface !annotation javax.enterprise.inject.Typed
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[FIELD, METHOD, TYPE])
intf java.lang.annotation.Annotation
meth public abstract !hasdefault java.lang.Class<?>[] value()

CLSS public javax.enterprise.inject.UnproxyableResolutionException
cons public <init>()
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
supr javax.enterprise.inject.ResolutionException
hfds serialVersionUID

CLSS public javax.enterprise.inject.UnsatisfiedResolutionException
cons public <init>()
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
supr javax.enterprise.inject.ResolutionException
hfds serialVersionUID

CLSS public abstract interface !annotation javax.enterprise.inject.Vetoed
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[TYPE, PACKAGE])
intf java.lang.annotation.Annotation

CLSS public abstract interface javax.enterprise.inject.spi.AfterBeanDiscovery
meth public abstract <%0 extends java.lang.Object> java.lang.Iterable<javax.enterprise.inject.spi.AnnotatedType<{%%0}>> getAnnotatedTypes(java.lang.Class<{%%0}>)
meth public abstract <%0 extends java.lang.Object> javax.enterprise.inject.spi.AnnotatedType<{%%0}> getAnnotatedType(java.lang.Class<{%%0}>,java.lang.String)
meth public abstract void addBean(javax.enterprise.inject.spi.Bean<?>)
meth public abstract void addContext(javax.enterprise.context.spi.Context)
meth public abstract void addDefinitionError(java.lang.Throwable)
meth public abstract void addObserverMethod(javax.enterprise.inject.spi.ObserverMethod<?>)

CLSS public abstract interface javax.enterprise.inject.spi.AfterDeploymentValidation
meth public abstract void addDeploymentProblem(java.lang.Throwable)

CLSS public abstract interface javax.enterprise.inject.spi.AfterTypeDiscovery
meth public abstract java.util.List<java.lang.Class<?>> getAlternatives()
meth public abstract java.util.List<java.lang.Class<?>> getDecorators()
meth public abstract java.util.List<java.lang.Class<?>> getInterceptors()
meth public abstract void addAnnotatedType(javax.enterprise.inject.spi.AnnotatedType<?>,java.lang.String)

CLSS public abstract interface javax.enterprise.inject.spi.Annotated
meth public abstract <%0 extends java.lang.annotation.Annotation> {%%0} getAnnotation(java.lang.Class<{%%0}>)
meth public abstract boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
meth public abstract java.lang.reflect.Type getBaseType()
meth public abstract java.util.Set<java.lang.annotation.Annotation> getAnnotations()
meth public abstract java.util.Set<java.lang.reflect.Type> getTypeClosure()

CLSS public abstract interface javax.enterprise.inject.spi.AnnotatedCallable<%0 extends java.lang.Object>
intf javax.enterprise.inject.spi.AnnotatedMember<{javax.enterprise.inject.spi.AnnotatedCallable%0}>
meth public abstract java.util.List<javax.enterprise.inject.spi.AnnotatedParameter<{javax.enterprise.inject.spi.AnnotatedCallable%0}>> getParameters()

CLSS public abstract interface javax.enterprise.inject.spi.AnnotatedConstructor<%0 extends java.lang.Object>
intf javax.enterprise.inject.spi.AnnotatedCallable<{javax.enterprise.inject.spi.AnnotatedConstructor%0}>
meth public abstract java.lang.reflect.Constructor<{javax.enterprise.inject.spi.AnnotatedConstructor%0}> getJavaMember()

CLSS public abstract interface javax.enterprise.inject.spi.AnnotatedField<%0 extends java.lang.Object>
intf javax.enterprise.inject.spi.AnnotatedMember<{javax.enterprise.inject.spi.AnnotatedField%0}>
meth public abstract java.lang.reflect.Field getJavaMember()

CLSS public abstract interface javax.enterprise.inject.spi.AnnotatedMember<%0 extends java.lang.Object>
intf javax.enterprise.inject.spi.Annotated
meth public abstract boolean isStatic()
meth public abstract java.lang.reflect.Member getJavaMember()
meth public abstract javax.enterprise.inject.spi.AnnotatedType<{javax.enterprise.inject.spi.AnnotatedMember%0}> getDeclaringType()

CLSS public abstract interface javax.enterprise.inject.spi.AnnotatedMethod<%0 extends java.lang.Object>
intf javax.enterprise.inject.spi.AnnotatedCallable<{javax.enterprise.inject.spi.AnnotatedMethod%0}>
meth public abstract java.lang.reflect.Method getJavaMember()

CLSS public abstract interface javax.enterprise.inject.spi.AnnotatedParameter<%0 extends java.lang.Object>
intf javax.enterprise.inject.spi.Annotated
meth public abstract int getPosition()
meth public abstract javax.enterprise.inject.spi.AnnotatedCallable<{javax.enterprise.inject.spi.AnnotatedParameter%0}> getDeclaringCallable()

CLSS public abstract interface javax.enterprise.inject.spi.AnnotatedType<%0 extends java.lang.Object>
intf javax.enterprise.inject.spi.Annotated
meth public abstract java.lang.Class<{javax.enterprise.inject.spi.AnnotatedType%0}> getJavaClass()
meth public abstract java.util.Set<javax.enterprise.inject.spi.AnnotatedConstructor<{javax.enterprise.inject.spi.AnnotatedType%0}>> getConstructors()
meth public abstract java.util.Set<javax.enterprise.inject.spi.AnnotatedField<? super {javax.enterprise.inject.spi.AnnotatedType%0}>> getFields()
meth public abstract java.util.Set<javax.enterprise.inject.spi.AnnotatedMethod<? super {javax.enterprise.inject.spi.AnnotatedType%0}>> getMethods()

CLSS public abstract interface javax.enterprise.inject.spi.Bean<%0 extends java.lang.Object>
intf javax.enterprise.context.spi.Contextual<{javax.enterprise.inject.spi.Bean%0}>
intf javax.enterprise.inject.spi.BeanAttributes<{javax.enterprise.inject.spi.Bean%0}>
meth public abstract boolean isNullable()
meth public abstract java.lang.Class<?> getBeanClass()
meth public abstract java.util.Set<javax.enterprise.inject.spi.InjectionPoint> getInjectionPoints()

CLSS public abstract interface javax.enterprise.inject.spi.BeanAttributes<%0 extends java.lang.Object>
meth public abstract boolean isAlternative()
meth public abstract java.lang.Class<? extends java.lang.annotation.Annotation> getScope()
meth public abstract java.lang.String getName()
meth public abstract java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> getStereotypes()
meth public abstract java.util.Set<java.lang.annotation.Annotation> getQualifiers()
meth public abstract java.util.Set<java.lang.reflect.Type> getTypes()

CLSS public abstract interface javax.enterprise.inject.spi.BeanManager
meth public abstract !varargs <%0 extends java.lang.Object> java.util.Set<javax.enterprise.inject.spi.ObserverMethod<? super {%%0}>> resolveObserverMethods({%%0},java.lang.annotation.Annotation[])
meth public abstract !varargs java.util.List<javax.enterprise.inject.spi.Decorator<?>> resolveDecorators(java.util.Set<java.lang.reflect.Type>,java.lang.annotation.Annotation[])
meth public abstract !varargs java.util.List<javax.enterprise.inject.spi.Interceptor<?>> resolveInterceptors(javax.enterprise.inject.spi.InterceptionType,java.lang.annotation.Annotation[])
meth public abstract !varargs java.util.Set<javax.enterprise.inject.spi.Bean<?>> getBeans(java.lang.reflect.Type,java.lang.annotation.Annotation[])
meth public abstract !varargs void fireEvent(java.lang.Object,java.lang.annotation.Annotation[])
meth public abstract <%0 extends java.lang.Object, %1 extends java.lang.Object> javax.enterprise.inject.spi.Bean<{%%0}> createBean(javax.enterprise.inject.spi.BeanAttributes<{%%0}>,java.lang.Class<{%%1}>,javax.enterprise.inject.spi.ProducerFactory<{%%1}>)
meth public abstract <%0 extends java.lang.Object> javax.enterprise.context.spi.CreationalContext<{%%0}> createCreationalContext(javax.enterprise.context.spi.Contextual<{%%0}>)
meth public abstract <%0 extends java.lang.Object> javax.enterprise.inject.spi.AnnotatedType<{%%0}> createAnnotatedType(java.lang.Class<{%%0}>)
meth public abstract <%0 extends java.lang.Object> javax.enterprise.inject.spi.Bean<? extends {%%0}> resolve(java.util.Set<javax.enterprise.inject.spi.Bean<? extends {%%0}>>)
meth public abstract <%0 extends java.lang.Object> javax.enterprise.inject.spi.Bean<{%%0}> createBean(javax.enterprise.inject.spi.BeanAttributes<{%%0}>,java.lang.Class<{%%0}>,javax.enterprise.inject.spi.InjectionTargetFactory<{%%0}>)
meth public abstract <%0 extends java.lang.Object> javax.enterprise.inject.spi.BeanAttributes<{%%0}> createBeanAttributes(javax.enterprise.inject.spi.AnnotatedType<{%%0}>)
meth public abstract <%0 extends java.lang.Object> javax.enterprise.inject.spi.InjectionTarget<{%%0}> createInjectionTarget(javax.enterprise.inject.spi.AnnotatedType<{%%0}>)
meth public abstract <%0 extends java.lang.Object> javax.enterprise.inject.spi.InjectionTargetFactory<{%%0}> getInjectionTargetFactory(javax.enterprise.inject.spi.AnnotatedType<{%%0}>)
meth public abstract <%0 extends java.lang.Object> javax.enterprise.inject.spi.ProducerFactory<{%%0}> getProducerFactory(javax.enterprise.inject.spi.AnnotatedField<? super {%%0}>,javax.enterprise.inject.spi.Bean<{%%0}>)
meth public abstract <%0 extends java.lang.Object> javax.enterprise.inject.spi.ProducerFactory<{%%0}> getProducerFactory(javax.enterprise.inject.spi.AnnotatedMethod<? super {%%0}>,javax.enterprise.inject.spi.Bean<{%%0}>)
meth public abstract <%0 extends javax.enterprise.inject.spi.Extension> {%%0} getExtension(java.lang.Class<{%%0}>)
meth public abstract boolean areInterceptorBindingsEquivalent(java.lang.annotation.Annotation,java.lang.annotation.Annotation)
meth public abstract boolean areQualifiersEquivalent(java.lang.annotation.Annotation,java.lang.annotation.Annotation)
meth public abstract boolean isInterceptorBinding(java.lang.Class<? extends java.lang.annotation.Annotation>)
meth public abstract boolean isNormalScope(java.lang.Class<? extends java.lang.annotation.Annotation>)
meth public abstract boolean isPassivatingScope(java.lang.Class<? extends java.lang.annotation.Annotation>)
meth public abstract boolean isQualifier(java.lang.Class<? extends java.lang.annotation.Annotation>)
meth public abstract boolean isScope(java.lang.Class<? extends java.lang.annotation.Annotation>)
meth public abstract boolean isStereotype(java.lang.Class<? extends java.lang.annotation.Annotation>)
meth public abstract int getInterceptorBindingHashCode(java.lang.annotation.Annotation)
meth public abstract int getQualifierHashCode(java.lang.annotation.Annotation)
meth public abstract java.lang.Object getInjectableReference(javax.enterprise.inject.spi.InjectionPoint,javax.enterprise.context.spi.CreationalContext<?>)
meth public abstract java.lang.Object getReference(javax.enterprise.inject.spi.Bean<?>,java.lang.reflect.Type,javax.enterprise.context.spi.CreationalContext<?>)
meth public abstract java.util.Set<java.lang.annotation.Annotation> getInterceptorBindingDefinition(java.lang.Class<? extends java.lang.annotation.Annotation>)
meth public abstract java.util.Set<java.lang.annotation.Annotation> getStereotypeDefinition(java.lang.Class<? extends java.lang.annotation.Annotation>)
meth public abstract java.util.Set<javax.enterprise.inject.spi.Bean<?>> getBeans(java.lang.String)
meth public abstract jakarta.el.ELResolver getELResolver()
meth public abstract jakarta.el.ExpressionFactory wrapExpressionFactory(jakarta.el.ExpressionFactory)
meth public abstract javax.enterprise.context.spi.Context getContext(java.lang.Class<? extends java.lang.annotation.Annotation>)
meth public abstract javax.enterprise.inject.spi.Bean<?> getPassivationCapableBean(java.lang.String)
meth public abstract javax.enterprise.inject.spi.BeanAttributes<?> createBeanAttributes(javax.enterprise.inject.spi.AnnotatedMember<?>)
meth public abstract javax.enterprise.inject.spi.InjectionPoint createInjectionPoint(javax.enterprise.inject.spi.AnnotatedField<?>)
meth public abstract javax.enterprise.inject.spi.InjectionPoint createInjectionPoint(javax.enterprise.inject.spi.AnnotatedParameter<?>)
meth public abstract void validate(javax.enterprise.inject.spi.InjectionPoint)

CLSS public abstract interface javax.enterprise.inject.spi.BeforeBeanDiscovery
meth public abstract !varargs void addInterceptorBinding(java.lang.Class<? extends java.lang.annotation.Annotation>,java.lang.annotation.Annotation[])
meth public abstract !varargs void addStereotype(java.lang.Class<? extends java.lang.annotation.Annotation>,java.lang.annotation.Annotation[])
meth public abstract void addAnnotatedType(javax.enterprise.inject.spi.AnnotatedType<?>)
meth public abstract void addAnnotatedType(javax.enterprise.inject.spi.AnnotatedType<?>,java.lang.String)
meth public abstract void addInterceptorBinding(javax.enterprise.inject.spi.AnnotatedType<? extends java.lang.annotation.Annotation>)
meth public abstract void addQualifier(java.lang.Class<? extends java.lang.annotation.Annotation>)
meth public abstract void addQualifier(javax.enterprise.inject.spi.AnnotatedType<? extends java.lang.annotation.Annotation>)
meth public abstract void addScope(java.lang.Class<? extends java.lang.annotation.Annotation>,boolean,boolean)

CLSS public abstract interface javax.enterprise.inject.spi.BeforeShutdown

CLSS public abstract javax.enterprise.inject.spi.CDI<%0 extends java.lang.Object>
cons public <init>()
fld protected static volatile java.util.Set<javax.enterprise.inject.spi.CDIProvider> discoveredProviders
fld protected static volatile javax.enterprise.inject.spi.CDIProvider configuredProvider
intf javax.enterprise.inject.Instance<{javax.enterprise.inject.spi.CDI%0}>
meth public abstract javax.enterprise.inject.spi.BeanManager getBeanManager()
meth public static javax.enterprise.inject.spi.CDI<java.lang.Object> current()
meth public static void setCDIProvider(javax.enterprise.inject.spi.CDIProvider)
supr java.lang.Object
hfds lock,nonCommentPattern

CLSS public abstract interface javax.enterprise.inject.spi.CDIProvider
meth public abstract javax.enterprise.inject.spi.CDI<java.lang.Object> getCDI()

CLSS public abstract interface javax.enterprise.inject.spi.Decorator<%0 extends java.lang.Object>
intf javax.enterprise.inject.spi.Bean<{javax.enterprise.inject.spi.Decorator%0}>
meth public abstract java.lang.reflect.Type getDelegateType()
meth public abstract java.util.Set<java.lang.annotation.Annotation> getDelegateQualifiers()
meth public abstract java.util.Set<java.lang.reflect.Type> getDecoratedTypes()

CLSS public javax.enterprise.inject.spi.DefinitionException
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
supr java.lang.RuntimeException
hfds serialVersionUID

CLSS public javax.enterprise.inject.spi.DeploymentException
cons public <init>(java.lang.String)
cons public <init>(java.lang.String,java.lang.Throwable)
cons public <init>(java.lang.Throwable)
supr java.lang.RuntimeException
hfds serialVersionUID

CLSS public abstract interface javax.enterprise.inject.spi.EventMetadata
meth public abstract java.lang.reflect.Type getType()
meth public abstract java.util.Set<java.lang.annotation.Annotation> getQualifiers()
meth public abstract javax.enterprise.inject.spi.InjectionPoint getInjectionPoint()

CLSS public abstract interface javax.enterprise.inject.spi.Extension

CLSS public abstract interface javax.enterprise.inject.spi.InjectionPoint
meth public abstract boolean isDelegate()
meth public abstract boolean isTransient()
meth public abstract java.lang.reflect.Member getMember()
meth public abstract java.lang.reflect.Type getType()
meth public abstract java.util.Set<java.lang.annotation.Annotation> getQualifiers()
meth public abstract javax.enterprise.inject.spi.Annotated getAnnotated()
meth public abstract javax.enterprise.inject.spi.Bean<?> getBean()

CLSS public abstract interface javax.enterprise.inject.spi.InjectionTarget<%0 extends java.lang.Object>
intf javax.enterprise.inject.spi.Producer<{javax.enterprise.inject.spi.InjectionTarget%0}>
meth public abstract void inject({javax.enterprise.inject.spi.InjectionTarget%0},javax.enterprise.context.spi.CreationalContext<{javax.enterprise.inject.spi.InjectionTarget%0}>)
meth public abstract void postConstruct({javax.enterprise.inject.spi.InjectionTarget%0})
meth public abstract void preDestroy({javax.enterprise.inject.spi.InjectionTarget%0})

CLSS public abstract interface javax.enterprise.inject.spi.InjectionTargetFactory<%0 extends java.lang.Object>
meth public abstract javax.enterprise.inject.spi.InjectionTarget<{javax.enterprise.inject.spi.InjectionTargetFactory%0}> createInjectionTarget(javax.enterprise.inject.spi.Bean<{javax.enterprise.inject.spi.InjectionTargetFactory%0}>)

CLSS public final !enum javax.enterprise.inject.spi.InterceptionType
fld public final static javax.enterprise.inject.spi.InterceptionType AROUND_CONSTRUCT
fld public final static javax.enterprise.inject.spi.InterceptionType AROUND_INVOKE
fld public final static javax.enterprise.inject.spi.InterceptionType AROUND_TIMEOUT
fld public final static javax.enterprise.inject.spi.InterceptionType POST_ACTIVATE
fld public final static javax.enterprise.inject.spi.InterceptionType POST_CONSTRUCT
fld public final static javax.enterprise.inject.spi.InterceptionType PRE_DESTROY
fld public final static javax.enterprise.inject.spi.InterceptionType PRE_PASSIVATE
meth public static javax.enterprise.inject.spi.InterceptionType valueOf(java.lang.String)
meth public static javax.enterprise.inject.spi.InterceptionType[] values()
supr java.lang.Enum<javax.enterprise.inject.spi.InterceptionType>

CLSS public abstract interface javax.enterprise.inject.spi.Interceptor<%0 extends java.lang.Object>
intf javax.enterprise.inject.spi.Bean<{javax.enterprise.inject.spi.Interceptor%0}>
meth public abstract boolean intercepts(javax.enterprise.inject.spi.InterceptionType)
meth public abstract java.lang.Object intercept(javax.enterprise.inject.spi.InterceptionType,{javax.enterprise.inject.spi.Interceptor%0},javax.interceptor.InvocationContext) throws java.lang.Exception
meth public abstract java.util.Set<java.lang.annotation.Annotation> getInterceptorBindings()

CLSS public abstract interface javax.enterprise.inject.spi.ObserverMethod<%0 extends java.lang.Object>
meth public abstract java.lang.Class<?> getBeanClass()
meth public abstract java.lang.reflect.Type getObservedType()
meth public abstract java.util.Set<java.lang.annotation.Annotation> getObservedQualifiers()
meth public abstract javax.enterprise.event.Reception getReception()
meth public abstract javax.enterprise.event.TransactionPhase getTransactionPhase()
meth public abstract void notify({javax.enterprise.inject.spi.ObserverMethod%0})

CLSS public abstract interface javax.enterprise.inject.spi.PassivationCapable
meth public abstract java.lang.String getId()

CLSS public abstract interface javax.enterprise.inject.spi.ProcessAnnotatedType<%0 extends java.lang.Object>
meth public abstract javax.enterprise.inject.spi.AnnotatedType<{javax.enterprise.inject.spi.ProcessAnnotatedType%0}> getAnnotatedType()
meth public abstract void setAnnotatedType(javax.enterprise.inject.spi.AnnotatedType<{javax.enterprise.inject.spi.ProcessAnnotatedType%0}>)
meth public abstract void veto()

CLSS public abstract interface javax.enterprise.inject.spi.ProcessBean<%0 extends java.lang.Object>
meth public abstract javax.enterprise.inject.spi.Annotated getAnnotated()
meth public abstract javax.enterprise.inject.spi.Bean<{javax.enterprise.inject.spi.ProcessBean%0}> getBean()
meth public abstract void addDefinitionError(java.lang.Throwable)

CLSS public abstract interface javax.enterprise.inject.spi.ProcessBeanAttributes<%0 extends java.lang.Object>
meth public abstract javax.enterprise.inject.spi.Annotated getAnnotated()
meth public abstract javax.enterprise.inject.spi.BeanAttributes<{javax.enterprise.inject.spi.ProcessBeanAttributes%0}> getBeanAttributes()
meth public abstract void addDefinitionError(java.lang.Throwable)
meth public abstract void setBeanAttributes(javax.enterprise.inject.spi.BeanAttributes<{javax.enterprise.inject.spi.ProcessBeanAttributes%0}>)
meth public abstract void veto()

CLSS public abstract interface javax.enterprise.inject.spi.ProcessInjectionPoint<%0 extends java.lang.Object, %1 extends java.lang.Object>
meth public abstract javax.enterprise.inject.spi.InjectionPoint getInjectionPoint()
meth public abstract void addDefinitionError(java.lang.Throwable)
meth public abstract void setInjectionPoint(javax.enterprise.inject.spi.InjectionPoint)

CLSS public abstract interface javax.enterprise.inject.spi.ProcessInjectionTarget<%0 extends java.lang.Object>
meth public abstract javax.enterprise.inject.spi.AnnotatedType<{javax.enterprise.inject.spi.ProcessInjectionTarget%0}> getAnnotatedType()
meth public abstract javax.enterprise.inject.spi.InjectionTarget<{javax.enterprise.inject.spi.ProcessInjectionTarget%0}> getInjectionTarget()
meth public abstract void addDefinitionError(java.lang.Throwable)
meth public abstract void setInjectionTarget(javax.enterprise.inject.spi.InjectionTarget<{javax.enterprise.inject.spi.ProcessInjectionTarget%0}>)

CLSS public abstract interface javax.enterprise.inject.spi.ProcessManagedBean<%0 extends java.lang.Object>
intf javax.enterprise.inject.spi.ProcessBean<{javax.enterprise.inject.spi.ProcessManagedBean%0}>
meth public abstract javax.enterprise.inject.spi.AnnotatedType<{javax.enterprise.inject.spi.ProcessManagedBean%0}> getAnnotatedBeanClass()

CLSS public abstract interface javax.enterprise.inject.spi.ProcessObserverMethod<%0 extends java.lang.Object, %1 extends java.lang.Object>
meth public abstract javax.enterprise.inject.spi.AnnotatedMethod<{javax.enterprise.inject.spi.ProcessObserverMethod%1}> getAnnotatedMethod()
meth public abstract javax.enterprise.inject.spi.ObserverMethod<{javax.enterprise.inject.spi.ProcessObserverMethod%0}> getObserverMethod()
meth public abstract void addDefinitionError(java.lang.Throwable)

CLSS public abstract interface javax.enterprise.inject.spi.ProcessProducer<%0 extends java.lang.Object, %1 extends java.lang.Object>
meth public abstract javax.enterprise.inject.spi.AnnotatedMember<{javax.enterprise.inject.spi.ProcessProducer%0}> getAnnotatedMember()
meth public abstract javax.enterprise.inject.spi.Producer<{javax.enterprise.inject.spi.ProcessProducer%1}> getProducer()
meth public abstract void addDefinitionError(java.lang.Throwable)
meth public abstract void setProducer(javax.enterprise.inject.spi.Producer<{javax.enterprise.inject.spi.ProcessProducer%1}>)

CLSS public abstract interface javax.enterprise.inject.spi.ProcessProducerField<%0 extends java.lang.Object, %1 extends java.lang.Object>
intf javax.enterprise.inject.spi.ProcessBean<{javax.enterprise.inject.spi.ProcessProducerField%1}>
meth public abstract javax.enterprise.inject.spi.AnnotatedField<{javax.enterprise.inject.spi.ProcessProducerField%0}> getAnnotatedProducerField()
meth public abstract javax.enterprise.inject.spi.AnnotatedParameter<{javax.enterprise.inject.spi.ProcessProducerField%0}> getAnnotatedDisposedParameter()

CLSS public abstract interface javax.enterprise.inject.spi.ProcessProducerMethod<%0 extends java.lang.Object, %1 extends java.lang.Object>
intf javax.enterprise.inject.spi.ProcessBean<{javax.enterprise.inject.spi.ProcessProducerMethod%1}>
meth public abstract javax.enterprise.inject.spi.AnnotatedMethod<{javax.enterprise.inject.spi.ProcessProducerMethod%0}> getAnnotatedProducerMethod()
meth public abstract javax.enterprise.inject.spi.AnnotatedParameter<{javax.enterprise.inject.spi.ProcessProducerMethod%0}> getAnnotatedDisposedParameter()

CLSS public abstract interface javax.enterprise.inject.spi.ProcessSessionBean<%0 extends java.lang.Object>
intf javax.enterprise.inject.spi.ProcessManagedBean<java.lang.Object>
meth public abstract java.lang.String getEjbName()
meth public abstract javax.enterprise.inject.spi.SessionBeanType getSessionBeanType()

CLSS public abstract interface javax.enterprise.inject.spi.ProcessSyntheticAnnotatedType<%0 extends java.lang.Object>
intf javax.enterprise.inject.spi.ProcessAnnotatedType<{javax.enterprise.inject.spi.ProcessSyntheticAnnotatedType%0}>
meth public abstract javax.enterprise.inject.spi.Extension getSource()

CLSS public abstract interface javax.enterprise.inject.spi.Producer<%0 extends java.lang.Object>
meth public abstract java.util.Set<javax.enterprise.inject.spi.InjectionPoint> getInjectionPoints()
meth public abstract void dispose({javax.enterprise.inject.spi.Producer%0})
meth public abstract {javax.enterprise.inject.spi.Producer%0} produce(javax.enterprise.context.spi.CreationalContext<{javax.enterprise.inject.spi.Producer%0}>)

CLSS public abstract interface javax.enterprise.inject.spi.ProducerFactory<%0 extends java.lang.Object>
meth public abstract <%0 extends java.lang.Object> javax.enterprise.inject.spi.Producer<{%%0}> createProducer(javax.enterprise.inject.spi.Bean<{%%0}>)

CLSS public final !enum javax.enterprise.inject.spi.SessionBeanType
fld public final static javax.enterprise.inject.spi.SessionBeanType SINGLETON
fld public final static javax.enterprise.inject.spi.SessionBeanType STATEFUL
fld public final static javax.enterprise.inject.spi.SessionBeanType STATELESS
meth public static javax.enterprise.inject.spi.SessionBeanType valueOf(java.lang.String)
meth public static javax.enterprise.inject.spi.SessionBeanType[] values()
supr java.lang.Enum<javax.enterprise.inject.spi.SessionBeanType>

CLSS public javax.enterprise.inject.spi.Unmanaged<%0 extends java.lang.Object>
cons public <init>(java.lang.Class<{javax.enterprise.inject.spi.Unmanaged%0}>)
cons public <init>(javax.enterprise.inject.spi.BeanManager,java.lang.Class<{javax.enterprise.inject.spi.Unmanaged%0}>)
innr public static UnmanagedInstance
meth public javax.enterprise.inject.spi.Unmanaged$UnmanagedInstance<{javax.enterprise.inject.spi.Unmanaged%0}> newInstance()
supr java.lang.Object
hfds beanManager,injectionTarget

CLSS public static javax.enterprise.inject.spi.Unmanaged$UnmanagedInstance<%0 extends java.lang.Object>
 outer javax.enterprise.inject.spi.Unmanaged
meth public javax.enterprise.inject.spi.Unmanaged$UnmanagedInstance<{javax.enterprise.inject.spi.Unmanaged$UnmanagedInstance%0}> dispose()
meth public javax.enterprise.inject.spi.Unmanaged$UnmanagedInstance<{javax.enterprise.inject.spi.Unmanaged$UnmanagedInstance%0}> inject()
meth public javax.enterprise.inject.spi.Unmanaged$UnmanagedInstance<{javax.enterprise.inject.spi.Unmanaged$UnmanagedInstance%0}> postConstruct()
meth public javax.enterprise.inject.spi.Unmanaged$UnmanagedInstance<{javax.enterprise.inject.spi.Unmanaged$UnmanagedInstance%0}> preDestroy()
meth public javax.enterprise.inject.spi.Unmanaged$UnmanagedInstance<{javax.enterprise.inject.spi.Unmanaged$UnmanagedInstance%0}> produce()
meth public {javax.enterprise.inject.spi.Unmanaged$UnmanagedInstance%0} get()
supr java.lang.Object
hfds ctx,disposed,injectionTarget,instance

CLSS public abstract interface !annotation javax.enterprise.inject.spi.WithAnnotations
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[PARAMETER])
intf java.lang.annotation.Annotation
meth public abstract java.lang.Class<? extends java.lang.annotation.Annotation>[] value()

CLSS public abstract javax.enterprise.util.AnnotationLiteral<%0 extends java.lang.annotation.Annotation>
cons protected <init>()
intf java.io.Serializable
intf java.lang.annotation.Annotation
meth public boolean equals(java.lang.Object)
meth public int hashCode()
meth public java.lang.Class<? extends java.lang.annotation.Annotation> annotationType()
meth public java.lang.String toString()
supr java.lang.Object
hfds annotationType,cachedHashCode,members,serialVersionUID

CLSS public abstract interface !annotation javax.enterprise.util.Nonbinding
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[METHOD])
intf java.lang.annotation.Annotation

CLSS public abstract javax.enterprise.util.TypeLiteral<%0 extends java.lang.Object>
cons protected <init>()
intf java.io.Serializable
meth public boolean equals(java.lang.Object)
meth public final java.lang.Class<{javax.enterprise.util.TypeLiteral%0}> getRawType()
meth public final java.lang.reflect.Type getType()
meth public int hashCode()
meth public java.lang.String toString()
supr java.lang.Object
hfds actualType,serialVersionUID

CLSS public abstract interface !annotation javax.inject.Named
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 javax.inject.Qualifier()
intf java.lang.annotation.Annotation
meth public abstract !hasdefault java.lang.String value()

CLSS public abstract interface javax.inject.Provider<%0 extends java.lang.Object>
meth public abstract {javax.inject.Provider%0} get()

CLSS public abstract interface !annotation javax.inject.Qualifier
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[ANNOTATION_TYPE])
intf java.lang.annotation.Annotation

CLSS public abstract interface !annotation javax.inject.Scope
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[ANNOTATION_TYPE])
intf java.lang.annotation.Annotation

